=== 1
movabs r11, 0x10add7f49
push r11
push 0x73775436
push 0x68a04c43
push 0x12917ff9
add qword ptr [rsp + 0x18], 0x35ac399f; input
=== 2
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
movzx rdi, dil
=== 3
mov rax, rdi
mov r10, 0xffffffffb93774a7
add r10, 0x47b805e5
push r10
mul qword ptr [rsp]
mov rbp, rax
=== 4
mov r15, rbp
push r15
mov r12, rsp
mov rsi, rbp
=== 5
mov r9, r12
mov rbp, rsi
push r9
push 0x58ae3544
push 0x7ee52fe1
push 0x649b0936
=== 6
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rax
mov r15, rbp
movzx rbx, bl
=== 7
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xd4431f4b
add r14, 0x6bc64375; add_carry
mov r14, qword ptr [r14 + 0x468]
add r14, rbx
mov sil, byte ptr [r14]
movzx rsi, sil
shl rsi, 8
add r15, rsi
mov r13, r15
movabs rbx, 0x133e82be3
add rbx, 0xc212edd; add
=== 8
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1128
add rsp, 1128
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r15
mov rdi, r13
=== 9
mov rdi, rdi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r13
mov bpl, byte ptr [r11]
mov dil, bpl
=== 10
mov rdi, rdi
push rdi
mov rdi, rsp
mov r12, rdi
=== 11
mov rdi, rdi
mov r15, r12
push rdi
push 0x7a055875
push 0x17a8586b
push 0x782d1f90
=== 12
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r11
mov rdi, r15
movzx rbx, bl
=== 13
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x11126ebff
add rsi, 0x2ee276c1; add_carry
mov rsi, qword ptr [rsi + 0x2e8]
add rsi, rbx
mov bpl, byte ptr [rsi]
movzx rbp, bpl
shl rbp, 0x10
add rdi, rbp
mov r14, rdi
movabs rbp, 0xe7d5ee55
add rbp, 0x58336c6b; add
=== 14
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 744
add rsp, 744
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbp
mov r15, r14
=== 15
mov rbp, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r13
mov r15b, byte ptr [rax]
mov r14, 0xff
shl r14, 8
not r14
and rbp, r14
movzx r14, r15b
shl r14, 8
or rbp, r14
=== 16
mov r8, rbp
push r8
mov r14, rsp
mov r12, rbp
=== 17
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov rdi, r12
movzx r15, r15b
=== 18
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xffe2ea7c
add rbp, 0x40267844; add_carry
mov rbp, qword ptr [rbp + 0x430]
add rbp, r15
mov cl, byte ptr [rbp]
movzx rcx, cl
shl rcx, 0x18
add rdi, rcx
mov rbx, rdi
movabs r14, 0x10e284137
add r14, 0x31e11989; add
=== 19
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1072
add rsp, 1072
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdi
mov rbp, rbx
=== 20
mov rbp, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov r12b, byte ptr [r10]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and rbp, rbx
movzx rbx, r12b
shl rbx, 0x10
or rbp, rbx
=== 21
mov rbp, rbp
push rbp
mov r13, rsp
mov rdi, rbp
=== 22
mov rbx, r13
mov r14, rdi
push rbx
push 0x72801f50
push 0x5d09280a
push 0x25a65468
push 0x755b0605
=== 23
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov r12, r14
movzx rbp, bpl
=== 24
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xcaca37f7
add r11, 0x753f2ac9; add_carry
mov r11, qword ptr [r11 + 0x4e8]
add r11, rbp
mov dil, byte ptr [r11]
movzx rdi, dil
shl rdi, 0x20
add r12, rdi
movabs rdi, 0x119814b1a
push rdi
push 0x10d66e12
push 0xcc8228e
push 0x636107a5
push 0x3e021931
add qword ptr [rsp + 0x20], 0x26880fa6; add
mov r15, r12
=== 25
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1256
add rsp, 1256
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r9
mov rbx, r15
=== 26
mov r15, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov r8b, byte ptr [rcx]
mov r12, 0xff
shl r12, 0x18
not r12
and r15, r12
movzx r12, r8b
shl r12, 0x18
or r15, r12
=== 27
mov rsi, r15
push rsi
mov r14, rsp
mov r15, r15
=== 28
mov rcx, r14
mov rdi, r15
push rcx
push 0x2da4599d
push 0x14955dfd
push 0x5477311
=== 29
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov rsi, rdi
movzx r13, r13b
=== 30
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xfc120b3f
add rsi, 0x43f75781; add_carry
mov rsi, qword ptr [rsi]
add rsi, r13
mov bl, byte ptr [rsi]
movzx rbx, bl
shl rbx, 0x28
add rsi, rbx
mov r15, rsi
movabs rsi, 0xc40449ee
add rsi, 0x7c0510d2; add
=== 31
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov rsi, r15
=== 32
mov r13, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r13
mov r12b, byte ptr [r14]
mov rcx, 0xff
shl rcx, 0x20
not rcx
and r13, rcx
movzx rcx, r12b
shl rcx, 0x20
or r13, rcx
=== 33
mov r8, r13
push r8
mov rbx, rsp
mov r13, r13
=== 34
mov r8, rbx
mov rsi, r13
push r8
push 0xa166a36
push 0x187d4f51
push 0x37141c0c
=== 35
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov rsi, rsi
movzx r15, r15b
=== 36
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x13d2109c5
add rax, 0x2e858fb; add_carry
mov rax, qword ptr [rax]
add rax, r15
mov r10b, byte ptr [rax]
movzx r10, r10b
shl r10, 0x38
add rsi, r10
movabs r8, 0x12f63e30b
push r8
push 0x733b102d
push 0x4ed1230e
push 0x22730741
push 0x791941b5
add qword ptr [rsp + 0x20], 0x10a577b5; add
mov r14, rsi
=== 37
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rcx
mov r13, r14
=== 38
mov r15, r13
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov r14b, byte ptr [rcx]
mov rbp, 0xff
shl rbp, 0x30
not rbp
and r15, rbp
movzx rbp, r14b
shl rbp, 0x30
or r15, rbp
=== 39
mov r12, r15
movabs r14, 0x129f4a1d2
add r14, 0x16951716; input
=== 40
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 24
add rsp, 24
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdi
mov r12, r12
movzx rbp, bpl
=== 41
mov rax, rbp
mov r12, 0xffffffff9a647e17
add r12, 0x65e13725
push r12
mov rbp, r12
mul qword ptr [rsp]
mov rdi, rax
=== 42
mov rdi, rbp
sub rdi, rdi
=== 43
mov rcx, rdi
push rcx
mov r15, rsp
mov r13, rdi
=== 44
mov rsi, r15
mov rbx, r13
push rsi
push 0x192e780d
push 0x5027aab
push 0x39f2143
push 0x6a98231e
=== 45
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov rsi, rbx
movzx rbx, bl
=== 46
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x105deec3c
add rbx, 0x3a2a7684; add_carry
mov rbx, qword ptr [rbx + 0x2b8]
add rbx, rbx
mov cl, byte ptr [rbx]
movzx rcx, cl
shl rcx, 8
add rsi, rcx
mov rsi, rsi
movabs r12, 0x108c7fb93
add r12, 0x37415f2d; add
=== 47
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 696
add rsp, 696
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov r14, rsi
=== 48
mov r13, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov bl, byte ptr [r8]
mov r13b, bl
=== 49
mov rcx, r13
push rcx
mov r14, rsp
mov rsi, r13
=== 50
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov r15, rsi
movzx rsi, sil
=== 51
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x119e43dea
add rbx, 0x262524d6; add_carry
mov rbx, qword ptr [rbx + 0x770]
add rbx, rsi
mov r14b, byte ptr [rbx]
movzx r14, r14b
shl r14, 0x10
add r15, r14
movabs r11, 0x11e571db2
push r11
push 0x38ad6fef
push 0x6f700c46
push 0x365b35c0
push 0xa3125af
add qword ptr [rsp + 0x20], 0x21b23d0e; add
mov r14, r15
=== 52
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1904
add rsp, 1904
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbx
mov r12, r14
=== 53
mov r15, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov cl, byte ptr [r10]
mov r11, 0xff
shl r11, 8
not r11
and r15, r11
movzx r11, cl
shl r11, 8
or r15, r11
=== 54
mov r14, r15
push r14
mov rbp, rsp
mov r12, r15
=== 55
mov rbp, rbp
mov r14, r12
push rbp
push 0x3b8f54d7
push 0x7b264c7d
push 0x195578c2
push 0x6a762e66
=== 56
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov r14, r14
movzx rdi, dil
=== 57
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x103c05e72
add rdx, 0x3c49044e; add_carry
mov rdx, qword ptr [rdx + 0x5d0]
add rdx, rdi
mov dil, byte ptr [rdx]
movzx rdi, dil
shl rdi, 0x18
add r14, rdi
movabs rdx, 0xf30ae909
push rdx
push 0x2b135190
push 0xaf52991
push 0x52b21664
push 0x3e294a10
add qword ptr [rsp + 0x20], 0x4cfe71b7; add
mov r14, r14
=== 58
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1488
add rsp, 1488
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r13
mov r14, r14
=== 59
mov r12, r14
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbp
mov r9b, byte ptr [rbx]
mov r13, 0xff
shl r13, 0x10
not r13
and r12, r13
movzx r13, r9b
shl r13, 0x10
or r12, r13
=== 60
mov rsi, r12
push rsi
mov rsi, rsp
mov r15, r12
=== 61
mov r13, rsi
mov r15, r15
push r13
push 0x20d6587a
push 0x70436f65
push 0x640c3dba
push 0x46d24d2c
=== 62
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov r14, r15
movzx rbp, bpl
=== 63
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x1161b4d4a
add rax, 0x29ee1576; add_carry
mov rax, qword ptr [rax + 0xc0]
add rax, rbp
mov r13b, byte ptr [rax]
movzx r13, r13b
shl r13, 0x20
add r14, r13
mov r12, r14
movabs r14, 0xf3640df6
add r14, 0x4ca54cca; add
=== 64
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 192
add rsp, 192
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov r13, r12
=== 65
mov r13, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov r8b, byte ptr [r15]
mov r11, 0xff
shl r11, 0x18
not r11
and r13, r11
movzx r11, r8b
shl r11, 0x18
or r13, r11
=== 66
mov rbp, r13
push rbp
mov rbx, rsp
mov rsi, r13
=== 67
mov rbx, rbx
mov rdi, rsi
push rbx
push 0x2c671b1f
push 0x78e35209
push 0x6aa51089
=== 68
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbx
mov rbp, rdi
movzx rsi, sil
=== 69
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xf4e5f84c
add r8, 0x4b236a74; add_carry
mov r8, qword ptr [r8]
add r8, rsi
mov al, byte ptr [r8]
movzx rax, al
shl rax, 0x28
add rbp, rax
movabs r10, 0x1351eeaca
push r10
push 0x1e704207
push 0xba476e6
push 0x38767d7a
add qword ptr [rsp + 0x18], 0xaea6ff6; add
mov r12, rbp
=== 70
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbx
mov rbx, r12
=== 71
mov r15, rbx
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r15
mov bpl, byte ptr [rsi]
mov rdx, 0xff
shl rdx, 0x20
not rdx
and r15, rdx
movzx rdx, bpl
shl rdx, 0x20
or r15, rdx
=== 72
mov rax, r15
push rax
mov rbp, rsp
mov rdi, r15
=== 73
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rcx
mov r14, rdi
movzx r12, r12b
=== 74
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xdb5e5ea3
add r10, 0x64ab041d; add_carry
mov r10, qword ptr [r10]
add r10, r12
mov r14b, byte ptr [r10]
movzx r14, r14b
shl r14, 0x30
add r14, r14
movabs rdx, 0xc6e8437a
push rdx
push 0x3af6700f
push 0x4447b9d
push 0x37d43e6b
push 0x39040ad3
add qword ptr [rsp + 0x20], 0x79211746; add
mov r12, r14
=== 75
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov rbp, r12
=== 76
mov r14, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov dil, byte ptr [r8]
mov r9, 0xff
shl r9, 0x28
not r9
and r14, r9
movzx r9, dil
shl r9, 0x28
or r14, r9
=== 77
movabs r10, 0x128536e24
push r10
push 0x4b4e3da1
push 0x6aea72e8
push 0x9935467
push 0xaa745c1
add qword ptr [rsp + 0x20], 0x18364ac4; input
mov rsi, r14
=== 78
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov rbx, rsi
movzx rsi, sil
=== 79
mov rax, rsi
mov rbp, 0xffffffffe4de5d8d
add rbp, 0x1c0671fe
push rbp
mov r12, rbx
mul qword ptr [rsp]
mov r15, rax
=== 80
mov rdi, r12
sub rdi, r15
=== 81
mov rax, rdi
push rax
mov r15, rsp
mov r12, rdi
=== 82
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r13
mov r12, r12
movzx rbx, bl
=== 83
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x1093b017b
add r12, 0x36ce7145; sub_carry
mov r12, qword ptr [r12 + 0x6f0]
add r12, rbx
mov r14b, byte ptr [r12]
movzx r14, r14b
shl r14, 8
sub r12, r14
mov rbp, r12
movabs r14, 0xde6f21d0
add r14, 0x619a48f0; sub
=== 84
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1776
add rsp, 1776
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r14
mov rdi, rbp
=== 85
mov rbx, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov bpl, byte ptr [rdx]
mov bl, bpl
=== 86
mov r11, rbx
push r11
mov rdi, rsp
mov rsi, rbx
=== 87
mov rdi, rdi
mov r13, rsi
push rdi
push 0x5b5153d
push 0x50ba4e00
push 0x4f897bb1
push 0x6fcc5245
=== 88
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov rbx, r13
movzx r12, r12b
=== 89
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xd4dd17dd
add r10, 0x6b2c5ae3; sub_carry
mov r10, qword ptr [r10 + 0x5d8]
add r10, r12
mov r14b, byte ptr [r10]
movzx r14, r14b
shl r14, 0x10
sub rbx, r14
mov rsi, rbx
movabs r15, 0x1212500bb
add r15, 0x1ee46a05; sub
=== 90
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1496
add rsp, 1496
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r12, rsi
=== 91
mov r15, r12
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbx
mov dl, byte ptr [rdi]
mov r13, 0xff
shl r13, 8
not r13
and r15, r13
movzx r13, dl
shl r13, 8
or r15, r13
=== 92
mov r13, r15
push r13
mov r12, rsp
mov rdi, r15
=== 93
mov rsi, r12
mov r12, rdi
push rsi
push 0x54db672a
push 0x6c05691
push 0x1033552c
push 0x61753d3f
=== 94
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov rdi, r12
movzx r13, r13b
=== 95
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x10e2147d5
add rcx, 0x31e82aeb; sub_carry
mov rcx, qword ptr [rcx + 0x1f8]
add rcx, r13
mov r12b, byte ptr [rcx]
movzx r12, r12b
shl r12, 0x18
sub rdi, r12
movabs r8, 0x1048763eb
push r8
push 0x349c620f
push 0x5f716e89
push 0x638d5660
push 0x1ec006d2
add qword ptr [rsp + 0x20], 0x3b8206d5; sub
mov rbx, rdi
=== 96
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 504
add rsp, 504
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov rbp, rbx
=== 97
mov r12, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov r14b, byte ptr [rax]
mov rcx, 0xff
shl rcx, 0x10
not rcx
and r12, rcx
movzx rcx, r14b
shl rcx, 0x10
or r12, rcx
=== 98
mov r12, r12
push r12
mov rbp, rsp
mov r13, r12
=== 99
mov rcx, rbp
mov rsi, r13
push rcx
push 0x6ecd7abf
push 0x3fb70ec1
push 0x1e3d2ad2
=== 100
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov r13, rsi
movzx rbx, bl
=== 101
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x133c7214c
add r8, 0xc425174; sub_carry
mov r8, qword ptr [r8 + 0x488]
add r8, rbx
mov r12b, byte ptr [r8]
movzx r12, r12b
shl r12, 0x20
sub r13, r12
mov rdi, r13
movabs rbx, 0xd9d33b57
add rbx, 0x66362f69; sub
=== 102
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1160
add rsp, 1160
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rax
mov r14, rdi
=== 103
mov r13, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov r12b, byte ptr [r8]
mov r8, 0xff
shl r8, 0x18
not r8
and r13, r8
movzx r8, r12b
shl r8, 0x18
or r13, r8
=== 104
mov rax, r13
push rax
mov rsi, rsp
mov r15, r13
=== 105
mov rax, rsi
mov r15, r15
push rax
push 0x568b41c0
push 0x1521557c
push 0x489a0375
=== 106
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov rdi, r15
movzx rbx, bl
=== 107
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xf4914bcf
add rcx, 0x4b7826f1; sub_carry
mov rcx, qword ptr [rcx]
add rcx, rbx
mov r15b, byte ptr [rcx]
movzx r15, r15b
shl r15, 0x30
sub rdi, r15
mov r13, rdi
movabs rsi, 0x1142d2306
add rsi, 0x2bdc47ba; sub
=== 108
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rcx
mov r15, r13
=== 109
mov rbp, r15
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov sil, byte ptr [r8]
mov r14, 0xff
shl r14, 0x28
not r14
and rbp, r14
movzx r14, sil
shl r14, 0x28
or rbp, r14
=== 110
mov r11, rbp
push r11
mov rsi, rsp
mov r13, rbp
=== 111
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov rsi, r13
movzx r15, r15b
=== 112
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x103cd6d9f
add rsi, 0x3c3c0521; sub_carry
mov rsi, qword ptr [rsi]
add rsi, r15
mov dl, byte ptr [rsi]
movzx rdx, dl
shl rdx, 0x38
sub rsi, rdx
movabs rcx, 0xd3df260f
push rcx
push 0x48fb4d23
push 0x33f14a5b
push 0x5ae08ba
push 0x642a6b77
add qword ptr [rsp + 0x20], 0x6c2a44b1; sub
mov r15, rsi
=== 113
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rsi
mov r14, r15
=== 114
mov r15, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov cl, byte ptr [rax]
mov r10, 0xff
shl r10, 0x30
not r10
and r15, r10
movzx r10, cl
shl r10, 0x30
or r15, r10
=== 115
movabs rbp, 0xe32ea997
push rbp
push 0xd131220
push 0x38202ea5
push 0x285720cd
push 0x41230399
add qword ptr [rsp + 0x20], 0x5d5b0f51; input
mov r12, r15
=== 116
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 8
add rsp, 8
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov r14, r12
movzx rbp, bpl
=== 117
mov rax, rbp
mov r11, 0xffffffffa0aa7542
add r11, 0x604b544e
push r11
mov r14, r14
mul qword ptr [rsp]
mov rbp, rax
=== 118
mov rsi, r14
sub rsi, rbp
=== 119
mov r12, rsi
push r12
mov rbp, rsp
mov rsi, rsi
=== 120
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov rbx, rsi
movzx r15, r15b
=== 121
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x12bd73891
add rbp, 0x14322a2f; add_carry
mov rbp, qword ptr [rbp + 0x2b0]
add rbp, r15
mov sil, byte ptr [rbp]
movzx rsi, sil
shl rsi, 8
add rbx, rsi
mov rdi, rbx
movabs r13, 0x118d31e6b
add r13, 0x27363c55; add
=== 122
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 688
add rsp, 688
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov r15, rdi
=== 123
mov r13, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rsi
mov r10b, byte ptr [rbp]
mov r13b, r10b
=== 124
mov rdx, r13
push rdx
mov rbx, rsp
mov r14, r13
=== 125
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov rdi, r14
movzx r15, r15b
=== 126
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xfbf613a1
add rdi, 0x44134f1f; add_carry
mov rdi, qword ptr [rdi + 0x530]
add rdi, r15
mov r12b, byte ptr [rdi]
movzx r12, r12b
shl r12, 0x10
add rdi, r12
movabs r10, 0xe25825f9
push r10
push 0x71406aed
push 0x180f4263
push 0x24c01b81
add qword ptr [rsp + 0x18], 0x5db134c7; add
mov rbx, rdi
=== 127
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1328
add rsp, 1328
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov rbx, rbx
=== 128
mov rbx, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov r10b, byte ptr [rcx]
mov rsi, 0xff
shl rsi, 8
not rsi
and rbx, rsi
movzx rsi, r10b
shl rsi, 8
or rbx, rsi
=== 129
mov r13, rbx
push r13
mov rsi, rsp
mov rbx, rbx
=== 130
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r15
mov r12, rbx
movzx rbp, bpl
=== 131
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x132c061b6
add rbx, 0xd49010a; add_carry
mov rbx, qword ptr [rbx + 0x7d0]
add rbx, rbp
mov r14b, byte ptr [rbx]
movzx r14, r14b
shl r14, 0x18
add r12, r14
movabs r11, 0x123e64bad
push r11
push 0x684e3707
push 0x31b23612
push 0x29c632fd
add qword ptr [rsp + 0x18], 0x1c230f13; add
mov rdi, r12
=== 132
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2000
add rsp, 2000
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov r15, rdi
=== 133
mov r13, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rdi
mov al, byte ptr [rbp]
mov r14, 0xff
shl r14, 0x10
not r14
and r13, r14
movzx r14, al
shl r14, 0x10
or r13, r14
=== 134
mov rbx, r13
push rbx
mov r12, rsp
mov rsi, r13
=== 135
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r15
mov rbx, rsi
movzx r12, r12b
=== 136
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xe7e82b7f
add r14, 0x58213741; add_carry
mov r14, qword ptr [r14 + 0x358]
add r14, r12
mov r14b, byte ptr [r14]
movzx r14, r14b
shl r14, 0x20
add rbx, r14
mov rsi, rbx
movabs r13, 0x122d82878
add r13, 0x1d313248; add
=== 137
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 856
add rsp, 856
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rcx
mov rbp, rsi
=== 138
mov r13, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov r10b, byte ptr [rax]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r13, rsi
movzx rsi, r10b
shl rsi, 0x18
or r13, rsi
=== 139
mov rbp, r13
push rbp
mov rdi, rsp
mov rbx, r13
=== 140
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbp
mov rsi, rbx
movzx r15, r15b
=== 141
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xe88a61bf
add rax, 0x577f0101; add_carry
mov rax, qword ptr [rax]
add rax, r15
mov r14b, byte ptr [rax]
movzx r14, r14b
shl r14, 0x28
add rsi, r14
mov r13, rsi
movabs rsi, 0x1161aff10
add rsi, 0x29ee5bb0; add
=== 142
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r14
mov rdi, r13
=== 143
mov rbp, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov dl, byte ptr [rcx]
mov r13, 0xff
shl r13, 0x20
not r13
and rbp, r13
movzx r13, dl
shl r13, 0x20
or rbp, r13
=== 144
mov rdi, rbp
push rdi
mov r15, rsp
mov rdi, rbp
=== 145
mov rdx, r15
mov r12, rdi
push rdx
push 0x6e5a333c
push 0xef324f5
push 0x228b167b
push 0x5e487f36
=== 146
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r10
mov r15, r12
movzx rbp, bpl
=== 147
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x10b1b0c34
add rdx, 0x34ee568c; add_carry
mov rdx, qword ptr [rdx]
add rdx, rbp
mov dl, byte ptr [rdx]
movzx rdx, dl
shl rdx, 0x38
add r15, rdx
mov r15, r15
movabs r14, 0xf788f090
add r14, 0x48806a30; add
=== 148
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rax
mov rsi, r15
=== 149
mov rsi, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov r13b, byte ptr [r13]
mov r14, 0xff
shl r14, 0x30
not r14
and rsi, r14
movzx r14, r13b
shl r14, 0x30
or rsi, r14
=== 150
mov rsi, rsi
movabs r14, 0x1138e7fb4
add r14, 0x2cfb3934; input
=== 151
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 20
add rsp, 20
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r12
mov rdi, rsi
movzx r14, r14b
=== 152
mov rax, r14
mov r9, 0xffffffffb9f910b2
add r9, 0x467a20c6
push r9
mov rbp, rdi
mul qword ptr [rsp]
mov r13, rax
=== 153
mov r13, rbp
xor r13, r13
=== 154
mov rsi, r13
push rsi
mov r12, rsp
mov r15, r13
=== 155
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbp
mov r13, r15
movzx r14, r14b
=== 156
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r13
movabs r13, 0x12d6b0349
add r13, 0x129e4777; xor
=== 157
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 472
add rsp, 472
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r11
mov r14, r14
=== 158
mov r15, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r13
mov bpl, byte ptr [r8]
mov r15b, bpl
=== 159
mov rbx, r15
push rbx
mov r14, rsp
mov r13, r15
=== 160
mov r13, r14
mov r12, r13
push r13
push 0x68d22ae7
push 0x3c184267
push 0x414a3a67
=== 161
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r15
mov r15, r12
movzx rsi, sil
=== 162
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xf9edcae2
push rdx
push 0x7b190f51
push 0x7d6d4ff7
push 0x539d52cc
add qword ptr [rsp + 0x18], 0x461b7fde; xor
mov rbx, r15
=== 163
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1752
add rsp, 1752
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rsi
mov rdi, rbx
=== 164
mov rbp, rdi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r15
mov dl, byte ptr [rsi]
mov rcx, 0xff
shl rcx, 8
not rcx
and rbp, rcx
movzx rcx, dl
shl rcx, 8
or rbp, rcx
=== 165
mov rbp, rbp
push rbp
mov r12, rsp
mov rsi, rbp
=== 166
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov r12, rsi
movzx r14, r14b
=== 167
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xf3f01d0a
push r14
push 0x620e130c
push 0xa592aeb
push 0x5cf6aec
push 0x1d7a50af
add qword ptr [rsp + 0x20], 0x4c192db6; xor
mov rbx, r12
=== 168
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1816
add rsp, 1816
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdi
mov r15, rbx
=== 169
mov rbx, r15
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbx
mov bpl, byte ptr [r14]
mov r15, 0xff
shl r15, 0x10
not r15
and rbx, r15
movzx r15, bpl
shl r15, 0x10
or rbx, r15
=== 170
mov r10, rbx
push r10
mov rdi, rsp
mov rsi, rbx
=== 171
mov rcx, rdi
mov r12, rsi
push rcx
push 0x76a65077
push 0x4c9e49f6
push 0x3ddf2452
=== 172
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r10
mov r13, r12
movzx rsi, sil
=== 173
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r13
movabs r13, 0x137fe2c48
add r13, 0x80b1e78; xor
=== 174
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 776
add rsp, 776
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rsi
mov r13, r15
=== 175
mov rsi, r13
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov cl, byte ptr [rbp]
mov r14, 0xff
shl r14, 0x18
not r14
and rsi, r14
movzx r14, cl
shl r14, 0x18
or rsi, r14
=== 176
mov r14, rsi
push r14
mov rsi, rsp
mov rbx, rsi
=== 177
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r14
mov rbp, rbx
movzx r15, r15b
=== 178
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rbp
movabs r15, 0x13a700b34
add r15, 0x5993f8c; xor
=== 179
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov r14, rbp
=== 180
mov rsi, r14
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov r11b, byte ptr [rbp]
mov r14, 0xff
shl r14, 0x20
not r14
and rsi, r14
movzx r14, r11b
shl r14, 0x20
or rsi, r14
=== 181
mov r13, rsi
push r13
mov rbx, rsp
mov rsi, rsi
=== 182
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov r13, rsi
movzx r15, r15b
=== 183
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xf1bff88a
push r10
push 0x657a1780
push 0x184518d9
push 0x7636391c
add qword ptr [rsp + 0x18], 0x4e495236; xor
mov r13, r13
=== 184
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov r13, r13
=== 185
mov rbx, r13
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov r12b, byte ptr [r11]
mov r14, 0xff
shl r14, 0x38
not r14
and rbx, r14
movzx r14, r12b
shl r14, 0x38
or rbx, r14
=== 186
mov rsi, rbx
movabs r12, 0x11350491d
add r12, 0x2d396fcb; input
=== 187
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_SMALL 16
add rsp, 16
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbx
mov r13, rsi
movzx rdi, dil
=== 188
mov rax, rdi
mov rbx, 0xffffffffb274a2b6
add rbx, 0x4e257502
push rbx
mov rdi, r13
mul qword ptr [rsp]
mov rsi, rax
=== 189
mov r12, rdi
xor r12, rsi
=== 190
mov rax, r12
push rax
mov r15, rsp
mov r13, r12
=== 191
mov r10, r15
mov r13, r13
push r10
push 0x1c279de
push 0x75ef360f
push 0x35591de9
push 0x3d6c7ce5
=== 192
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
mov rbp, r13
movzx r12, r12b
=== 193
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x11d243c38
add rdi, 0x22e53688; sub_carry
mov rdi, qword ptr [rdi + 0x588]
add rdi, r12
mov dil, byte ptr [rdi]
movzx rdi, dil
shl rdi, 8
sub rbp, rdi
movabs r11, 0x110b601db
push r11
push 0x19ef38b8
push 0x4cae03c9
push 0x94911d6
push 0x7bc25848
add qword ptr [rsp + 0x20], 0x2f5368e5; sub
mov r14, rbp
=== 194
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1416
add rsp, 1416
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdi
mov r15, r14
=== 195
mov r13, r15
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rdi
mov dl, byte ptr [r12]
mov r13b, dl
=== 196
mov r10, r13
push r10
mov r13, rsp
mov rbx, r13
=== 197
mov r9, r13
mov rbp, rbx
push r9
push 0x5d0a5bfb
push 0x47dc6da8
push 0xc6b7ec6
=== 198
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov r12, rbp
movzx rbx, bl
=== 199
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xe0d462dd
add r14, 0x5f350fe3; sub_carry
mov r14, qword ptr [r14 + 0x20]
add r14, rbx
mov dl, byte ptr [r14]
movzx rdx, dl
shl rdx, 0x10
sub r12, rdx
mov rdi, r12
movabs r15, 0x124f905ae
add r15, 0x1b106512; sub
=== 200
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 32
add rsp, 32
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r13
mov rbx, rdi
=== 201
mov r13, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov dl, byte ptr [r9]
mov r9, 0xff
shl r9, 8
not r9
and r13, r9
movzx r9, dl
shl r9, 8
or r13, r9
=== 202
mov r10, r13
push r10
mov rdi, rsp
mov rsi, r13
=== 203
mov rsi, rdi
mov rbx, rsi
push rsi
push 0x47933421
push 0x5396644e
push 0x41c81546
=== 204
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r10
mov r13, rbx
movzx rbp, bpl
=== 205
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xc823f319
add r11, 0x77e57fa7; sub_carry
mov r11, qword ptr [r11 + 0x140]
add r11, rbp
mov r8b, byte ptr [r11]
movzx r8, r8b
shl r8, 0x18
sub r13, r8
movabs rcx, 0x13508eccd
push rcx
push 0x2db1adf
push 0x45450e0a
push 0x38d76eae
push 0x60a62e34
add qword ptr [rsp + 0x20], 0xb007df3; sub
mov rbp, r13
=== 206
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 320
add rsp, 320
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov rsi, rbp
=== 207
mov rdi, rsi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov r13b, byte ptr [rax]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and rdi, rbx
movzx rbx, r13b
shl rbx, 0x10
or rdi, rbx
=== 208
mov rdi, rdi
push rdi
mov r14, rsp
mov r13, rdi
=== 209
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbx
mov rbx, r13
movzx rdi, dil
=== 210
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x1158c3c33
add r11, 0x2a7d368d; sub_carry
mov r11, qword ptr [r11 + 0x650]
add r11, rdi
mov dl, byte ptr [r11]
movzx rdx, dl
shl rdx, 0x20
sub rbx, rdx
mov rsi, rbx
movabs rbp, 0xf5dff1de
add rbp, 0x4a2978e2; sub
=== 211
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1616
add rsp, 1616
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov r12, rsi
=== 212
mov r15, r12
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov al, byte ptr [r9]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and r15, rdx
movzx rdx, al
shl rdx, 0x18
or r15, rdx
=== 213
mov r10, r15
push r10
mov rsi, rsp
mov rdi, r15
=== 214
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r13
mov r13, rdi
movzx rbp, bpl
=== 215
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x12d365faa
add r13, 0x12d31316; sub_carry
mov r13, qword ptr [r13]
add r13, rbp
mov al, byte ptr [r13]
movzx rax, al
shl rax, 0x28
sub r13, rax
movabs rbx, 0x10db62f6f
push rbx
push 0x76e158ca
push 0x50260c59
push 0x38973dcf
push 0x208c3833
add qword ptr [rsp + 0x20], 0x32533b51; sub
mov rbp, r13
=== 216
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rsi
mov r15, rbp
=== 217
mov r15, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov r14b, byte ptr [r9]
mov rdx, 0xff
shl rdx, 0x20
not rdx
and r15, rdx
movzx rdx, r14b
shl rdx, 0x20
or r15, rdx
=== 218
mov r10, r15
push r10
mov r15, rsp
mov r13, r15
=== 219
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov rbx, r13
movzx r12, r12b
=== 220
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x1074603d5
add rbp, 0x38c36eeb; sub_carry
mov rbp, qword ptr [rbp]
add rbp, r12
mov dil, byte ptr [rbp]
movzx rdi, dil
shl rdi, 0x30
sub rbx, rdi
movabs rdx, 0x13cf315a8
push rdx
push 0x721a0b7b
push 0x3d5a5a05
push 0x421536cd
push 0x725b76b0
add qword ptr [rsp + 0x20], 0x3165518; sub
mov rsi, rbx
=== 221
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov r12, rsi
=== 222
mov rsi, r12
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov bl, byte ptr [r9]
mov rbp, 0xff
shl rbp, 0x28
not rbp
and rsi, rbp
movzx rbp, bl
shl rbp, 0x28
or rsi, rbp
=== 223
movabs r11, 0x1003190ab
push r11
push 0x4cd433bf
push 0x7f3a7464
push 0x5a50c54
add qword ptr [rsp + 0x18], 0x4058283d; input
mov r13, rsi
=== 224
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 12
add rsp, 12
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdi
mov r12, r13
movzx rsi, sil
=== 225
mov rax, rsi
mov rbx, 0xffffffffcc372579
add rbx, 0x344012d7
push rbx
mov r12, r12
mul qword ptr [rsp]
mov r14, rax
=== 226
mov rdi, r12
xor rdi, r14
=== 227
mov r14, rdi
push r14
mov r12, rsp
mov rbp, rdi
=== 228
mov rbp, r12
mov r15, rbp
push rbp
push 0x7232422e
push 0x6f354c8d
push 0x7f855f40
=== 229
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov r12, r15
movzx r14, r14b
=== 230
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r12
movabs rdi, 0xee51e968
add rdi, 0x51b76158; xor
=== 231
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1520
add rsp, 1520
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov r12, r14
=== 232
mov r12, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbp
mov dl, byte ptr [rcx]
mov r12b, dl
=== 233
mov r14, r12
push r14
mov r13, rsp
mov r15, r12
=== 234
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov rdi, r15
movzx r14, r14b
=== 235
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rdi
movabs r13, 0x11d79e929
add r13, 0x228f6197; xor
=== 236
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 832
add rsp, 832
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov rbp, r15
=== 237
mov rdi, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r15
mov sil, byte ptr [r10]
mov r11, 0xff
shl r11, 8
not r11
and rdi, r11
movzx r11, sil
shl r11, 8
or rdi, r11
=== 238
mov rax, rdi
push rax
mov r15, rsp
mov r14, rdi
=== 239
mov rbx, r15
mov rbp, r14
push rbx
push 0x1e0b6973
push 0x470b57aa
push 0x5777cde
=== 240
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov r13, rbp
movzx rbx, bl
=== 241
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x12368cfce
push rbx
push 0x4e2c1f87
push 0x50ce0e9f
push 0x23670599
push 0x78e717b
add qword ptr [rsp + 0x20], 0x1ca07af2; xor
mov rbx, r13
=== 242
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 888
add rsp, 888
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r10
mov rbp, rbx
=== 243
mov rdi, rbp
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rdi
mov r9b, byte ptr [r15]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and rdi, rbp
movzx rbp, r9b
shl rbp, 0x10
or rdi, rbp
=== 244
mov rdi, rdi
push rdi
mov r14, rsp
mov rdi, rdi
=== 245
mov rdi, r14
mov r15, rdi
push rdi
push 0x251b7c31
push 0xfef7b09
push 0x7231331a
push 0x689e620d
=== 246
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov r15, r15
movzx r13, r13b
=== 247
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r15
movabs rbx, 0xf40acb51
add rbx, 0x4bfe7f6f; xor
=== 248
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 720
add rsp, 720
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r11
mov r14, rsi
=== 249
mov rsi, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov bl, byte ptr [r9]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and rsi, rdi
movzx rdi, bl
shl rdi, 0x18
or rsi, rdi
=== 250
mov rbp, rsi
push rbp
mov rdi, rsp
mov r12, rsi
=== 251
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov r14, r12
movzx r13, r13b
=== 252
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r14
movabs rdi, 0xd59ed561
add rdi, 0x6a6a755f; xor
=== 253
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdx
mov r12, r12
=== 254
mov rbp, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov r10b, byte ptr [r15]
mov rsi, 0xff
shl rsi, 0x20
not rsi
and rbp, rsi
movzx rsi, r10b
shl rsi, 0x20
or rbp, rsi
=== 255
mov r15, rbp
push r15
mov r15, rsp
mov rsi, rbp
=== 256
mov r8, r15
mov rbp, rsi
push r8
push 0x7fda2456
push 0x38a474f4
push 0xa3316c8
push 0x2b0d30b5
=== 257
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r9
mov r14, rbp
movzx r13, r13b
=== 258
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r14
movabs rdi, 0xf561e1e5
add rdi, 0x4aa768db; xor
=== 259
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rbx, rsi
=== 260
mov rbx, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r13
mov r15b, byte ptr [r8]
mov rbp, 0xff
shl rbp, 0x28
not rbp
and rbx, rbp
movzx rbp, r15b
shl rbp, 0x28
or rbx, rbp
=== 261
mov rcx, rbx
push rcx
mov r14, rsp
mov r13, rbx
=== 262
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r10
mov rdi, r13
movzx rsi, sil
=== 263
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xf37531bf
push rcx
push 0x1df4514
push 0x6b7f78ce
push 0x6e742ea5
add qword ptr [rsp + 0x18], 0x4c941901; xor
mov rbx, rdi
=== 264
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rsi
mov rdi, rbx
=== 265
mov r12, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov r14b, byte ptr [rdx]
mov r15, 0xff
shl r15, 0x30
not r15
and r12, r15
movzx r15, r14b
shl r15, 0x30
or r12, r15
=== 266
mov r14, r12
movabs rbp, 0xfa865a01
add rbp, 0x46035ee7; input
=== 267
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 28
add rsp, 28
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov r13, r14
movzx r15, r15b
=== 268
mov rax, r15
mov r13, 0xfffffffff084aa53
add r13, 0x105d72ea
push r13
mov rbp, r13
mul qword ptr [rsp]
mov r12, rax
=== 269
mov r12, rbp
xor r12, r12
=== 270
mov rdi, r12
push rdi
mov rsi, rsp
mov r12, r12
=== 271
mov rdi, rsi
mov rbx, r12
push rdi
push 0x726b2089
push 0x94c3c24
push 0x5d87298e
push 0x50e62b31
=== 272
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov rsi, rbx
movzx rbp, bpl
=== 273
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rsi
movabs rbx, 0x103582166
add rbx, 0x3cb1295a; xor
=== 274
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 280
add rsp, 280
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov rsi, r14
=== 275
mov r14, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r15
mov dil, byte ptr [r8]
mov r14b, dil
=== 276
mov r12, r14
push r12
mov rsi, rsp
mov r15, r14
=== 277
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
mov r14, r15
movzx rbx, bl
=== 278
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xc9eceb05
push r15
push 0x4ff3564c
push 0x578d47ca
push 0x7bc51160
add qword ptr [rsp + 0x18], 0x761c5fbb; xor
mov rbp, r14
=== 279
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 232
add rsp, 232
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov rbp, rbp
=== 280
mov rbx, rbp
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r15
mov dil, byte ptr [rdi]
mov r14, 0xff
shl r14, 8
not r14
and rbx, r14
movzx r14, dil
shl r14, 8
or rbx, r14
=== 281
mov r12, rbx
push r12
mov r14, rsp
mov r13, rbx
=== 282
mov r9, r14
mov rbp, r13
push r9
push 0x355222e3
push 0x4c092c15
push 0x65d97425
=== 283
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov r14, rbp
movzx rdi, dil
=== 284
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r14
movabs rsi, 0x1215941af
add rsi, 0x1eb00911; xor
=== 285
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1160
add rsp, 1160
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r14
mov rbp, r12
=== 286
mov rbx, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov dil, byte ptr [rdx]
mov r11, 0xff
shl r11, 0x10
not r11
and rbx, r11
movzx r11, dil
shl r11, 0x10
or rbx, r11
=== 287
mov rbp, rbx
push rbp
mov r13, rsp
mov r15, rbx
=== 288
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r8
mov rbp, r15
movzx r12, r12b
=== 289
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rbp
movabs rdi, 0xfaf425e9
add rdi, 0x451524d7; xor
=== 290
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 736
add rsp, 736
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbp
mov rbp, r14
=== 291
mov r14, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov r10b, byte ptr [r12]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and r14, rdi
movzx rdi, r10b
shl rdi, 0x18
or r14, rdi
=== 292
mov r10, r14
push r10
mov rbx, rsp
mov rdi, r14
=== 293
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov r15, rdi
movzx rsi, sil
=== 294
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x131b2ef8d
push rbp
push 0x65780a9a
push 0x23073cd
push 0x9b02853
push 0xf4732f0
add qword ptr [rsp + 0x20], 0xe565b33; xor
mov r12, r15
=== 295
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r10
mov r14, r12
=== 296
mov r14, r14
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov r11b, byte ptr [r12]
mov rsi, 0xff
shl rsi, 0x20
not rsi
and r14, rsi
movzx rsi, r11b
shl rsi, 0x20
or r14, rsi
=== 297
mov r10, r14
push r10
mov rbx, rsp
mov r12, r14
=== 298
mov r9, rbx
mov rbx, r12
push r9
push 0x6b716383
push 0x56cf6315
push 0x737c10db
push 0x6d65093c
=== 299
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r13
mov rbx, rbx
movzx r13, r13b
=== 300
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rbx
movabs rbp, 0xea68eafa
add rbp, 0x55a05fc6; xor
=== 301
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov rbp, rdi
=== 302
mov rdi, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r14
mov r14b, byte ptr [rdx]
mov rbx, 0xff
shl rbx, 0x28
not rbx
and rdi, rbx
movzx rbx, r14b
shl rbx, 0x28
or rdi, rbx
=== 303
mov rbp, rdi
push rbp
mov r13, rsp
mov r15, rdi
=== 304
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r15, r15
movzx rbx, bl
=== 305
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xc6bb648b
add rbx, 0x794e0e35; sub_carry
mov rbx, qword ptr [rbx + 0x3c8]
add rbx, rbx
mov bl, byte ptr [rbx]
movzx rbx, bl
shl rbx, 8
sub r15, rbx
movabs r14, 0x113055d2c
push r14
push 0x7e9d3831
push 0x66fd462b
push 0x2aaf0643
add qword ptr [rsp + 0x18], 0x2d040d94; sub
mov r14, r15
=== 306
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 968
add rsp, 968
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r11
mov r12, r14
=== 307
mov r12, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r14
mov cl, byte ptr [rcx]
mov r12b, cl
=== 308
mov r8, r12
push r8
mov rbx, rsp
mov rsi, r12
=== 309
mov rbx, rbx
mov r15, rsi
push rbx
push 0x537d1443
push 0x34e92aae
push 0x79d33b80
=== 310
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdi
mov r15, r15
movzx rsi, sil
=== 311
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x11c025838
add r13, 0x24071a88; sub_carry
mov r13, qword ptr [r13 + 0x3d0]
add r13, rsi
mov dil, byte ptr [r13]
movzx rdi, dil
shl rdi, 0x10
sub r15, rdi
movabs r10, 0x126124b57
push r10
push 0x54fa795a
push 0x4045fee
push 0x12d2d9e
add qword ptr [rsp + 0x18], 0x19f71f69; sub
mov rbx, r15
=== 312
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 976
add rsp, 976
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov rbp, rbx
=== 313
mov rsi, rbp
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov r15b, byte ptr [r11]
mov r8, 0xff
shl r8, 8
not r8
and rsi, r8
movzx r8, r15b
shl r8, 8
or rsi, r8
=== 314
mov r11, rsi
push r11
mov rbx, rsp
mov rdi, rsi
=== 315
mov rax, rbx
mov r14, rdi
push rax
push 0x63cc2bc3
push 0x2c6010a8
push 0x31aa4ec2
=== 316
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov rbp, r14
movzx r12, r12b
=== 317
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xf2ad37d8
add r13, 0x4d5c3ae8; sub_carry
mov r13, qword ptr [r13 + 0x320]
add r13, r12
mov cl, byte ptr [r13]
movzx rcx, cl
shl rcx, 0x18
sub rbp, rcx
mov r14, rbp
movabs r12, 0xf37ffd0a
add r12, 0x4c896db6; sub
=== 318
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 800
add rsp, 800
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rcx
mov rbp, r14
=== 319
mov rbp, rbp
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbx
mov sil, byte ptr [rdi]
mov r15, 0xff
shl r15, 0x10
not r15
and rbp, r15
movzx r15, sil
shl r15, 0x10
or rbp, r15
=== 320
mov rax, rbp
push rax
mov r14, rsp
mov rbp, rbp
=== 321
mov rbx, r14
mov rbp, rbp
push rbx
push 0x28a45e28
push 0x31e67fa8
push 0x5d41253b
=== 322
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov r13, rbp
movzx rbp, bpl
=== 323
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x12d99fe94
add r10, 0x126f742c; sub_carry
mov r10, qword ptr [r10 + 0x408]
add r10, rbp
mov r10b, byte ptr [r10]
movzx r10, r10b
shl r10, 0x20
sub r13, r10
mov r15, r13
movabs rbp, 0xfe1a5468
add rbp, 0x41ef1658; sub
=== 324
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1032
add rsp, 1032
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdi
mov r13, r15
=== 325
mov rdi, r13
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r12
mov dl, byte ptr [rbp]
mov r11, 0xff
shl r11, 0x18
not r11
and rdi, r11
movzx r11, dl
shl r11, 0x18
or rdi, r11
=== 326
mov rax, rdi
push rax
mov rbx, rsp
mov r14, rdi
=== 327
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov r12, r14
movzx rbp, bpl
=== 328
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x13e65655e
add rdx, 0x1a40d62; sub_carry
mov rdx, qword ptr [rdx + 0x7f8]
add rdx, rbp
mov sil, byte ptr [rdx]
movzx rsi, sil
shl rsi, 0x28
sub r12, rsi
movabs rdi, 0x129e044ca
push rdi
push 0x48e8643d
push 0xae76d64
push 0x5aee4a29
add qword ptr [rsp + 0x18], 0x162925f6; sub
mov rbx, r12
=== 329
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rsi
mov r15, rbx
=== 330
mov rsi, r15
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rdi
mov bpl, byte ptr [r15]
mov rbx, 0xff
shl rbx, 0x20
not rbx
and rsi, rbx
movzx rbx, bpl
shl rbx, 0x20
or rsi, rbx
=== 331
mov r8, rsi
push r8
mov rdi, rsp
mov r13, rsi
=== 332
mov rdi, rdi
mov rsi, r13
push rdi
push 0x3f9d57cf
push 0x22e94f71
push 0x548e5594
=== 333
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r10
mov rbx, rsi
movzx r14, r14b
=== 334
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x1266c5ebb
add r13, 0x199d1405; sub_carry
mov r13, qword ptr [r13 + 0x7f8]
add r13, r14
mov al, byte ptr [r13]
movzx rax, al
shl rax, 0x30
sub rbx, rax
movabs r11, 0xdc400c04
push r11
push 0x77314be7
push 0x741a2e14
push 0xef7632c
add qword ptr [rsp + 0x18], 0x63c95ebc; sub
mov rbx, rbx
=== 335
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov r14, rbx
=== 336
mov rbx, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r13
mov dil, byte ptr [rdi]
mov r15, 0xff
shl r15, 0x28
not r15
and rbx, r15
movzx r15, dil
shl r15, 0x28
or rbx, r15
=== 337
mov r15, rbx
push r15
mov rbx, rsp
mov r14, rbx
=== 338
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rax
mov r15, r14
movzx rbx, bl
=== 339
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xc3063dcf
add r13, 0x7d0334f1; sub_carry
mov r13, qword ptr [r13 + 0x7f8]
add r13, rbx
mov r12b, byte ptr [r13]
movzx r12, r12b
shl r12, 0x38
sub r15, r12
movabs rbx, 0xec0f56a7
push rbx
push 0x6fe01c0d
push 0x7f966b5
push 0x16693cd8
add qword ptr [rsp + 0x18], 0x53fa1419; sub
mov r15, r15
=== 340
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov rdi, r15
=== 341
mov r13, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbp
mov r8b, byte ptr [r12]
mov r9, 0xff
shl r9, 0x30
not r9
and r13, r9
movzx r9, r8b
shl r9, 0x30
or r13, r9
=== 342
mov r15, r13
push r15
mov rbp, rsp
mov rbx, r13
=== 343
mov rbx, rbp
mov r15, rbx
push rbx
push 0x55175ff3
push 0x62962f86
push 0x36fa727c
push 0x51b1534a
=== 344
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov rdi, r15
movzx r14, r14b
=== 345
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rdi
movabs rdi, 0xe2d7279a
add rdi, 0x5d324326; sub
=== 346
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdi
mov rdi, rbp
=== 347
mov r12, rdi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov r9b, byte ptr [r9]
mov r11, 0xff
shl r11, 0x38
not r11
and r12, r11
movzx r11, r9b
shl r11, 0x38
or r12, r11
=== 348
mov rbx, r12
push rbx
mov r15, rsp
mov rbp, r12
=== 349
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rsi
mov r14, rbp
movzx r12, r12b
=== 350
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x13849ee23
push r14
push 0x1f8b1f3c
push 0x69722dfe
push 0xac603da
add qword ptr [rsp + 0x18], 0x7bf649d; or
mov r14, r14
=== 351
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov r13, r14
=== 352
mov rdi, r13
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov bpl, byte ptr [r8]
mov r9, 0xff
shl r9, 8
not r9
and rdi, r9
movzx r9, bpl
shl r9, 8
or rdi, r9
=== 353
mov r12, rdi
push r12
mov r12, rsp
mov rdi, rdi
=== 354
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r11
mov r14, rdi
movzx rdi, dil
=== 355
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x13369510b
push rbp
push 0x21a7074d
push 0x4bfc5d65
push 0x532f1438
add qword ptr [rsp + 0x18], 0xca001b5; or
mov r14, r14
=== 356
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov r14, r14
=== 357
mov rbx, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov r15b, byte ptr [r10]
mov rcx, 0xff
shl rcx, 0x20
not rcx
and rbx, rcx
movzx rcx, r15b
shl rcx, 0x20
or rbx, rcx
=== 358
mov rbx, rbx
push rbx
mov r15, rsp
mov rbx, rbx
=== 359
mov rdi, r15
mov r15, rbx
push rdi
push 0xe212764
push 0x4a7d5b6b
push 0x4f772627
=== 360
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rcx
mov rdi, r15
movzx r13, r13b
=== 361
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xc8c72136
push rbx
push 0x64742242
push 0x5a086d39
push 0xe155eb5
add qword ptr [rsp + 0x18], 0x7742318a; or
mov r12, rdi
=== 362
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov r12, r12
=== 363
mov r12, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov r13b, byte ptr [r10]
mov r15, 0xff
shl r15, 0x30
not r15
and r12, r15
movzx r15, r13b
shl r15, 0x30
or r12, r15
=== 364
mov r14, r12
movabs r15, 0x10bf5d1a1
add r15, 0x340a404f
test r14, r14
lea r12, [rip - 0x2f29a8]
cmovne r12, r15
jmp r12
=== 365
movabs r15, 0x1005a8f28
add r15, 0x402f29c0; input
=== 366
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 17
add rsp, 17
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdi
movzx r14, r14b
=== 367
mov rax, r14
mov rdx, 0xffffffffc48c5dee
add rdx, 0x3c0d4c93
push rdx
mul qword ptr [rsp]
mov r13, rax
=== 368
mov r15, r13
push r15
mov rdi, rsp
mov r15, r13
=== 369
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
mov r14, r15
movzx rsi, sil
=== 370
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x121633bff
add rsi, 0x1ea636c1; sub_carry
mov rsi, qword ptr [rsi + 0x288]
add rsi, rsi
mov r12b, byte ptr [rsi]
movzx r12, r12b
shl r12, 8
sub r14, r12
movabs rbp, 0x11484194d
push rbp
push 0xfcf60ec
push 0x79fc0810
push 0x182617e2
push 0x179b15b2
add qword ptr [rsp + 0x20], 0x2b855173; sub
mov rbx, r14
=== 371
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 648
add rsp, 648
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov r15, rbx
=== 372
mov rdi, r15
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rdi
mov r13b, byte ptr [r13]
mov dil, r13b
=== 373
mov r13, rdi
push r13
mov r15, rsp
mov r12, rdi
=== 374
mov r12, r15
mov rbx, r12
push r12
push 0x234602c6
push 0x2634316e
push 0x4c045f96
=== 375
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov r12, rbx
movzx r14, r14b
=== 376
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x1013b691c
add rcx, 0x3ece09a4; sub_carry
mov rcx, qword ptr [rcx + 0x750]
add rcx, r14
mov dil, byte ptr [rcx]
movzx rdi, dil
shl rdi, 0x10
sub r12, rdi
movabs r11, 0x114eeecec
push r11
push 0x417a33f9
push 0x20bd520e
push 0x57957060
push 0x78786b20
add qword ptr [rsp + 0x20], 0x2b1a7dd4; sub
mov r13, r12
=== 377
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1872
add rsp, 1872
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbx
mov rbp, r13
=== 378
mov rbp, rbp
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov r9b, byte ptr [r14]
mov r14, 0xff
shl r14, 8
not r14
and rbp, r14
movzx r14, r9b
shl r14, 8
or rbp, r14
=== 379
mov rbx, rbp
push rbx
mov r15, rsp
mov rdi, rbp
=== 380
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov rbp, rdi
movzx r13, r13b
=== 381
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x102894472
add r12, 0x3d802e4e; sub_carry
mov r12, qword ptr [r12 + 0x768]
add r12, r13
mov bpl, byte ptr [r12]
movzx rbp, bpl
shl rbp, 0x18
sub rbp, rbp
movabs r8, 0x1172e015d
push r8
push 0x3d4298e
push 0x339952d1
push 0x73063272
add qword ptr [rsp + 0x18], 0x28db6963; sub
mov r12, rbp
=== 382
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1896
add rsp, 1896
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbx
mov rbx, r12
=== 383
mov r12, rbx
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r13
mov r11b, byte ptr [rdi]
mov r9, 0xff
shl r9, 0x10
not r9
and r12, r9
movzx r9, r11b
shl r9, 0x10
or r12, r9
=== 384
mov r10, r12
push r10
mov r14, rsp
mov r15, r12
=== 385
mov r14, r14
mov rbx, r15
push r14
push 0x239208fa
push 0x7fc22234
push 0x1f5d4cad
push 0x9bc21a7
=== 386
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r8
mov rdi, rbx
movzx rbx, bl
=== 387
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xd1ff0f9d
add rax, 0x6e0a6323; sub_carry
mov rax, qword ptr [rax + 0x3a0]
add rax, rbx
mov r12b, byte ptr [rax]
movzx r12, r12b
shl r12, 0x20
sub rdi, r12
movabs rbx, 0x112e4ffae
push rbx
push 0x2a0b052c
push 0x22295d7d
push 0xbc62790
push 0x648c57e3
add qword ptr [rsp + 0x20], 0x2d246b12; sub
mov r14, rdi
=== 388
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 928
add rsp, 928
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdx
mov r13, r14
=== 389
mov rbx, r13
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov bpl, byte ptr [r10]
mov r13, 0xff
shl r13, 0x18
not r13
and rbx, r13
movzx r13, bpl
shl r13, 0x18
or rbx, r13
=== 390
mov rdx, rbx
push rdx
mov rdi, rsp
mov rbx, rbx
=== 391
mov r12, rdi
mov r13, rbx
push r12
push 0x640433f8
push 0x44d47bc2
push 0x6e3760ea
=== 392
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
mov r13, r13
movzx r12, r12b
=== 393
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x135973ea6
add r10, 0xa72341a; sub_carry
mov r10, qword ptr [r10]
add r10, r12
mov r12b, byte ptr [r10]
movzx r12, r12b
shl r12, 0x28
sub r13, r12
mov rbx, r13
movabs rsi, 0x13bbc0424
add rsi, 0x44d669c; sub
=== 394
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r10
mov r14, rbx
=== 395
mov r14, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov bpl, byte ptr [r15]
mov rcx, 0xff
shl rcx, 0x20
not rcx
and r14, rcx
movzx rcx, bpl
shl rcx, 0x20
or r14, rcx
=== 396
mov rax, r14
push rax
mov r15, rsp
mov rdi, r14
=== 397
mov r9, r15
mov rbp, rdi
push r9
push 0x1cec7ee1
push 0x1de174a4
push 0x39c37f2a
=== 398
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r15
mov r12, rbp
movzx r15, r15b
=== 399
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x131da43c1
add r12, 0xe2f2eff; sub_carry
mov r12, qword ptr [r12]
add r12, r15
mov r12b, byte ptr [r12]
movzx r12, r12b
shl r12, 0x38
sub r12, r12
mov r15, r12
movabs rdi, 0x12904f80b
add rdi, 0x170472b5; sub
=== 400
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r14
mov r13, r15
=== 401
mov rsi, r13
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rdi
mov bpl, byte ptr [r13]
mov r15, 0xff
shl r15, 0x30
not r15
and rsi, r15
movzx r15, bpl
shl r15, 0x30
or rsi, r15
=== 402
movabs rbp, 0x132229d57
push rbp
push 0x50a63d63
push 0x7e5522a
push 0x1901334c
add qword ptr [rsp + 0x18], 0xe671b91; input
mov rbx, rsi
=== 403
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rbx, rbx
movzx r13, r13b
=== 404
mov rax, r13
mov rbp, 0xffffffff943bb29b
add rbp, 0x6c0f0787
push rbp
mov r14, rbx
mul qword ptr [rsp]
mov rdi, rax
=== 405
mov r13, r14
xor r13, rdi
=== 406
mov r13, r13
push r13
mov r12, rsp
mov r15, r13
=== 407
mov rdi, r12
mov r15, r15
push rdi
push 0x48c57acb
push 0x41b27244
push 0x65a51d12
push 0x4afd61fa
=== 408
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov r15, r15
movzx rbp, bpl
=== 409
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xed6519a8
add rbp, 0x52a44918; add_carry
mov rbp, qword ptr [rbp + 0x5f8]
add rbp, rbp
mov dl, byte ptr [rbp]
movzx rdx, dl
shl rdx, 8
add r15, rdx
mov r12, r15
movabs rdi, 0xdc0421d9
add rdi, 0x640538e7; add
=== 410
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1528
add rsp, 1528
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov r15, r12
=== 411
mov rbx, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov dil, byte ptr [rbp]
mov bl, dil
=== 412
mov r10, rbx
push r10
mov rsi, rsp
mov r14, rbx
=== 413
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov rdi, r14
movzx rbp, bpl
=== 414
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xe1fa0cf0
add r15, 0x5e0f55d0; add_carry
mov r15, qword ptr [r15 + 0xa8]
add r15, rbp
mov r10b, byte ptr [r15]
movzx r10, r10b
shl r10, 0x10
add rdi, r10
mov r13, rdi
movabs rbx, 0x108f0fc68
add rbx, 0x37185e58; add
=== 415
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 168
add rsp, 168
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov rbx, r13
=== 416
mov r12, rbx
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov bpl, byte ptr [rdx]
mov r15, 0xff
shl r15, 8
not r15
and r12, r15
movzx r15, bpl
shl r15, 8
or r12, r15
=== 417
mov rbx, r12
push rbx
mov rbp, rsp
mov r12, r12
=== 418
mov r9, rbp
mov rbp, r12
push r9
push 0x132d0fd0
push 0x2e6a6b77
push 0x37cb6951
push 0x1ce63d00
=== 419
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov rdi, rbp
movzx r12, r12b
=== 420
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x1334951aa
add rcx, 0xcc01116; add_carry
mov rcx, qword ptr [rcx + 0x400]
add rcx, r12
mov dil, byte ptr [rcx]
movzx rdi, dil
shl rdi, 0x18
add rdi, rdi
mov r12, rdi
movabs r15, 0x11255eb09
add r15, 0x2db36fb7; add
=== 421
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1024
add rsp, 1024
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r11
mov rbx, r12
=== 422
mov r13, rbx
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbp
mov r12b, byte ptr [r14]
mov r8, 0xff
shl r8, 0x10
not r8
and r13, r8
movzx r8, r12b
shl r8, 0x10
or r13, r8
=== 423
mov rsi, r13
push rsi
mov rbp, rsp
mov rbx, r13
=== 424
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbp
mov r15, rbx
movzx rdi, dil
=== 425
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xd5335a0a
add rdx, 0x6ad608b6; add_carry
mov rdx, qword ptr [rdx + 0x2c8]
add rdx, rdi
mov bl, byte ptr [rdx]
movzx rbx, bl
shl rbx, 0x20
add r15, rbx
movabs r8, 0x106640aa9
push r8
push 0x733a3dd1
push 0x3b143fe7
push 0x4eaf6e21
push 0x7f9e2633
add qword ptr [rsp + 0x20], 0x39a55017; add
mov rsi, r15
=== 426
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 712
add rsp, 712
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r15
mov rbp, rsi
=== 427
mov r15, rbp
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbx
mov dl, byte ptr [rsi]
mov rbx, 0xff
shl rbx, 0x18
not rbx
and r15, rbx
movzx rbx, dl
shl rbx, 0x18
or r15, rbx
=== 428
mov rbx, r15
push rbx
mov rsi, rsp
mov rbx, r15
=== 429
mov r11, rsi
mov r12, rbx
push r11
push 0x45e27981
push 0x43457782
push 0x69de0f44
=== 430
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov r15, r12
movzx rdi, dil
=== 431
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xc5dc1c9d
add rbx, 0x7a2d4623; add_carry
mov rbx, qword ptr [rbx]
add rbx, rdi
mov sil, byte ptr [rbx]
movzx rsi, sil
shl rsi, 0x28
add r15, rsi
movabs r15, 0x11bda4756
push r15
push 0x231d7601
push 0x5ede6741
push 0x3b77895
push 0x1c4c2129
add qword ptr [rsp + 0x20], 0x242f136a; add
mov rbp, r15
=== 432
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r15
mov r14, rbp
=== 433
mov rdi, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov sil, byte ptr [r9]
mov rdx, 0xff
shl rdx, 0x20
not rdx
and rdi, rdx
movzx rdx, sil
shl rdx, 0x20
or rdi, rdx
=== 434
mov rdx, rdi
push rdx
mov rbp, rsp
mov r12, rdi
=== 435
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r13
mov r13, r12
movzx r12, r12b
=== 436
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x125d2fd7f
add rbp, 0x1a366541; add_carry
mov rbp, qword ptr [rbp]
add rbp, r12
mov r10b, byte ptr [rbp]
movzx r10, r10b
shl r10, 0x30
add r13, r10
mov rdi, r13
movabs r14, 0x13d133f92
add r14, 0x2f61b2e; add
=== 437
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov rdi, rdi
=== 438
mov rbp, rdi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov r15b, byte ptr [r13]
mov r10, 0xff
shl r10, 0x28
not r10
and rbp, r10
movzx r10, r15b
shl r10, 0x28
or rbp, r10
=== 439
mov r8, rbp
push r8
mov r15, rsp
mov rbp, rbp
=== 440
mov r15, r15
mov rbp, rbp
push r15
push 0x20bc4a1c
push 0x238d6a6f
push 0x6df878bf
push 0x1a755ff4
=== 441
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov r14, rbp
movzx rsi, sil
=== 442
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xf0f31181
add r12, 0x4f16513f; add_carry
mov r12, qword ptr [r12]
add r12, rsi
mov r10b, byte ptr [r12]
movzx r10, r10b
shl r10, 0x38
add r14, r10
movabs r13, 0x10878e233
push r13
push 0x2de0525f
push 0x78533d44
push 0x2ba15ea5
add qword ptr [rsp + 0x18], 0x3790788d; add
mov rbx, r14
=== 443
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov r12, rbx
=== 444
mov rdi, r12
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rsi
mov r11b, byte ptr [rsi]
mov r14, 0xff
shl r14, 0x30
not r14
and rdi, r14
movzx r14, r11b
shl r14, 0x30
or rdi, r14
=== 445
mov r15, rdi
movabs rbx, 0xf2fa9644
add rbx, 0x4d8f22a4; input
=== 446
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 21
add rsp, 21
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov rbp, r15
movzx r15, r15b
=== 447
mov rax, r15
mov r8, 0xffffffffb0c672d7
add r8, 0x4fcb33b3
push r8
mov rbx, rbp
mul qword ptr [rsp]
mov rsi, rax
=== 448
mov r14, rbx
xor r14, rsi
=== 449
mov r11, r14
push r11
mov r13, rsp
mov r14, r14
=== 450
mov r8, r13
mov r12, r14
push r8
push 0x3d757134
push 0x2d257340
push 0x281c2cd5
=== 451
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov r14, r12
movzx r13, r13b
=== 452
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x12535edff
push rdi
push 0x1833690f
push 0x432563b1
push 0x4d4e38ef
push 0x794b2204
add qword ptr [rsp + 0x20], 0x1ad35cc1; xor
mov r12, r14
=== 453
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 656
add rsp, 656
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov rbp, r12
=== 454
mov r13, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov r12b, byte ptr [r12]
mov r13b, r12b
=== 455
mov rdx, r13
push rdx
mov r15, rsp
mov rsi, r13
=== 456
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r14
mov r14, rsi
movzx rsi, sil
=== 457
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r14
movabs rbx, 0xf805d8e5
add rbx, 0x480371db; xor
=== 458
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1136
add rsp, 1136
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdx
mov rdi, r13
=== 459
mov r12, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rsi
mov al, byte ptr [rdx]
mov r8, 0xff
shl r8, 8
not r8
and r12, r8
movzx r8, al
shl r8, 8
or r12, r8
=== 460
mov rdi, r12
push rdi
mov r14, rsp
mov rsi, r12
=== 461
mov r11, r14
mov rbx, rsi
push r11
push 0x4cf97001
push 0x22a03423
push 0x69b850ab
=== 462
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov r12, rbx
movzx rdi, dil
=== 463
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r12
movabs r14, 0xedef1b88
add r14, 0x521a2f38; xor
=== 464
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1928
add rsp, 1928
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r10
mov rdi, rbx
=== 465
mov rdi, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r15
mov dl, byte ptr [r8]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and rdi, rbx
movzx rbx, dl
shl rbx, 0x10
or rdi, rbx
=== 466
mov rsi, rdi
push rsi
mov r14, rsp
mov r13, rdi
=== 467
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov rbp, r13
movzx r13, r13b
=== 468
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x13e1f3a9e
push r11
push 0x71922a9
push 0x1c814aeb
push 0x4353f4c
add qword ptr [rsp + 0x18], 0x1ea1022; xor
mov r12, rbp
=== 469
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 872
add rsp, 872
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov rbx, r12
=== 470
mov rdi, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov r10b, byte ptr [rax]
mov r14, 0xff
shl r14, 0x18
not r14
and rdi, r14
movzx r14, r10b
shl r14, 0x18
or rdi, r14
=== 471
mov r14, rdi
push r14
mov r15, rsp
mov rdi, rdi
=== 472
mov r15, r15
mov r14, rdi
push r15
push 0x685143ed
push 0x5dba751d
push 0x28f14011
push 0x112d371b
=== 473
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov rdi, r14
movzx r15, r15b
=== 474
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rdi
movabs rbp, 0xd783d0cf
add rbp, 0x688579f1; xor
=== 475
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov rbp, r15
=== 476
mov r14, rbp
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r14
mov r15b, byte ptr [r15]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and r14, rsi
movzx rsi, r15b
shl rsi, 0x30
or r14, rsi
=== 477
movabs r11, 0xf6954ee0
push r11
push 0x5efc0f87
push 0x62e15f84
push 0x29f714d9
push 0x471d5a83
add qword ptr [rsp + 0x20], 0x49f46a08; input
mov r13, r14
=== 478
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov rsi, r13
movzx r15, r15b
=== 479
mov rax, r15
mov r13, 0xffffffffe78ede2e
add r13, 0x190551b0
push r13
mov rbx, rsi
mul qword ptr [rsp]
mov r13, rax
=== 480
mov r12, rbx
xor r12, r13
=== 481
mov r13, r12
push r13
mov r14, rsp
mov rbx, r12
=== 482
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r12, rbx
movzx rbx, bl
=== 483
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xd527013e
add rdx, 0x6ae26182; add_carry
mov rdx, qword ptr [rdx + 0x770]
add rdx, rbx
mov bl, byte ptr [rdx]
movzx rbx, bl
shl rbx, 8
add r12, rbx
movabs rax, 0xdefd10ce
push rax
push 0x588c1d00
push 0x515b3e23
push 0x310d65a8
push 0x10706656
add qword ptr [rsp + 0x20], 0x610c49f2; add
mov rbp, r12
=== 484
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1904
add rsp, 1904
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r12
mov r14, rbp
=== 485
mov r14, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov r8b, byte ptr [r15]
mov r14b, r8b
=== 486
mov rcx, r14
push rcx
mov r15, rsp
mov rbx, r14
=== 487
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r15
mov r15, rbx
movzx r13, r13b
=== 488
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x12ed71c61
add rcx, 0x1132465f; add_carry
mov rcx, qword ptr [rcx + 0x128]
add rcx, r13
mov r8b, byte ptr [rcx]
movzx r8, r8b
shl r8, 0x10
add r15, r8
mov r15, r15
movabs r13, 0xccc60514
add r13, 0x734355ac; add
=== 489
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 296
add rsp, 296
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov r12, r15
=== 490
mov r13, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov dl, byte ptr [rdx]
mov r9, 0xff
shl r9, 8
not r9
and r13, r9
movzx r9, dl
shl r9, 8
or r13, r9
=== 491
mov r15, r13
push r15
mov r14, rsp
mov rsi, r13
=== 492
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov r13, rsi
movzx rsi, sil
=== 493
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x1308318c5
add r12, 0xf8649fb; add_carry
mov r12, qword ptr [r12 + 0x640]
add r12, rsi
mov r10b, byte ptr [r12]
movzx r10, r10b
shl r10, 0x18
add r13, r10
movabs rbp, 0xefcb0509
push rbp
push 0x222d3224
push 0x3cc33255
push 0x475819b6
push 0x4da178d0
add qword ptr [rsp + 0x20], 0x503e55b7; add
mov rsi, r13
=== 494
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1600
add rsp, 1600
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r12
mov rbp, rsi
=== 495
mov r14, rbp
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov sil, byte ptr [rcx]
mov r11, 0xff
shl r11, 0x10
not r11
and r14, r11
movzx r11, sil
shl r11, 0x10
or r14, r11
=== 496
mov rbx, r14
push rbx
mov rsi, rsp
mov rbp, r14
=== 497
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov rbp, rbp
movzx r13, r13b
=== 498
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xd0fcee16
add r15, 0x6f0c74aa; add_carry
mov r15, qword ptr [r15 + 0xa8]
add r15, r13
mov dl, byte ptr [r15]
movzx rdx, dl
shl rdx, 0x20
add rbp, rdx
movabs r11, 0x1328629e0
push r11
push 0x702c51f8
push 0x338722c6
push 0x3cd6570b
add qword ptr [rsp + 0x18], 0xd8330e0; add
mov rsi, rbp
=== 499
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 168
add rsp, 168
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r8
mov r12, rsi
=== 500
mov rdi, r12
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r13
mov r10b, byte ptr [rbp]
mov rax, 0xff
shl rax, 0x18
not rax
and rdi, rax
movzx rax, r10b
shl rax, 0x18
or rdi, rax
=== 501
mov rbp, rdi
push rbp
mov r14, rsp
mov r12, rdi
=== 502
mov r10, r14
mov r14, r12
push r10
push 0x20120c1a
push 0x4f806193
push 0x180e2e5d
=== 503
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov r13, r14
movzx rdi, dil
=== 504
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xfaf7185f
add rbp, 0x45124a61; add_carry
mov rbp, qword ptr [rbp]
add rbp, rdi
mov dil, byte ptr [rbp]
movzx rdi, dil
shl rdi, 0x28
add r13, rdi
mov r15, r13
movabs rsi, 0x134f42547
add rsi, 0xb153579; add
=== 505
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov rbx, r15
=== 506
mov rbx, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov r11b, byte ptr [r9]
mov r15, 0xff
shl r15, 0x20
not r15
and rbx, r15
movzx r15, r11b
shl r15, 0x20
or rbx, r15
=== 507
mov r8, rbx
push r8
mov rbx, rsp
mov r13, rbx
=== 508
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov r13, r13
movzx r12, r12b
=== 509
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xec2c08a0
add rbx, 0x53dd5a20; add_carry
mov rbx, qword ptr [rbx]
add rbx, r12
mov r10b, byte ptr [rbx]
movzx r10, r10b
shl r10, 0x30
add r13, r10
mov r15, r13
movabs r13, 0xc495e03b
add r13, 0x7b737a85; add
=== 510
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdi
mov rsi, r15
=== 511
mov r15, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov r13b, byte ptr [r14]
mov r12, 0xff
shl r12, 0x28
not r12
and r15, r12
movzx r12, r13b
shl r12, 0x28
or r15, r12
=== 512
mov rax, r15
push rax
mov r12, rsp
mov rbx, r15
=== 513
mov r15, r12
mov rdi, rbx
push r15
push 0x1214020b
push 0x28d240e
push 0x2c5259bd
push 0x72b10a7a
=== 514
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r14
mov rbx, rdi
movzx rsi, sil
=== 515
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rbx
movabs r14, 0x129ffe657
add r14, 0x16097469; add
=== 516
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rsi
mov r13, r13
=== 517
mov rdi, r13
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov bl, byte ptr [r10]
mov r13, 0xff
shl r13, 0x38
not r13
and rdi, r13
movzx r13, bl
shl r13, 0x38
or rdi, r13
=== 518
movabs rsi, 0x12d6a44c0
push rsi
push 0x61742ab5
push 0x4b0a73e2
push 0x292c42eb
push 0x3d446da6
add qword ptr [rsp + 0x20], 0x131f7428; input
mov rdi, rdi
=== 519
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 13
add rsp, 13
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
mov rbx, rdi
movzx rsi, sil
=== 520
mov rax, rsi
mov rbx, 0xffffffffe125093d
add rbx, 0x1fd92681
push rbx
mov r15, rbx
mul qword ptr [rsp]
mov rsi, rax
=== 521
mov r14, r15
sub r14, rsi
=== 522
mov r13, r14
push r13
mov rsi, rsp
mov r13, r14
=== 523
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov rbx, r13
movzx r15, r15b
=== 524
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x106f1f623
add rdi, 0x39176c9d; add_carry
mov rdi, qword ptr [rdi + 0x320]
add rdi, r15
mov dil, byte ptr [rdi]
movzx rdi, dil
shl rdi, 8
add rbx, rdi
movabs r13, 0x1389c1f12
push r13
push 0x50d5074a
push 0x4d9b017d
push 0x68137d31
push 0x38cb4c81
add qword ptr [rsp + 0x20], 0x76d3bae; add
mov r15, rbx
=== 525
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 800
add rsp, 800
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov rbx, r15
=== 526
mov r15, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov cl, byte ptr [rbp]
mov r15b, cl
=== 527
mov r14, r15
push r14
mov r14, rsp
mov rbx, r15
=== 528
mov r15, r14
mov r12, rbx
push r15
push 0x4fce46c5
push 0x2ed27439
push 0x3ec31425
push 0x29a03bc7
=== 529
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r15, r12
movzx rbx, bl
=== 530
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xcef5fad8
add rbx, 0x711367e8; add_carry
mov rbx, qword ptr [rbx + 0x158]
add rbx, rbx
mov cl, byte ptr [rbx]
movzx rcx, cl
shl rcx, 0x10
add r15, rcx
movabs r11, 0x12e313d8b
push r11
push 0x125426d7
push 0x20f506dd
push 0x31725586
add qword ptr [rsp + 0x18], 0x11d81d35; add
mov r14, r15
=== 531
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 344
add rsp, 344
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov rbx, r14
=== 532
mov r12, rbx
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov cl, byte ptr [r15]
mov r13, 0xff
shl r13, 8
not r13
and r12, r13
movzx r13, cl
shl r13, 8
or r12, r13
=== 533
mov rsi, r12
push rsi
mov r14, rsp
mov rsi, r12
=== 534
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r15
mov rdi, rsi
movzx r12, r12b
=== 535
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x126af4428
add rax, 0x195a1e98; add_carry
mov rax, qword ptr [rax + 0x340]
add rax, r12
mov r12b, byte ptr [rax]
movzx r12, r12b
shl r12, 0x18
add rdi, r12
movabs rax, 0xe087218c
push rax
push 0x4131d3b
push 0x3be819ae
push 0x396b27c9
push 0x120318c1
add qword ptr [rsp + 0x20], 0x5f823934; add
mov rbx, rdi
=== 536
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 832
add rsp, 832
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov r12, rbx
=== 537
mov rbp, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r14
mov dl, byte ptr [r10]
mov rcx, 0xff
shl rcx, 0x10
not rcx
and rbp, rcx
movzx rcx, dl
shl rcx, 0x10
or rbp, rcx
=== 538
mov r14, rbp
push r14
mov rdi, rsp
mov r14, rbp
=== 539
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rax
mov r15, r14
movzx rbx, bl
=== 540
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xd87f4014
add rdi, 0x678a22ac; add_carry
mov rdi, qword ptr [rdi + 0x6a8]
add rdi, rbx
mov r15b, byte ptr [rdi]
movzx r15, r15b
shl r15, 0x20
add r15, r15
mov r12, r15
movabs rbx, 0x10281db09
add rbx, 0x3d877fb7; add
=== 541
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1704
add rsp, 1704
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdi
mov rsi, r12
=== 542
mov r12, rsi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov r9b, byte ptr [r10]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r12, rsi
movzx rsi, r9b
shl rsi, 0x18
or r12, rsi
=== 543
mov r13, r12
push r13
mov r14, rsp
mov r12, r12
=== 544
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r11
mov r13, r12
movzx r12, r12b
=== 545
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x11fe53b3c
add rsi, 0x20242784; add_carry
mov rsi, qword ptr [rsi]
add rsi, r12
mov r14b, byte ptr [rsi]
movzx r14, r14b
shl r14, 0x28
add r13, r14
mov rdi, r13
movabs r14, 0x138dbf20d
add r14, 0x72d68b3; add
=== 546
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov r14, rdi
=== 547
mov rdi, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov r12b, byte ptr [r11]
mov r14, 0xff
shl r14, 0x20
not r14
and rdi, r14
movzx r14, r12b
shl r14, 0x20
or rdi, r14
=== 548
mov r12, rdi
push r12
mov rsi, rsp
mov r15, rdi
=== 549
mov r8, rsi
mov r14, r15
push r8
push 0x22a9096d
push 0x60fe6e1c
push 0x513f7897
=== 550
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov rbp, r14
movzx rdi, dil
=== 551
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xf94542df
add rsi, 0x46c41fe1; add_carry
mov rsi, qword ptr [rsi]
add rsi, rdi
mov r14b, byte ptr [rsi]
movzx r14, r14b
shl r14, 0x30
add rbp, r14
movabs r13, 0xfa270b7d
push r13
push 0x2da7234d
push 0x4d5d3377
push 0x21546fd8
push 0xea762a0
add qword ptr [rsp + 0x20], 0x45e24f43; add
mov rsi, rbp
=== 552
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov r13, rsi
=== 553
mov rbx, r13
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov dl, byte ptr [rcx]
mov r14, 0xff
shl r14, 0x28
not r14
and rbx, r14
movzx r14, dl
shl r14, 0x28
or rbx, r14
=== 554
mov r13, rbx
push r13
mov r14, rsp
mov r13, rbx
=== 555
mov r9, r14
mov r13, r13
push r9
push 0x1f447ef7
push 0x4dd33640
push 0x6b9e64f8
=== 556
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r11
mov rdi, r13
movzx r12, r12b
=== 557
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xc1ece2ec
push rsi
push 0x5c5b1f4a
push 0x24444d4a
push 0x15527b70
add qword ptr [rsp + 0x18], 0x7e1c77d4; add
mov r15, rdi
=== 558
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov r13, r15
=== 559
mov rbx, r13
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbp
mov dl, byte ptr [r8]
mov rcx, 0xff
shl rcx, 0x38
not rcx
and rbx, rcx
movzx rcx, dl
shl rcx, 0x38
or rbx, rcx
=== 560
mov r15, rbx
movabs rdi, 0x126afb4da
add rdi, 0x19da040e; input
=== 561
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 29
add rsp, 29
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov rdi, r15
movzx r13, r13b
=== 562
mov rax, r13
mov r11, 0xffffffffe61c883a
add r11, 0x1abb5cf5
push r11
mov rsi, rdi
mul qword ptr [rsp]
mov r13, rax
=== 563
mov rbx, rsi
sub rbx, r13
=== 564
mov rbx, rbx
push rbx
mov r14, rsp
mov r15, rbx
=== 565
mov r8, r14
mov r14, r15
push r8
push 0x33255ddc
push 0xea116b9
push 0x5c31182d
push 0x57f448ae
=== 566
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov rbx, r14
movzx r13, r13b
=== 567
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xc9a85f49
add r13, 0x76610377; add_carry
mov r13, qword ptr [r13 + 0xc0]
add r13, r13
mov r12b, byte ptr [r13]
movzx r12, r12b
shl r12, 8
add rbx, r12
mov r15, rbx
movabs rbp, 0xe20544e0
add rbp, 0x5e0415e0; add
=== 568
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 192
add rsp, 192
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r8
mov r13, r15
=== 569
mov r12, r13
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rdi
mov cl, byte ptr [r14]
mov r12b, cl
=== 570
mov rdx, r12
push rdx
mov r14, rsp
mov r13, r12
=== 571
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdi
mov rdi, r13
movzx rbp, bpl
=== 572
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x108112777
add rax, 0x37f83b49; add_carry
mov rax, qword ptr [rax + 0x680]
add rax, rbp
mov r8b, byte ptr [rax]
movzx r8, r8b
shl r8, 0x10
add rdi, r8
movabs r10, 0xedc2e7a1
push r10
push 0xdcd4efb
push 0x33606833
push 0x687e25ec
add qword ptr [rsp + 0x18], 0x5246731f; add
mov rbx, rdi
=== 573
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1664
add rsp, 1664
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov r15, rbx
=== 574
mov r13, r15
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbp
mov r10b, byte ptr [r12]
mov rbx, 0xff
shl rbx, 8
not rbx
and r13, rbx
movzx rbx, r10b
shl rbx, 8
or r13, rbx
=== 575
mov r14, r13
push r14
mov rsi, rsp
mov rbp, r13
=== 576
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r8
mov r13, rbp
movzx rbp, bpl
=== 577
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x115a151d2
add r13, 0x2a6810ee; add_carry
mov r13, qword ptr [r13 + 0x458]
add r13, rbp
mov r8b, byte ptr [r13]
movzx r8, r8b
shl r8, 0x18
add r13, r8
mov r13, r13
movabs r12, 0xd23905e5
add r12, 0x6dd054db; add
=== 578
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1112
add rsp, 1112
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov r15, r13
=== 579
mov r14, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbp
mov r8b, byte ptr [rbp]
mov r12, 0xff
shl r12, 0x10
not r12
and r14, r12
movzx r12, r8b
shl r12, 0x10
or r14, r12
=== 580
mov rax, r14
push rax
mov r12, rsp
mov r13, r14
=== 581
mov rax, r12
mov r13, r13
push rax
push 0x3cfc386d
push 0x6d6f5efb
push 0x29501a6e
=== 582
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r12
mov rbx, r13
movzx r14, r14b
=== 583
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xf3493f32
add r12, 0x4cc0238e; add_carry
mov r12, qword ptr [r12 + 0x3c8]
add r12, r14
mov r8b, byte ptr [r12]
movzx r8, r8b
shl r8, 0x20
add rbx, r8
mov r14, rbx
movabs r12, 0xc216e29f
add r12, 0x7df27821; add
=== 584
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 968
add rsp, 968
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov r12, r14
=== 585
mov r13, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov dl, byte ptr [rcx]
mov r9, 0xff
shl r9, 0x18
not r9
and r13, r9
movzx r9, dl
shl r9, 0x18
or r13, r9
=== 586
mov rsi, r13
push rsi
mov r15, rsp
mov r13, r13
=== 587
mov r12, r15
mov r15, r13
push r12
push 0x374b4081
push 0x1240702b
push 0x7d91892
=== 588
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov rbx, r15
movzx r12, r12b
=== 589
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x1240d393a
add rdx, 0x1bfc2986; add_carry
mov rdx, qword ptr [rdx]
add rdx, r12
mov cl, byte ptr [rdx]
movzx rcx, cl
shl rcx, 0x28
add rbx, rcx
mov r15, rbx
movabs rdi, 0x1396beea5
add rdi, 0x69d6c1b; add
=== 590
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov r13, r15
=== 591
mov r12, r13
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rdi
mov al, byte ptr [rbx]
mov rdx, 0xff
shl rdx, 0x20
not rdx
and r12, rdx
movzx rdx, al
shl rdx, 0x20
or r12, rdx
=== 592
mov rsi, r12
push rsi
mov rdi, rsp
mov r13, r12
=== 593
mov r11, rdi
mov rbp, r13
push r11
push 0x4e9135eb
push 0x4efe3c40
push 0x20f93b4d
=== 594
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov r14, rbp
movzx rbp, bpl
=== 595
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x105351339
add r14, 0x3ad44f87; add_carry
mov r14, qword ptr [r14]
add r14, rbp
mov r12b, byte ptr [r14]
movzx r12, r12b
shl r12, 0x38
add r14, r12
mov r12, r14
movabs rbx, 0xf7ed03ab
add rbx, 0x481c5715; add
=== 596
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov r12, r12
=== 597
mov r15, r12
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov r14b, byte ptr [rax]
mov r13, 0xff
shl r13, 0x30
not r13
and r15, r13
movzx r13, r14b
shl r13, 0x30
or r15, r13
=== 598
mov r12, r15
movabs rsi, 0x12089b63d
add rsi, 0x200002ab; input
=== 599
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 25
add rsp, 25
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov r15, r12
movzx r14, r14b
=== 600
mov rax, r14
mov rdi, 0xffffffffd28e25ab
add rdi, 0x2e5629bf
push rdi
mov rbx, r15
mul qword ptr [rsp]
mov r12, rax
=== 601
mov rdi, rbx
xor rdi, r12
=== 602
mov rdi, rdi
push rdi
mov rbx, rsp
mov rsi, rdi
=== 603
mov r9, rbx
mov rdi, rsi
push r9
push 0x1bed6dd4
push 0x5e53400f
push 0x25a61bb
=== 604
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r15
mov r12, rdi
movzx rbp, bpl
=== 605
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x114d2145e
add rax, 0x2b375e62; sub_carry
mov rax, qword ptr [rax + 0x1f0]
add rax, rbp
mov sil, byte ptr [rax]
movzx rsi, sil
shl rsi, 8
sub r12, rsi
movabs rdi, 0x1005929cc
push rdi
push 0x2fda4420
push 0x145250bc
push 0x61c01f91
add qword ptr [rsp + 0x18], 0x3fb040f4; sub
mov rsi, r12
=== 606
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 496
add rsp, 496
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbp
mov r13, rsi
=== 607
mov rbx, r13
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rsi
mov cl, byte ptr [r14]
mov bl, cl
=== 608
mov r15, rbx
push r15
mov r14, rsp
mov r13, rbx
=== 609
mov r9, r14
mov r15, r13
push r9
push 0x3b505599
push 0x27666999
push 0x42a01f32
=== 610
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r8
mov r15, r15
movzx rbx, bl
=== 611
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xf86efd47
add rax, 0x479a7579; sub_carry
mov rax, qword ptr [rax + 0x290]
add rax, rbx
mov r15b, byte ptr [rax]
movzx r15, r15b
shl r15, 0x10
sub r15, r15
mov rbp, r15
movabs r14, 0xf2960786
add r14, 0x4d73633a; sub
=== 612
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 656
add rsp, 656
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov r15, rbp
=== 613
mov r13, r15
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov bl, byte ptr [r10]
mov rax, 0xff
shl rax, 8
not rax
and r13, rax
movzx rax, bl
shl rax, 8
or r13, rax
=== 614
mov r12, r13
push r12
mov r12, rsp
mov rsi, r13
=== 615
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov r12, rsi
movzx rsi, sil
=== 616
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xebc8fde1
add rcx, 0x544074df; sub_carry
mov rcx, qword ptr [rcx + 0x368]
add rcx, rsi
mov bpl, byte ptr [rcx]
movzx rbp, bpl
shl rbp, 0x18
sub r12, rbp
movabs rsi, 0xdc00636b
push rsi
push 0x4d305606
push 0x5f921000
push 0x7b903609
add qword ptr [rsp + 0x18], 0x64090755; sub
mov rbx, r12
=== 617
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 872
add rsp, 872
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov r14, rbx
=== 618
mov r12, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rsi
mov r8b, byte ptr [r15]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and r12, rsi
movzx rsi, r8b
shl rsi, 0x10
or r12, rsi
=== 619
mov rbx, r12
push rbx
mov r12, rsp
mov r15, r12
=== 620
mov r11, r12
mov r14, r15
push r11
push 0x5c4f6f5f
push 0x2d8d3fb6
push 0x9eb17ce
push 0x41e97839
=== 621
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov rsi, r14
movzx rbx, bl
=== 622
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xf921199f
add r15, 0x46e85921; sub_carry
mov r15, qword ptr [r15 + 0x730]
add r15, rbx
mov r8b, byte ptr [r15]
movzx r8, r8b
shl r8, 0x20
sub rsi, r8
movabs rbx, 0x13f840976
push rbx
push 0x39f5753
push 0x7c9b4206
push 0x7b836c6b
push 0x23cb5c7f
add qword ptr [rsp + 0x20], 0x85614a; sub
mov r13, rsi
=== 623
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1840
add rsp, 1840
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdx
mov rbp, r13
=== 624
mov rsi, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r15
mov r15b, byte ptr [r10]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and rsi, rdi
movzx rdi, r15b
shl rdi, 0x18
or rsi, rdi
=== 625
mov rax, rsi
push rax
mov rbx, rsp
mov r13, rsi
=== 626
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbp
mov r12, r13
movzx rsi, sil
=== 627
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x1004a22bc
add r12, 0x3fbf5004; sub_carry
mov r12, qword ptr [r12]
add r12, rsi
mov cl, byte ptr [r12]
movzx rcx, cl
shl rcx, 0x30
sub r12, rcx
movabs r14, 0x114201603
push r14
push 0x23c9701c
push 0x60722fa0
push 0xcff3626
push 0x23f307de
add qword ptr [rsp + 0x20], 0x2be954bd; sub
mov rbp, r12
=== 628
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov r15, rbp
=== 629
mov rdi, r15
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r14
mov bpl, byte ptr [r12]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and rdi, rdx
movzx rdx, bpl
shl rdx, 0x28
or rdi, rdx
=== 630
mov r15, rdi
push r15
mov rsi, rsp
mov r15, rdi
=== 631
mov r8, rsi
mov r14, r15
push r8
push 0x5f1333c4
push 0x9d058dc
push 0x58ac27b7
=== 632
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdi
mov rbp, r14
movzx rdi, dil
=== 633
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x10fa70a55
add rbx, 0x3062686b; sub_carry
mov rbx, qword ptr [rbx]
add rbx, rdi
mov al, byte ptr [rbx]
movzx rax, al
shl rax, 0x38
sub rbp, rax
mov r12, rbp
movabs r13, 0xef7231ec
add r13, 0x509738d4; sub
=== 634
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov rbx, r12
=== 635
mov r15, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov dl, byte ptr [rbp]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and r15, rsi
movzx rsi, dl
shl rsi, 0x30
or r15, rsi
=== 636
movabs rbp, 0xcedcb6b4
push rbp
push 0x20173a61
push 0x7c225ff0
push 0x25d24849
push 0x34245970
add qword ptr [rsp + 0x20], 0x71ad0234; input
mov r12, r15
=== 637
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 9
add rsp, 9
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov r13, r12
movzx rbp, bpl
=== 638
mov rax, rbp
mov r8, 0xffffffffeafc63a6
add r8, 0x15b30e30
push r8
mov r12, r13
mul qword ptr [rsp]
mov rdi, rax
=== 639
mov rbp, r12
add rbp, rdi
=== 640
mov rdi, rbp
push rdi
mov rdi, rsp
mov r15, rbp
=== 641
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbx
mov rbp, r15
movzx r14, r14b
=== 642
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xd8b31a84
add r15, 0x6756483c; add_carry
mov r15, qword ptr [r15 + 0x698]
add r15, r14
mov r8b, byte ptr [r15]
movzx r8, r8b
shl r8, 8
add rbp, r8
movabs r12, 0xc5f31509
push r12
push 0x9ba43c6
push 0x2d180887
push 0x7d8963ac
push 0x5cbd6f25
add qword ptr [rsp + 0x20], 0x7a1645b7; add
mov r12, rbp
=== 643
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1688
add rsp, 1688
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r13
mov r13, r12
=== 644
mov r15, r13
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov r14b, byte ptr [r10]
mov r15b, r14b
=== 645
mov rdi, r15
push rdi
mov r12, rsp
mov r14, r15
=== 646
mov rbx, r12
mov r12, r14
push rbx
push 0x766479c8
push 0x2df52785
push 0x7882611a
push 0x73e305fe
=== 647
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov r15, r12
movzx r13, r13b
=== 648
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x1064a02a6
add r11, 0x39bf601a; add_carry
mov r11, qword ptr [r11 + 0x110]
add r11, r13
mov sil, byte ptr [r11]
movzx rsi, sil
shl rsi, 0x10
add r15, rsi
mov rbx, r15
movabs r14, 0x10e2c2059
add r14, 0x31dd3a67; add
=== 649
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 272
add rsp, 272
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r14
mov rsi, rbx
=== 650
mov rbx, rsi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov al, byte ptr [rcx]
mov rsi, 0xff
shl rsi, 8
not rsi
and rbx, rsi
movzx rsi, al
shl rsi, 8
or rbx, rsi
=== 651
mov r14, rbx
push r14
mov rdi, rsp
mov r12, rbx
=== 652
mov r13, rdi
mov r15, r12
push r13
push 0x19af24ee
push 0x4e9c5c20
push 0x3f0835f1
push 0x71b17a73
=== 653
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdi
mov rsi, r15
movzx rdi, dil
=== 654
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x10b713b58
add rax, 0x34982768; add_carry
mov rax, qword ptr [rax + 0x88]
add rax, rdi
mov sil, byte ptr [rax]
movzx rsi, sil
shl rsi, 0x18
add rsi, rsi
mov r15, rsi
movabs r14, 0x10391ec59
add r14, 0x3c776e67; add
=== 655
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 136
add rsp, 136
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbx
mov r12, r15
=== 656
mov r15, r12
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov r13b, byte ptr [r14]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and r15, rbp
movzx rbp, r13b
shl rbp, 0x10
or r15, rbp
=== 657
mov r14, r15
push r14
mov rsi, rsp
mov r13, r15
=== 658
mov rcx, rsi
mov rdi, r13
push rcx
push 0x12219ce
push 0x506a552c
push 0x74c7784b
=== 659
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r13
mov rdi, rdi
movzx rbp, bpl
=== 660
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x121a7ed5b
add rdi, 0x1e617565; add_carry
mov rdi, qword ptr [rdi + 0x490]
add rdi, rbp
mov cl, byte ptr [rdi]
movzx rcx, cl
shl rcx, 0x20
add rdi, rcx
mov rbx, rdi
movabs rsi, 0xf3ddf270
add rsi, 0x4c2b6850; add
=== 661
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1168
add rsp, 1168
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov r12, rbx
=== 662
mov rbx, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov dil, byte ptr [rcx]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and rbx, rsi
movzx rsi, dil
shl rsi, 0x18
or rbx, rsi
=== 663
mov r15, rbx
push r15
mov rbx, rsp
mov r14, rbx
=== 664
mov r12, rbx
mov rbp, r14
push r12
push 0xe645227
push 0x73de794e
push 0x14a43b5
=== 665
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov r14, rbp
movzx rbx, bl
=== 666
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xe275f620
add rdx, 0x5d936ca0; add_carry
mov rdx, qword ptr [rdx]
add rdx, rbx
mov r11b, byte ptr [rdx]
movzx r11, r11b
shl r11, 0x28
add r14, r11
mov rsi, r14
movabs rbp, 0xca32de92
add rbp, 0x75d67c2e; add
=== 667
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rax
mov r14, rsi
=== 668
mov rbp, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov r12b, byte ptr [r8]
mov rax, 0xff
shl rax, 0x20
not rax
and rbp, rax
movzx rax, r12b
shl rax, 0x20
or rbp, rax
=== 669
mov rcx, rbp
push rcx
mov r12, rsp
mov rsi, rbp
=== 670
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov r14, rsi
movzx rbx, bl
=== 671
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xc4a216ed
add rdx, 0x7b674bd3; add_carry
mov rdx, qword ptr [rdx]
add rdx, rbx
mov r11b, byte ptr [rdx]
movzx r11, r11b
shl r11, 0x30
add r14, r11
mov rbp, r14
movabs r12, 0xf3e7ee19
add r12, 0x4c216ca7; add
=== 672
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov r13, rbp
=== 673
mov rbp, r13
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov sil, byte ptr [r11]
mov r10, 0xff
shl r10, 0x28
not r10
and rbp, r10
movzx r10, sil
shl r10, 0x28
or rbp, r10
=== 674
mov rbx, rbp
push rbx
mov r15, rsp
mov r14, rbp
=== 675
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov rbp, r14
movzx rbx, bl
=== 676
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x118333c43
push rdx
push 0x21b842df
push 0x66b035bd
push 0xfe550c6
add qword ptr [rsp + 0x18], 0x27d61e7d; add
mov r14, rbp
=== 677
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r15
mov r12, r14
=== 678
mov rbp, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r14
mov dl, byte ptr [r13]
mov r9, 0xff
shl r9, 0x38
not r9
and rbp, r9
movzx r9, dl
shl r9, 0x38
or rbp, r9
=== 679
mov rbx, rbp
push rbx
mov rsi, rsp
mov r13, rbp
=== 680
mov rsi, rsi
mov rbp, r13
push rsi
push 0x3f8b5a69
push 0xbd0ba7
push 0x5aeb716f
=== 681
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r15
mov rbx, rbp
movzx r13, r13b
=== 682
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x11c863b33
add r12, 0x2383378d; sub_carry
mov r12, qword ptr [r12 + 0x570]
add r12, r13
mov r8b, byte ptr [r12]
movzx r8, r8b
shl r8, 8
sub rbx, r8
movabs rbp, 0x136d03c64
push rbp
push 0x41386b9b
push 0x5ad30908
push 0x3c872031
add qword ptr [rsp + 0x18], 0x9392e5c; sub
mov rbx, rbx
=== 683
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1392
add rsp, 1392
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov rbp, rbx
=== 684
mov r14, rbp
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r15
mov bl, byte ptr [rsi]
mov r14b, bl
=== 685
mov r14, r14
push r14
mov r15, rsp
mov rbp, r14
=== 686
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov rsi, rbp
movzx rbx, bl
=== 687
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x10d1058e7
add rax, 0x32f919d9; sub_carry
mov rax, qword ptr [rax + 0x458]
add rax, rbx
mov r10b, byte ptr [rax]
movzx r10, r10b
shl r10, 0x10
sub rsi, r10
movabs rsi, 0x133e207ae
push rsi
push 0x78a44cbe
push 0x49a3085d
push 0x284a7474
push 0x12fa3419
add qword ptr [rsp + 0x20], 0xc276312; sub
mov rsi, rsi
=== 688
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1112
add rsp, 1112
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdi
mov rdi, rsi
=== 689
mov rbp, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov r15b, byte ptr [rdx]
mov rdi, 0xff
shl rdi, 8
not rdi
and rbp, rdi
movzx rdi, r15b
shl rdi, 8
or rbp, rdi
=== 690
mov r13, rbp
push r13
mov rbx, rsp
mov rsi, rbp
=== 691
mov r8, rbx
mov rdi, rsi
push r8
push 0x6dc53b3d
push 0x1df36977
push 0xcf72577
push 0x16d85334
=== 692
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov r12, rdi
movzx r14, r14b
=== 693
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xdf0c5619
add r10, 0x60fd1ca7; sub_carry
mov r10, qword ptr [r10 + 0xa0]
add r10, r14
mov dil, byte ptr [r10]
movzx rdi, dil
shl rdi, 0x18
sub r12, rdi
movabs r15, 0x12140ee2c
push r15
push 0x735b7ab0
push 0x1fab2862
push 0x4d605c66
add qword ptr [rsp + 0x18], 0x1ec87c94; sub
mov rsi, r12
=== 694
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 160
add rsp, 160
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbx
mov r13, rsi
=== 695
mov r14, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rsi
mov al, byte ptr [r15]
mov rdx, 0xff
shl rdx, 0x10
not rdx
and r14, rdx
movzx rdx, al
shl rdx, 0x10
or r14, rdx
=== 696
mov r15, r14
push r15
mov rbp, rsp
mov rdi, r14
=== 697
mov r12, rbp
mov rsi, rdi
push r12
push 0x4c533ed2
push 0x20ee49d6
push 0x3e7f27af
=== 698
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov rbp, rsi
movzx r14, r14b
=== 699
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x109bf20af
add r14, 0x364a5211; sub_carry
mov r14, qword ptr [r14 + 0x708]
add r14, r14
mov r15b, byte ptr [r14]
movzx r15, r15b
shl r15, 0x20
sub rbp, r15
mov r15, rbp
movabs rdi, 0x1382512f6
add rdi, 0x7e457ca; sub
=== 700
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1800
add rsp, 1800
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rcx
mov r14, r15
=== 701
mov rbp, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov cl, byte ptr [r11]
mov r11, 0xff
shl r11, 0x18
not r11
and rbp, r11
movzx r11, cl
shl r11, 0x18
or rbp, r11
=== 702
mov r11, rbp
push r11
mov r15, rsp
mov r13, rbp
=== 703
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov rsi, r13
movzx r14, r14b
=== 704
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xe7bc19bb
add rbp, 0x584d5905; sub_carry
mov rbp, qword ptr [rbp]
add rbp, r14
mov dl, byte ptr [rbp]
movzx rdx, dl
shl rdx, 0x28
sub rsi, rdx
movabs r11, 0x114bb2a72
push r11
push 0x6ecb4a73
push 0x580d55dc
push 0x3c95503d
push 0x71901cc4
add qword ptr [rsp + 0x20], 0x2b4e404e; sub
mov rbp, rsi
=== 705
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov rbx, rbp
=== 706
mov rsi, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov r9b, byte ptr [rcx]
mov r13, 0xff
shl r13, 0x20
not r13
and rsi, r13
movzx r13, r9b
shl r13, 0x20
or rsi, r13
=== 707
mov r11, rsi
push r11
mov r13, rsp
mov rsi, rsi
=== 708
mov r11, r13
mov rbx, rsi
push r11
push 0x540e69a4
push 0x60c05cdc
push 0x193d56d7
push 0x57697c28
=== 709
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rax
mov rbx, rbx
movzx rsi, sil
=== 710
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rbx
movabs r12, 0xe00c28ed
add r12, 0x5ffd29d3; or
=== 711
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdx
mov rbp, r14
=== 712
mov r14, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov r8b, byte ptr [r10]
mov r14b, r8b
=== 713
mov r14, r14
push r14
mov rbp, rsp
mov rsi, r14
=== 714
mov rcx, rbp
mov r14, rsi
push rcx
push 0x29a07e01
push 0x68175e40
push 0xb5428de
push 0x665e3a80
=== 715
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbp
mov r13, r14
movzx rdi, dil
=== 716
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xdd5be250
push r10
push 0x3b3e0453
push 0x5d0d741d
push 0x62882242
add qword ptr [rsp + 0x18], 0x62ad7070; or
mov rdi, r13
=== 717
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r9
mov rsi, rdi
=== 718
mov rdi, rsi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rdi
mov sil, byte ptr [r12]
mov r8, 0xff
shl r8, 0x20
not r8
and rdi, r8
movzx r8, sil
shl r8, 0x20
or rdi, r8
=== 719
mov rdi, rdi
push rdi
mov r13, rsp
mov rbx, rdi
=== 720
mov r13, r13
mov r15, rbx
push r13
push 0x55b87854
push 0x31c81497
push 0x4a936ff7
=== 721
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r10
mov r14, r15
movzx rbp, bpl
=== 722
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, r14
movabs r13, 0x136a40522
add r13, 0x9654d9e; or
=== 723
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r14
mov r15, rdi
=== 724
mov rsi, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov al, byte ptr [rax]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and rsi, rdx
movzx rdx, al
shl rdx, 0x28
or rsi, rdx
=== 725
mov rbx, rsi
movabs r12, 0x129c1eecf
add r12, 0x163e2321
test rbx, rbx
lea rbp, [rip - 0x301695]
cmovne rbp, r12
jmp rbp
=== 726
movabs r15, 0xc9c7718b
add r15, 0x76c2475d; input
=== 727
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 10
add rsp, 10
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
movzx r12, r12b
=== 728
mov rax, r12
mov rbx, 0xffffffffd5d48854
add rbx, 0x2a743cac
push rbx
mul qword ptr [rsp]
mov rsi, rax
=== 729
mov rax, rsi
push rax
mov rsi, rsp
mov rbp, rsi
=== 730
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdi
mov r12, rbp
movzx rbp, bpl
=== 731
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xe2f161c6
add r14, 0x5d1810fa; sub_carry
mov r14, qword ptr [r14 + 0x5e0]
add r14, rbp
mov r15b, byte ptr [r14]
movzx r15, r15b
shl r15, 8
sub r12, r15
mov r13, r12
movabs rbp, 0x13cfd5ed8
add rbp, 0x30c0be8; sub
=== 732
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1504
add rsp, 1504
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdx
mov rsi, r13
=== 733
mov rdi, rsi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbx
mov r11b, byte ptr [rdx]
mov dil, r11b
=== 734
mov rbp, rdi
push rbp
mov r12, rsp
mov rbx, rdi
=== 735
mov r11, r12
mov r15, rbx
push r11
push 0x1f2108a9
push 0x661256e2
push 0x707f5d56
push 0x2c2c6c69
=== 736
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r14
mov r12, r15
movzx rbp, bpl
=== 737
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x13a473550
add rsi, 0x5c23d70; sub_carry
mov rsi, qword ptr [rsi + 0x508]
add rsi, rbp
mov al, byte ptr [rsi]
movzx rax, al
shl rax, 0x10
sub r12, rax
movabs r13, 0xded248db
push r13
push 0xedf077f
push 0x4af95543
push 0x6ced33e5
push 0x790d7aa1
add qword ptr [rsp + 0x20], 0x613721e5; sub
mov rsi, r12
=== 738
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1288
add rsp, 1288
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r13
mov rbx, rsi
=== 739
mov rbp, rbx
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r14
mov r10b, byte ptr [r12]
mov rcx, 0xff
shl rcx, 8
not rcx
and rbp, rcx
movzx rcx, r10b
shl rcx, 8
or rbp, rcx
=== 740
mov r14, rbp
push r14
mov r15, rsp
mov rbp, rbp
=== 741
mov rcx, r15
mov r14, rbp
push rcx
push 0x3f480cdc
push 0x53190f7f
push 0x38e76b7e
=== 742
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov rdi, r14
movzx rsi, sil
=== 743
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x1194f0abf
add r10, 0x26ba6801; sub_carry
mov r10, qword ptr [r10 + 0x6d0]
add r10, rsi
mov r8b, byte ptr [r10]
movzx r8, r8b
shl r8, 0x18
sub rdi, r8
mov r14, rdi
movabs r12, 0xdcc63193
add r12, 0x6343392d; sub
=== 744
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1744
add rsp, 1744
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rsi
mov r13, r14
=== 745
mov rdi, r13
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov cl, byte ptr [rbp]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and rdi, rbx
movzx rbx, cl
shl rbx, 0x10
or rdi, rbx
=== 746
mov rcx, rdi
push rcx
mov r14, rsp
mov r13, rdi
=== 747
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov rbp, r13
movzx rbx, bl
=== 748
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x10b0a21e9
add r14, 0x34ff50d7; sub_carry
mov r14, qword ptr [r14 + 0x478]
add r14, rbx
mov al, byte ptr [r14]
movzx rax, al
shl rax, 0x20
sub rbp, rax
movabs r10, 0xd1f8f598
push r10
push 0x78ba4d30
push 0x1e40680a
push 0x5048215b
push 0x60b057ec
add qword ptr [rsp + 0x20], 0x6e107528; sub
mov r15, rbp
=== 749
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1144
add rsp, 1144
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbp
mov rdi, r15
=== 750
mov r15, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r13
mov dl, byte ptr [rcx]
mov rax, 0xff
shl rax, 0x18
not rax
and r15, rax
movzx rax, dl
shl rax, 0x18
or r15, rax
=== 751
mov r15, r15
push r15
mov rbx, rsp
mov rdi, r15
=== 752
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov rbx, rdi
movzx rsi, sil
=== 753
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xcb3d2f50
add r8, 0x74cc4370; sub_carry
mov r8, qword ptr [r8]
add r8, rsi
mov r15b, byte ptr [r8]
movzx r15, r15b
shl r15, 0x38
sub rbx, r15
mov r12, rbx
movabs r15, 0xfd8036e8
add r15, 0x428933d8; sub
=== 754
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdx
mov r12, r12
=== 755
mov rsi, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov r14b, byte ptr [r11]
mov r15, 0xff
shl r15, 0x30
not r15
and rsi, r15
movzx r15, r14b
shl r15, 0x30
or rsi, r15
=== 756
mov r12, rsi
push r12
mov r14, rsp
mov rdi, rsi
=== 757
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov r13, rdi
movzx r12, r12b
=== 758
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x12c7f63b6
push r14
push 0x7e723bcc
push 0x3a23562e
push 0xdd22e37
add qword ptr [rsp + 0x18], 0x138a070a; sub
mov r13, r13
=== 759
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov r12, r13
=== 760
mov rdi, r12
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r14
mov bpl, byte ptr [rbx]
mov r13, 0xff
shl r13, 0x38
not r13
and rdi, r13
movzx r13, bpl
shl r13, 0x38
or rdi, r13
=== 761
movabs rbp, 0xd30044ba
push rbp
push 0x202f69c1
push 0xba20fcf
push 0x65796dc6
add qword ptr [rsp + 0x18], 0x6d89742e; input
mov rbp, rdi
=== 762
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 30
add rsp, 30
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov r15, rbp
movzx r12, r12b
=== 763
mov rax, r12
mov r13, 0xffffffffb5770d2b
add r13, 0x4a9e1b5c
push r13
mov r14, r15
mul qword ptr [rsp]
mov r12, rax
=== 764
mov r15, r14
sub r15, r12
=== 765
mov rcx, r15
push rcx
mov rsi, rsp
mov r13, r15
=== 766
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov rdi, r13
movzx rsi, sil
=== 767
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x126c26253
add rbx, 0x1947006d; add_carry
mov rbx, qword ptr [rbx + 0x240]
add rbx, rsi
mov r11b, byte ptr [rbx]
movzx r11, r11b
shl r11, 8
add rdi, r11
mov rsi, rdi
movabs r13, 0x13b5d041d
add r13, 0x4ac56a3; add
=== 768
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 576
add rsp, 576
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r10
mov rbp, rsi
=== 769
mov rbx, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov bpl, byte ptr [r8]
mov bl, bpl
=== 770
mov r10, rbx
push r10
mov rsi, rsp
mov r12, rbx
=== 771
mov rbp, rsi
mov r15, r12
push rbp
push 0x7b593acf
push 0x4dbb7597
push 0x40004169
=== 772
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov rsi, r15
movzx r15, r15b
=== 773
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x11c19fdf7
add rdi, 0x23ef64c9; add_carry
mov rdi, qword ptr [rdi + 0x270]
add rdi, r15
mov sil, byte ptr [rdi]
movzx rsi, sil
shl rsi, 0x10
add rsi, rsi
mov rbp, rsi
movabs rdi, 0x11915e70b
add rdi, 0x26f373b5; add
=== 774
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 624
add rsp, 624
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdi
mov r13, rbp
=== 775
mov rdi, r13
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov r12b, byte ptr [r10]
mov rbx, 0xff
shl rbx, 8
not rbx
and rdi, rbx
movzx rbx, r12b
shl rbx, 8
or rdi, rbx
=== 776
mov r13, rdi
push r13
mov r12, rsp
mov r15, rdi
=== 777
mov rdi, r12
mov r15, r15
push rdi
push 0x7d276ff2
push 0x71227e9f
push 0xc821e46
push 0x6f3a1f4d
=== 778
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov r13, r15
movzx rbp, bpl
=== 779
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x134372c6d
add r13, 0xbd23653; add_carry
mov r13, qword ptr [r13 + 0x780]
add r13, rbp
mov r13b, byte ptr [r13]
movzx r13, r13b
shl r13, 0x18
add r13, r13
mov r13, r13
movabs r14, 0xcbe4fc90
add r14, 0x74245e30; add
=== 780
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1920
add rsp, 1920
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov rdi, r13
=== 781
mov rbx, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r13
mov r11b, byte ptr [rax]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and rbx, rsi
movzx rsi, r11b
shl rsi, 0x10
or rbx, rsi
=== 782
mov r13, rbx
push r13
mov rbx, rsp
mov rdi, rbx
=== 783
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov r13, rdi
movzx r12, r12b
=== 784
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x11bdb216b
add rcx, 0x242e4155; add_carry
mov rcx, qword ptr [rcx + 0x328]
add rcx, r12
mov r10b, byte ptr [rcx]
movzx r10, r10b
shl r10, 0x20
add r13, r10
mov r13, r13
movabs r12, 0xc82842c9
add r12, 0x77e117f7; add
=== 785
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 808
add rsp, 808
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov rsi, r13
=== 786
mov rbx, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov r13b, byte ptr [r9]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and rbx, rsi
movzx rsi, r13b
shl rsi, 0x18
or rbx, rsi
=== 787
mov r10, rbx
push r10
mov rbx, rsp
mov r14, rbx
=== 788
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov r15, r14
movzx r12, r12b
=== 789
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xfbc34068
add r15, 0x44462258; add_carry
mov r15, qword ptr [r15]
add r15, r12
mov dil, byte ptr [r15]
movzx rdi, dil
shl rdi, 0x28
add r15, rdi
mov rdi, r15
movabs r12, 0xc7cfe259
add r12, 0x78397867; add
=== 790
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov rbp, rdi
=== 791
mov rbx, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov r12b, byte ptr [rax]
mov r11, 0xff
shl r11, 0x20
not r11
and rbx, r11
movzx r11, r12b
shl r11, 0x20
or rbx, r11
=== 792
mov r13, rbx
push r13
mov rsi, rsp
mov r15, rbx
=== 793
mov rax, rsi
mov rsi, r15
push rax
push 0x63a91509
push 0x663d47b5
push 0x38093b4f
=== 794
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rax
mov rbp, rsi
movzx rbx, bl
=== 795
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xdc99fa2a
add r8, 0x636f6896; add_carry
mov r8, qword ptr [r8]
add r8, rbx
mov dl, byte ptr [r8]
movzx rdx, dl
shl rdx, 0x38
add rbp, rdx
movabs rsi, 0x126d3efe1
push rsi
push 0x14aa0b0d
push 0x29ea1958
push 0x64e552d5
push 0x649f0210
add qword ptr [rsp + 0x20], 0x19356adf; add
mov r12, rbp
=== 796
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdi
mov rbp, r12
=== 797
mov r15, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov r13b, byte ptr [rax]
mov r10, 0xff
shl r10, 0x30
not r10
and r15, r10
movzx r10, r13b
shl r10, 0x30
or r15, r10
=== 798
movabs rdi, 0x135575442
push rdi
push 0x4ffa4f65
push 0x9c2489d
push 0x4aed369a
push 0x66dd3030
add qword ptr [rsp + 0x20], 0xb3264a6; input
mov r15, r15
=== 799
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 14
add rsp, 14
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdi
mov r14, r15
movzx rbp, bpl
=== 800
mov rax, rbp
mov r10, 0xffffffffae1736b7
add r10, 0x52930b90
push r10
mov r14, r14
mul qword ptr [rsp]
mov rdi, rax
=== 801
mov rsi, r14
sub rsi, rdi
=== 802
mov r15, rsi
push r15
mov r14, rsp
mov rbx, rsi
=== 803
mov r14, r14
mov r15, rbx
push r14
push 0xebe7c53
push 0x717d6bc7
push 0x6c723cdb
push 0x15d57fcb
=== 804
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov rbx, r15
movzx r13, r13b
=== 805
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xdcf2d995
push rdx
push 0x5ba07d51
push 0x2aff02e2
push 0x69a6ba8
add qword ptr [rsp + 0x18], 0x6316712b; xor
mov rbp, rbx
=== 806
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 840
add rsp, 840
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov rbx, rbp
=== 807
mov rdi, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov r8b, byte ptr [rbp]
mov dil, r8b
=== 808
mov rbp, rdi
push rbp
mov rdi, rsp
mov rbx, rdi
=== 809
mov rbx, rdi
mov rbp, rbx
push rbx
push 0x584f1c25
push 0x57d7243e
push 0x7cd16ccf
push 0x4e46111e
=== 810
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov r13, rbp
movzx r12, r12b
=== 811
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x11e31f5bd
push rbx
push 0x8494973
push 0x64cb4af7
push 0x6e301369
push 0x40b258da
add qword ptr [rsp + 0x20], 0x21d75503; xor
mov r14, r13
=== 812
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1888
add rsp, 1888
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r12
mov rsi, r14
=== 813
mov rdi, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r13
mov r10b, byte ptr [r14]
mov rcx, 0xff
shl rcx, 8
not rcx
and rdi, rcx
movzx rcx, r10b
shl rcx, 8
or rdi, rcx
=== 814
mov r11, rdi
push r11
mov rdi, rsp
mov r12, rdi
=== 815
mov r8, rdi
mov r15, r12
push r8
push 0x60a01b94
push 0x4b0a23bf
push 0x430c4ce6
push 0x16194e73
=== 816
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov r13, r15
movzx rbp, bpl
=== 817
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x10d350fb7
push r15
push 0x2d33276a
push 0x17844aea
push 0x1fde67a7
add qword ptr [rsp + 0x18], 0x32d43b09; xor
mov r12, r13
=== 818
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 792
add rsp, 792
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov rdi, r12
=== 819
mov r12, rdi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r13
mov r14b, byte ptr [r15]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r12, rdi
movzx rdi, r14b
shl rdi, 0x10
or r12, rdi
=== 820
mov r10, r12
push r10
mov rbp, rsp
mov r14, r12
=== 821
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov r14, r14
movzx r13, r13b
=== 822
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xf5511b2c
push rsi
push 0x7ab87267
push 0x63b26398
push 0x19a532a9
add qword ptr [rsp + 0x18], 0x4ab82f94; xor
mov r15, r14
=== 823
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 488
add rsp, 488
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov r14, r15
=== 824
mov r13, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov al, byte ptr [r11]
mov r14, 0xff
shl r14, 0x18
not r14
and r13, r14
movzx r14, al
shl r14, 0x18
or r13, r14
=== 825
mov r11, r13
push r11
mov r14, rsp
mov r12, r13
=== 826
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov rsi, r12
movzx r15, r15b
=== 827
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rsi
movabs rsi, 0xf27e206b
add rsi, 0x4d8b2a55; xor
=== 828
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbp
mov rdi, rbx
=== 829
mov rdi, rdi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rsi
mov al, byte ptr [rbx]
mov rbx, 0xff
shl rbx, 0x28
not rbx
and rdi, rbx
movzx rbx, al
shl rbx, 0x28
or rdi, rbx
=== 830
mov rbx, rdi
push rbx
mov rbx, rsp
mov rsi, rdi
=== 831
mov r9, rbx
mov rdi, rsi
push r9
push 0x65a10567
push 0x36cc3d14
push 0x1cac501d
push 0x1438361a
=== 832
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov rbp, rdi
movzx r14, r14b
=== 833
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rbp
movabs rbx, 0xced43606
add rbx, 0x713514ba; xor
=== 834
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov rsi, r13
=== 835
mov r14, rsi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r13
mov r11b, byte ptr [rdi]
mov rsi, 0xff
shl rsi, 0x38
not rsi
and r14, rsi
movzx rsi, r11b
shl rsi, 0x38
or r14, rsi
=== 836
mov r12, r14
movabs rbx, 0x1219c48bd
add rbx, 0x1eed702b; input
=== 837
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 22
add rsp, 22
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r15
mov rsi, r12
movzx r13, r13b
=== 838
mov rax, r13
mov r8, 0xe6c4d
add r8, 0x2a6be0
push r8
mov rbp, rsi
mul qword ptr [rsp]
mov r13, rax
=== 839
mov rsi, rbp
xor rsi, r13
=== 840
mov r10, rsi
push r10
mov rsi, rsp
mov r12, rsi
=== 841
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
mov rbx, r12
movzx r15, r15b
=== 842
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xe9b62516
push rbx
push 0x29bd448b
push 0x214e1943
push 0x329298b
push 0x74c6625f
add qword ptr [rsp + 0x20], 0x565325aa; xor
mov rbp, rbx
=== 843
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1144
add rsp, 1144
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r15
mov r13, rbp
=== 844
mov r13, r13
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rdi
mov cl, byte ptr [r8]
mov r13b, cl
=== 845
mov rbp, r13
push rbp
mov rbp, rsp
mov r12, r13
=== 846
mov rcx, rbp
mov rsi, r12
push rcx
push 0x5aa75bce
push 0xeac09ea
push 0xfca46f9
push 0x16bc30ff
=== 847
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov rsi, rsi
movzx r13, r13b
=== 848
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x13f49de36
push rdx
push 0x798f2ee5
push 0x78ab19ef
push 0x45911a0d
push 0x5d9a401a
add qword ptr [rsp + 0x20], 0xbf6c8a; xor
mov r13, rsi
=== 849
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1616
add rsp, 1616
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbp
mov r13, r13
=== 850
mov r13, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbp
mov r12b, byte ptr [r15]
mov r10, 0xff
shl r10, 8
not r10
and r13, r10
movzx r10, r12b
shl r10, 8
or r13, r10
=== 851
mov rsi, r13
push rsi
mov rdi, rsp
mov rbp, r13
=== 852
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov rdi, rbp
movzx r12, r12b
=== 853
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rdi
movabs r12, 0x12dfc2ff9
add r12, 0x120d1ac7; xor
=== 854
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 368
add rsp, 368
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov r13, rbp
=== 855
mov rdi, r13
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r14
mov r11b, byte ptr [r13]
mov r14, 0xff
shl r14, 0x10
not r14
and rdi, r14
movzx r14, r11b
shl r14, 0x10
or rdi, r14
=== 856
mov r14, rdi
push r14
mov rbx, rsp
mov r13, rdi
=== 857
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov r15, r13
movzx r13, r13b
=== 858
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r15
movabs rbx, 0x12b0d2481
add rbx, 0x14fc263f; xor
=== 859
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1080
add rsp, 1080
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov rbp, r12
=== 860
mov rdi, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov r14b, byte ptr [r12]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and rdi, rbp
movzx rbp, r14b
shl rbp, 0x18
or rdi, rbp
=== 861
mov r12, rdi
push r12
mov rbp, rsp
mov r14, rdi
=== 862
mov r13, rbp
mov rdi, r14
push r13
push 0x367a1b5f
push 0x23e658f1
push 0x616042ea
push 0x62a6212d
=== 863
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov rbx, rdi
movzx r12, r12b
=== 864
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rbx
movabs rbp, 0xeff10ba2
add rbp, 0x50183f1e; xor
=== 865
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbx
mov r15, r14
=== 866
mov rbx, r15
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r14
mov r14b, byte ptr [r11]
mov r11, 0xff
shl r11, 0x28
not r11
and rbx, r11
movzx r11, r14b
shl r11, 0x28
or rbx, r11
=== 867
mov r12, rbx
push r12
mov rsi, rsp
mov r12, rbx
=== 868
mov rdx, rsi
mov r13, r12
push rdx
push 0x635b1ff4
push 0x227e2f64
push 0x1fca35be
=== 869
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov r13, r13
movzx rbp, bpl
=== 870
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x1243234d7
push r8
push 0x6d4362de
push 0x725531d3
push 0x6cc519eb
add qword ptr [rsp + 0x18], 0x1bd715e9; xor
mov r13, r13
=== 871
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov r15, r13
=== 872
mov rdi, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbp
mov bpl, byte ptr [rbp]
mov r9, 0xff
shl r9, 0x30
not r9
and rdi, r9
movzx r9, bpl
shl r9, 0x30
or rdi, r9
=== 873
mov r8, rdi
push r8
mov r15, rsp
mov rsi, rdi
=== 874
mov rbp, r15
mov r15, rsi
push rbp
push 0x268d39f1
push 0x726279a0
push 0x65143c1d
=== 875
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rsi
mov r13, r15
movzx rbp, bpl
=== 876
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r13
movabs r15, 0xcbb623c0
add r15, 0x74532700; xor
=== 877
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbp
mov r14, rsi
=== 878
mov rsi, r14
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r13
mov al, byte ptr [rcx]
mov r15, 0xff
shl r15, 0x38
not r15
and rsi, r15
movzx r15, al
shl r15, 0x38
or rsi, r15
=== 879
mov r15, rsi
movabs rbx, 0x1316e4d7b
add rbx, 0xf1b6b6d; input
=== 880
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 26
add rsp, 26
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov r12, r15
movzx r14, r14b
=== 881
mov rax, r14
mov r14, 0xfffffffffada0f75
add r14, 0x6171137
push r14
mov r14, r12
mul qword ptr [rsp]
mov rbx, rax
=== 882
mov r15, r14
xor r15, rbx
=== 883
mov rsi, r15
push rsi
mov r14, rsp
mov r13, r15
=== 884
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov rdi, r13
movzx rbx, bl
=== 885
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x11b1928dc
add r14, 0x24f039e4; add_carry
mov r14, qword ptr [r14 + 0x678]
add r14, rbx
mov dil, byte ptr [r14]
movzx rdi, dil
shl rdi, 8
add rdi, rdi
movabs rdx, 0xcbbe408e
push rdx
push 0x38e33d23
push 0x6036fbf
push 0x1ae52719
add qword ptr [rsp + 0x18], 0x744b1a32; add
mov rdi, rdi
=== 886
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1656
add rsp, 1656
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r12
mov r14, rdi
=== 887
mov r15, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov r13b, byte ptr [rax]
mov r15b, r13b
=== 888
mov r12, r15
push r12
mov rbx, rsp
mov r15, r15
=== 889
mov r14, rbx
mov rsi, r15
push r14
push 0x7c43605f
push 0x22bc2a80
push 0x30c05725
push 0x4dd35576
=== 890
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r11
mov r13, rsi
movzx rdi, dil
=== 891
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x1278c2388
add r8, 0x187d3f38; add_carry
mov r8, qword ptr [r8 + 0x5e8]
add r8, rdi
mov bpl, byte ptr [r8]
movzx rbp, bpl
shl rbp, 0x10
add r13, rbp
movabs rax, 0xe904ed4f
push rax
push 0x7ae13058
push 0x5c5c0da9
push 0x32b10091
add qword ptr [rsp + 0x18], 0x57046d71; add
mov r13, r13
=== 892
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1512
add rsp, 1512
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rax
mov r12, r13
=== 893
mov rdi, r12
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov r15b, byte ptr [r14]
mov r13, 0xff
shl r13, 8
not r13
and rdi, r13
movzx r13, r15b
shl r13, 8
or rdi, r13
=== 894
mov rdi, rdi
push rdi
mov r15, rsp
mov rbp, rdi
=== 895
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov rbx, rbp
movzx rbp, bpl
=== 896
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xdecee5ff
add r13, 0x613a7cc1; add_carry
mov r13, qword ptr [r13 + 0x1e8]
add r13, rbp
mov r14b, byte ptr [r13]
movzx r14, r14b
shl r14, 0x18
add rbx, r14
movabs r15, 0xdb05e43b
push r15
push 0x576e7d48
push 0x1542358a
push 0x32c008e6
add qword ptr [rsp + 0x18], 0x65037685; add
mov rbx, rbx
=== 897
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 488
add rsp, 488
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov r13, rbx
=== 898
mov rsi, r13
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov dl, byte ptr [r14]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and rsi, rdi
movzx rdi, dl
shl rdi, 0x10
or rsi, rdi
=== 899
mov rsi, rsi
push rsi
mov r13, rsp
mov rdi, rsi
=== 900
mov r8, r13
mov rbp, rdi
push r8
push 0x31e74168
push 0x4c0c5ac5
push 0xc7063c3
push 0x719c0853
=== 901
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r10
mov r14, rbp
movzx rbp, bpl
=== 902
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xe42617ff
add rbx, 0x5be34ac1; add_carry
mov rbx, qword ptr [rbx + 0x400]
add rbx, rbp
mov al, byte ptr [rbx]
movzx rax, al
shl rax, 0x20
add r14, rax
movabs r10, 0xfae84fe1
push r10
push 0x810135d
push 0x35d54870
push 0x2e5c044e
push 0x3b8a0f4e
add qword ptr [rsp + 0x20], 0x45210adf; add
mov r12, r14
=== 903
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1024
add rsp, 1024
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov rdi, r12
=== 904
mov rbx, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r14
mov r11b, byte ptr [rcx]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and rbx, rsi
movzx rsi, r11b
shl rsi, 0x18
or rbx, rsi
=== 905
mov r8, rbx
push r8
mov r15, rsp
mov rbx, rbx
=== 906
mov r10, r15
mov rsi, rbx
push r10
push 0x3770def
push 0x687e19ca
push 0x247b2405
=== 907
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rcx
mov r13, rsi
movzx rdi, dil
=== 908
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xca0a4c26
add rax, 0x75ff169a; add_carry
mov rax, qword ptr [rax]
add rax, rdi
mov bpl, byte ptr [rax]
movzx rbp, bpl
shl rbp, 0x30
add r13, rbp
movabs r11, 0x13fc81c5d
push r11
push 0x4b1f71c2
push 0x1fd87bdd
push 0x15600b35
push 0x8923ed6
add qword ptr [rsp + 0x20], 0x413e63; add
mov r15, r13
=== 909
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov rbx, r15
=== 910
mov r13, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov r10b, byte ptr [r9]
mov rbp, 0xff
shl rbp, 0x28
not rbp
and r13, rbp
movzx rbp, r10b
shl rbp, 0x28
or r13, rbp
=== 911
mov r14, r13
movabs rbp, 0xe7ecacbf
add rbp, 0x589d0c29; input
=== 912
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r11
mov rbp, r14
movzx rdi, dil
=== 913
mov rax, rdi
mov rbx, 0xffffffffe7b24a3a
add rbx, 0x187303b5
push rbx
mov r14, rbp
mul qword ptr [rsp]
mov rbp, rax
=== 914
mov r13, r14
add r13, rbp
=== 915
mov rcx, r13
push rcx
mov rdi, rsp
mov r15, r13
=== 916
mov r8, rdi
mov r13, r15
push r8
push 0x6de0b22
push 0x7d087226
push 0x41cb7da1
=== 917
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r15
mov rdi, r13
movzx r12, r12b
=== 918
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rdi
movabs rbx, 0xc3ca3ee8
add rbx, 0x7c3f0bd8; xor
=== 919
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1432
add rsp, 1432
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdi
mov r12, r12
=== 920
mov r12, r12
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r14
mov sil, byte ptr [rsi]
mov r12b, sil
=== 921
mov r12, r12
push r12
mov rdi, rsp
mov r12, r12
=== 922
mov rdx, rdi
mov r13, r12
push rdx
push 0x2dc26346
push 0x38fb6e61
push 0x23f92dbd
push 0x19495194
=== 923
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbp
mov rbx, r13
movzx r15, r15b
=== 924
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rbx
movabs rbp, 0x12c42de81
add rbp, 0x13c66c3f; xor
=== 925
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_SMALL 104
add rsp, 104
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov r13, rsi
=== 926
mov r14, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov r10b, byte ptr [r15]
mov rax, 0xff
shl rax, 8
not rax
and r14, rax
movzx rax, r10b
shl rax, 8
or r14, rax
=== 927
mov rsi, r14
push rsi
mov r15, rsp
mov r14, r14
=== 928
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r13
mov r15, r14
movzx rbp, bpl
=== 929
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x131082e78
push rax
push 0x7e7e57e5
push 0x23a11993
push 0x37ea1bc3
add qword ptr [rsp + 0x18], 0xf011c48; xor
mov rsi, r15
=== 930
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 448
add rsp, 448
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov r15, rsi
=== 931
mov rdi, r15
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov r15b, byte ptr [rdx]
mov rax, 0xff
shl rax, 0x10
not rax
and rdi, rax
movzx rax, r15b
shl rax, 0x10
or rdi, rax
=== 932
mov r15, rdi
push r15
mov r14, rsp
mov rdi, rdi
=== 933
mov r8, r14
mov r12, rdi
push r8
push 0x4e160816
push 0x43b30873
push 0x14e66499
push 0x13b61a16
=== 934
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r13
mov rsi, r12
movzx rbx, bl
=== 935
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rsi
movabs rbp, 0xc29e0c57
add rbp, 0x7d6b3e69; xor
=== 936
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1904
add rsp, 1904
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r13
mov rsi, rsi
=== 937
mov rbp, rsi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbp
mov r9b, byte ptr [rsi]
mov r14, 0xff
shl r14, 0x18
not r14
and rbp, r14
movzx r14, r9b
shl r14, 0x18
or rbp, r14
=== 938
mov r11, rbp
push r11
mov rsi, rsp
mov rbx, rbp
=== 939
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov rdi, rbx
movzx rsi, sil
=== 940
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rdi
movabs rbx, 0x13a7018dd
add rbx, 0x59931e3; xor
=== 941
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov rsi, r12
=== 942
mov rsi, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov dil, byte ptr [r9]
mov r14, 0xff
shl r14, 0x28
not r14
and rsi, r14
movzx r14, dil
shl r14, 0x28
or rsi, r14
=== 943
mov r13, rsi
push r13
mov rdi, rsp
mov r13, rsi
=== 944
mov r14, rdi
mov r15, r13
push r14
push 0x448b6984
push 0x4a32ef
push 0x26b649da
push 0x29c94dab
=== 945
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r8
mov rbp, r15
movzx r12, r12b
=== 946
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xd427e911
push rbp
push 0x4ebb6825
push 0x6f6f4506
push 0x7d36602
add qword ptr [rsp + 0x18], 0x6be161af; xor
mov rsi, rbp
=== 947
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov rdi, rsi
=== 948
mov rdi, rdi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r15
mov r8b, byte ptr [r13]
mov r15, 0xff
shl r15, 0x38
not r15
and rdi, r15
movzx r15, r8b
shl r15, 0x38
or rdi, r15
=== 949
mov rbp, rdi
movabs r15, 0xda4f731b
add r15, 0x663a45cd; input
=== 950
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 18
add rsp, 18
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbx
mov rdi, rbp
movzx r15, r15b
=== 951
mov rax, r15
mov rdx, 0xffffffffb25ca338
add rdx, 0x4e4250af
push rdx
mov rdi, rdi
mul qword ptr [rsp]
mov r14, rax
=== 952
mov r12, rdi
xor r12, r14
=== 953
mov rsi, r12
push rsi
mov rsi, rsp
mov r15, r12
=== 954
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r11
mov r15, r15
movzx rbp, bpl
=== 955
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x11d5b308c
add r15, 0x22ae4234; sub_carry
mov r15, qword ptr [r15 + 0x58]
add r15, rbp
mov bpl, byte ptr [r15]
movzx rbp, bpl
shl rbp, 8
sub r15, rbp
mov rdi, r15
movabs r15, 0x1340526f8
add r15, 0xc0443c8; sub
=== 956
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 88
add rsp, 88
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbx
mov r12, rdi
=== 957
mov rbp, r12
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rsi
mov dl, byte ptr [r8]
mov bpl, dl
=== 958
mov r10, rbp
push r10
mov r12, rsp
mov rsi, rbp
=== 959
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbp
mov r15, rsi
movzx rdi, dil
=== 960
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x112223f86
add rdi, 0x2de7333a; sub_carry
mov rdi, qword ptr [rdi + 0x548]
add rdi, rdi
mov dil, byte ptr [rdi]
movzx rdi, dil
shl rdi, 0x10
sub r15, rdi
mov rbp, r15
movabs r12, 0x11a9cfd88
add r12, 0x256c6d38; sub
=== 961
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1352
add rsp, 1352
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r15
mov r14, rbp
=== 962
mov rdi, r14
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov r8b, byte ptr [rcx]
mov r10, 0xff
shl r10, 8
not r10
and rdi, r10
movzx r10, r8b
shl r10, 8
or rdi, r10
=== 963
mov r10, rdi
push r10
mov r12, rsp
mov rdi, rdi
=== 964
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r10
mov r12, rdi
movzx rsi, sil
=== 965
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x109603bb8
add r13, 0x36a93708; sub_carry
mov r13, qword ptr [r13 + 0x750]
add r13, rsi
mov cl, byte ptr [r13]
movzx rcx, cl
shl rcx, 0x18
sub r12, rcx
mov r13, r12
movabs r15, 0x1390f5752
add r15, 0x6fa136e; sub
=== 966
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1872
add rsp, 1872
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdx
mov rbp, r13
=== 967
mov rdi, rbp
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r14
mov r12b, byte ptr [rcx]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and rdi, rbp
movzx rbp, r12b
shl rbp, 0x10
or rdi, rbp
=== 968
mov r15, rdi
push r15
mov r13, rsp
mov r14, rdi
=== 969
mov r13, r13
mov rsi, r14
push r13
push 0x7d017e2c
push 0x574b2c96
push 0x3de031be
=== 970
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov rsi, rsi
movzx r12, r12b
=== 971
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x1059b578e
add rdx, 0x3a6e1b32; sub_carry
mov rdx, qword ptr [rdx + 0x368]
add rdx, r12
mov r14b, byte ptr [rdx]
movzx r14, r14b
shl r14, 0x20
sub rsi, r14
mov r15, rsi
movabs rsi, 0xf41144a5
add rsi, 0x4bf8261b; sub
=== 972
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 872
add rsp, 872
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r9
mov r14, r15
=== 973
mov r15, r14
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rdi
mov dil, byte ptr [r12]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and r15, rdx
movzx rdx, dil
shl rdx, 0x18
or r15, rdx
=== 974
mov r11, r15
push r11
mov r12, rsp
mov rbx, r15
=== 975
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov rbx, rbx
movzx r15, r15b
=== 976
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xd1e951de
add r15, 0x6e2020e2; sub_carry
mov r15, qword ptr [r15]
add r15, r15
mov bpl, byte ptr [r15]
movzx rbp, bpl
shl rbp, 0x28
sub rbx, rbp
movabs rcx, 0x10b5622c9
push rcx
push 0x2caa5786
push 0x58314a58
push 0x47107f6d
add qword ptr [rsp + 0x18], 0x34b347f7; sub
mov r12, rbx
=== 977
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbp
mov r14, r12
=== 978
mov rdi, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov cl, byte ptr [r9]
mov r11, 0xff
shl r11, 0x20
not r11
and rdi, r11
movzx r11, cl
shl r11, 0x20
or rdi, r11
=== 979
mov rsi, rdi
push rsi
mov r14, rsp
mov r13, rdi
=== 980
mov r10, r14
mov r15, r13
push r10
push 0x7b4452ff
push 0x404c67a9
push 0x15ee349d
=== 981
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r11
mov r15, r15
movzx rbx, bl
=== 982
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xc8de146d
add r15, 0x772b5e53; sub_carry
mov r15, qword ptr [r15]
add r15, rbx
mov al, byte ptr [r15]
movzx rax, al
shl rax, 0x30
sub r15, rax
mov r15, r15
movabs r13, 0xf0f72111
add r13, 0x4f1249af; sub
=== 983
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rcx
mov r15, r15
=== 984
mov rbp, r15
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbx
mov dil, byte ptr [rdi]
mov r14, 0xff
shl r14, 0x28
not r14
and rbp, r14
movzx r14, dil
shl r14, 0x28
or rbp, r14
=== 985
mov rsi, rbp
push rsi
mov rbp, rsp
mov r12, rbp
=== 986
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbx
mov rbp, r12
movzx r15, r15b
=== 987
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x12a0c42a8
add r10, 0x15fd3018; sub_carry
mov r10, qword ptr [r10]
add r10, r15
mov bpl, byte ptr [r10]
movzx rbp, bpl
shl rbp, 0x38
sub rbp, rbp
movabs rsi, 0xe1b92912
push rsi
push 0x1cdd6f4c
push 0x1290730b
push 0x6f2151c1
push 0x31e91815
add qword ptr [rsp + 0x20], 0x5e5041ae; sub
mov rdi, rbp
=== 988
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r11
mov r12, rdi
=== 989
mov r13, r12
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r15
mov r15b, byte ptr [rsi]
mov r10, 0xff
shl r10, 0x30
not r10
and r13, r10
movzx r10, r15b
shl r10, 0x30
or r13, r10
=== 990
mov r15, r13
push r15
mov r15, rsp
mov r13, r13
=== 991
mov r8, r15
mov r14, r13
push r8
push 0x4a1f284b
push 0x1fed625b
push 0x21df1619
push 0x362d2558
=== 992
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov rbp, r14
movzx r14, r14b
=== 993
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rbp
movabs rbx, 0xc6be6973
add rbx, 0x794b014d; sub
=== 994
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdx
mov r15, rdi
=== 995
mov r12, r15
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbx
mov dil, byte ptr [r13]
mov rsi, 0xff
shl rsi, 0x38
not rsi
and r12, rsi
movzx rsi, dil
shl rsi, 0x38
or r12, rsi
=== 996
movabs r12, 0x123ea5b74
push r12
push 0x76b748d7
push 0x386b466f
push 0x11e4377d
push 0x15ca3313
add qword ptr [rsp + 0x20], 0x1c9f5d74; input
mov rbp, r12
=== 997
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rsi
mov rsi, rbp
movzx rbp, bpl
=== 998
mov rax, rbp
mov rbp, 0xffffffffcb197740
add rbp, 0x35504e33
push rbp
mov rbx, rsi
mul qword ptr [rsp]
mov rdi, rax
=== 999
mov r15, rbx
add r15, rdi
=== 1000
mov r12, r15
push r12
mov r13, rsp
mov r12, r15
=== 1001
mov rbx, r13
mov r15, r12
push rbx
push 0x31e5719d
push 0x36084580
push 0x73e62858
=== 1002
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov rbx, r15
movzx r15, r15b
=== 1003
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xe287680b
add rbx, 0x5d820ab5; sub_carry
mov rbx, qword ptr [rbx + 0x2e8]
add rbx, r15
mov r8b, byte ptr [rbx]
movzx r8, r8b
shl r8, 8
sub rbx, r8
movabs rdx, 0xd9401cd4
push rdx
push 0x33a06781
push 0x56e913e2
push 0x2aa60d5a
push 0x4ace5031
add qword ptr [rsp + 0x20], 0x66c94dec; sub
mov rdi, rbx
=== 1004
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 744
add rsp, 744
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r10
mov rsi, rdi
=== 1005
mov r14, rsi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rdi
mov dl, byte ptr [rdi]
mov r14b, dl
=== 1006
mov r12, r14
push r12
mov r14, rsp
mov rdi, r14
=== 1007
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r10
mov r12, rdi
movzx rbp, bpl
=== 1008
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x110b06756
add r15, 0x2f590b6a; sub_carry
mov r15, qword ptr [r15 + 0x2e0]
add r15, rbp
mov r11b, byte ptr [r15]
movzx r11, r11b
shl r11, 0x10
sub r12, r11
mov rdi, r12
movabs r14, 0xfff9405b
add r14, 0x40102a65; sub
=== 1009
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 736
add rsp, 736
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdx
mov rbx, rdi
=== 1010
mov r13, rbx
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rsi
mov r12b, byte ptr [r15]
mov r9, 0xff
shl r9, 8
not r9
and r13, r9
movzx r9, r12b
shl r9, 8
or r13, r9
=== 1011
mov r12, r13
push r12
mov rdi, rsp
mov r15, r13
=== 1012
mov r11, rdi
mov rbx, r15
push r11
push 0x730071c0
push 0x780ed8
push 0x56073051
=== 1013
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
mov rdi, rbx
movzx rbx, bl
=== 1014
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x107192b23
add rsi, 0x38f0479d; sub_carry
mov rsi, qword ptr [rsi + 0x560]
add rsi, rbx
mov dil, byte ptr [rsi]
movzx rdi, dil
shl rdi, 0x18
sub rdi, rdi
mov rbx, rdi
movabs r14, 0xe959f9bc
a
d
d
 
r
1
4
,
 
0
x
5
6
a
f
7
1
0
4
=== 1015
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1376
add rsp, 1376
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r12
mov rbp, rbx
=== 1016
mov r15, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r15
mov r11b, byte ptr [r8]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r15, rdi
movzx rdi, r11b
shl rdi, 0x10
or r15, rdi
=== 1017
mov rdx, r15
push rdx
mov rdi, rsp
mov rbp, r15
=== 1018
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov r13, rbp
movzx rdi, dil
=== 1019
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x107fb5d35
add rbx, 0x380e158b; sub_carry
mov rbx, qword ptr [rbx + 0x648]
add rbx, rdi
mov r13b, byte ptr [rbx]
movzx r13, r13b
shl r13, 0x20
sub r13, r13
mov r15, r13
movabs r13, 0x135b1edc8
add r13, 0xa577cf8; sub
=== 1020
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1608
add rsp, 1608
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov rbp, r15
=== 1021
mov rdi, rbp
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r12
mov r12b, byte ptr [rbp]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and rdi, rbp
movzx rbp, r12b
shl rbp, 0x18
or rdi, rbp
=== 1022
mov rbx, rdi
push rbx
mov rbp, rsp
mov r12, rdi
=== 1023
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov rsi, r12
movzx rbx, bl
=== 1024
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xc5f0709e
add r15, 0x7a190222; sub_carry
mov r15, qword ptr [r15]
add r15, rbx
mov r13b, byte ptr [r15]
movzx r13, r13b
shl r13, 0x28
sub rsi, r13
mov rbx, rsi
movabs rbp, 0xd2db3c06
add rbp, 0x6d2e2eba; sub
=== 1025
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rax
mov r15, rbx
=== 1026
mov rdi, r15
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r14
mov r11b, byte ptr [r15]
mov rax, 0xff
shl rax, 0x20
not rax
and rdi, rax
movzx rax, r11b
shl rax, 0x20
or rdi, rax
=== 1027
mov r8, rdi
push r8
mov r15, rsp
mov rbx, rdi
=== 1028
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov rbx, rbx
movzx r12, r12b
=== 1029
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xd7776f80
add r10, 0x68920340; sub_carry
mov r10, qword ptr [r10]
add r10, r12
mov dil, byte ptr [r10]
movzx rdi, dil
shl rdi, 0x30
sub rbx, rdi
mov r15, rbx
movabs r13, 0xe4d9474d
add r13, 0x5b302373; sub
=== 1030
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbx
mov r15, r15
=== 1031
mov rdi, r15
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov r14b, byte ptr [r10]
mov r10, 0xff
shl r10, 0x28
not r10
and rdi, r10
movzx r10, r14b
shl r10, 0x28
or rdi, r10
=== 1032
mov rax, rdi
push rax
mov r12, rsp
mov rbx, rdi
=== 1033
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdi
mov r12, rbx
movzx rbp, bpl
=== 1034
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xeb864f59
add rsi, 0x54832367; sub_carry
mov rsi, qword ptr [rsi]
add rsi, rbp
mov r10b, byte ptr [rsi]
movzx r10, r10b
shl r10, 0x38
sub r12, r10
mov r14, r12
movabs rbp, 0x115203c96
add rbp, 0x2ae92e2a; sub
=== 1035
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov rbp, r14
=== 1036
mov rbx, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rdi
mov r10b, byte ptr [rdx]
mov r14, 0xff
shl r14, 0x30
not r14
and rbx, r14
movzx r14, r10b
shl r14, 0x30
or rbx, r14
=== 1037
mov r12, rbx
push r12
mov rbp, rsp
mov rbx, rbx
=== 1038
mov r15, rbp
mov rsi, rbx
push r15
push 0x51822d16
push 0x74857b88
push 0x3aea2d8d
=== 1039
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov r14, rsi
movzx r13, r13b
=== 1040
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xd7f0164a
add r15, 0x68195c76; sub_carry
mov r15, qword ptr [r15 + 0x68]
add r15, r13
mov cl, byte ptr [r15]
movzx rcx, cl
shl rcx, 8
sub r14, rcx
movabs r12, 0xe8a42357
push r12
push 0x19390fb2
push 0x134463ce
push 0x44944935
push 0x21291333
add qword ptr [rsp + 0x20], 0x57654769; sub
mov r15, r14
=== 1041
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 104
add rsp, 104
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov rdi, r15
=== 1042
mov r12, rdi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r13
mov bpl, byte ptr [rbp]
mov r12b, bpl
=== 1043
mov r13, r12
push r13
mov rdi, rsp
mov r14, r12
=== 1044
mov rsi, rdi
mov rbp, r14
push rsi
push 0x5aff1f88
push 0x6e1d7a39
push 0x47960a68
=== 1045
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r14
mov rbx, rbp
movzx r15, r15b
=== 1046
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x126b63883
add r15, 0x19533a3d; sub_carry
mov r15, qword ptr [r15 + 0x1f8]
add r15, r15
mov r11b, byte ptr [r15]
movzx r11, r11b
shl r11, 0x10
sub rbx, r11
mov r13, rbx
movabs rbp, 0xcf5ff67f
add rbp, 0x70a97441; sub
=== 1047
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 504
add rsp, 504
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rcx
mov r15, r13
=== 1048
mov r15, r15
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov sil, byte ptr [r10]
mov r11, 0xff
shl r11, 8
not r11
and r15, r11
movzx r11, sil
shl r11, 8
or r15, r11
=== 1049
mov r8, r15
push r8
mov rsi, rsp
mov r13, r15
=== 1050
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov rbp, r13
movzx r14, r14b
=== 1051
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xdacb332c
add r12, 0x653e3f94; sub_carry
mov r12, qword ptr [r12 + 0x5d0]
add r12, r14
mov r14b, byte ptr [r12]
movzx r14, r14b
shl r14, 0x18
sub rbp, r14
movabs rbp, 0x12993fc36
push rbp
push 0x321a5342
push 0x306b7d02
push 0x4d473a7f
add qword ptr [rsp + 0x18], 0x16756e8a; sub
mov r14, rbp
=== 1052
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1488
add rsp, 1488
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov r14, r14
=== 1053
mov r12, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov r11b, byte ptr [r15]
mov rax, 0xff
shl rax, 0x10
not rax
and r12, rax
movzx rax, r11b
shl rax, 0x10
or r12, rax
=== 1054
mov r8, r12
push r8
mov r14, rsp
mov r15, r12
=== 1055
mov rbp, r14
mov r15, r15
push rbp
push 0x18e2095f
push 0x43a200a6
push 0x7c381448
=== 1056
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov r12, r15
movzx rsi, sil
=== 1057
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x13ed335d5
add r10, 0x1363ceb; sub_carry
mov r10, qword ptr [r10 + 0x798]
add r10, rsi
mov r10b, byte ptr [r10]
movzx r10, r10b
shl r10, 0x20
sub r12, r10
mov rbx, r12
movabs rdi, 0x1260a278a
add rdi, 0x19ff4336; sub
=== 1058
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1944
add rsp, 1944
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r14
mov rdi, rbx
=== 1059
mov r15, rdi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov al, byte ptr [r13]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and r15, rbp
movzx rbp, al
shl rbp, 0x18
or r15, rbp
=== 1060
mov rax, r15
push rax
mov r14, rsp
mov rsi, r15
=== 1061
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov rbp, rsi
movzx r13, r13b
=== 1062
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x136d56eaa
add r12, 0x9340416; sub_carry
mov r12, qword ptr [r12 + 0x7e8]
add r12, r13
mov bl, byte ptr [r12]
movzx rbx, bl
shl rbx, 0x28
sub rbp, rbx
movabs r14, 0x121dc4ec1
push r14
push 0x5e690b3e
push 0x19627641
push 0x4c8453f6
push 0x63de20b1
add qword ptr [rsp + 0x20], 0x1e2d1bff; sub
mov rbp, rbp
=== 1063
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2024
add rsp, 2024
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r15
mov r12, rbp
=== 1064
mov rbx, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r13
mov r11b, byte ptr [r11]
mov rsi, 0xff
shl rsi, 0x20
not rsi
and rbx, rsi
movzx rsi, r11b
shl rsi, 0x20
or rbx, rsi
=== 1065
mov rax, rbx
push rax
mov r12, rsp
mov rdi, rbx
=== 1066
mov rsi, r12
mov rdi, rdi
push rsi
push 0xfd842eb
push 0x4dd77c37
push 0x512d242f
push 0x75e917fc
=== 1067
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov rbp, rdi
movzx rsi, sil
=== 1068
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xdc3b3a17
add rbx, 0x63ce38a9; sub_carry
mov rbx, qword ptr [rbx + 0x7f8]
add rbx, rsi
mov al, byte ptr [rbx]
movzx rax, al
shl rax, 0x30
sub rbp, rax
movabs r11, 0xff574c90
push r11
push 0x5cd91d4b
push 0x42f57910
push 0x74e63c19
add qword ptr [rsp + 0x18], 0x40b21e30; sub
mov rsi, rbp
=== 1069
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov r15, rsi
=== 1070
mov rsi, r15
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r13
mov bpl, byte ptr [r13]
mov rdi, 0xff
shl rdi, 0x28
not rdi
and rsi, rdi
movzx rdi, bpl
shl rdi, 0x28
or rsi, rdi
=== 1071
mov r11, rsi
push r11
mov r13, rsp
mov rbp, rsi
=== 1072
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbx
mov r14, rbp
movzx rdi, dil
=== 1073
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xd0ce121b
add rsi, 0x6f3b60a5; sub_carry
mov rsi, qword ptr [rsi + 0x7f8]
add rsi, rdi
mov r11b, byte ptr [rsi]
movzx r11, r11b
shl r11, 0x38
sub r14, r11
movabs r11, 0x13484393d
push r11
push 0x748731fe
push 0x3f9e50bd
push 0x34115ba2
add qword ptr [rsp + 0x18], 0xb853183; sub
mov r15, r14
=== 1074
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r12
mov r13, r15
=== 1075
mov r13, r13
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov r11b, byte ptr [r12]
mov r12, 0xff
shl r12, 0x30
not r12
and r13, r12
movzx r12, r11b
shl r12, 0x30
or r13, r12
=== 1076
mov r15, r13
push r15
mov r12, rsp
mov r13, r13
=== 1077
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbx
mov r15, r13
movzx rdi, dil
=== 1078
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r15
movabs r14, 0xcb6826c7
add r14, 0x74a143f9; sub
=== 1079
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r11
mov rsi, rbp
=== 1080
mov r15, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov cl, byte ptr [r14]
mov rbx, 0xff
shl rbx, 0x38
not rbx
and r15, rbx
movzx rbx, cl
shl rbx, 0x38
or r15, rbx
=== 1081
mov r13, r15
push r13
mov r14, rsp
mov r15, r15
=== 1082
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbx
mov rbp, r15
movzx r14, r14b
=== 1083
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xf3682ba0
push r8
push 0x2e6c6af3
push 0x523267e7
push 0x1f9b27c7
push 0x623b4da0
add qword ptr [rsp + 0x20], 0x4ca12720; or
mov r13, rbp
=== 1084
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov r14, r13
=== 1085
mov rsi, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov r15b, byte ptr [r15]
mov rbp, 0xff
shl rbp, 0x20
not rbp
and rsi, rbp
movzx rbp, r15b
shl rbp, 0x20
or rsi, rbp
=== 1086
mov r15, rsi
push r15
mov r14, rsp
mov r12, rsi
=== 1087
mov rdi, r14
mov r14, r12
push rdi
push 0x535d0656
push 0x5ebb2586
push 0x53c351bd
push 0x528c1c2a
=== 1088
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r11
mov rbp, r14
movzx r13, r13b
=== 1089
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rbp
movabs rbp, 0x126272801
add rbp, 0x19e22abf; or
=== 1090
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r10
mov rbx, rsi
=== 1091
mov r14, rbx
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rsi
mov r9b, byte ptr [r10]
mov rcx, 0xff
shl rcx, 0x28
not rcx
and r14, rcx
movzx rcx, r9b
shl rcx, 0x28
or r14, rcx
=== 1092
mov rax, r14
push rax
mov rdi, rsp
mov r13, r14
=== 1093
mov r15, rdi
mov r13, r13
push r15
push 0x635b2d7f
push 0xd2a0922
push 0x583c7eae
push 0x5fc30b86
=== 1094
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov rbx, r13
movzx rbp, bpl
=== 1095
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rbx
movabs r12, 0x1270f00ac
add r12, 0x18fa5214; or
=== 1096
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r12
mov rsi, r15
=== 1097
mov rbx, rsi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rdi
mov r9b, byte ptr [rdi]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and rbx, rsi
movzx rsi, r9b
shl rsi, 0x30
or rbx, rsi
=== 1098
mov r12, rbx
movabs rsi, 0xc998ef18
add rsi, 0x766722d8
test r12, r12
lea r13, [rip - 0x30f872]
cmovne r13, rsi
jmp r13
=== 1099
movabs r12, 0x11bc272df
add r12, 0x24c74609; input
=== 1100
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 11
add rsp, 11
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
movzx rsi, sil
=== 1101
mov rax, rsi
mov r12, 0xffffffffcc8470fd
add r12, 0x33e36ca7
push r12
mul qword ptr [rsp]
mov rbx, rax
=== 1102
mov rax, rbx
push rax
mov r13, rsp
mov r14, rbx
=== 1103
mov rcx, r13
mov r13, r14
push rcx
push 0x22f43cbf
push 0xc08720d
push 0x7f8f42f3
push 0x550b5e40
=== 1104
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov r15, r13
movzx r13, r13b
=== 1105
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xea4aeedf
add r11, 0x55be73e1; add_carry
mov r11, qword ptr [r11 + 0x7e0]
add r11, r13
mov cl, byte ptr [r11]
movzx rcx, cl
shl rcx, 8
add r15, rcx
movabs r15, 0xd19033ff
push r15
push 0x569073da
push 0x6c1b7c8f
push 0x1eea550d
push 0x2f20731c
add qword ptr [rsp + 0x20], 0x6e7926c1; add
mov rsi, r15
=== 1106
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2016
add rsp, 2016
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r12
mov rsi, rsi
=== 1107
mov r15, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbp
mov bl, byte ptr [r8]
mov r15b, bl
=== 1108
mov rdi, r15
push rdi
mov rsi, rsp
mov r12, r15
=== 1109
mov rcx, rsi
mov rsi, r12
push rcx
push 0x2bd70123
push 0x15232cc1
push 0x62b81011
=== 1110
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbp
mov rbp, rsi
movzx r15, r15b
=== 1111
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x107d22741
add rbx, 0x38373b7f; add_carry
mov rbx, qword ptr [rbx + 0x1d0]
add rbx, r15
mov dl, byte ptr [rbx]
movzx rdx, dl
shl rdx, 0x10
add rbp, rdx
mov rsi, rbp
movabs r12, 0xc5c43a48
add r12, 0x7a452078; add
=== 1112
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 464
add rsp, 464
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov rsi, rsi
=== 1113
mov r15, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov r8b, byte ptr [r13]
mov rdx, 0xff
shl rdx, 8
not rdx
and r15, rdx
movzx rdx, r8b
shl rdx, 8
or r15, rdx
=== 1114
mov rsi, r15
push rsi
mov r12, rsp
mov rbp, r15
=== 1115
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov r15, rbp
movzx rsi, sil
=== 1116
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x114e70f43
add r15, 0x2b22537d; add_carry
mov r15, qword ptr [r15 + 0x3a8]
add r15, rsi
mov cl, byte ptr [r15]
movzx rcx, cl
shl rcx, 0x18
add r15, rcx
movabs r8, 0xe161f91f
push r8
push 0x32b06157
push 0x387e1e57
push 0x2e8e1e24
add qword ptr [rsp + 0x18], 0x5ea761a1; add
mov r13, r15
=== 1117
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 936
add rsp, 936
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov rsi, r13
=== 1118
mov rsi, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov dl, byte ptr [r9]
mov r14, 0xff
shl r14, 0x10
not r14
and rsi, r14
movzx r14, dl
shl r14, 0x10
or rsi, r14
=== 1119
mov rdi, rsi
push rdi
mov rsi, rsp
mov r14, rsi
=== 1120
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r12
mov rdi, r14
movzx r13, r13b
=== 1121
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xfe3502b2
add r12, 0x41d4600e; add_carry
mov r12, qword ptr [r12 + 0x7a0]
add r12, r13
mov dil, byte ptr [r12]
movzx rdi, dil
shl rdi, 0x20
add rdi, rdi
mov rbx, rdi
movabs r14, 0xc9291a8b
add r14, 0x76e04035; add
=== 1122
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1952
add rsp, 1952
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdx
mov r14, rbx
=== 1123
mov rsi, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov bpl, byte ptr [r10]
mov r11, 0xff
shl r11, 0x18
not r11
and rsi, r11
movzx r11, bpl
shl r11, 0x18
or rsi, r11
=== 1124
mov rdx, rsi
push rdx
mov r15, rsp
mov rsi, rsi
=== 1125
mov rax, r15
mov rbp, rsi
push rax
push 0x1ac71531
push 0x44ca4928
push 0x34b13102
=== 1126
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rcx
mov r14, rbp
movzx rdi, dil
=== 1127
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x1156aef70
add rax, 0x2a9e7350; add_carry
mov rax, qword ptr [rax]
add rax, rdi
mov dil, byte ptr [rax]
movzx rdi, dil
shl rdi, 0x28
add r14, rdi
movabs r14, 0x10523e832
push r14
push 0x1251839
push 0x22be17da
push 0x17ae0abd
push 0x54ef15d3
add qword ptr [rsp + 0x20], 0x3ae5728e; add
mov rbp, r14
=== 1128
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbx
mov rdi, rbp
=== 1129
mov r15, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov r10b, byte ptr [rax]
mov r8, 0xff
shl r8, 0x20
not r8
and r15, r8
movzx r8, r10b
shl r8, 0x20
or r15, r8
=== 1130
mov rbp, r15
movabs r14, 0x11bc2627b
add r14, 0x24c7566d; input
=== 1131
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 31
add rsp, 31
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
mov rdi, rbp
movzx r15, r15b
=== 1132
mov rax, r15
mov r9, 0xffffffff9b6a437c
add r9, 0x64f174e4
push r9
mov rsi, rdi
mul qword ptr [rsp]
mov rbp, rax
=== 1133
mov rbx, rsi
add rbx, rbp
=== 1134
mov rcx, rbx
push rcx
mov rsi, rsp
mov r14, rbx
=== 1135
mov r8, rsi
mov rbx, r14
push r8
push 0x33fb1eec
push 0x2f7662b8
push 0x32cc164b
push 0x708c2146
=== 1136
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov r15, rbx
movzx r14, r14b
=== 1137
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r15
movabs r15, 0x10798f8ef
add r15, 0x387051d1; xor
=== 1138
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1608
add rsp, 1608
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov r13, rsi
=== 1139
mov r15, r13
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r12
mov dl, byte ptr [rbp]
mov r15b, dl
=== 1140
mov rsi, r15
push rsi
mov rbp, rsp
mov r14, r15
=== 1141
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rsi
mov r15, r14
movzx r12, r12b
=== 1142
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x122703e47
push r8
push 0x40b55b4a
push 0x53151fec
push 0x6e9f099f
push 0x1e5b5e4c
add qword ptr [rsp + 0x20], 0x1d990c79; xor
mov r15, r15
=== 1143
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1016
add rsp, 1016
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdi
mov r15, r15
=== 1144
mov rbp, r15
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov sil, byte ptr [rdx]
mov rax, 0xff
shl rax, 8
not rax
and rbp, rax
movzx rax, sil
shl rax, 8
or rbp, rax
=== 1145
mov rdx, rbp
push rdx
mov r15, rsp
mov r13, rbp
=== 1146
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbp
mov rbx, r13
movzx r14, r14b
=== 1147
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rbx
movabs rbp, 0x104cc3126
add rbp, 0x3b3d199a; xor
=== 1148
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1696
add rsp, 1696
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r14
mov rsi, rdi
=== 1149
mov r13, rsi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r13
mov sil, byte ptr [rbx]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and r13, rbp
movzx rbp, sil
shl rbp, 0x10
or r13, rbp
=== 1150
mov rsi, r13
push rsi
mov r12, rsp
mov r13, r13
=== 1151
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov rbp, r13
movzx rbx, bl
=== 1152
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xd2caeb47
push rsi
push 0x354334a4
push 0x65a77427
push 0xdbb7552
add qword ptr [rsp + 0x18], 0x6d3e5f79; xor
mov r12, rbp
=== 1153
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1544
add rsp, 1544
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov rbx, r12
=== 1154
mov r13, rbx
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov r14b, byte ptr [rdx]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r13, rsi
movzx rsi, r14b
shl rsi, 0x18
or r13, rsi
=== 1155
mov r15, r13
push r15
mov rbx, rsp
mov rsi, r13
=== 1156
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov r13, rsi
movzx r14, r14b
=== 1157
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x11b640879
push rbp
push 0x4f1f14ec
push 0x2e504bdd
push 0x6f8c2ce5
add qword ptr [rsp + 0x18], 0x24a54247; xor
mov rsi, r13
=== 1158
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbx
mov r14, rsi
=== 1159
mov r12, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbx
mov r14b, byte ptr [rdi]
mov rbp, 0xff
shl rbp, 0x20
not rbp
and r12, rbp
movzx rbp, r14b
shl rbp, 0x20
or r12, rbp
=== 1160
mov rdi, r12
push rdi
mov rdi, rsp
mov r14, r12
=== 1161
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r8
mov r12, r14
movzx rbx, bl
=== 1162
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r12
movabs r13, 0x11e034703
add r13, 0x220603bd; xor
=== 1163
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbp
mov r15, r15
=== 1164
mov rbp, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov cl, byte ptr [r9]
mov r11, 0xff
shl r11, 0x28
not r11
and rbp, r11
movzx r11, cl
shl r11, 0x28
or rbp, r11
=== 1165
mov rdx, rbp
push rdx
mov rdi, rsp
mov r13, rbp
=== 1166
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r15
mov r13, r13
movzx r15, r15b
=== 1167
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r13
movabs r14, 0x11ae4cc73
add r14, 0x25247e4d; xor
=== 1168
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r13
mov rsi, r12
=== 1169
mov rbx, rsi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r13
mov bpl, byte ptr [r11]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and rbx, rsi
movzx rsi, bpl
shl rsi, 0x30
or rbx, rsi
=== 1170
mov r13, rbx
push r13
mov rbx, rsp
mov r12, rbx
=== 1171
mov rbx, rbx
mov rbp, r12
push rbx
push 0x2d912687
push 0xb9b06ad
push 0x638a7b3c
push 0x29c30bd3
=== 1172
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
mov r12, rbp
movzx rsi, sil
=== 1173
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x1305a36a2
push r10
push 0x61b306e5
push 0x5dbe5562
push 0x1b790b62
add qword ptr [rsp + 0x18], 0xfaf141e; xor
mov r13, r12
=== 1174
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rcx
mov rbx, r13
=== 1175
mov r15, rbx
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r14
mov r13b, byte ptr [rdx]
mov r9, 0xff
shl r9, 0x38
not r9
and r15, r9
movzx r9, r13b
shl r9, 0x38
or r15, r9
=== 1176
mov rdi, r15
movabs r14, 0xca35a304
add r14, 0x765415e4; input
=== 1177
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 23
add rsp, 23
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov rdi, rdi
movzx r15, r15b
=== 1178
mov rax, r15
mov r15, 0xffffffffc1600338
add r15, 0x3f4b09ad
push r15
mov rsi, rdi
mul qword ptr [rsp]
mov rdi, rax
=== 1179
mov rbx, rsi
xor rbx, rdi
=== 1180
mov rbp, rbx
push rbp
mov r12, rsp
mov rbp, rbx
=== 1181
mov rcx, r12
mov r14, rbp
push rcx
push 0x610439b8
push 0x7eda4267
push 0x6d29345e
=== 1182
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r8
mov r13, r14
movzx rbx, bl
=== 1183
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x13b890240
add r12, 0x4806080; add_carry
mov r12, qword ptr [r12 + 0x3b8]
add r12, rbx
mov r10b, byte ptr [r12]
movzx r10, r10b
shl r10, 8
add r13, r10
movabs rbp, 0xc737dd2f
push rbp
push 0x6bc36a78
push 0x4bc623d1
push 0xbdb17b9
push 0x7c4e7ec9
add qword ptr [rsp + 0x20], 0x78d17d91; add
mov rsi, r13
=== 1184
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 952
add rsp, 952
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov r15, rsi
=== 1185
mov rdi, r15
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r14
mov r11b, byte ptr [rbx]
mov dil, r11b
=== 1186
mov r14, rdi
push r14
mov r12, rsp
mov rbx, rdi
=== 1187
mov rsi, r12
mov rbx, rbx
push rsi
push 0x69f85573
push 0x4df70b92
push 0x58da031e
=== 1188
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov rdi, rbx
movzx rbx, bl
=== 1189
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xd6a01030
add r8, 0x69695290; add_carry
mov r8, qword ptr [r8 + 0x7c8]
add r8, rbx
mov bl, byte ptr [r8]
movzx rbx, bl
shl rbx, 0x10
add rdi, rbx
movabs r12, 0x1014d03fd
push r12
push 0x9e36d57
push 0x71246756
push 0x7ecc7af3
push 0x7ccc6f70
add qword ptr [rsp + 0x20], 0x3ebc56c3; add
mov rsi, rdi
=== 1190
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1992
add rsp, 1992
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdi
mov r15, rsi
=== 1191
mov rdi, r15
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rdi
mov r11b, byte ptr [rsi]
mov r12, 0xff
shl r12, 8
not r12
and rdi, r12
movzx r12, r11b
shl r12, 8
or rdi, r12
=== 1192
mov rcx, rdi
push rcx
mov r14, rsp
mov rbp, rdi
=== 1193
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov r12, rbp
movzx r14, r14b
=== 1194
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x10026e63a
add r13, 0x3fe27c86; add_carry
mov r13, qword ptr [r13 + 0x278]
add r13, r14
mov r12b, byte ptr [r13]
movzx r12, r12b
shl r12, 0x18
add r12, r12
movabs rax, 0xdc17217d
push rax
push 0x1aa36291
push 0x348706d1
push 0x2b120654
add qword ptr [rsp + 0x18], 0x63f23943; add
mov r13, r12
=== 1195
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 632
add rsp, 632
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r10
mov r14, r13
=== 1196
mov rbx, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov cl, byte ptr [r15]
mov r9, 0xff
shl r9, 0x10
not r9
and rbx, r9
movzx r9, cl
shl r9, 0x10
or rbx, r9
=== 1197
mov rbp, rbx
push rbp
mov rsi, rsp
mov rbp, rbx
=== 1198
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov rbx, rbp
movzx r15, r15b
=== 1199
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xe230201f
add r11, 0x5dd942a1; add_carry
mov r11, qword ptr [r11 + 0x2a0]
add r11, r15
mov sil, byte ptr [r11]
movzx rsi, sil
shl rsi, 0x20
add rbx, rsi
movabs rbp, 0xcc5b034c
push rbp
push 0x7fd029fd
push 0x3e850706
push 0x7cdb3b19
push 0x6a541859
add qword ptr [rsp + 0x20], 0x73ae5774; add
mov rsi, rbx
=== 1200
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 672
add rsp, 672
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov r13, rsi
=== 1201
mov rsi, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbp
mov r12b, byte ptr [r15]
mov r10, 0xff
shl r10, 0x18
not r10
and rsi, r10
movzx r10, r12b
shl r10, 0x18
or rsi, r10
=== 1202
mov r15, rsi
push r15
mov r12, rsp
mov r15, rsi
=== 1203
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
mov rdi, r15
movzx r15, r15b
=== 1204
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x12f24541a
add rdx, 0x10e50ea6; add_carry
mov rdx, qword ptr [rdx]
add rdx, r15
mov bpl, byte ptr [rdx]
movzx rbp, bpl
shl rbp, 0x30
add rdi, rbp
mov r14, rdi
movabs rbx, 0x10f300a84
add rbx, 0x30d9503c; add
=== 1205
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov r13, r14
=== 1206
mov rbp, r13
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r15
mov r9b, byte ptr [r9]
mov rcx, 0xff
shl rcx, 0x28
not rcx
and rbp, rcx
movzx rcx, r9b
shl rcx, 0x28
or rbp, rcx
=== 1207
mov r15, rbp
push r15
mov r12, rsp
mov rbp, rbp
=== 1208
mov rbx, r12
mov r12, rbp
push rbx
push 0x2e1e2794
push 0xe4c2525
push 0x2f615d8c
push 0x40000c84
=== 1209
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov r12, r12
movzx r15, r15b
=== 1210
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r12
movabs r12, 0x112df32b5
add r12, 0x2d2a280b; add
=== 1211
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov rdi, rsi
=== 1212
mov r15, rdi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov bpl, byte ptr [r14]
mov r13, 0xff
shl r13, 0x38
not r13
and r15, r13
movzx r13, bpl
shl r13, 0x38
or r15, r13
=== 1213
mov rbx, r15
movabs rbp, 0x13f3c3a22
add rbp, 0x14d7ec6; input
=== 1214
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov rbp, rbx
movzx rbx, bl
=== 1215
mov rax, rbx
mov rcx, 0xffffffffd0d387be
add rcx, 0x2f4106d6
push rcx
mov rbp, rbp
mul qword ptr [rsp]
mov r14, rax
=== 1216
mov r15, rbp
add r15, r14
=== 1217
mov rcx, r15
push rcx
mov rbp, rsp
mov r15, r15
=== 1218
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbp
mov rdi, r15
movzx r15, r15b
=== 1219
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xdcec2ee1
add rbx, 0x631d43df; sub_carry
mov rbx, qword ptr [rbx + 0xc8]
add rbx, r15
mov r11b, byte ptr [rbx]
movzx r11, r11b
shl r11, 8
sub rdi, r11
movabs r14, 0xd7625b8d
push r14
push 0x4fe6341
push 0x311637d6
push 0x41c2422f
push 0x17565ca7
add qword ptr [rsp + 0x20], 0x68a70f33; sub
mov r13, rdi
=== 1220
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 200
add rsp, 200
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov r15, r13
=== 1221
mov rbp, r15
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov r10b, byte ptr [r8]
mov bpl, r10b
=== 1222
mov rsi, rbp
push rsi
mov rbx, rsp
mov rdi, rbp
=== 1223
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rcx
mov rdi, rdi
movzx r12, r12b
=== 1224
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x1373914f7
add rbx, 0x8d05dc9; sub_carry
mov rbx, qword ptr [rbx + 0x720]
add rbx, r12
mov r14b, byte ptr [rbx]
movzx r14, r14b
shl r14, 0x10
sub rdi, r14
mov rsi, rdi
movabs rdi, 0x107d5086e
add rdi, 0x38346252; sub
=== 1225
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1824
add rsp, 1824
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rax
mov rsi, rsi
=== 1226
mov r15, rsi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov r12b, byte ptr [rax]
mov rbp, 0xff
shl rbp, 8
not rbp
and r15, rbp
movzx rbp, r12b
shl rbp, 8
or r15, rbp
=== 1227
mov rbp, r15
push rbp
mov r13, rsp
mov r15, r15
=== 1228
mov rbx, r13
mov r12, r15
push rbx
push 0x1c0f7852
push 0x26c46d7a
push 0x3c1007f9
push 0x2ba83ed0
=== 1229
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r15
mov rdi, r12
movzx r12, r12b
=== 1230
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x1368a2961
add rax, 0x97f495f; sub_carry
mov rax, qword ptr [rax + 0x598]
add rax, r12
mov r12b, byte ptr [rax]
movzx r12, r12b
shl r12, 0x18
sub rdi, r12
movabs r14, 0xf5aa072c
push r14
push 0x1b0d7766
push 0x18710315
push 0x7cd75cb4
add qword ptr [rsp + 0x18], 0x4a5f6394; sub
mov rbp, rdi
=== 1231
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1432
add rsp, 1432
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov r13, rbp
=== 1232
mov rdi, r13
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbp
mov r12b, byte ptr [rbp]
mov r13, 0xff
shl r13, 0x10
not r13
and rdi, r13
movzx r13, r12b
shl r13, 0x10
or rdi, r13
=== 1233
mov rdx, rdi
push rdx
mov r12, rsp
mov r14, rdi
=== 1234
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov rbx, r14
movzx rsi, sil
=== 1235
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x12b6f4b05
add rbp, 0x149a27bb; sub_carry
mov rbp, qword ptr [rbp + 0x4e0]
add rbp, rsi
mov r10b, byte ptr [rbp]
movzx r10, r10b
shl r10, 0x20
sub rbx, r10
mov r14, rbx
movabs rsi, 0xc4354a73
add rsi, 0x7bd4204d; sub
=== 1236
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1248
add rsp, 1248
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbp
mov r12, r14
=== 1237
mov r15, r12
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbx
mov r9b, byte ptr [r14]
mov rbx, 0xff
shl rbx, 0x18
not rbx
and r15, rbx
movzx rbx, r9b
shl rbx, 0x18
or r15, rbx
=== 1238
mov r12, r15
push r12
mov rbx, rsp
mov rdi, r15
=== 1239
mov rsi, rbx
mov rdi, rdi
push rsi
push 0x318861b1
push 0x6f9f1aa3
push 0x16953132
=== 1240
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbx
mov rsi, rdi
movzx r15, r15b
=== 1241
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x12722fb0a
add rdi, 0x18e677b6; sub_carry
mov rdi, qword ptr [rdi]
add rdi, r15
mov al, byte ptr [rdi]
movzx rax, al
shl rax, 0x28
sub rsi, rax
mov rbx, rsi
movabs rdi, 0x11b54f6d8
add rdi, 0x24b473e8; sub
=== 1242
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r15
mov r15, rbx
=== 1243
mov r14, r15
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov sil, byte ptr [r15]
mov rdi, 0xff
shl rdi, 0x20
not rdi
and r14, rdi
movzx rdi, sil
shl rdi, 0x20
or r14, rdi
=== 1244
mov rdi, r14
push rdi
mov rbx, rsp
mov r14, r14
=== 1245
mov rbx, rbx
mov rbp, r14
push rbx
push 0x52d904d4
push 0x6cd954b2
push 0x1dbf66fc
=== 1246
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov r13, rbp
movzx rdi, dil
=== 1247
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x109821276
add rax, 0x3687604a; sub_carry
mov rax, qword ptr [rax]
add rax, rdi
mov r8b, byte ptr [rax]
movzx r8, r8b
shl r8, 0x30
sub r13, r8
movabs r11, 0x109b902a5
push r11
push 0x53433516
push 0x76376531
push 0x67100a23
push 0x9260f7b
add qword ptr [rsp + 0x20], 0x3650681b; sub
mov r15, r13
=== 1248
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r14
mov rdi, r15
=== 1249
mov r15, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbp
mov al, byte ptr [r12]
mov r13, 0xff
shl r13, 0x28
not r13
and r15, r13
movzx r13, al
shl r13, 0x28
or r15, r13
=== 1250
mov rsi, r15
movabs rbx, 0x112b59c10
add rbx, 0x2dd41cd8; input
=== 1251
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 15
add rsp, 15
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdi
mov r14, rsi
movzx r12, r12b
=== 1252
mov rax, r12
mov rdi, 0xffffffff9755f96c
add rdi, 0x69480d42
push rdi
mov r13, r14
mul qword ptr [rsp]
mov rbp, rax
=== 1253
mov r12, r13
sub r12, rbp
=== 1254
mov r8, r12
push r8
mov r12, rsp
mov r14, r12
=== 1255
mov r13, r12
mov rbp, r14
push r13
push 0x5d8b6911
push 0x23896560
push 0x5fd917c5
=== 1256
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r13
mov rbp, rbp
movzx r13, r13b
=== 1257
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xcbd51e64
add r11, 0x7434545c; sub_carry
mov r11, qword ptr [r11 + 0x320]
add r11, r13
mov bpl, byte ptr [r11]
movzx rbp, bpl
shl rbp, 8
sub rbp, rbp
movabs r12, 0xcc75ffc2
push r12
push 0xe0a3c53
push 0x1e3e5ab2
push 0x48b64a40
push 0x4ccf3f38
add qword ptr [rsp + 0x20], 0x73936afe; sub
mov rbx, rbp
=== 1258
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 800
add rsp, 800
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r15
mov r12, rbx
=== 1259
mov r12, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov bpl, byte ptr [rdx]
mov r12b, bpl
=== 1260
mov r15, r12
push r15
mov r15, rsp
mov rsi, r12
=== 1261
mov r15, r15
mov rbx, rsi
push r15
push 0x29411221
push 0x6dd1158
push 0x4b423a62
push 0x11d13469
=== 1262
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov r15, rbx
movzx rbx, bl
=== 1263
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x11c414ecc
add r15, 0x23c823f4; sub_carry
mov r15, qword ptr [r15 + 0x100]
add r15, rbx
mov r15b, byte ptr [r15]
movzx r15, r15b
shl r15, 0x10
sub r15, r15
mov rsi, r15
movabs r14, 0xf1460f85
add r14, 0x4ec35b3b; sub
=== 1264
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 256
add rsp, 256
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbx
mov r12, rsi
=== 1265
mov r15, r12
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov bpl, byte ptr [r14]
mov r14, 0xff
shl r14, 8
not r14
and r15, r14
movzx r14, bpl
shl r14, 8
or r15, r14
=== 1266
mov r8, r15
push r8
mov rsi, rsp
mov r13, r15
=== 1267
mov rbp, rsi
mov rsi, r13
push rbp
push 0x7e420511
push 0x77e23414
push 0x20456058
=== 1268
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov r13, rsi
movzx r12, r12b
=== 1269
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xdc2f3dc9
add rdx, 0x63da34f7; sub_carry
mov rdx, qword ptr [rdx + 0x630]
add rdx, r12
mov dl, byte ptr [rdx]
movzx rdx, dl
shl rdx, 0x18
sub r13, rdx
mov r12, r13
movabs r14, 0xfa94f76c
add r14, 0x45747354; sub
=== 1270
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1584
add rsp, 1584
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rsi
mov r15, r12
=== 1271
mov r12, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov r10b, byte ptr [r9]
mov r15, 0xff
shl r15, 0x10
not r15
and r12, r15
movzx r15, r10b
shl r15, 0x10
or r12, r15
=== 1272
mov rbp, r12
push rbp
mov rdi, rsp
mov r14, r12
=== 1273
mov r9, rdi
mov rbp, r14
push r9
push 0x4f9e6341
push 0x70e6adc
push 0x47837be6
=== 1274
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r12
mov rdi, rbp
movzx r14, r14b
=== 1275
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xce1616d3
add rax, 0x71f35bed; sub_carry
mov rax, qword ptr [rax + 0x568]
add rax, r14
mov r13b, byte ptr [rax]
movzx r13, r13b
shl r13, 0x20
sub rdi, r13
mov rdi, rdi
movabs r13, 0x1041af251
add r13, 0x3bee786f; sub
=== 1276
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1384
add rsp, 1384
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r10
mov rbx, rdi
=== 1277
mov rbx, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r15
mov r14b, byte ptr [r9]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and rbx, rdx
movzx rdx, r14b
shl rdx, 0x18
or rbx, rdx
=== 1278
mov rcx, rbx
push rcx
mov rbx, rsp
mov r15, rbx
=== 1279
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov rbp, r15
movzx r12, r12b
=== 1280
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xd0251b2e
add r14, 0x6fe45792; sub_carry
mov r14, qword ptr [r14]
add r14, r12
mov r10b, byte ptr [r14]
movzx r10, r10b
shl r10, 0x28
sub rbp, r10
mov r13, rbp
movabs r15, 0xd5ec0fd7
add r15, 0x6a1d5ae9; sub
=== 1281
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov rsi, r13
=== 1282
mov rdi, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov r10b, byte ptr [r8]
mov rsi, 0xff
shl rsi, 0x20
not rsi
and rdi, rsi
movzx rsi, r10b
shl rsi, 0x20
or rdi, rsi
=== 1283
movabs rcx, 0x10c7838fb
push rcx
push 0x1b7041ad
push 0x2d584452
push 0x4f1574b2
push 0x22cf3c8f
add qword ptr [rsp + 0x20], 0x34117fed; input
mov rdi, rdi
=== 1284
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov r15, rdi
movzx r14, r14b
=== 1285
mov rax, r14
mov r10, 0xfffffffff8ac6c89
add r10, 0x84f3158
push r10
mov r15, r15
mul qword ptr [rsp]
mov r14, rax
=== 1286
mov rsi, r15
xor rsi, r14
=== 1287
mov r11, rsi
push r11
mov r15, rsp
mov rsi, rsi
=== 1288
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov rbx, rsi
movzx r13, r13b
=== 1289
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x1392ffd47
push rcx
push 0x79d71d50
push 0x7c660d6c
push 0x44a002bb
add qword ptr [rsp + 0x18], 0x6d94d79; xor
mov r15, rbx
=== 1290
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1976
add rsp, 1976
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r12
mov rsi, r15
=== 1291
mov r12, rsi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbp
mov al, byte ptr [r15]
mov r12b, al
=== 1292
mov r11, r12
push r11
mov rbx, rsp
mov r12, r12
=== 1293
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r15
mov r14, r12
movzx r12, r12b
=== 1294
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r14
movabs r13, 0x1158a42bd
add r13, 0x2a7f0803; xor
=== 1295
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 408
add rsp, 408
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov r13, r14
=== 1296
mov rdi, r13
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rdi
mov r10b, byte ptr [rbx]
mov rdx, 0xff
shl rdx, 8
not rdx
and rdi, rdx
movzx rdx, r10b
shl rdx, 8
or rdi, rdx
=== 1297
mov rbp, rdi
push rbp
mov r12, rsp
mov r13, rdi
=== 1298
mov r15, r12
mov rbp, r13
push r15
push 0x1fa51989
push 0x6f8268c3
push 0x1f217ab
push 0x2d1f4764
=== 1299
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov rdi, rbp
movzx r13, r13b
=== 1300
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rdi
movabs rdi, 0xf17df861
add rdi, 0x4e8b525f; xor
=== 1301
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 432
add rsp, 432
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbp
mov r12, r14
=== 1302
mov rdi, r12
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbp
mov r10b, byte ptr [r12]
mov r11, 0xff
shl r11, 0x10
not r11
and rdi, r11
movzx r11, r10b
shl r11, 0x10
or rdi, r11
=== 1303
mov rax, rdi
push rax
mov r12, rsp
mov rsi, rdi
=== 1304
mov rcx, r12
mov rbp, rsi
push rcx
push 0x1f907f65
push 0x55e63a48
push 0x4eb86769
=== 1305
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r11
mov rbp, rbp
movzx r12, r12b
=== 1306
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rbp
movabs r13, 0x1290a47fd
add r13, 0x16ff02c3; xor
=== 1307
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 624
add rsp, 624
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rcx
mov rsi, r12
=== 1308
mov rsi, rsi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r15
mov r8b, byte ptr [r11]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and rsi, rdx
movzx rdx, r8b
shl rdx, 0x18
or rsi, rdx
=== 1309
mov rsi, rsi
movabs r15, 0x10435a977
add r15, 0x3c540f71; input
=== 1310
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 27
add rsp, 27
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbp
mov r12, rsi
movzx r14, r14b
=== 1311
mov rax, r14
mov r13, 0xffffffff8e7e6cf9
add r13, 0x722a3818
push r13
mov rbx, r12
mul qword ptr [rsp]
mov r15, rax
=== 1312
mov r12, rbx
sub r12, r15
=== 1313
mov rbp, r12
push rbp
mov rbp, rsp
mov r13, r12
=== 1314
mov rdi, rbp
mov r13, r13
push rdi
push 0x2b680005
push 0x2cce67ab
push 0x2d07100e
push 0x462a202e
=== 1315
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov r12, r13
movzx r15, r15b
=== 1316
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x1340a1eaf
push rsi
push 0x70a65dc7
push 0x53ac4891
push 0x5bbf6c75
push 0x16ea569e
add qword ptr [rsp + 0x20], 0xbff2c11; xor
mov r14, r12
=== 1317
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 64
add rsp, 64
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rsi
mov r12, r14
=== 1318
mov r15, r12
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov r9b, byte ptr [r12]
mov r15b, r9b
=== 1319
mov r13, r15
push r13
mov r15, rsp
mov r13, r15
=== 1320
mov rbx, r15
mov r13, r13
push rbx
push 0x4d1e1e1c
push 0x1ea10649
push 0x4d306c2
push 0x8715874
=== 1321
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov r14, r13
movzx r13, r13b
=== 1322
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x111fef02d
push r8
push 0x49d27070
push 0x315d171c
push 0x92270f0
push 0x599d2073
add qword ptr [rsp + 0x20], 0x2e0a5a93; xor
mov r13, r14
=== 1323
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1168
add rsp, 1168
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov rdi, r13
=== 1324
mov rdi, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r14
mov cl, byte ptr [r12]
mov r15, 0xff
shl r15, 8
not r15
and rdi, r15
movzx r15, cl
shl r15, 8
or rdi, r15
=== 1325
mov r12, rdi
push r12
mov rbp, rsp
mov r13, rdi
=== 1326
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r15
mov r13, r13
movzx rbp, bpl
=== 1327
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r13
movabs r12, 0x13b96de8a
add r12, 0x4726c36; xor
=== 1328
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 248
add rsp, 248
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r11
mov rsi, r13
=== 1329
mov rbp, rsi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r13
mov r15b, byte ptr [r15]
mov rdx, 0xff
shl rdx, 0x10
not rdx
and rbp, rdx
movzx rdx, r15b
shl rdx, 0x10
or rbp, rdx
=== 1330
mov rdi, rbp
push rdi
mov r12, rsp
mov r15, rbp
=== 1331
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov r13, r15
movzx r12, r12b
=== 1332
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r13
movabs r13, 0x12fd7f294
add r13, 0x1031582c; xor
=== 1333
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1328
add rsp, 1328
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rdi, rbp
=== 1334
mov r15, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r13
mov r12b, byte ptr [r8]
mov r13, 0xff
shl r13, 0x18
not r13
and r15, r13
movzx r13, r12b
shl r13, 0x18
or r15, r13
=== 1335
mov r12, r15
push r12
mov rbx, rsp
mov rsi, r15
=== 1336
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov r14, rsi
movzx r13, r13b
=== 1337
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x130c30975
push r10
push 0x1a2f5ddd
push 0x45e437e7
push 0x518708ed
add qword ptr [rsp + 0x18], 0xf46414b; xor
mov r13, r14
=== 1338
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdi
mov r15, r13
=== 1339
mov r13, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov sil, byte ptr [rax]
mov rdi, 0xff
shl rdi, 0x30
not rdi
and r13, rdi
movzx rdi, sil
shl rdi, 0x30
or r13, rdi
=== 1340
mov rbx, r13
movabs r12, 0x13fa1a2e9
add r12, 0xe815ff; input
=== 1341
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 19
add rsp, 19
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdi
mov r14, rbx
movzx r12, r12b
=== 1342
mov rax, r12
mov rdx, 0xfffffffffd571321
add rdx, 0x37c336c
push rdx
mov r12, r14
mul qword ptr [rsp]
mov rsi, rax
=== 1343
mov r14, r12
add r14, rsi
=== 1344
mov r13, r14
push r13
mov r15, rsp
mov rbp, r14
=== 1345
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r12
mov rbp, rbp
movzx r14, r14b
=== 1346
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xd4ac0106
add rax, 0x6b5d61ba; add_carry
mov rax, qword ptr [rax + 0x240]
add rax, r14
mov bl, byte ptr [rax]
movzx rbx, bl
shl rbx, 8
add rbp, rbx
mov rbp, rbp
movabs rbx, 0xf063ecfd
add rbx, 0x4fa56dc3; add
=== 1347
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 576
add rsp, 576
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov r15, rbp
=== 1348
mov r15, r15
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r13
mov r14b, byte ptr [rsi]
mov r15b, r14b
=== 1349
mov r10, r15
push r10
mov r12, rsp
mov r15, r15
=== 1350
mov r13, r12
mov r12, r15
push r13
push 0xb8f75ac
push 0x109478f
push 0x1ea118d9
push 0x1ac760b
=== 1351
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov rdi, r12
movzx r12, r12b
=== 1352
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x132af37a7
add r13, 0xd5a2b19; add_carry
mov r13, qword ptr [r13 + 0x3d8]
add r13, r12
mov r15b, byte ptr [r13]
movzx r15, r15b
shl r15, 0x10
add rdi, r15
movabs r12, 0xf5e5ec4d
push r12
push 0x437504c6
push 0x2f0e748c
push 0x592716a9
push 0x13372452
add qword ptr [rsp + 0x20], 0x4a236e73; add
mov rsi, rdi
=== 1353
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 984
add rsp, 984
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbx
mov r13, rsi
=== 1354
mov rbp, r13
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov dl, byte ptr [r14]
mov r11, 0xff
shl r11, 8
not r11
and rbp, r11
movzx r11, dl
shl r11, 8
or rbp, r11
=== 1355
mov rbx, rbp
push rbx
mov rbx, rsp
mov r14, rbp
=== 1356
mov r15, rbx
mov rbp, r14
push r15
push 0x333262ee
push 0x29f735e
push 0xb2e7d7e
push 0x51784871
=== 1357
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov rdi, rbp
movzx rbx, bl
=== 1358
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xdaaa445f
add rsi, 0x655f1e61; add_carry
mov rsi, qword ptr [rsi + 0x2e8]
add rsi, rbx
mov r11b, byte ptr [rsi]
movzx r11, r11b
shl r11, 0x18
add rdi, r11
movabs r10, 0xff9348ad
push r10
push 0x16770a27
push 0xbb53d8b
push 0x463120b5
add qword ptr [rsp + 0x18], 0x40761213; add
mov r15, rdi
=== 1359
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 744
add rsp, 744
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r12
mov rdi, r15
=== 1360
mov r12, rdi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbp
mov sil, byte ptr [rbp]
mov rax, 0xff
shl rax, 0x10
not rax
and r12, rax
movzx rax, sil
shl rax, 0x10
or r12, rax
=== 1361
mov rbx, r12
push rbx
mov rsi, rsp
mov r14, r12
=== 1362
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov r13, r14
movzx rsi, sil
=== 1363
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xdb6f3ad4
add r8, 0x649a27ec; add_carry
mov r8, qword ptr [r8 + 0x250]
add r8, rsi
mov r11b, byte ptr [r8]
movzx r11, r11b
shl r11, 0x20
add r13, r11
mov r13, r13
movabs rdi, 0x1225eef0e
add rdi, 0x1daa6bb2; add
=== 1364
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 592
add rsp, 592
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov rdi, r13
=== 1365
mov r12, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov r10b, byte ptr [r8]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and r12, rcx
movzx rcx, r10b
shl rcx, 0x18
or r12, rcx
=== 1366
mov r8, r12
push r8
mov rsi, rsp
mov r13, r12
=== 1367
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov rsi, r13
movzx r14, r14b
=== 1368
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rsi
movabs r14, 0x119002277
add r14, 0x27093849; add
=== 1369
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rsi
mov rbx, rdi
=== 1370
mov rdi, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov bpl, byte ptr [rax]
mov r9, 0xff
shl r9, 0x38
not r9
and rdi, r9
movzx r9, bpl
shl r9, 0x38
or rdi, r9
=== 1371
mov r12, rdi
push r12
mov r15, rsp
mov rbx, rdi
=== 1372
mov rbp, r15
mov r15, rbx
push rbp
push 0x2e6d7d1e
push 0x1cfc1ada
push 0x63812707
=== 1373
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov rbx, r15
movzx r15, r15b
=== 1374
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x120f31214
add rdx, 0x1f1660ac; sub_carry
mov rdx, qword ptr [rdx + 0x510]
add rdx, r15
mov al, byte ptr [rdx]
movzx rax, al
shl rax, 8
sub rbx, rax
mov rbp, rbx
movabs rbx, 0x106e7f048
add rbx, 0x39217a78; sub
=== 1375
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1296
add rsp, 1296
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov rbx, rbp
=== 1376
mov rsi, rbx
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov r14b, byte ptr [r13]
mov sil, r14b
=== 1377
mov r8, rsi
push r8
mov r14, rsp
mov rbp, rsi
=== 1378
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov r13, rbp
movzx r12, r12b
=== 1379
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xef5b3528
add rsi, 0x50ae3d98; sub_carry
mov rsi, qword ptr [rsi + 0x90]
add rsi, r12
mov r15b, byte ptr [rsi]
movzx r15, r15b
shl r15, 0x10
sub r13, r15
mov r13, r13
movabs rbx, 0xf4d103bd
add rbx, 0x4b386703; sub
=== 1380
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 144
add rsp, 144
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdx
mov rbx, r13
=== 1381
mov r12, rbx
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r12
mov r15b, byte ptr [r14]
mov r10, 0xff
shl r10, 8
not r10
and r12, r10
movzx r10, r15b
shl r10, 8
or r12, r10
=== 1382
mov rbp, r12
push rbp
mov rbp, rsp
mov rbx, r12
=== 1383
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
mov r12, rbx
movzx rsi, sil
=== 1384
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xed8d5381
add r10, 0x527c1f3f; sub_carry
mov r10, qword ptr [r10 + 0x320]
add r10, rsi
mov al, byte ptr [r10]
movzx rax, al
shl rax, 0x18
sub r12, rax
movabs r10, 0x1296cfc7d
push r10
push 0x765b1a45
push 0x2546555a
push 0x47095ab3
add qword ptr [rsp + 0x18], 0x169c6e43; sub
mov r15, r12
=== 1385
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 800
add rsp, 800
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov rsi, r15
=== 1386
mov rdi, rsi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r14
mov bl, byte ptr [rbx]
mov rax, 0xff
shl rax, 0x10
not rax
and rdi, rax
movzx rax, bl
shl rax, 0x10
or rdi, rax
=== 1387
mov r10, rdi
push r10
mov r13, rsp
mov rdi, rdi
=== 1388
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r10
mov rdi, rdi
movzx rsi, sil
=== 1389
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x1290823da
add rsi, 0x17014ee6; sub_carry
mov rsi, qword ptr [rsi + 0x778]
add rsi, rsi
mov r12b, byte ptr [rsi]
movzx r12, r12b
shl r12, 0x20
sub rdi, r12
mov rbp, rdi
movabs r14, 0xc1f74d0f
add r14, 0x7e121db1; sub
=== 1390
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1912
add rsp, 1912
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov rbp, rbp
=== 1391
mov r13, rbp
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov r11b, byte ptr [rbp]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r13, rsi
movzx rsi, r11b
shl rsi, 0x18
or r13, rsi
=== 1392
mov r12, r13
push r12
mov r15, rsp
mov rdi, r13
=== 1393
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov r14, rdi
movzx r13, r13b
=== 1394
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xedc01d7e
add r13, 0x52495542; sub_carry
mov r13, qword ptr [r13 + 0x7f8]
add r13, r13
mov r11b, byte ptr [r13]
movzx r11, r11b
shl r11, 0x28
sub r14, r11
mov r12, r14
movabs r13, 0x100844cc9
add r13, 0x3f851df7; sub
=== 1395
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r13, r12
=== 1396
mov r13, r13
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbx
mov r9b, byte ptr [r14]
mov rax, 0xff
shl rax, 0x20
not rax
and r13, rax
movzx rax, r9b
shl rax, 0x20
or r13, rax
=== 1397
mov r12, r13
push r12
mov r15, rsp
mov r13, r13
=== 1398
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov r14, r13
movzx rsi, sil
=== 1399
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x13a9a403e
add rbx, 0x56f3282; sub_carry
mov rbx, qword ptr [rbx + 0x7f8]
add rbx, rsi
mov r10b, byte ptr [rbx]
movzx r10, r10b
shl r10, 0x30
sub r14, r10
mov rbx, r14
movabs rsi, 0xea7f6705
add rsi, 0x558a03bb; sub
=== 1400
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r10
mov r14, rbx
=== 1401
mov rdi, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov r11b, byte ptr [rax]
mov rbp, 0xff
shl rbp, 0x28
not rbp
and rdi, rbp
movzx rbp, r11b
shl rbp, 0x28
or rdi, rbp
=== 1402
mov rbp, rdi
push rbp
mov rbp, rsp
mov r12, rdi
=== 1403
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov r14, r12
movzx r13, r13b
=== 1404
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xc0442888
add rbp, 0x7fc54a38; sub_carry
mov rbp, qword ptr [rbp + 0x7f8]
add rbp, r13
mov bpl, byte ptr [rbp]
movzx rbp, bpl
shl rbp, 0x38
sub r14, rbp
mov r12, r14
movabs rbp, 0x1301e6841
add rbp, 0xfeb027f; sub
=== 1405
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rsi
mov r12, r12
=== 1406
mov r13, r12
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov r11b, byte ptr [r9]
mov r15, 0xff
shl r15, 0x30
not r15
and r13, r15
movzx r15, r11b
shl r15, 0x30
or r13, r15
=== 1407
mov rcx, r13
push rcx
mov r14, rsp
mov rbx, r13
=== 1408
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov rbx, rbx
movzx rdi, dil
=== 1409
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x13985078d
push rdx
push 0x112921a7
push 0x40994f4c
push 0x608f3481
push 0x329109f7
add qword ptr [rsp + 0x20], 0x6846333; sub
mov rdi, rbx
=== 1410
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r11
mov r14, rdi
=== 1411
mov r12, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rdi
mov al, byte ptr [r15]
mov rsi, 0xff
shl rsi, 0x38
not rsi
and r12, rsi
movzx rsi, al
shl rsi, 0x38
or r12, rsi
=== 1412
mov rax, r12
push rax
mov rbp, rsp
mov rbx, r12
=== 1413
mov rbp, rbp
mov r12, rbx
push rbp
push 0x2cf0cb1
push 0x3e7c0ecd
push 0x63ed1868
push 0xaff08e6
=== 1414
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov r13, r12
movzx rbx, bl
=== 1415
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r13
movabs r13, 0x13e812376
add r13, 0x1881f4a
=== 1416
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rax
mov r12, rbx
=== 1417
mov r15, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r15
mov r8b, byte ptr [rcx]
mov r10, 0xff
shl r10, 0x18
not r10
and r15, r10
movzx r10, r8b
shl r10, 0x18
or r15, r10
=== 1418
mov rbx, r15
push rbx
mov r12, rsp
mov rbp, r15
=== 1419
mov rdx, r12
mov rbp, rbp
push rdx
push 0x35a144a3
push 0x30365736
push 0x36f259a7
push 0x17f50d66
=== 1420
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov rsi, rbp
movzx rbp, bpl
=== 1421
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rsi
movabs rdi, 0x137dd0273
add rdi, 0x82c404d
=== 1422
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbp
mov r13, r14
=== 1423
mov rbx, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov dl, byte ptr [rax]
mov r10, 0xff
shl r10, 0x20
not r10
and rbx, r10
movzx r10, dl
shl r10, 0x20
or rbx, r10
=== 1424
mov r8, rbx
push r8
mov r12, rsp
mov r15, rbx
=== 1425
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov rbx, r15
movzx rsi, sil
=== 1426
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xf276dcba
push r13
push 0x150b3c7a
push 0x264319ab
push 0x415e20c2
add qword ptr [rsp + 0x18], 0x4d926606
mov rbx, rbx
=== 1427
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rax
mov rbp, rbx
=== 1428
mov rdi, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r14
mov r13b, byte ptr [r12]
mov r11, 0xff
shl r11, 0x28
not r11
and rdi, r11
movzx r11, r13b
shl r11, 0x28
or rdi, r11
=== 1429
mov rbp, rdi
push rbp
mov r13, rsp
mov rdi, rdi
=== 1430
mov r12, r13
mov r14, rdi
push r12
push 0x2b736ed4
push 0xeac6cae
push 0x165456d7
=== 1431
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdi
mov rbx, r14
movzx rdi, dil
=== 1432
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rbx
movabs rbp, 0x127ed2aa3
add rbp, 0x181c181d
=== 1433
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rax
mov rbx, rbx
=== 1434
mov r12, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov bl, byte ptr [r9]
mov rsi, 0xff
shl rsi, 0x38
not rsi
and r12, rsi
movzx rsi, bl
shl rsi, 0x38
or r12, rsi
=== 1435
mov rsi, r12
movabs rbp, 0xef84af55
add rbp, 0x507b629b
test rsi, rsi
lea r13, [rip - 0x31c470]
cmovne r13, rbp
jmp r13
=== 1436
movabs rdx, 0xda747860
push rdx
push 0x5d150614
push 0x368f3845
push 0x64b03acd
push 0x21a9319b
add qword ptr [rsp + 0x20], 0x66154088; input
=== 1437
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 12
add rsp, 12
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbx
movzx r14, r14b
=== 1438
mov rax, r14
mov r10, 0xffffffff9b010064
add r10, 0x65630b45
push r10
mul qword ptr [rsp]
mov r14, rax
=== 1439
mov rsi, r14
push rsi
mov rbp, rsp
mov r14, r14
=== 1440
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r12
mov r15, r14
movzx r14, r14b
=== 1441
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x1122234b8
add rdi, 0x2de72e08; add_carry
mov rdi, qword ptr [rdi + 0x2e0]
add rdi, r14
mov r12b, byte ptr [rdi]
movzx r12, r12b
shl r12, 8
add r15, r12
movabs rcx, 0xccade4da
push rcx
push 0x691143ee
push 0x7631fff
push 0x56e86f1e
push 0x75826f0
add qword ptr [rsp + 0x20], 0x735b75e6; add
mov r14, r15
=== 1442
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 736
add rsp, 736
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov rbx, r14
=== 1443
mov r15, rbx
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r12
mov r9b, byte ptr [r11]
mov r15b, r9b
=== 1444
mov rdi, r15
push rdi
mov r14, rsp
mov r12, r15
=== 1445
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov r12, r12
movzx r14, r14b
=== 1446
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xf0bb165f
add rbp, 0x4f4e4c61; add_carry
mov rbp, qword ptr [rbp + 0x3d0]
add rbp, r14
mov r13b, byte ptr [rbp]
movzx r13, r13b
shl r13, 0x10
add r12, r13
mov rsi, r12
movabs r13, 0x136d34eac
add r13, 0x9360c14; add
=== 1447
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 976
add rsp, 976
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rcx
mov r14, rsi
=== 1448
mov r12, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r12
mov dl, byte ptr [rdi]
mov r14, 0xff
shl r14, 8
not r14
and r12, r14
movzx r14, dl
shl r14, 8
or r12, r14
=== 1449
mov rdi, r12
push rdi
mov rbp, rsp
mov r14, r12
=== 1450
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov r13, r14
movzx r15, r15b
=== 1451
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xf2f60c3f
add rcx, 0x4d135681; add_carry
mov rcx, qword ptr [rcx + 0x360]
add rcx, r15
mov r10b, byte ptr [rcx]
movzx r10, r10b
shl r10, 0x18
add r13, r10
mov rdi, r13
movabs rbp, 0x13a2f1a33
add rbp, 0x5da408d; add
=== 1452
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 864
add rsp, 864
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov rbp, rdi
=== 1453
mov rdi, rbp
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov r15b, byte ptr [rcx]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and rdi, rbx
movzx rbx, r15b
shl rbx, 0x10
or rdi, rbx
=== 1454
mov r14, rdi
push r14
mov r15, rsp
mov r12, rdi
=== 1455
mov r8, r15
mov r14, r12
push r8
push 0x1bc0524d
push 0x26c26794
push 0x763d6fac
push 0x2ee801d0
=== 1456
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov r13, r14
movzx rdi, dil
=== 1457
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xfbab4c5d
add rdi, 0x445e1663; add_carry
mov rdi, qword ptr [rdi + 0x288]
add rdi, rdi
mov r11b, byte ptr [rdi]
movzx r11, r11b
shl r11, 0x20
add r13, r11
mov rsi, r13
movabs rbx, 0x1106c3ee9
add rbx, 0x2f9d1bd7; add
=== 1458
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 648
add rsp, 648
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov rdi, rsi
=== 1459
mov r15, rdi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rsi
mov sil, byte ptr [rbp]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and r15, rdx
movzx rdx, sil
shl rdx, 0x18
or r15, rdx
=== 1460
mov rbp, r15
push rbp
mov rbx, rsp
mov r13, r15
=== 1461
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov r13, r13
movzx rbp, bpl
=== 1462
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xd9b02252
add rax, 0x6659406e; add_carry
mov rax, qword ptr [rax]
add rax, rbp
mov bpl, byte ptr [rax]
movzx rbp, bpl
shl rbp, 0x28
add r13, rbp
movabs r8, 0xc2a64c8e
push r8
push 0x3a9913e3
push 0x369d0481
push 0x7f2452ff
add qword ptr [rsp + 0x18], 0x7d630e32; add
mov r14, r13
=== 1463
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdx
mov r15, r14
=== 1464
mov r14, r15
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r13
mov sil, byte ptr [r12]
mov rbx, 0xff
shl rbx, 0x20
not rbx
and r14, rbx
movzx rbx, sil
shl rbx, 0x20
or r14, rbx
=== 1465
mov r14, r14
push r14
mov r12, rsp
mov r14, r14
=== 1466
mov r12, r12
mov rbp, r14
push r12
push 0x7d543273
push 0x65da1b61
push 0x1a797684
push 0x28655010
=== 1467
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdi
mov rdi, rbp
movzx rbp, bpl
=== 1468
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xca31dcfe
push r10
push 0x56f05fcf
push 0x15d50f5d
push 0x254d17a2
add qword ptr [rsp + 0x18], 0x75d77dc2; add
mov r12, rdi
=== 1469
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r11
mov rbx, r12
=== 1470
mov rsi, rbx
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r13
mov r15b, byte ptr [r15]
mov rdi, 0xff
shl rdi, 0x38
not rdi
and rsi, rdi
movzx rdi, r15b
shl rdi, 0x38
or rsi, rdi
=== 1471
movabs rbx, 0x127e73b8e
push rbx
push 0x7e8a6d22
push 0x352057c7
push 0x6f996d98
add qword ptr [rsp + 0x18], 0x18a27d5a; input
mov r12, rsi
=== 1472
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rsi
mov rbx, r12
movzx rbp, bpl
=== 1473
mov rax, rbp
mov r10, 0xffffffff8c09a03e
add r10, 0x74e839a7
push r10
mov r15, rbx
mul qword ptr [rsp]
mov r12, rax
=== 1474
mov rbp, r15
sub rbp, r12
=== 1475
mov r10, rbp
push r10
mov rsi, rsp
mov r15, rbp
=== 1476
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov r14, r15
movzx r15, r15b
=== 1477
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xd430170b
add r11, 0x6bd94bb5; add_carry
mov r11, qword ptr [r11 + 0x358]
add r11, r15
mov bl, byte ptr [r11]
movzx rbx, bl
shl rbx, 8
add r14, rbx
mov r14, r14
movabs rbp, 0xf2ac4256
add rbp, 0x4d5d186a; add
=== 1478
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 856
add rsp, 856
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov r14, r14
=== 1479
mov rsi, r14
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r13
mov bpl, byte ptr [rcx]
mov sil, bpl
=== 1480
mov r10, rsi
push r10
mov r12, rsp
mov r14, rsi
=== 1481
mov r9, r12
mov r15, r14
push r9
push 0x67516a8a
push 0x33631731
push 0x850400b
=== 1482
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r14
mov rbp, r15
movzx r15, r15b
=== 1483
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xe240fdc7
add r14, 0x5dc864f9; add_carry
mov r14, qword ptr [r14 + 0x268]
add r14, r15
mov bpl, byte ptr [r14]
movzx rbp, bpl
shl rbp, 0x10
add rbp, rbp
mov r13, rbp
movabs rdi, 0xfc2d28f8
add rdi, 0x43dc31c8; add
=== 1484
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 616
add rsp, 616
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov rdi, r13
=== 1485
mov rbp, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r15
mov r11b, byte ptr [rcx]
mov rax, 0xff
shl rax, 8
not rax
and rbp, rax
movzx rax, r11b
shl rax, 8
or rbp, rax
=== 1486
mov rsi, rbp
push rsi
mov r14, rsp
mov rsi, rbp
=== 1487
mov rcx, r14
mov rdi, rsi
push rcx
push 0x252254af
push 0x3a4f2cc7
push 0x611135fd
push 0x6f4b6dcd
=== 1488
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov r12, rdi
movzx r15, r15b
=== 1489
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x1215b5f87
add rdi, 0x1eae0339; add_carry
mov rdi, qword ptr [rdi + 0x210]
add rdi, r15
mov dl, byte ptr [rdi]
movzx rdx, dl
shl rdx, 0x18
add r12, rdx
movabs r12, 0xd27c4ee1
push r12
push 0x73da0402
push 0x5ba2199d
push 0x75dc0217
push 0x821282e
add qword ptr [rsp + 0x20], 0x6d8d0bdf; add
mov rdi, r12
=== 1490
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 528
add rsp, 528
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r11
mov rbp, rdi
=== 1491
mov r15, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov r8b, byte ptr [r9]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and r15, rbp
movzx rbp, r8b
shl rbp, 0x10
or r15, rbp
=== 1492
mov r14, r15
push r14
mov rsi, rsp
mov rbp, r15
=== 1493
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov r12, rbp
movzx rdi, dil
=== 1494
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x110eae41b
add rbx, 0x2f1e7ea5; add_carry
mov rbx, qword ptr [rbx + 0x458]
add rbx, rdi
mov bl, byte ptr [rbx]
movzx rbx, bl
shl rbx, 0x20
add r12, rbx
movabs rcx, 0x1133c38e2
push rcx
push 0x63bd0611
push 0x3c5f473e
push 0x12537e7d
add qword ptr [rsp + 0x18], 0x2ccd21de; add
mov r15, r12
=== 1495
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1112
add rsp, 1112
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov r12, r15
=== 1496
mov rsi, r12
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rsi
mov r10b, byte ptr [r14]
mov rax, 0xff
shl rax, 0x18
not rax
and rsi, rax
movzx rax, r10b
shl rax, 0x18
or rsi, rax
=== 1497
mov r11, rsi
push r11
mov rbp, rsp
mov rdi, rsi
=== 1498
mov rsi, rbp
mov r15, rdi
push rsi
push 0x56281f22
push 0x4882636f
push 0x70546c2
push 0x70bb102f
=== 1499
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov r14, r15
movzx rbp, bpl
=== 1500
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xe61b0e47
add r10, 0x59ee5479; add_carry
mov r10, qword ptr [r10]
add r10, rbp
mov cl, byte ptr [r10]
movzx rcx, cl
shl rcx, 0x28
add r14, rcx
mov r13, r14
movabs rsi, 0xd615f6bf
add rsi, 0x69f36401; add
=== 1501
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rcx
mov rsi, r13
=== 1502
mov rbx, rsi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov r14b, byte ptr [rdx]
mov rsi, 0xff
shl rsi, 0x20
not rsi
and rbx, rsi
movzx rsi, r14b
shl rsi, 0x20
or rbx, rsi
=== 1503
mov rsi, rbx
push rsi
mov r14, rsp
mov r12, rbx
=== 1504
mov r11, r14
mov r14, r12
push r11
push 0x3b9e71dc
push 0x2aa03717
push 0x1db20d96
push 0x11003dc0
=== 1505
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov r14, r14
movzx r13, r13b
=== 1506
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xcb200d58
add rdx, 0x74e95568; add_carry
mov rdx, qword ptr [rdx]
add rdx, r13
mov r12b, byte ptr [rdx]
movzx r12, r12b
shl r12, 0x30
add r14, r12
movabs rsi, 0x1314a07e2
push rsi
push 0x6e827dcd
push 0x14330f8
push 0x89b090e
push 0x676f3453
add qword ptr [rsp + 0x20], 0xebf52de; add
mov r14, r14
=== 1507
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rbp, r14
=== 1508
mov r12, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov r11b, byte ptr [r9]
mov rsi, 0xff
shl rsi, 0x28
not rsi
and r12, rsi
movzx rsi, r11b
shl rsi, 0x28
or r12, rsi
=== 1509
movabs rdx, 0xf7089c0b
push rdx
push 0xcbc56d8
push 0x49444a43
push 0x418a65f1
push 0x67ce7004
add qword ptr [rsp + 0x20], 0x49811cdd; input
mov r12, r12
=== 1510
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 28
add rsp, 28
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r13
mov rbp, r12
movzx r15, r15b
=== 1511
mov rax, r15
mov r12, 0xffffffffb7e69b9a
add r12, 0x48ed475e
push r12
mov rbp, rbp
mul qword ptr [rsp]
mov rbx, rax
=== 1512
mov r13, rbp
add r13, rbx
=== 1513
mov r14, r13
push r14
mov rsi, rsp
mov rbx, r13
=== 1514
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r13
mov rbx, rbx
movzx r15, r15b
=== 1515
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xd6072f1c
add rbx, 0x6a0233a4; add_carry
mov rbx, qword ptr [rbx + 0x3c0]
add rbx, r15
mov al, byte ptr [rbx]
movzx rax, al
shl rax, 8
add rbx, rax
mov rdi, rbx
movabs r12, 0xe9c730bb
add r12, 0x56422a05; add
=== 1516
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 960
add rsp, 960
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rcx
mov r14, rdi
=== 1517
mov rdi, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r15
mov r11b, byte ptr [r11]
mov dil, r11b
=== 1518
mov rdi, rdi
push rdi
mov r13, rsp
mov rdi, rdi
=== 1519
mov r13, r13
mov r12, rdi
push r13
push 0x4dd945d6
push 0x7a8c1807
push 0x11f318c5
=== 1520
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbp
mov rbx, r12
movzx r15, r15b
=== 1521
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x137721151
add r12, 0x897516f; add_carry
mov r12, qword ptr [r12 + 0x5f0]
add r12, r15
mov r15b, byte ptr [r12]
movzx r15, r15b
shl r15, 0x10
add rbx, r15
mov rbp, rbx
movabs r15, 0x12a540bc8
add r15, 0x15b54ef8; add
=== 1522
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1520
add rsp, 1520
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r15
mov r14, rbp
=== 1523
mov rsi, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov r13b, byte ptr [r11]
mov r10, 0xff
shl r10, 8
not r10
and rsi, r10
movzx r10, r13b
shl r10, 8
or rsi, r10
=== 1524
mov r8, rsi
push r8
mov rbx, rsp
mov r13, rsi
=== 1525
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r15
mov rdi, r13
movzx rsi, sil
=== 1526
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x11da231fa
add r15, 0x226730c6; add_carry
mov r15, qword ptr [r15 + 0x10]
add r15, rsi
mov r12b, byte ptr [r15]
movzx r12, r12b
shl r12, 0x18
add rdi, r12
mov r15, rdi
movabs r14, 0xf7ae2663
add r14, 0x485b345d; add
=== 1527
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_SMALL 16
add rsp, 16
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rax
mov r14, r15
=== 1528
mov rbp, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov r9b, byte ptr [r11]
mov r11, 0xff
shl r11, 0x10
not r11
and rbp, r11
movzx r11, r9b
shl r11, 0x10
or rbp, r11
=== 1529
mov rdi, rbp
push rdi
mov r15, rsp
mov r12, rbp
=== 1530
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rsi
mov r14, r12
movzx r15, r15b
=== 1531
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xd6b51829
add r14, 0x69544a97; add_carry
mov r14, qword ptr [r14 + 0x1c0]
add r14, r15
mov dl, byte ptr [r14]
movzx rdx, dl
shl rdx, 0x20
add r14, rdx
mov r12, r14
movabs r15, 0x11cf5e48b
add r15, 0x23137635; add
=== 1532
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 448
add rsp, 448
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r8
mov r12, r12
=== 1533
mov r12, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r13
mov r14b, byte ptr [rcx]
mov r8, 0xff
shl r8, 0x18
not r8
and r12, r8
movzx r8, r14b
shl r8, 0x18
or r12, r8
=== 1534
mov rsi, r12
push rsi
mov r14, rsp
mov rbp, r12
=== 1535
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
mov rbp, rbp
movzx rbx, bl
=== 1536
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rbp
movabs rbp, 0xfe28094a
add rbp, 0x41e15176; add
=== 1537
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov rdi, rbx
=== 1538
mov rdi, rdi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r13
mov bpl, byte ptr [r15]
mov rbx, 0xff
shl rbx, 0x38
not rbx
and rdi, rbx
movzx rbx, bpl
shl rbx, 0x38
or rdi, rbx
=== 1539
mov r13, rdi
movabs rbp, 0xf7fa78fa
add rbp, 0x488f3fee; input
=== 1540
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_SMALL 24
add rsp, 24
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r11
mov r12, r13
movzx r13, r13b
=== 1541
mov rax, r13
mov r13, 0xffffffffcfcc0c00
add r13, 0x30e94cce
push r13
mov rbp, r12
mul qword ptr [rsp]
mov rdi, rax
=== 1542
mov rdi, rbp
add rdi, rdi
=== 1543
mov rcx, rdi
push rcx
mov r12, rsp
mov rbx, rdi
=== 1544
mov r11, r12
mov r14, rbx
push r11
push 0x54634f60
push 0x7c140411
push 0x424b7559
push 0x19aa53ce
=== 1545
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov r15, r14
movzx r14, r14b
=== 1546
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xf2e36be3
add r13, 0x4d2606dd; sub_carry
mov r13, qword ptr [r13 + 0x470]
add r13, r14
mov al, byte ptr [r13]
movzx rax, al
shl rax, 8
sub r15, rax
mov rbx, r15
movabs rdi, 0x12ab0546c
add rdi, 0x15591654; sub
=== 1547
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1136
add rsp, 1136
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdx
mov rbx, rbx
=== 1548
mov r13, rbx
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rsi
mov r14b, byte ptr [r10]
mov r13b, r14b
=== 1549
mov r13, r13
push r13
mov rbp, rsp
mov rbx, r13
=== 1550
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov r14, rbx
movzx rbx, bl
=== 1551
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xceab5ae1
add rdi, 0x715e17df; sub_carry
mov rdi, qword ptr [rdi + 0x460]
add rdi, rbx
mov dil, byte ptr [rdi]
movzx rdi, dil
shl rdi, 0x10
sub r14, rdi
mov rbx, r14
movabs r14, 0xf68b521d
add r14, 0x497e18a3; sub
=== 1552
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1120
add rsp, 1120
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r12
mov rbx, rbx
=== 1553
mov r15, rbx
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r15
mov dl, byte ptr [r10]
mov rbp, 0xff
shl rbp, 8
not rbp
and r15, rbp
movzx rbp, dl
shl rbp, 8
or r15, rbp
=== 1554
mov rsi, r15
push rsi
mov r15, rsp
mov rbp, r15
=== 1555
mov rax, r15
mov rsi, rbp
push rax
push 0x6937227
push 0x512642d6
push 0x4de50de0
=== 1556
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r15
mov r13, rsi
movzx rsi, sil
=== 1557
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x13e2441b2
add r15, 0x1e5310e; sub_carry
mov r15, qword ptr [r15 + 0x208]
add r15, rsi
mov al, byte ptr [r15]
movzx rax, al
shl rax, 0x18
sub r13, rax
movabs rdi, 0x117b314ed
push rdi
push 0x772643a4
push 0xc03528d
push 0x56403452
add qword ptr [rsp + 0x18], 0x285655d3; sub
mov r14, r13
=== 1558
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 520
add rsp, 520
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdx
mov rsi, r14
=== 1559
mov r14, rsi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r13
mov r15b, byte ptr [r15]
mov r9, 0xff
shl r9, 0x10
not r9
and r14, r9
movzx r9, r15b
shl r9, 0x10
or r14, r9
=== 1560
mov r8, r14
push r8
mov rsi, rsp
mov rbx, r14
=== 1561
mov rax, rsi
mov r14, rbx
push rax
push 0x722d03d2
push 0x21e15762
push 0x4f1f733a
=== 1562
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov r14, r14
movzx r13, r13b
=== 1563
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x120ff08c7
add rcx, 0x1f0a69f9; sub_carry
mov rcx, qword ptr [rcx + 0x198]
add rcx, r13
mov cl, byte ptr [rcx]
movzx rcx, cl
shl rcx, 0x20
sub r14, rcx
mov rbp, r14
movabs r14, 0x10a1cf41a
add r14, 0x35ec76a6; sub
=== 1564
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 408
add rsp, 408
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r11
mov r14, rbp
=== 1565
mov r14, r14
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rdi
mov r13b, byte ptr [r12]
mov r9, 0xff
shl r9, 0x18
not r9
and r14, r9
movzx r9, r13b
shl r9, 0x18
or r14, r9
=== 1566
mov rdi, r14
push rdi
mov r13, rsp
mov rsi, r14
=== 1567
mov rdx, r13
mov r14, rsi
push rdx
push 0x22655f27
push 0x55530ce
push 0x16b2fe8
push 0x67485585
=== 1568
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov r12, r14
movzx rbx, bl
=== 1569
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x13917524a
add rsi, 0x6f22076; sub_carry
mov rsi, qword ptr [rsi]
add rsi, rbx
mov dil, byte ptr [rsi]
movzx rdi, dil
shl rdi, 0x28
sub r12, rdi
movabs r8, 0x12ca825cb
push r8
push 0x78bb1164
push 0x15dc0707
push 0x3146681e
add qword ptr [rsp + 0x18], 0x136144f5; sub
mov r12, r12
=== 1570
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov r13, r12
=== 1571
mov r15, r13
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rsi
mov sil, byte ptr [r13]
mov r11, 0xff
shl r11, 0x20
not r11
and r15, r11
movzx r11, sil
shl r11, 0x20
or r15, r11
=== 1572
mov rsi, r15
push rsi
mov r15, rsp
mov r14, r15
=== 1573
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbx
mov r15, r14
movzx rdi, dil
=== 1574
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x10fe020db
push rax
push 0x70902d24
push 0x18fe5a27
push 0x3ca76416
add qword ptr [rsp + 0x18], 0x302949e5; sub
mov rbx, r15
=== 1575
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdi
mov r13, rbx
=== 1576
mov rbp, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov r12b, byte ptr [r15]
mov rsi, 0xff
shl rsi, 0x38
not rsi
and rbp, rsi
movzx rsi, r12b
shl rsi, 0x38
or rbp, rsi
=== 1577
mov r14, rbp
movabs rbp, 0xebf04940
add rbp, 0x54996fa8; input
=== 1578
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 8
add rsp, 8
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r13
mov r12, r14
movzx rbp, bpl
=== 1579
mov rax, rbp
mov r8, 0xffffffff86a4e24d
add r8, 0x798a215a
push r8
mov rbx, r12
mul qword ptr [rsp]
mov r12, rax
=== 1580
mov r14, rbx
sub r14, r12
=== 1581
mov rbx, r14
push rbx
mov r15, rsp
mov rbx, r14
=== 1582
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov rsi, rbx
movzx r12, r12b
=== 1583
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x11f552a9e
push r12
push 0x6f8a2e3e
push 0x247b66db
push 0x687c414b
push 0x435c507f
add qword ptr [rsp + 0x20], 0x20b42022; xor
mov rbp, rsi
=== 1584
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 896
add rsp, 896
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r14
mov r14, rbp
=== 1585
mov rbx, r14
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbp
mov r9b, byte ptr [r12]
mov bl, r9b
=== 1586
mov r8, rbx
push r8
mov r15, rsp
mov rsi, rbx
=== 1587
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
mov rbx, rsi
movzx rsi, sil
=== 1588
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xdbaf236e
push r11
push 0x13e67b79
push 0x2fc417f3
push 0x38ca1894
add qword ptr [rsp + 0x18], 0x645a2752; xor
mov rdi, rbx
=== 1589
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1416
add rsp, 1416
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rax
mov rsi, rdi
=== 1590
mov r13, rsi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r14
mov dl, byte ptr [r11]
mov r10, 0xff
shl r10, 8
not r10
and r13, r10
movzx r10, dl
shl r10, 8
or r13, r10
=== 1591
mov rbx, r13
push rbx
mov rsi, rsp
mov rdi, r13
=== 1592
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov r13, rdi
movzx r14, r14b
=== 1593
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r13
movabs r14, 0x120bd0199
add r14, 0x1f4c4927; xor
=== 1594
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 640
add rsp, 640
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdi
mov r14, r15
=== 1595
mov r12, r14
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov dil, byte ptr [rdx]
mov rdx, 0xff
shl rdx, 0x10
not rdx
and r12, rdx
movzx rdx, dil
shl rdx, 0x10
or r12, rdx
=== 1596
mov rbx, r12
push rbx
mov r13, rsp
mov r15, r12
=== 1597
mov rsi, r13
mov r13, r15
push rsi
push 0x4fc01c11
push 0x577e61c1
push 0x30ae1a37
push 0x132e7d5e
=== 1598
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov rbx, r13
movzx r12, r12b
=== 1599
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x12018114f
push r11
push 0x27ee1e55
push 0x63896d85
push 0x5bd62355
add qword ptr [rsp + 0x18], 0x1ff13971; xor
mov rdi, rbx
=== 1600
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1792
add rsp, 1792
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov r15, rdi
=== 1601
mov r14, r15
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbp
mov r13b, byte ptr [rsi]
mov r15, 0xff
shl r15, 0x18
not r15
and r14, r15
movzx r15, r13b
shl r15, 0x18
or r14, r15
=== 1602
mov r13, r14
push r13
mov rbp, rsp
mov rbx, r14
=== 1603
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r11
mov r13, rbx
movzx rdi, dil
=== 1604
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xf3b316c2
push rax
push 0x579840a6
push 0x9f27350
push 0x1729265b
push 0xa8a3d05
add qword ptr [rsp + 0x20], 0x4c5633fe; xor
mov rbp, r13
=== 1605
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r12
mov r12, rbp
=== 1606
mov r13, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov r12b, byte ptr [r10]
mov rbp, 0xff
shl rbp, 0x28
not rbp
and r13, rbp
movzx rbp, r12b
shl rbp, 0x28
or r13, rbp
=== 1607
movabs rsi, 0x11e6d81b7
push rsi
push 0x3a030d7
push 0x677b0608
push 0x68b93e50
push 0x19eb7147
add qword ptr [rsp + 0x20], 0x221c3731; input
mov rbp, r13
=== 1608
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 16
add rsp, 16
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov r14, rbp
movzx r13, r13b
=== 1609
mov rax, r13
mov r12, 0xffffffffb5e7bce5
add r12, 0x4ad13d7c
push r12
mov rdi, r14
mul qword ptr [rsp]
mov rsi, rax
=== 1610
mov r12, rdi
add r12, rsi
=== 1611
mov r14, r12
push r14
mov r13, rsp
mov r12, r12
=== 1612
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r13
mov r12, r12
movzx r13, r13b
=== 1613
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r12
movabs rsi, 0xef1f2e8a
add rsi, 0x50ea1c36; xor
=== 1614
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1968
add rsp, 1968
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r14
mov r12, r13
=== 1615
mov r15, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov al, byte ptr [rdx]
mov r15b, al
=== 1616
mov rsi, r15
push rsi
mov r15, rsp
mov rsi, r15
=== 1617
mov rcx, r15
mov r12, rsi
push rcx
push 0x78ce3285
push 0x4a7b22
push 0x2dc36959
push 0x38715e8d
=== 1618
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbx
mov rbp, r12
movzx r14, r14b
=== 1619
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x125320c5c
push rcx
push 0x71f5436
push 0x16592fc7
push 0x567012f2
push 0x4a3e7b34
add qword ptr [rsp + 0x20], 0x1ad73e64; xor
mov r12, rbp
=== 1620
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 360
add rsp, 360
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov r12, r12
=== 1621
mov r14, r12
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rdi
mov al, byte ptr [rdi]
mov r8, 0xff
shl r8, 8
not r8
and r14, r8
movzx r8, al
shl r8, 8
or r14, r8
=== 1622
mov r10, r14
push r10
mov rbx, rsp
mov rbp, r14
=== 1623
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r15
mov r14, rbp
movzx r12, r12b
=== 1624
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r14
movabs r15, 0xd73d21a3
add r15, 0x68cc291d; xor
=== 1625
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1552
add rsp, 1552
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdi
mov rsi, rbx
=== 1626
mov r12, rsi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbx
mov sil, byte ptr [rdi]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and r12, rbx
movzx rbx, sil
shl rbx, 0x10
or r12, rbx
=== 1627
mov r15, r12
push r15
mov rbx, rsp
mov r15, r12
=== 1628
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov r14, r15
movzx r13, r13b
=== 1629
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r14
movabs rsi, 0xc2c61b6e
add rsi, 0x7d432f52; xor
=== 1630
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 248
add rsp, 248
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r15
mov r15, rbx
=== 1631
mov rsi, r15
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rdi
mov bl, byte ptr [r8]
mov r14, 0xff
shl r14, 0x18
not r14
and rsi, r14
movzx r14, bl
shl r14, 0x18
or rsi, r14
=== 1632
mov rbp, rsi
push rbp
mov rsi, rsp
mov rbx, rsi
=== 1633
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov rsi, rbx
movzx rbx, bl
=== 1634
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x105eb0e13
push r15
push 0x3bac205a
push 0x1a53029a
push 0x70e4280c
push 0x139024a0
add qword ptr [rsp + 0x20], 0x3a1e3cad; xor
mov r15, rsi
=== 1635
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rcx
mov r13, r15
=== 1636
mov rbx, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov r10b, byte ptr [r15]
mov rdx, 0xff
shl rdx, 0x20
not rdx
and rbx, rdx
movzx rdx, r10b
shl rdx, 0x20
or rbx, rdx
=== 1637
mov r13, rbx
movabs rsi, 0xf14c83b5
add rsi, 0x4f3d3533; input
=== 1638
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 20
add rsp, 20
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov rdi, r13
movzx r15, r15b
=== 1639
mov rax, r15
mov rcx, 0xffffffff8b58b384
add rcx, 0x75881183
push rcx
mov rbp, rdi
mul qword ptr [rsp]
mov r13, rax
=== 1640
mov rdi, rbp
sub rdi, r13
=== 1641
mov r13, rdi
push r13
mov rbx, rsp
mov rsi, rdi
=== 1642
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov rdi, rsi
movzx rbp, bpl
=== 1643
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rdi
movabs rdi, 0x12c2d478a
add rdi, 0x13dc0336; xor
=== 1644
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 696
add rsp, 696
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbx
mov rsi, rsi
=== 1645
mov r15, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov al, byte ptr [r9]
mov r15b, al
=== 1646
mov rsi, r15
push rsi
mov rbx, rsp
mov rdi, r15
=== 1647
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov r14, rdi
movzx r15, r15b
=== 1648
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xf09bce01
push rdi
push 0x7d4211d3
push 0x67cc3d41
push 0x7791446
push 0x617d4296
add qword ptr [rsp + 0x20], 0x4f6d7cbf; xor
mov r14, r14
=== 1649
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 880
add rsp, 880
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rsi
mov rdi, r14
=== 1650
mov rdi, rdi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r14
mov r15b, byte ptr [rbx]
mov rbx, 0xff
shl rbx, 8
not rbx
and rdi, rbx
movzx rbx, r15b
shl rbx, 8
or rdi, rbx
=== 1651
mov r13, rdi
push r13
mov r14, rsp
mov r13, rdi
=== 1652
mov rdi, r14
mov rbx, r13
push rdi
push 0x391650f9
push 0x48a0651d
push 0x60116942
=== 1653
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rcx
mov rdi, rbx
movzx rbp, bpl
=== 1654
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x12039e21d
push rax
push 0x1ffe43cd
push 0x343404d8
push 0x58d6dd3
add qword ptr [rsp + 0x18], 0x1fcf68a3; xor
mov rbp, rdi
=== 1655
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 440
add rsp, 440
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdi
mov r15, rbp
=== 1656
mov r13, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov bl, byte ptr [rax]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r13, rdi
movzx rdi, bl
shl rdi, 0x10
or r13, rdi
=== 1657
mov r8, r13
push r8
mov r15, rsp
mov rbx, r13
=== 1658
mov r13, r15
mov rdi, rbx
push r13
push 0x5f9f24fe
push 0x643e15f3
push 0x7bac79b8
push 0x1b1d7d9c
=== 1659
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r11
mov r14, rdi
movzx rdi, dil
=== 1660
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xc15203e5
push r14
push 0x689367ef
push 0x156825b0
push 0x22096487
push 0x37f85ea9
add qword ptr [rsp + 0x20], 0x7eb746db; xor
mov rdi, r14
=== 1661
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1728
add rsp, 1728
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdx
mov rbp, rdi
=== 1662
mov r13, rbp
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r13
mov r9b, byte ptr [rbx]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and r13, rdi
movzx rdi, r9b
shl rdi, 0x18
or r13, rdi
=== 1663
mov rdx, r13
push rdx
mov rsi, rsp
mov r14, r13
=== 1664
mov r14, rsi
mov rsi, r14
push r14
push 0x94d15b9
push 0x527756ea
push 0x1c435a4d
=== 1665
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov rdi, rsi
movzx r15, r15b
=== 1666
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rdi
movabs r12, 0xd0621d57
add r12, 0x6fa72d69; xor
=== 1667
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r8
mov rbx, rbp
=== 1668
mov rsi, rbx
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r13
mov r15b, byte ptr [r14]
mov r11, 0xff
shl r11, 0x20
not r11
and rsi, r11
movzx r11, r15b
shl r11, 0x20
or rsi, r11
=== 1669
mov r15, rsi
push r15
mov r15, rsp
mov r14, rsi
=== 1670
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r9
mov r14, r14
movzx r13, r13b
=== 1671
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x12192081f
push r15
push 0x4aa80a75
push 0xafc3579
push 0x5a063ffe
push 0x686076a6
add qword ptr [rsp + 0x20], 0x1e7742a1; xor
mov rdi, r14
=== 1672
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov r13, rdi
=== 1673
mov r12, r13
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r15
mov cl, byte ptr [r13]
mov r13, 0xff
shl r13, 0x30
not r13
and r12, r13
movzx r13, cl
shl r13, 0x30
or r12, r13
=== 1674
mov rsi, r12
push rsi
mov r13, rsp
mov rbx, r12
=== 1675
mov r9, r13
mov r12, rbx
push r9
push 0x5d4c5c93
push 0x7a351e67
push 0xa600e9d
push 0x56101234
=== 1676
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rax
mov rdi, r12
movzx rsi, sil
=== 1677
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rdi
movabs r14, 0xc70f0328
add r14, 0x78fa4798; xor
=== 1678
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r15
mov r15, rsi
=== 1679
mov r12, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov bpl, byte ptr [rbp]
mov r14, 0xff
shl r14, 0x38
not r14
and r12, r14
movzx r14, bpl
shl r14, 0x38
or r12, r14
=== 1680
movabs r14, 0xe58f9dc0
push r14
push 0x1b836d07
push 0x34711697
push 0x4a480594
add qword ptr [rsp + 0x18], 0x5afa1b28; input
mov rdi, r12
=== 1681
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r8
mov r15, rdi
movzx rbp, bpl
=== 1682
mov rax, rbp
mov r15, 0xfffffffff4392fab
add r15, 0xc5505a3
push r15
mov r13, r15
mul qword ptr [rsp]
mov rsi, rax
=== 1683
mov r14, r13
add r14, rsi
=== 1684
mov r15, r14
push r15
mov r12, rsp
mov rsi, r14
=== 1685
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov r15, rsi
movzx rbx, bl
=== 1686
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xf0d92153
add r11, 0x4f30516d; sub_carry
mov r11, qword ptr [r11 + 0x40]
add r11, rbx
mov r12b, byte ptr [r11]
movzx r12, r12b
shl r12, 8
sub r15, r12
movabs rbx, 0xe760511c
push rbx
push 0x45a3259e
push 0x238a221b
push 0x6d3a3569
add qword ptr [rsp + 0x18], 0x58a919a4; sub
mov rdi, r15
=== 1687
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_SMALL 64
add rsp, 64
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r11
mov r15, rdi
=== 1688
mov rbp, r15
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r14
mov r9b, byte ptr [rdi]
mov bpl, r9b
=== 1689
mov r13, rbp
push r13
mov rbx, rsp
mov rdi, rbp
=== 1690
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov rbx, rdi
movzx r15, r15b
=== 1691
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x12b9b6147
add r11, 0x146e1179; sub_carry
mov r11, qword ptr [r11 + 0x188]
add r11, r15
mov r13b, byte ptr [r11]
movzx r13, r13b
shl r13, 0x10
sub rbx, r13
mov r13, rbx
movabs r12, 0xc72442bc
add r12, 0x78e52804; sub
=== 1692
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 392
add rsp, 392
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov r12, r13
=== 1693
mov r14, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rsi
mov r9b, byte ptr [r10]
mov rax, 0xff
shl rax, 8
not rax
and r14, rax
movzx rax, r9b
shl rax, 8
or r14, rax
=== 1694
mov r14, r14
push r14
mov r14, rsp
mov r13, r14
=== 1695
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rax
mov rdi, r13
movzx r15, r15b
=== 1696
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xf6903e95
add rbx, 0x4979342b; sub_carry
mov rbx, qword ptr [rbx + 0x658]
add rbx, r15
mov dil, byte ptr [rbx]
movzx rdi, dil
shl rdi, 0x18
sub rdi, rdi
mov r13, rdi
movabs r14, 0xf1c7268d
add r14, 0x4e424433; sub
=== 1697
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1624
add rsp, 1624
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov rbp, r13
=== 1698
mov rbp, rbp
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r13
mov r11b, byte ptr [rdi]
mov r9, 0xff
shl r9, 0x10
not r9
and rbp, r9
movzx r9, r11b
shl r9, 0x10
or rbp, r9
=== 1699
mov r10, rbp
push r10
mov rbx, rsp
mov r14, rbp
=== 1700
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov rsi, r14
movzx r14, r14b
=== 1701
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x10c7f1b71
add r15, 0x338a574f; sub_carry
mov r15, qword ptr [r15 + 0x690]
add r15, r14
mov r11b, byte ptr [r15]
movzx r11, r11b
shl r11, 0x20
sub rsi, r11
mov r12, rsi
movabs rsi, 0x11e6ff00b
add rsi, 0x21997ab5; sub
=== 1702
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1680
add rsp, 1680
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov rdi, r12
=== 1703
mov rsi, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov dil, byte ptr [r12]
mov r13, 0xff
shl r13, 0x18
not r13
and rsi, r13
movzx r13, dil
shl r13, 0x18
or rsi, r13
=== 1704
mov rbp, rsi
push rbp
mov rdi, rsp
mov rsi, rsi
=== 1705
mov rdi, rdi
mov rbx, rsi
push rdi
push 0x23165fb8
push 0x98473ac
push 0x77146a1f
=== 1706
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r15
mov rbx, rbx
movzx r15, r15b
=== 1707
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x13af4f4ff
add rdx, 0x5147dc1; sub_carry
mov rdx, qword ptr [rdx]
add rdx, r15
mov r14b, byte ptr [rdx]
movzx r14, r14b
shl r14, 0x38
sub rbx, r14
movabs rdx, 0x12bbcf64b
push rdx
push 0x7f390da3
push 0x29531916
push 0x32ac2210
add qword ptr [rsp + 0x18], 0x144c7475; sub
mov rbp, rbx
=== 1708
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov rsi, rbp
=== 1709
mov rsi, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov r12b, byte ptr [r8]
mov rbp, 0xff
shl rbp, 0x30
not rbp
and rsi, rbp
movzx rbp, r12b
shl rbp, 0x30
or rsi, rbp
=== 1710
mov r13, rsi
push r13
mov rbx, rsp
mov rsi, rsi
=== 1711
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rax
mov r15, rsi
movzx rbx, bl
=== 1712
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xdd5218b0
add rdx, 0x62b75a10; sub_carry
mov rdx, qword ptr [rdx + 0x400]
add rdx, rbx
mov dil, byte ptr [rdx]
movzx rdi, dil
shl rdi, 8
sub r15, rdi
mov rbp, r15
movabs rsi, 0x13a704996
add rsi, 0x599212a; sub
=== 1713
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1024
add rsp, 1024
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r9
mov rbx, rbp
=== 1714
mov r13, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov r11b, byte ptr [rax]
mov r13b, r11b
=== 1715
mov r10, r13
push r10
mov rbp, rsp
mov rbx, r13
=== 1716
mov r9, rbp
mov r13, rbx
push r9
push 0x30de06ea
push 0x1c4c6f1a
push 0x265b4877
=== 1717
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov rbp, r13
movzx r13, r13b
=== 1718
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xe738058f
add r8, 0x58d16d31; sub_carry
mov r8, qword ptr [r8 + 0x480]
add r8, r13
mov dl, byte ptr [r8]
movzx rdx, dl
shl rdx, 0x10
sub rbp, rdx
movabs rsi, 0xfa0116aa
push rsi
push 0x30e97eb2
push 0x3dd42e94
push 0x51aa67bf
push 0x7c2000c2
add qword ptr [rsp + 0x20], 0x46085416; sub
mov r15, rbp
=== 1719
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1152
add rsp, 1152
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov r12, r15
=== 1720
mov r13, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov r15b, byte ptr [r10]
mov rbx, 0xff
shl rbx, 8
not rbx
and r13, rbx
movzx rbx, r15b
shl rbx, 8
or r13, rbx
=== 1721
mov rbx, r13
push rbx
mov r12, rsp
mov rbp, r13
=== 1722
mov rdx, r12
mov r15, rbp
push rdx
push 0x11d4358b
push 0x5428413d
push 0x457d2e20
=== 1723
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov r12, r15
movzx r13, r13b
=== 1724
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x11cf44493
add rbp, 0x23152e2d; sub_carry
mov rbp, qword ptr [rbp + 0x738]
add rbp, r13
mov dl, byte ptr [rbp]
movzx rdx, dl
shl rdx, 0x18
sub r12, rdx
movabs r13, 0xd1aa30ab
push r13
push 0x1834566d
push 0x58790afd
push 0x757353f1
add qword ptr [rsp + 0x18], 0x6e5f3a15; sub
mov r14, r12
=== 1725
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1848
add rsp, 1848
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdi
mov rsi, r14
=== 1726
mov r13, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rdi
mov r14b, byte ptr [r8]
mov r12, 0xff
shl r12, 0x10
not r12
and r13, r12
movzx r12, r14b
shl r12, 0x10
or r13, r12
=== 1727
mov rdi, r13
push rdi
mov r12, rsp
mov r13, r13
=== 1728
mov rax, r12
mov rbx, r13
push rax
push 0x58d60064
push 0x62dc7bd2
push 0x33867ef1
=== 1729
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov rbp, rbx
movzx r14, r14b
=== 1730
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xea56f741
add r8, 0x55b27b7f; sub_carry
mov r8, qword ptr [r8 + 8]
add r8, r14
mov bl, byte ptr [r8]
movzx rbx, bl
shl rbx, 0x28
sub rbp, rbx
mov rdi, rbp
movabs rbx, 0x12886ee8f
add rbx, 0x17827c31; sub
=== 1731
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 8
add rsp, 8
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov r12, rdi
=== 1732
mov r13, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r15
mov r11b, byte ptr [rcx]
mov r12, 0xff
shl r12, 0x20
not r12
and r13, r12
movzx r12, r11b
shl r12, 0x20
or r13, r12
=== 1733
mov r12, r13
push r12
mov rdi, rsp
mov r13, r13
=== 1734
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov rbp, r13
movzx rsi, sil
=== 1735
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xfabe49d5
push r10
push 0x12fc3312
push 0x6ba909b0
push 0x75381730
push 0x4c560930
add qword ptr [rsp + 0x20], 0x454b20eb; sub
mov r15, rbp
=== 1736
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov r15, r15
=== 1737
mov rdi, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov bl, byte ptr [rcx]
mov r15, 0xff
shl r15, 0x38
not r15
and rdi, r15
movzx r15, bl
shl r15, 0x38
or rdi, r15
=== 1738
mov r11, rdi
push r11
mov rdi, rsp
mov r14, rdi
=== 1739
mov r8, rdi
mov rbp, r14
push r8
push 0x22306e2c
push 0x659200c5
push 0x15132438
push 0x74878a2
=== 1740
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov rbx, rbp
movzx rdi, dil
=== 1741
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xdbc4ec4a
push rsi
push 0x2d8c5d3f
push 0x2856399
push 0x5a9700bc
add qword ptr [rsp + 0x18], 0x64445676
mov r12, rbx
=== 1742
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rsi
mov rsi, r12
=== 1743
mov r13, rsi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbx
mov sil, byte ptr [rsi]
mov r12, 0xff
shl r12, 8
not r12
and r13, r12
movzx r12, sil
shl r12, 8
or r13, r12
=== 1744
mov r11, r13
push r11
mov rbx, rsp
mov r15, r13
=== 1745
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov r13, r15
movzx rsi, sil
=== 1746
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x12b912546
push r14
push 0x407251ed
push 0x339215a0
push 0x59fb423a
push 0x35fe5cbf
add qword ptr [rsp + 0x20], 0x14781d7a
mov r12, r13
=== 1747
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov rbp, r12
=== 1748
mov rbp, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov r9b, byte ptr [r8]
mov r14, 0xff
shl r14, 0x18
not r14
and rbp, r14
movzx r14, r9b
shl r14, 0x18
or rbp, r14
=== 1749
mov r12, rbp
push r12
mov rbx, rsp
mov r14, rbp
=== 1750
mov rdx, rbx
mov r12, r14
push rdx
push 0x16834333
push 0x4e4f51fa
push 0x1bc02050
push 0x36900a5
=== 1751
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r10
mov r15, r12
movzx rsi, sil
=== 1752
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xe57bf637
push rax
push 0x1aa11325
push 0x46ef24d5
push 0x5ea87672
push 0x2b15499e
add qword ptr [rsp + 0x20], 0x5a8d4c89
mov rsi, r15
=== 1753
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov r13, rsi
=== 1754
mov r15, r13
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov r8b, byte ptr [r14]
mov r12, 0xff
shl r12, 0x20
not r12
and r15, r12
movzx r12, r8b
shl r12, 0x20
or r15, r12
=== 1755
mov r13, r15
push r13
mov r14, rsp
mov r15, r15
=== 1756
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r10
mov rbx, r15
movzx rsi, sil
=== 1757
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rbx
movabs rdi, 0x10708f550
add rdi, 0x39004d70
=== 1758
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov r15, r15
=== 1759
mov r15, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r14
mov dil, byte ptr [rcx]
mov rax, 0xff
shl rax, 0x28
not rax
and r15, rax
movzx rax, dil
shl rax, 0x28
or r15, rax
=== 1760
mov r15, r15
movabs r12, 0x10b80d55f
add r12, 0x347f3c91
test r15, r15
lea r15, [rip - 0x32850a]
cmovne r15, r12
jmp r15
=== 1761
movabs rbx, 0x12a728bf7
add rbx, 0x16172cf1; input
=== 1762
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 17
add rsp, 17
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
movzx rsi, sil
=== 1763
mov rax, rsi
mov rcx, 0xffffffff921c95c2
add rcx, 0x6e8d1e86
push rcx
mul qword ptr [rsp]
mov r15, rax
=== 1764
mov rbx, r15
push rbx
mov rbx, rsp
mov r14, r15
=== 1765
mov r8, rbx
mov r13, r14
push r8
push 0x57a44027
push 0x9a734b2
push 0x3dad025c
=== 1766
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov rsi, r13
movzx r14, r14b
=== 1767
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rsi
movabs r15, 0xdc0ccc0b
add r15, 0x63fc7eb5; xor
=== 1768
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1224
add rsp, 1224
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r14
mov r14, rbx
=== 1769
mov r15, r14
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rdi
mov r14b, byte ptr [rbx]
mov r15b, r14b
=== 1770
mov r11, r15
push r11
mov rbx, rsp
mov rsi, r15
=== 1771
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbx
mov rbp, rsi
movzx rsi, sil
=== 1772
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rbp
movabs r15, 0xee550d20
add r15, 0x51b43da0; xor
=== 1773
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1056
add rsp, 1056
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov rbp, r14
=== 1774
mov rbx, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r14
mov r12b, byte ptr [r10]
mov rdi, 0xff
shl rdi, 8
not rdi
and rbx, rdi
movzx rdi, r12b
shl rdi, 8
or rbx, rdi
=== 1775
mov r8, rbx
push r8
mov rbp, rsp
mov rdi, rbx
=== 1776
mov r12, rbp
mov r15, rdi
push r12
push 0x280e4a03
push 0x237954c8
push 0x17157c7e
push 0x6a6621e0
=== 1777
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov rdi, r15
movzx r14, r14b
=== 1778
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xf1de18a5
push rbp
push 0x706b1364
push 0x5398286c
push 0xef5735
push 0x28592e31
add qword ptr [rsp + 0x20], 0x4e2b321b; xor
mov rsi, rdi
=== 1779
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1176
add rsp, 1176
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rax
mov r14, rsi
=== 1780
mov r14, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r15
mov r8b, byte ptr [r11]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and r14, rbp
movzx rbp, r8b
shl rbp, 0x10
or r14, rbp
=== 1781
mov r8, r14
push r8
mov rbp, rsp
mov r14, r14
=== 1782
mov r10, rbp
mov r13, r14
push r10
push 0x1585e3e
push 0x244f76cd
push 0x3a0e3396
=== 1783
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov r13, r13
movzx rsi, sil
=== 1784
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x139edcb9b
push r14
push 0x6de4684e
push 0x8ac6444
push 0x4a9a6e0b
add qword ptr [rsp + 0x18], 0x61b7f25; xor
mov rbp, r13
=== 1785
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1272
add rsp, 1272
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r10
mov rbp, rbp
=== 1786
mov rbp, rbp
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov dl, byte ptr [r11]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and rbp, rsi
movzx rsi, dl
shl rsi, 0x18
or rbp, rsi
=== 1787
mov r8, rbp
push r8
mov r13, rsp
mov rbx, rbp
=== 1788
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov r12, rbx
movzx rsi, sil
=== 1789
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, r12
movabs r13, 0xf3de0d81
add r13, 0x4c2b3d3f; xor
=== 1790
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov r15, rdi
=== 1791
mov rsi, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r12
mov al, byte ptr [rbp]
mov r9, 0xff
shl r9, 0x20
not r9
and rsi, r9
movzx r9, al
shl r9, 0x20
or rsi, r9
=== 1792
mov rbx, rsi
push rbx
mov r15, rsp
mov r12, rsi
=== 1793
mov rdx, r15
mov r14, r12
push rdx
push 0x8925d36
push 0x3c1d76e6
push 0x30e35790
push 0x212f4e74
=== 1794
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov rsi, r14
movzx rbp, bpl
=== 1795
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rsi
movabs rdi, 0xc533da9f
add rdi, 0x7ad57021; xor
=== 1796
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r13
mov r15, rbp
=== 1797
mov rdi, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov r12b, byte ptr [r9]
mov rax, 0xff
shl rax, 0x30
not rax
and rdi, rax
movzx rax, r12b
shl rax, 0x30
or rdi, rax
=== 1798
mov rsi, rdi
movabs rdi, 0xd3346549
add rdi, 0x6d55539f; input
=== 1799
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov r14, rsi
movzx r13, r13b
=== 1800
mov rax, r13
mov rbx, 0xffffffffd508ed34
add rbx, 0x2b87781c
push rbx
mov r14, r14
mul qword ptr [rsp]
mov r13, rax
=== 1801
mov r13, r14
add r13, r13
=== 1802
mov rax, r13
push rax
mov rdi, rsp
mov r15, r13
=== 1803
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rsi
mov rbx, r15
movzx r12, r12b
=== 1804
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xc9ecff02
add r15, 0x761c63be; add_carry
mov r15, qword ptr [r15 + 0x578]
add r15, r12
mov r8b, byte ptr [r15]
movzx r8, r8b
shl r8, 8
add rbx, r8
movabs rcx, 0x10bc8022b
push rcx
push 0x3bfd1e30
push 0x47521879
push 0x2f777c0d
push 0x1f296e98
add qword ptr [rsp + 0x20], 0x34415895; add
mov r15, rbx
=== 1805
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1400
add rsp, 1400
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r14
mov rdi, r15
=== 1806
mov r12, rdi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbx
mov r15b, byte ptr [r13]
mov r12b, r15b
=== 1807
mov rbp, r12
push rbp
mov r13, rsp
mov rbp, r12
=== 1808
mov r11, r13
mov r14, rbp
push r11
push 0x23e66cb
push 0x3a662d57
push 0x408b1419
push 0x13310eed
=== 1809
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov rbx, r14
movzx r14, r14b
=== 1810
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xc30638ec
add rsi, 0x7d0329d4; add_carry
mov rsi, qword ptr [rsi + 0x108]
add rsi, r14
mov r8b, byte ptr [rsi]
movzx r8, r8b
shl r8, 0x10
add rbx, r8
mov r13, rbx
movabs r12, 0xc95e22df
add r12, 0x76ab37e1; add
=== 1811
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 264
add rsp, 264
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov r14, r13
=== 1812
mov rbx, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rsi
mov r10b, byte ptr [r15]
mov rsi, 0xff
shl rsi, 8
not rsi
and rbx, rsi
movzx rsi, r10b
shl rsi, 8
or rbx, rsi
=== 1813
mov rax, rbx
push rax
mov r15, rsp
mov r14, rbx
=== 1814
mov rcx, r15
mov r15, r14
push rcx
push 0x10b112d7
push 0x75973744
push 0x54a92d2d
=== 1815
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov rsi, r15
movzx rbx, bl
=== 1816
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x109844459
add rsi, 0x36851e67; add_carry
mov rsi, qword ptr [rsi + 0x380]
add rsi, rbx
mov bpl, byte ptr [rsi]
movzx rbp, bpl
shl rbp, 0x18
add rsi, rbp
mov rbp, rsi
movabs r14, 0xcfbc0072
add r14, 0x704d5a4e; add
=== 1817
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 896
add rsp, 896
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r10
mov r12, rbp
=== 1818
mov r14, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov r8b, byte ptr [r15]
mov r13, 0xff
shl r13, 0x10
not r13
and r14, r13
movzx r13, r8b
shl r13, 0x10
or r14, r13
=== 1819
mov r12, r14
push r12
mov r13, rsp
mov rdi, r14
=== 1820
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r14
mov r13, rdi
movzx r15, r15b
=== 1821
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xd74b0db3
add rax, 0x68be550d; add_carry
mov rax, qword ptr [rax + 0x200]
add rax, r15
mov al, byte ptr [rax]
movzx rax, al
shl rax, 0x20
add r13, rax
mov rbx, r13
movabs rsi, 0x1225d1138
add rsi, 0x1dac4988; add
=== 1822
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 512
add rsp, 512
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rsi
mov rsi, rbx
=== 1823
mov r12, rsi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov bpl, byte ptr [rcx]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and r12, rdx
movzx rdx, bpl
shl rdx, 0x18
or r12, rdx
=== 1824
mov rax, r12
push rax
mov rsi, rsp
mov r15, r12
=== 1825
mov r10, rsi
mov r12, r15
push r10
push 0x659864c4
push 0x6adf6ea3
push 0x61514240
=== 1826
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rcx
mov rbx, r12
movzx rbp, bpl
=== 1827
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x1202d0990
add rbx, 0x1fdc5930; add_carry
mov rbx, qword ptr [rbx]
add rbx, rbp
mov dil, byte ptr [rbx]
movzx rdi, dil
shl rdi, 0x38
add rbx, rdi
movabs rax, 0x12927e27d
push rax
push 0x65fb4463
push 0x7bbd704b
push 0x34a03333
push 0x67df4eb5
add qword ptr [rsp + 0x20], 0x16e17843; add
mov r12, rbx
=== 1828
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rcx
mov r14, r12
=== 1829
mov rdi, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov r10b, byte ptr [r10]
mov rbx, 0xff
shl rbx, 0x30
not rbx
and rdi, rbx
movzx rbx, r10b
shl rbx, 0x30
or rdi, rbx
=== 1830
mov rdx, rdi
push rdx
mov rbp, rsp
mov r12, rdi
=== 1831
mov r10, rbp
mov r15, r12
push r10
push 0x19e759a3
push 0x319207ae
push 0x13a21d71
push 0x61c21670
=== 1832
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov rbx, r15
movzx rbp, bpl
=== 1833
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rbx
movabs r14, 0x108ade419
add r14, 0x375b76a7; add
=== 1834
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r13
mov rdi, r15
=== 1835
mov rdi, rdi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r13
mov sil, byte ptr [r15]
mov r13, 0xff
shl r13, 0x38
not r13
and rdi, r13
movzx r13, sil
shl r13, 0x38
or rdi, r13
=== 1836
mov r13, rdi
movabs rbx, 0x101ab5a5a
add rbx, 0x3ede5e8e; input
=== 1837
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 13
add rsp, 13
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r11
mov r14, r13
movzx r12, r12b
=== 1838
mov rax, r12
mov rbx, 0xffffffffacd8392c
add rbx, 0x53d221a6
push rbx
mov rdi, r14
mul qword ptr [rsp]
mov r14, rax
=== 1839
mov r13, rdi
xor r13, r14
=== 1840
mov rbp, r13
push rbp
mov r15, rsp
mov rbx, r13
=== 1841
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov rbx, rbx
movzx r13, r13b
=== 1842
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rbx
movabs rbx, 0x12ce2fe30
add rbx, 0x13264c90; xor
=== 1843
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1336
add rsp, 1336
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbx
mov r15, rbp
=== 1844
mov r13, r15
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r14
mov bpl, byte ptr [r10]
mov r13b, bpl
=== 1845
mov rsi, r13
push rsi
mov r12, rsp
mov rbp, r13
=== 1846
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov rbx, rbp
movzx r12, r12b
=== 1847
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x11c1dd235
push rsi
push 0x4bd849ff
push 0x14b563fc
push 0x46a5608e
push 0x6e871414
add qword ptr [rsp + 0x20], 0x23eb788b; xor
mov r14, rbx
=== 1848
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1048
add rsp, 1048
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdi
mov rbp, r14
=== 1849
mov rdi, rbp
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r15
mov r9b, byte ptr [rsi]
mov rbp, 0xff
shl rbp, 8
not rbp
and rdi, rbp
movzx rbp, r9b
shl rbp, 8
or rdi, rbp
=== 1850
mov r11, rdi
push r11
mov r12, rsp
mov r13, rdi
=== 1851
mov rbx, r12
mov r15, r13
push rbx
push 0x31255d97
push 0x3bd374f3
push 0x7fda0748
push 0x1e673e3
=== 1852
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbx
mov r14, r15
movzx rdi, dil
=== 1853
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xfee8fe35
push r13
push 0x6bca32d5
push 0x7f236162
push 0x5a3f4a73
add qword ptr [rsp + 0x18], 0x41204c8b; xor
mov r12, r14
=== 1854
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1656
add rsp, 1656
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov rbx, r12
=== 1855
mov rbp, rbx
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rdi
mov r15b, byte ptr [r12]
mov r8, 0xff
shl r8, 0x10
not r8
and rbp, r8
movzx r8, r15b
shl r8, 0x10
or rbp, r8
=== 1856
mov r12, rbp
push r12
mov r12, rsp
mov rsi, rbp
=== 1857
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov rbp, rsi
movzx r15, r15b
=== 1858
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rbp
movabs r14, 0xcc22db35
add r14, 0x73e66f8b; xor
=== 1859
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 952
add rsp, 952
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdx
mov r13, rbx
=== 1860
mov r14, r13
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rdi
mov dil, byte ptr [rsi]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r14, rsi
movzx rsi, dil
shl rsi, 0x18
or r14, rsi
=== 1861
mov r8, r14
push r8
mov rsi, rsp
mov r15, r14
=== 1862
mov r10, rsi
mov rbp, r15
push r10
push 0x5f347daa
push 0x3e4e1166
push 0x3e8a554f
=== 1863
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r15
mov rdi, rbp
movzx rbp, bpl
=== 1864
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rdi
movabs r14, 0xc7450a17
add r14, 0x78c440a9; xor
=== 1865
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rbx, rsi
=== 1866
mov r13, rbx
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov r14b, byte ptr [r10]
mov r10, 0xff
shl r10, 0x30
not r10
and r13, r10
movzx r10, r14b
shl r10, 0x30
or r13, r10
=== 1867
mov rdi, r13
push rdi
mov rdi, rsp
mov rsi, r13
=== 1868
mov rbx, rdi
mov r12, rsi
push rbx
push 0x61983044
push 0x250c6700
push 0x69d870ca
push 0x2dd236e1
=== 1869
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r13
mov rbp, r12
movzx rbx, bl
=== 1870
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x130190e06
push rbp
push 0x4ba955da
push 0x14404106
push 0x1e0198f
push 0x78c3bdd
add qword ptr [rsp + 0x20], 0xff03cba; xor
mov r14, rbp
=== 1871
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov r14, r14
=== 1872
mov r15, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r15
mov sil, byte ptr [r13]
mov r11, 0xff
shl r11, 0x38
not r11
and r15, r11
movzx r11, sil
shl r11, 0x38
or r15, r11
=== 1873
movabs rdi, 0x10b57aa2a
push rdi
push 0x32e30821
push 0x235b249d
push 0x35136d90
push 0x4c6f4094
add qword ptr [rsp + 0x20], 0x35320ebe; input
mov r12, r15
=== 1874
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 29
add rsp, 29
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r11
mov rbp, r12
movzx r13, r13b
=== 1875
mov rax, r13
mov r15, 0xfffffffffe23391c
add r15, 0x2a15a2d
push r15
mov rbx, rbp
mul qword ptr [rsp]
mov r14, rax
=== 1876
mov rdi, rbx
xor rdi, r14
=== 1877
mov r13, rdi
push r13
mov rbx, rsp
mov r12, rdi
=== 1878
mov rdi, rbx
mov rsi, r12
push rdi
push 0x58535482
push 0x3d6776ee
push 0x30f561d3
=== 1879
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r9
mov rbp, rsi
movzx rdi, dil
=== 1880
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rbp
movabs r14, 0xc85310f4
add r14, 0x77b639cc; xor
=== 1881
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1848
add rsp, 1848
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rax
mov r12, rdi
=== 1882
mov rbx, r12
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rdi
mov r9b, byte ptr [rsi]
mov bl, r9b
=== 1883
mov r11, rbx
push r11
mov rsi, rsp
mov r15, rbx
=== 1884
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov rdi, r15
movzx rbp, bpl
=== 1885
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xebcb2aa1
push r14
push 0x6f7e301d
push 0x212a4551
push 0x5c936a17
add qword ptr [rsp + 0x18], 0x543e201f; xor
mov r12, rdi
=== 1886
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1952
add rsp, 1952
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r15
mov r12, r12
=== 1887
mov r12, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov al, byte ptr [r11]
mov r10, 0xff
shl r10, 8
not r10
and r12, r10
movzx r10, al
shl r10, 8
or r12, r10
=== 1888
mov r14, r12
push r14
mov rdi, rsp
mov r14, r12
=== 1889
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
mov r15, r14
movzx rsi, sil
=== 1890
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xc13a2ef9
push r14
push 0x28dc21bb
push 0x7907fd
push 0x2ddc3b1d
add qword ptr [rsp + 0x18], 0x7ecf1bc7; xor
mov r13, r15
=== 1891
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 824
add rsp, 824
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rsi, r13
=== 1892
mov r13, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r13
mov r8b, byte ptr [r14]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and r13, rbp
movzx rbp, r8b
shl rbp, 0x10
or r13, rbp
=== 1893
mov r11, r13
push r11
mov r15, rsp
mov r13, r13
=== 1894
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov r13, r13
movzx r15, r15b
=== 1895
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r13
movabs r15, 0xdceef047
add r15, 0x631a5a79; xor
=== 1896
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 384
add rsp, 384
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r9
mov rsi, rbp
=== 1897
mov rbx, rsi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov r11b, byte ptr [r10]
mov r14, 0xff
shl r14, 0x18
not r14
and rbx, r14
movzx r14, r11b
shl r14, 0x18
or rbx, r14
=== 1898
mov r13, rbx
push r13
mov rbp, rsp
mov r13, rbx
=== 1899
mov rbx, rbp
mov rsi, r13
push rbx
push 0x21bd4ed1
push 0x3f8d1d4f
push 0x35d90424
push 0x3de13ace
=== 1900
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov rbp, rsi
movzx r12, r12b
=== 1901
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xe19afe19
push rdx
push 0x22fb1475
push 0x53984d8e
push 0x52c357a0
add qword ptr [rsp + 0x18], 0x5e6e4ca7; xor
mov rsi, rbp
=== 1902
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov rbx, rsi
=== 1903
mov rsi, rbx
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov r10b, byte ptr [r13]
mov r8, 0xff
shl r8, 0x28
not r8
and rsi, r8
movzx r8, r10b
shl r8, 0x28
or rsi, r8
=== 1904
mov r14, rsi
push r14
mov rbp, rsp
mov r15, rsi
=== 1905
mov rcx, rbp
mov rsi, r15
push rcx
push 0x668a6644
push 0x21e64b7
push 0x5002634e
=== 1906
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov r14, rsi
movzx rbp, bpl
=== 1907
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x117b8d229
push r10
push 0x223b6bf7
push 0x229c4eb6
push 0x42a50553
add qword ptr [rsp + 0x18], 0x28507897; xor
mov rbp, r14
=== 1908
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov r12, rbp
=== 1909
mov rsi, r12
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r13
mov al, byte ptr [rdi]
mov r9, 0xff
shl r9, 0x38
not r9
and rsi, r9
movzx r9, al
shl r9, 0x38
or rsi, r9
=== 1910
movabs rsi, 0xc7369f20
push rsi
push 0x500c3af0
push 0x547552ce
push 0x37c40129
push 0x4d307696
add qword ptr [rsp + 0x20], 0x795319c8; input
mov r13, rsi
=== 1911
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 9
add rsp, 9
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov r13, r13
movzx rbx, bl
=== 1912
mov rax, rbx
mov r9, 0xffffffffba08fd19
add r9, 0x46285275
push r9
mov r13, r13
mul qword ptr [rsp]
mov rsi, rax
=== 1913
mov r13, r13
add r13, rsi
=== 1914
mov r14, r13
push r14
mov r15, rsp
mov rdi, r13
=== 1915
mov r10, r15
mov rsi, rdi
push r10
push 0x48e32fb0
push 0x503e7c4b
push 0x912084e
=== 1916
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov rdi, rsi
movzx rsi, sil
=== 1917
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xe64535f0
add rbx, 0x59c42cd0; add_carry
mov rbx, qword ptr [rbx + 0x1d8]
add rbx, rsi
mov sil, byte ptr [rbx]
movzx rsi, sil
shl rsi, 8
add rdi, rsi
movabs r14, 0x109a34adb
push r14
push 0xd730c52
push 0x6c2f23d0
push 0x5ac126a3
add qword ptr [rsp + 0x18], 0x36660fe5; add
mov r12, rdi
=== 1918
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 472
add rsp, 472
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rax
mov r14, r12
=== 1919
mov r12, r14
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbp
mov sil, byte ptr [rbp]
mov r12b, sil
=== 1920
mov rax, r12
push rax
mov r13, rsp
mov rbp, r12
=== 1921
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov r12, rbp
movzx rbx, bl
=== 1922
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x10c595d30
add rsi, 0x33b00590; add_carry
mov rsi, qword ptr [rsi + 0x2f8]
add rsi, rbx
mov r12b, byte ptr [rsi]
movzx r12, r12b
shl r12, 0x10
add r12, r12
mov r13, r12
movabs r14, 0xeb9b0933
add r14, 0x546e518d; add
=== 1923
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 760
add rsp, 760
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rsi
mov r15, r13
=== 1924
mov rdi, r15
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rdi
mov r14b, byte ptr [r8]
mov rdx, 0xff
shl rdx, 8
not rdx
and rdi, rdx
movzx rdx, r14b
shl rdx, 8
or rdi, rdx
=== 1925
mov r8, rdi
push r8
mov rbx, rsp
mov rbp, rdi
=== 1926
mov r9, rbx
mov r14, rbp
push r9
push 0x240a7a83
push 0x25766471
push 0x697e7029
=== 1927
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov rdi, r14
movzx rsi, sil
=== 1928
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xf8dae6f3
add rax, 0x472e7bcd; add_carry
mov rax, qword ptr [rax + 0x4b8]
add rax, rsi
mov cl, byte ptr [rax]
movzx rcx, cl
shl rcx, 0x18
add rdi, rcx
mov rbp, rdi
movabs r14, 0x101030827
add r14, 0x3f065299; add
=== 1929
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1208
add rsp, 1208
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov rbx, rbp
=== 1930
mov r14, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov r11b, byte ptr [r9]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r14, rdi
movzx rdi, r11b
shl rdi, 0x10
or r14, rdi
=== 1931
mov rdx, r14
push rdx
mov rdi, rsp
mov rbx, r14
=== 1932
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov rsi, rbx
movzx r14, r14b
=== 1933
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xef2239ad
add rsi, 0x50e72913; add_carry
mov rsi, qword ptr [rsi + 0x668]
add rsi, r14
mov bpl, byte ptr [rsi]
movzx rbp, bpl
shl rbp, 0x20
add rsi, rbp
movabs rdx, 0x1335b1d77
push rdx
push 0x3aed435c
push 0x5ad422dd
push 0xfbe108c
add qword ptr [rsp + 0x18], 0xcae3d49; add
mov r15, rsi
=== 1934
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1640
add rsp, 1640
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rsi
mov rbp, r15
=== 1935
mov rdi, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r14
mov sil, byte ptr [r10]
mov r12, 0xff
shl r12, 0x18
not r12
and rdi, r12
movzx r12, sil
shl r12, 0x18
or rdi, r12
=== 1936
mov rax, rdi
push rax
mov rbx, rsp
mov rdi, rdi
=== 1937
mov rsi, rbx
mov r15, rdi
push rsi
push 0xef17c8c
push 0x23da0f96
push 0x730d2b60
push 0x3e4d732b
=== 1938
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rsi
mov r14, r15
movzx rbp, bpl
=== 1939
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x139d70e91
add r14, 0x632542f; add_carry
mov r14, qword ptr [r14]
add r14, rbp
mov sil, byte ptr [r14]
movzx rsi, sil
shl rsi, 0x28
add r14, rsi
mov rsi, r14
movabs r13, 0xec431ec0
add r13, 0x53c63c00; add
=== 1940
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r15
mov rdi, rsi
=== 1941
mov rsi, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov r11b, byte ptr [rax]
mov r9, 0xff
shl r9, 0x20
not r9
and rsi, r9
movzx r9, r11b
shl r9, 0x20
or rsi, r9
=== 1942
mov r8, rsi
push r8
mov r13, rsp
mov rbp, rsi
=== 1943
mov r9, r13
mov r15, rbp
push r9
push 0x6606263e
push 0x62084d74
push 0x6cff4623
=== 1944
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r12
mov r12, r15
movzx r14, r14b
=== 1945
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xf0e60391
add r14, 0x4f235f2f; add_carry
mov r14, qword ptr [r14]
add r14, r14
mov r10b, byte ptr [r14]
movzx r10, r10b
shl r10, 0x30
add r12, r10
movabs r14, 0xfc9ef473
push r14
push 0x40e67fe7
push 0x263704ba
push 0x345b367f
add qword ptr [rsp + 0x18], 0x436a664d; add
mov rdi, r12
=== 1946
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov r12, rdi
=== 1947
mov r12, r12
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov r15b, byte ptr [rax]
mov rbx, 0xff
shl rbx, 0x28
not rbx
and r12, rbx
movzx rbx, r15b
shl rbx, 0x28
or r12, rbx
=== 1948
mov r11, r12
push r11
mov r13, rsp
mov r15, r12
=== 1949
mov rax, r13
mov r13, r15
push rax
push 0x1dae5d06
push 0x58df1f99
push 0x226c0fe9
=== 1950
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r15
mov rbp, r13
movzx r13, r13b
=== 1951
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xdbd83085
add r8, 0x6431323b; add_carry
mov r8, qword ptr [r8]
add r8, r13
mov r11b, byte ptr [r8]
movzx r11, r11b
shl r11, 0x38
add rbp, r11
movabs r8, 0x12b47e4e9
push r8
push 0x5507693e
push 0x7d021f1c
push 0x610e4192
add qword ptr [rsp + 0x18], 0x14c175d7; add
mov rsi, rbp
=== 1952
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov rsi, rsi
=== 1953
mov rbx, rsi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rdi
mov r12b, byte ptr [rdx]
mov rcx, 0xff
shl rcx, 0x30
not rcx
and rbx, rcx
movzx rcx, r12b
shl rcx, 0x30
or rbx, rcx
=== 1954
mov r13, rbx
push r13
mov rbp, rsp
mov r15, rbx
=== 1955
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rdi, r15
movzx r13, r13b
=== 1956
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rdi
movabs rsi, 0x1366adf19
add rsi, 0x99e7ba7; add
=== 1957
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rax
mov r12, rdi
=== 1958
mov rbx, r12
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbx
mov sil, byte ptr [rdi]
mov rcx, 0xff
shl rcx, 0x38
not rcx
and rbx, rcx
movzx rcx, sil
shl rcx, 0x38
or rbx, rcx
=== 1959
mov r14, rbx
movabs r13, 0x11f909e35
add r13, 0x20f91ab3; input
=== 1960
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 21
add rsp, 21
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r11
mov rsi, r14
movzx rbx, bl
=== 1961
mov rax, rbx
mov rbp, 0xffffffffb0317c2a
add rbp, 0x50501a61
push rbp
mov rbx, rsi
mul qword ptr [rsp]
mov rsi, rax
=== 1962
mov rbp, rbx
xor rbp, rsi
=== 1963
mov r10, rbp
push r10
mov rbx, rsp
mov r14, rbp
=== 1964
mov rdi, rbx
mov r12, r14
push rdi
push 0x21e94ca0
push 0x253d3484
push 0x682d79a4
=== 1965
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov r12, r12
movzx rbx, bl
=== 1966
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xeccc325b
add rbp, 0x533d3065; add_carry
mov rbp, qword ptr [rbp + 0x58]
add rbp, rbx
mov bpl, byte ptr [rbp]
movzx rbp, bpl
shl rbp, 8
add r12, rbp
movabs rbp, 0xd116dc2a
push rbp
push 0x22bf6994
push 0x4638177c
push 0x29410a20
add qword ptr [rsp + 0x18], 0x6ef27e96; add
mov rbp, r12
=== 1967
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 88
add rsp, 88
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r15
mov rsi, rbp
=== 1968
mov r12, rsi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov cl, byte ptr [rbp]
mov r12b, cl
=== 1969
mov rdi, r12
push rdi
mov r14, rsp
mov r12, r12
=== 1970
mov rdx, r14
mov rsi, r12
push rdx
push 0x165205c
push 0x4d4d0f4a
push 0x155e2c1b
push 0x2582697
=== 1971
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbp
mov r14, rsi
movzx r12, r12b
=== 1972
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x13a1e02e5
add rbx, 0x5eb5fdb; add_carry
mov rbx, qword ptr [rbx + 0x170]
add rbx, r12
mov r8b, byte ptr [rbx]
movzx r8, r8b
shl r8, 0x10
add r14, r8
movabs r12, 0xeb6af670
push r12
push 0xfc67b46
push 0x36682b4a
push 0x6810203
push 0x6009438f
add qword ptr [rsp + 0x20], 0x549e6450; add
mov r12, r14
=== 1973
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 368
add rsp, 368
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbp
mov rbx, r12
=== 1974
mov r14, rbx
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov sil, byte ptr [rdx]
mov r13, 0xff
shl r13, 8
not r13
and r14, r13
movzx r13, sil
shl r13, 8
or r14, r13
=== 1975
mov r14, r14
push r14
mov r13, rsp
mov rsi, r14
=== 1976
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r9
mov rbx, rsi
movzx r13, r13b
=== 1977
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x110e51809
add rbp, 0x2f244ab7; add_carry
mov rbp, qword ptr [rbp + 0x1e8]
add rbp, r13
mov bpl, byte ptr [rbp]
movzx rbp, bpl
shl rbp, 0x18
add rbx, rbp
movabs rsi, 0x11a8211a4
push rsi
push 0x231b10e5
push 0x55972cf8
push 0x5ef53209
push 0xed00ad6
add qword ptr [rsp + 0x20], 0x2587491c; add
mov rsi, rbx
=== 1978
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 488
add rsp, 488
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r15
mov r14, rsi
=== 1979
mov rdi, r14
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbx
mov r10b, byte ptr [rbp]
mov r14, 0xff
shl r14, 0x10
not r14
and rdi, r14
movzx r14, r10b
shl r14, 0x10
or rdi, r14
=== 1980
mov rcx, rdi
push rcx
mov rsi, rsp
mov r14, rdi
=== 1981
mov rdi, rsi
mov rsi, r14
push rdi
push 0x1f9c2bd9
push 0x6137254e
push 0xa1536b1
=== 1982
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov rbx, rsi
movzx rdi, dil
=== 1983
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x115aaf059
add r8, 0x2a5e7267; add_carry
mov r8, qword ptr [r8 + 0x448]
add r8, rdi
mov dil, byte ptr [r8]
movzx rdi, dil
shl rdi, 0x20
add rbx, rdi
mov rbp, rbx
movabs r12, 0x117894ada
add r12, 0x28800fe6; add
=== 1984
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1096
add rsp, 1096
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov rsi, rbp
=== 1985
mov r15, rsi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov r10b, byte ptr [rcx]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and r15, rdx
movzx rdx, r10b
shl rdx, 0x18
or r15, rdx
=== 1986
mov r11, r15
push r11
mov r12, rsp
mov rdi, r15
=== 1987
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbp
mov r12, rdi
movzx r14, r14b
=== 1988
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x12147001f
add r13, 0x1ec262a1; add_carry
mov r13, qword ptr [r13]
add r13, r14
mov r11b, byte ptr [r13]
movzx r11, r11b
shl r11, 0x30
add r12, r11
mov rbp, r12
movabs rbx, 0x109ad2eec
add rbx, 0x365c2bd4; add
=== 1989
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov r14, rbp
=== 1990
mov r14, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rsi
mov r15b, byte ptr [r13]
mov r12, 0xff
shl r12, 0x28
not r12
and r14, r12
movzx r12, r15b
shl r12, 0x28
or r14, r12
=== 1991
mov rbx, r14
push rbx
mov rsi, rsp
mov rbx, r14
=== 1992
mov r8, rsi
mov rbx, rbx
push r8
push 0x7138515d
push 0x6acd77c0
push 0x173312ea
=== 1993
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov rbp, rbx
movzx rbx, bl
=== 1994
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x105754e84
add rdx, 0x3a94143c; add_carry
mov rdx, qword ptr [rdx]
add rdx, rbx
mov al, byte ptr [rdx]
movzx rax, al
shl rax, 0x38
add rbp, rax
movabs rbx, 0x10955098c
push rbx
push 0x7f906579
push 0x9a3187
push 0xe09736b
push 0x1d63781a
add qword ptr [rsp + 0x20], 0x36b45134; add
mov r15, rbp
=== 1995
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rbp, r15
=== 1996
mov r12, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r13
mov bpl, byte ptr [rax]
mov r11, 0xff
shl r11, 0x30
not r11
and r12, r11
movzx r11, bpl
shl r11, 0x30
or r12, r11
=== 1997
mov r15, r12
movabs rbx, 0xdc1c598c
add rbx, 0x646d5f5c; input
=== 1998
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 25
add rsp, 25
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov r12, r15
movzx rbx, bl
=== 1999
mov rax, rbx
mov r15, 0xffffffffb516ab6e
add r15, 0x4b49503e
push r15
mov r13, r12
mul qword ptr [rsp]
mov r14, rax
=== 2000
mov rbx, r13
sub rbx, r14
=== 2001
mov r11, rbx
push r11
mov r12, rsp
mov r15, rbx
=== 2002
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov rsi, r15
movzx rbp, bpl
=== 2003
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rsi
movabs r14, 0xef71d357
add r14, 0x50977769; xor
=== 2004
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 464
add rsp, 464
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdx
mov rbx, rbp
=== 2005
mov r12, rbx
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rdi
mov sil, byte ptr [rsi]
mov r12b, sil
=== 2006
mov rax, r12
push rax
mov r15, rsp
mov rbx, r12
=== 2007
mov r9, r15
mov r15, rbx
push r9
push 0x2ca0f17
push 0x7b6040e7
push 0x7ce06c37
=== 2008
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov r15, r15
movzx rbx, bl
=== 2009
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xd2a2f51f
push rcx
push 0x560238ba
push 0x672d1ace
push 0x134f1fb8
add qword ptr [rsp + 0x18], 0x6d6655a1; xor
mov r14, r15
=== 2010
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1136
add rsp, 1136
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov r13, r14
=== 2011
mov rbp, r13
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov r13b, byte ptr [r14]
mov r10, 0xff
shl r10, 8
not r10
and rbp, r10
movzx r10, r13b
shl r10, 8
or rbp, r10
=== 2012
mov rax, rbp
push rax
mov r14, rsp
mov r15, rbp
=== 2013
mov r15, r14
mov r13, r15
push r15
push 0x64f445b0
push 0x6a567fa2
push 0x324d70
push 0x49795e24
=== 2014
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r15
mov r14, r13
movzx rdi, dil
=== 2015
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xe96ff0cc
push r13
push 0x602c20d0
push 0x38ef6cc1
push 0x1d6048d0
add qword ptr [rsp + 0x18], 0x569959f4; xor
mov rbp, r14
=== 2016
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 440
add rsp, 440
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdi
mov rdi, rbp
=== 2017
mov rbp, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov r9b, byte ptr [rdx]
mov r10, 0xff
shl r10, 0x10
not r10
and rbp, r10
movzx r10, r9b
shl r10, 0x10
or rbp, r10
=== 2018
mov r10, rbp
push r10
mov r15, rsp
mov r13, rbp
=== 2019
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov rbp, r13
movzx rdi, dil
=== 2020
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xd19d12dd
push r8
push 0x5a0763c5
push 0xa8750ce
push 0x6842431e
push 0x2a562b42
add qword ptr [rsp + 0x20], 0x6e6c37e3; xor
mov r14, rbp
=== 2021
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1944
add rsp, 1944
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov r15, r14
=== 2022
mov rbx, r15
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov r8b, byte ptr [r8]
mov r14, 0xff
shl r14, 0x18
not r14
and rbx, r14
movzx r14, r8b
shl r14, 0x18
or rbx, r14
=== 2023
mov r15, rbx
push r15
mov rbp, rsp
mov r14, rbx
=== 2024
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
mov r13, r14
movzx r15, r15b
=== 2025
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, r13
movabs rbx, 0xfa1a1f96
add rbx, 0x45ef2b2a; xor
=== 2026
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r15
mov r14, rdi
=== 2027
mov r13, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov r11b, byte ptr [rax]
mov rsi, 0xff
shl rsi, 0x28
not rsi
and r13, rsi
movzx rsi, r11b
shl rsi, 0x28
or r13, rsi
=== 2028
mov r11, r13
push r11
mov rbx, rsp
mov r12, r13
=== 2029
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov rbp, r12
movzx r15, r15b
=== 2030
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rbp
movabs r14, 0xd8ec18f7
add r14, 0x671d31c9; xor
=== 2031
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov rbx, r15
=== 2032
mov rdi, rbx
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r12
mov r13b, byte ptr [rsi]
mov r14, 0xff
shl r14, 0x38
not r14
and rdi, r14
movzx r14, r13b
shl r14, 0x38
or rdi, r14
=== 2033
movabs rax, 0xc5b8825d
push rax
push 0xeac6e8b
push 0x7fa84588
push 0x138007da
add qword ptr [rsp + 0x18], 0x7ad1368b; input
mov rsi, rdi
=== 2034
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov rdi, rsi
movzx r12, r12b
=== 2035
mov rax, r12
mov rdi, 0xffffffffd161c134
add rdi, 0x2f947b5a
push rdi
mov rbx, rdi
mul qword ptr [rsp]
mov r15, rax
=== 2036
mov rbx, rbx
sub rbx, r15
=== 2037
mov r11, rbx
push r11
mov rbx, rsp
mov r12, rbx
=== 2038
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r11
mov rdi, r12
movzx rbp, bpl
=== 2039
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x1207afd96
add r10, 0x1f8e752a; sub_carry
mov r10, qword ptr [r10 + 0x158]
add r10, rbp
mov r15b, byte ptr [r10]
movzx r15, r15b
shl r15, 8
sub rdi, r15
mov r13, rdi
movabs rdi, 0xebd31f3b
add rdi, 0x54364b85; sub
=== 2040
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 344
add rsp, 344
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r15
mov rbp, r13
=== 2041
mov rdi, rbp
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r15
mov r13b, byte ptr [r13]
mov dil, r13b
=== 2042
mov rsi, rdi
push rsi
mov rbp, rsp
mov r12, rdi
=== 2043
mov rbx, rbp
mov r15, r12
push rbx
push 0x160679af
push 0x3a382b1c
push 0x1cd93bbc
=== 2044
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
mov r14, r15
movzx rsi, sil
=== 2045
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xc86dfebd
add r10, 0x779b7403; sub_carry
mov r10, qword ptr [r10 + 0x440]
add r10, rsi
mov r10b, byte ptr [r10]
movzx r10, r10b
shl r10, 0x10
sub r14, r10
movabs r12, 0x125e0325a
push r12
push 0x27910831
push 0x246c62b6
push 0x147b0905
push 0x49190e74
add qword ptr [rsp + 0x20], 0x1a293866; sub
mov r12, r14
=== 2046
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1088
add rsp, 1088
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdi
mov r15, r12
=== 2047
mov rdi, r15
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbp
mov r12b, byte ptr [rsi]
mov r14, 0xff
shl r14, 8
not r14
and rdi, r14
movzx r14, r12b
shl r14, 8
or rdi, r14
=== 2048
mov rdi, rdi
push rdi
mov rsi, rsp
mov rdi, rdi
=== 2049
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov r12, rdi
movzx rbx, bl
=== 2050
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x11f7f5f2e
add r15, 0x208a1392; sub_carry
mov r15, qword ptr [r15 + 0xe8]
add r15, rbx
mov al, byte ptr [r15]
movzx rax, al
shl rax, 0x18
sub r12, rax
mov r15, r12
movabs r13, 0x13ae2396f
add r13, 0x5273151; sub
=== 2051
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 232
add rsp, 232
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbp
mov r14, r15
=== 2052
mov r12, r14
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbp
mov r10b, byte ptr [rcx]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and r12, rsi
movzx rsi, r10b
shl rsi, 0x10
or r12, rsi
=== 2053
mov rdi, r12
push rdi
mov rdi, rsp
mov rsi, r12
=== 2054
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov r12, rsi
movzx r14, r14b
=== 2055
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x105ba2473
add r10, 0x3a4f4e4d; sub_carry
mov r10, qword ptr [r10 + 0xe0]
add r10, r14
mov bl, byte ptr [r10]
movzx rbx, bl
shl rbx, 0x20
sub r12, rbx
mov r14, r12
movabs rbx, 0xd58e28a9
add rbx, 0x6a7b4217; sub
=== 2056
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 224
add rsp, 224
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdi
mov r13, r14
=== 2057
mov rbx, r13
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r12
mov cl, byte ptr [r11]
mov r9, 0xff
shl r9, 0x18
not r9
and rbx, r9
movzx r9, cl
shl r9, 0x18
or rbx, r9
=== 2058
mov r13, rbx
push r13
mov r13, rsp
mov rdi, rbx
=== 2059
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r11
mov r15, rdi
movzx r12, r12b
=== 2060
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xf43dfab8
add rsi, 0x4bcb7808; sub_carry
mov rsi, qword ptr [rsi + 0x468]
add rsi, r12
mov r12b, byte ptr [rsi]
movzx r12, r12b
shl r12, 8
sub r15, r12
mov rbx, r15
movabs rdi, 0x1285e25af
add rdi, 0x17ab4511; sub
=== 2061
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1128
add rsp, 1128
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rcx
mov r12, rbx
=== 2062
mov rdi, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r14
mov r11b, byte ptr [r11]
mov dil, r11b
=== 2063
mov r11, rdi
push r11
mov rdi, rsp
mov r15, rdi
=== 2064
mov rbp, rdi
mov r12, r15
push rbp
push 0x5dec35b4
push 0x5ee1542c
push 0x3d8207d2
push 0x47922fc6
=== 2065
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov r14, r12
movzx rdi, dil
=== 2066
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xfb884931
add r10, 0x4481298f; sub_carry
mov r10, qword ptr [r10 + 0x5a0]
add r10, rdi
mov r12b, byte ptr [r10]
movzx r12, r12b
shl r12, 0x10
sub r14, r12
mov rbp, r14
movabs r15, 0xc7423230
add r15, 0x78c73890; sub
=== 2067
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1440
add rsp, 1440
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rax
mov rbp, rbp
=== 2068
mov rdi, rbp
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r15
mov dl, byte ptr [r11]
mov r13, 0xff
shl r13, 8
not r13
and rdi, r13
movzx r13, dl
shl r13, 8
or rdi, r13
=== 2069
mov rdx, rdi
push rdx
mov rbp, rsp
mov r13, rdi
=== 2070
mov rcx, rbp
mov rsi, r13
push rcx
push 0x7e176c9
push 0x73c32d2d
push 0x10df7c05
push 0x6e5a22f9
=== 2071
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov r14, rsi
movzx r13, r13b
=== 2072
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xf6e71290
add r8, 0x49226030; sub_carry
mov r8, qword ptr [r8 + 0x2f0]
add r8, r13
mov r11b, byte ptr [r8]
movzx r11, r11b
shl r11, 0x18
sub r14, r11
movabs r15, 0xdbd64a2c
push r15
push 0x26831c4f
push 0x2c307dff
push 0x3d847edd
push 0x78cc0412
add qword ptr [rsp + 0x20], 0x64332094; sub
mov rdi, r14
=== 2073
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 752
add rsp, 752
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r12
mov rbx, rdi
=== 2074
mov rdi, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov bpl, byte ptr [rbp]
mov rdx, 0xff
shl rdx, 0x10
not rdx
and rdi, rdx
movzx rdx, bpl
shl rdx, 0x10
or rdi, rdx
=== 2075
mov r14, rdi
push r14
mov r13, rsp
mov rbp, rdi
=== 2076
mov r10, r13
mov r15, rbp
push r10
push 0x74be2ed2
push 0x611f55e5
push 0x533c1d13
push 0x377654ee
=== 2077
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r12, r15
movzx rbx, bl
=== 2078
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xc03632b3
add r10, 0x7fd3400d; sub_carry
mov r10, qword ptr [r10 + 0x470]
add r10, rbx
mov r13b, byte ptr [r10]
movzx r13, r13b
shl r13, 0x20
sub r12, r13
mov r14, r12
movabs rsi, 0x13506eec0
add rsi, 0xb027c00; sub
=== 2079
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1136
add rsp, 1136
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov r13, r14
=== 2080
mov r14, r13
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbp
mov r13b, byte ptr [rbx]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and r14, rcx
movzx rcx, r13b
shl rcx, 0x18
or r14, rcx
=== 2081
mov rdx, r14
push rdx
mov r15, rsp
mov r12, r14
=== 2082
mov r10, r15
mov r13, r12
push r10
push 0x7afe6e4d
push 0x51dc549d
push 0x759c6035
=== 2083
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov r12, r13
movzx r14, r14b
=== 2084
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x114fc62cb
add rax, 0x2b0d0ff5; sub_carry
mov rax, qword ptr [rax + 0x10]
add rax, r14
mov bl, byte ptr [rax]
movzx rbx, bl
shl rbx, 0x28
sub r12, rbx
movabs rcx, 0xf76b2a15
push rcx
push 0x3f104c0e
push 0x75664086
push 0x1df210f3
push 0x7e2e1b31
add qword ptr [rsp + 0x20], 0x489e40ab; sub
mov rdi, r12
=== 2085
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 16
add rsp, 16
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r10
mov rdi, rdi
=== 2086
mov r12, rdi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r12
mov al, byte ptr [rbp]
mov r8, 0xff
shl r8, 0x20
not r8
and r12, r8
movzx r8, al
shl r8, 0x20
or r12, r8
=== 2087
mov rdi, r12
push rdi
mov rbx, rsp
mov r13, r12
=== 2088
mov rcx, rbx
mov rbx, r13
push rcx
push 0x287c12db
push 0xdf77b59
push 0x2e2132
=== 2089
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov rsi, rbx
movzx rdi, dil
=== 2090
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xeb57ff8b
add r8, 0x54b17335; sub_carry
mov r8, qword ptr [r8]
add r8, rdi
mov r12b, byte ptr [r8]
movzx r12, r12b
shl r12, 0x38
sub rsi, r12
mov r15, rsi
movabs r12, 0xd49f58ce
add r12, 0x6b6a11f2; sub
=== 2091
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rsi
mov rbx, r15
=== 2092
mov rbp, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov r14b, byte ptr [rax]
mov rcx, 0xff
shl rcx, 0x30
not rcx
and rbp, rcx
movzx rcx, r14b
shl rcx, 0x30
or rbp, rcx
=== 2093
mov rbp, rbp
push rbp
mov rbp, rsp
mov rbx, rbp
=== 2094
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov rsi, rbx
movzx r14, r14b
=== 2095
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x1213d377e
push rdx
push 0x45905ad0
push 0x149560d9
push 0x235a600a
add qword ptr [rsp + 0x18], 0x1ecc0b42
mov rdi, rsi
=== 2096
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rax
mov rbx, rdi
=== 2097
mov r13, rbx
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r15
mov r11b, byte ptr [rbx]
mov r8, 0xff
shl r8, 8
not r8
and r13, r8
movzx r8, r11b
shl r8, 8
or r13, r8
=== 2098
mov r11, r13
push r11
mov r13, rsp
mov rbx, r13
=== 2099
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov r15, rbx
movzx r13, r13b
=== 2100
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x129280094
push rbp
push 0xf0d4cc3
push 0x367a5c89
push 0x6882232a
push 0x419e7a46
add qword ptr [rsp + 0x20], 0x16e1422c
mov rsi, r15
=== 2101
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov rdi, rsi
=== 2102
mov r14, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov sil, byte ptr [rcx]
mov r9, 0xff
shl r9, 0x18
not r9
and r14, r9
movzx r9, sil
shl r9, 0x18
or r14, r9
=== 2103
mov rbx, r14
push rbx
mov r12, rsp
mov rsi, r14
=== 2104
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov rsi, rsi
movzx r14, r14b
=== 2105
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xd7252e25
push r15
push 0x6b153fe0
push 0x194c15e8
push 0x42f27f4
push 0x3cd28f1
add qword ptr [rsp + 0x20], 0x68e4149b
mov r12, rsi
=== 2106
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r15
mov r14, r12
=== 2107
mov rbp, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r13
mov r9b, byte ptr [r13]
mov r10, 0xff
shl r10, 0x28
not r10
and rbp, r10
movzx r10, r9b
shl r10, 0x28
or rbp, r10
=== 2108
mov rsi, rbp
push rsi
mov r12, rsp
mov r15, rbp
=== 2109
mov rbp, r12
mov r13, r15
push rbp
push 0x70be76ec
push 0x43a53e9
push 0x41f942be
=== 2110
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r8
mov r15, r13
movzx rbp, bpl
=== 2111
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xdd5ff3fa
push r13
push 0x29772b57
push 0x522370c
push 0x70944a53
add qword ptr [rsp + 0x18], 0x62a94ec6
mov rbx, r15
=== 2112
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r10
mov r12, rbx
=== 2113
mov r12, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov r9b, byte ptr [r15]
mov r15, 0xff
shl r15, 0x38
not r15
and r12, r15
movzx r15, r9b
shl r15, 0x38
or r12, r15
=== 2114
mov r14, r12
movabs r12, 0xe631aa6c
add r12, 0x59ce6784
test r14, r14
lea rdi, [rip - 0x334bc4]
cmovne rdi, r12
jmp rdi
=== 2115
movabs rbx, 0xc2cc8c15
add rbx, 0x7dbd2cd3; input
=== 2116
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 22
add rsp, 22
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r13
movzx r15, r15b
=== 2117
mov rax, r15
mov rcx, 0xfffffffff55ec106
add rcx, 0xb482cf3
push rcx
mul qword ptr [rsp]
mov r15, rax
=== 2118
mov rdi, r15
push rdi
mov r15, rsp
mov rdi, r15
=== 2119
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov r14, rdi
movzx r13, r13b
=== 2120
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r14
movabs rbx, 0x1323139d1
add rbx, 0xdd810ef; xor
=== 2121
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 184
add rsp, 184
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rsi
mov rdi, r14
=== 2122
mov rsi, rdi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov r12b, byte ptr [rbp]
mov sil, r12b
=== 2123
mov rbx, rsi
push rbx
mov rsi, rsp
mov r15, rsi
=== 2124
mov r11, rsi
mov rsi, r15
push r11
push 0x78ac241a
push 0x21de14d8
push 0x539a089d
push 0x315b1a5a
=== 2125
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r14
mov r12, rsi
movzx rsi, sil
=== 2126
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x12e150069
push rdi
push 0x41566102
push 0x3a293a52
push 0xbb5102d
add qword ptr [rsp + 0x18], 0x11f44a57; xor
mov rbp, r12
=== 2127
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1024
add rsp, 1024
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov rdi, rbp
=== 2128
mov r12, rdi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov r8b, byte ptr [r15]
mov rbp, 0xff
shl rbp, 8
not rbp
and r12, rbp
movzx rbp, r8b
shl rbp, 8
or r12, rbp
=== 2129
mov r8, r12
push r8
mov r15, rsp
mov r14, r12
=== 2130
mov rbx, r15
mov r14, r14
push rbx
push 0x2b491ef8
push 0x544046cf
push 0x27986792
=== 2131
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rax
mov r13, r14
movzx r15, r15b
=== 2132
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x11d2b2a1d
push rsi
push 0x6d0f7bda
push 0x27341365
push 0x34b93948
push 0x67c33710
add qword ptr [rsp + 0x20], 0x22de20a3; xor
mov r15, r13
=== 2133
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1576
add rsp, 1576
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r10
mov r12, r15
=== 2134
mov r12, r12
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rsi
mov dil, byte ptr [r8]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and r12, rbp
movzx rbp, dil
shl rbp, 0x10
or r12, rbp
=== 2135
mov r8, r12
push r8
mov rdi, rsp
mov r14, r12
=== 2136
mov r15, rdi
mov rbp, r14
push r15
push 0x4fce378a
push 0x6fbf1394
push 0x65793d3c
push 0xea53212
=== 2137
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov r13, rbp
movzx rsi, sil
=== 2138
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x131badb18
push r15
push 0x46fc5ef0
push 0x350721ee
push 0x3f24385e
add qword ptr [rsp + 0x18], 0xe4e6fa8; xor
mov rbx, r13
=== 2139
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 952
add rsp, 952
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rsi
mov r14, rbx
=== 2140
mov rbx, r14
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rsi
mov r9b, byte ptr [rbp]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and rbx, rdx
movzx rdx, r9b
shl rdx, 0x18
or rbx, rdx
=== 2141
mov rcx, rbx
push rcx
mov r13, rsp
mov r12, rbx
=== 2142
mov rdx, r13
mov r14, r12
push rdx
push 0x69675566
push 0x73e45e89
push 0x4ff47cfa
=== 2143
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r13
mov rdi, r14
movzx rbx, bl
=== 2144
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rdi
movabs rbx, 0x125a4051c
add rbx, 0x1a6545a4; xor
=== 2145
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r11
mov r14, r15
=== 2146
mov rdi, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov r13b, byte ptr [rax]
mov r10, 0xff
shl r10, 0x20
not r10
and rdi, r10
movzx r10, r13b
shl r10, 0x20
or rdi, r10
=== 2147
mov r8, rdi
push r8
mov rbx, rsp
mov r12, rdi
=== 2148
mov r8, rbx
mov rbx, r12
push r8
push 0x307d488e
push 0x27bb6a0b
push 0x6f933451
push 0x647d70ec
=== 2149
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov rsi, rbx
movzx rbx, bl
=== 2150
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rsi
movabs r14, 0x11a8d39f5
add r14, 0x257c10cb; xor
=== 2151
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r12
mov r14, r15
=== 2152
mov rdi, r14
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov bpl, byte ptr [rdx]
mov r10, 0xff
shl r10, 0x30
not r10
and rdi, r10
movzx r10, bpl
shl r10, 0x30
or rdi, r10
=== 2153
mov rax, rdi
push rax
mov rdi, rsp
mov rbp, rdi
=== 2154
mov r10, rdi
mov rdi, rbp
push r10
push 0x5dca54da
push 0x789b3b60
push 0x1e5d4161
push 0x6d081a44
=== 2155
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov r13, rdi
movzx r14, r14b
=== 2156
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xc9d9206a
push rdx
push 0x76741ca4
push 0x63747fed
push 0x68672af4
add qword ptr [rsp + 0x18], 0x76302a56; xor
mov rbp, r13
=== 2157
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbx
mov r12, rbp
=== 2158
mov rdi, r12
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r15
mov cl, byte ptr [rsi]
mov r8, 0xff
shl r8, 0x38
not r8
and rdi, r8
movzx r8, cl
shl r8, 0x38
or rdi, r8
=== 2159
movabs rsi, 0x1240e4974
push rsi
push 0x46da3c25
push 0x471e0fd0
push 0x2664424e
add qword ptr [rsp + 0x18], 0x1c7b6f74; input
mov r15, rdi
=== 2160
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 18
add rsp, 18
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rax
mov r12, r15
movzx rbx, bl
=== 2161
mov rax, rbx
mov r12, 0xffffffffc7ba2f32
add r12, 0x392e4cc2
push r12
mov rdi, r12
mul qword ptr [rsp]
mov rbp, rax
=== 2162
mov rdi, rdi
sub rdi, rbp
=== 2163
mov rax, rdi
push rax
mov r12, rsp
mov rbp, rdi
=== 2164
mov rdi, r12
mov r14, rbp
push rdi
push 0x7ada2916
push 0x33276819
push 0x49f42a49
push 0x1f766264
=== 2165
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov r12, r14
movzx rbp, bpl
=== 2166
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x135ad1700
add r8, 0xa5c5bc0; sub_carry
mov r8, qword ptr [r8 + 0x200]
add r8, rbp
mov cl, byte ptr [r8]
movzx rcx, cl
shl rcx, 8
sub r12, rcx
mov rdi, r12
movabs r13, 0xfea53a55
add r13, 0x4164306b; sub
=== 2167
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 512
add rsp, 512
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov rdi, rdi
=== 2168
mov rbx, rdi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r12
mov r14b, byte ptr [rbp]
mov bl, r14b
=== 2169
mov rdi, rbx
push rdi
mov r12, rsp
mov r13, rbx
=== 2170
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov r14, r13
movzx rbp, bpl
=== 2171
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xf67238c2
add r8, 0x499739fe; sub_carry
mov r8, qword ptr [r8 + 0x6b8]
add r8, rbp
mov r14b, byte ptr [r8]
movzx r14, r14b
shl r14, 0x10
sub r14, r14
movabs r13, 0xf0b92b8a
push r13
push 0x2ba21af3
push 0x480c2882
push 0x585e7e1a
add qword ptr [rsp + 0x18], 0x4f503f36; sub
mov r14, r14
=== 2172
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1720
add rsp, 1720
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov rdi, r14
=== 2173
mov rsi, rdi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r13
mov dl, byte ptr [rbp]
mov rdi, 0xff
shl rdi, 8
not rdi
and rsi, rdi
movzx rdi, dl
shl rdi, 8
or rsi, rdi
=== 2174
mov r10, rsi
push r10
mov r15, rsp
mov rdi, rsi
=== 2175
mov rcx, r15
mov rbp, rdi
push rcx
push 0x45036d64
push 0xec5080
push 0x2d3f192f
=== 2176
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r14
mov r12, rbp
movzx rbp, bpl
=== 2177
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xf0e14325
add rcx, 0x4f282f9b; sub_carry
mov rcx, qword ptr [rcx + 0x4d8]
add rcx, rbp
mov r14b, byte ptr [rcx]
movzx r14, r14b
shl r14, 0x18
sub r12, r14
mov r15, r12
movabs r14, 0x110421a73
add r14, 0x2fc7504d; sub
=== 2178
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1240
add rsp, 1240
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r9
mov rbp, r15
=== 2179
mov rbx, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r13
mov r13b, byte ptr [r12]
mov rax, 0xff
shl rax, 0x10
not rax
and rbx, rax
movzx rax, r13b
shl rax, 0x10
or rbx, rax
=== 2180
mov rbx, rbx
push rbx
mov r14, rsp
mov rsi, rbx
=== 2181
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov r15, rsi
movzx r13, r13b
=== 2182
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xcf903113
add r8, 0x707941ad; sub_carry
mov r8, qword ptr [r8 + 0x4c8]
add r8, r13
mov sil, byte ptr [r8]
movzx rsi, sil
shl rsi, 0x20
sub r15, rsi
movabs r13, 0x1244bfd3a
push r13
push 0x293d0057
push 0x5db87d1d
push 0x7630f62
add qword ptr [rsp + 0x18], 0x1bbd6d86; sub
mov rsi, r15
=== 2183
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1224
add rsp, 1224
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov r12, rsi
=== 2184
mov rsi, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov al, byte ptr [r15]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and rsi, rbp
movzx rbp, al
shl rbp, 0x18
or rsi, rbp
=== 2185
mov r12, rsi
push r12
mov r15, rsp
mov r13, rsi
=== 2186
mov r15, r15
mov r13, r13
push r15
push 0x4d1008c4
push 0x610f0637
push 0x6b2c344f
push 0x131b6c12
=== 2187
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov rbp, r13
movzx r12, r12b
=== 2188
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xee172ad4
add r13, 0x51f247ec; sub_carry
mov r13, qword ptr [r13]
add r13, r12
mov r11b, byte ptr [r13]
movzx r11, r11b
shl r11, 0x30
sub rbp, r11
movabs r12, 0xcf57ec01
push r12
push 0x26e15530
push 0x193e69b3
push 0x77350383
push 0x78e81f56
add qword ptr [rsp + 0x20], 0x70b17ebf; sub
mov r14, rbp
=== 2189
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rax
mov rdi, r14
=== 2190
mov rdi, rdi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbp
mov r8b, byte ptr [rsi]
mov r14, 0xff
shl r14, 0x28
not r14
and rdi, r14
movzx r14, r8b
shl r14, 0x28
or rdi, r14
=== 2191
mov r14, rdi
push r14
mov r15, rsp
mov rbp, rdi
=== 2192
mov rbp, r15
mov rsi, rbp
push rbp
push 0x30e02065
push 0x25502fdc
push 0x32a722ab
=== 2193
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov r13, rsi
movzx r15, r15b
=== 2194
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x1319c455f
add rcx, 0xe6d2d61; sub_carry
mov rcx, qword ptr [rcx]
add rcx, r15
mov r13b, byte ptr [rcx]
movzx r13, r13b
shl r13, 0x38
sub r13, r13
mov r14, r13
movabs rbp, 0xcb6a2a23
add rbp, 0x749f409d; sub
=== 2195
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov r13, r14
=== 2196
mov rdi, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov r13b, byte ptr [rax]
mov rbp, 0xff
shl rbp, 0x30
not rbp
and rdi, rbp
movzx rbp, r13b
shl rbp, 0x30
or rdi, rbp
=== 2197
mov r13, rdi
movabs rbx, 0xea528d00
add rbx, 0x56372be8; input
=== 2198
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r13, r13
movzx rbx, bl
=== 2199
mov rax, rbx
mov r12, 0xffffffffd3aa139c
add r12, 0x2c6f72b1
push r12
mov rbp, r13
mul qword ptr [rsp]
mov r15, rax
=== 2200
mov r12, rbp
sub r12, r15
=== 2201
mov rdi, r12
push rdi
mov rsi, rsp
mov r15, r12
=== 2202
mov rbx, rsi
mov rbp, r15
push rbx
push 0x694e2cab
push 0x5fc11b42
push 0x34ae0d5d
=== 2203
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov rdi, rbp
movzx r13, r13b
=== 2204
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xe771433f
add rdx, 0x58982f81; sub_carry
mov rdx, qword ptr [rdx + 0x768]
add rdx, r13
mov r12b, byte ptr [rdx]
movzx r12, r12b
shl r12, 8
sub rdi, r12
mov rbp, rdi
movabs r14, 0xed2cef34
add r14, 0x52dc7b8c; sub
=== 2205
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1896
add rsp, 1896
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rax
mov r14, rbp
=== 2206
mov r14, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r13
mov r11b, byte ptr [r13]
mov r14b, r11b
=== 2207
mov r8, r14
push r8
mov rdi, rsp
mov rbx, r14
=== 2208
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov rsi, rbx
movzx r12, r12b
=== 2209
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x11232fd77
add r13, 0x2dd67549; sub_carry
mov r13, qword ptr [r13 + 0x258]
add r13, r12
mov al, byte ptr [r13]
movzx rax, al
shl rax, 0x10
sub rsi, rax
mov r12, rsi
movabs rsi, 0xc13c10b4
add rsi, 0x7ecd5a0c; sub
=== 2210
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 600
add rsp, 600
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbp
mov rbp, r12
=== 2211
mov r13, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r12
mov r9b, byte ptr [rax]
mov rbp, 0xff
shl rbp, 8
not rbp
and r13, rbp
movzx rbp, r9b
shl rbp, 8
or r13, rbp
=== 2212
mov rdi, r13
push rdi
mov rbp, rsp
mov rbx, r13
=== 2213
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r13
mov r13, rbx
movzx r14, r14b
=== 2214
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x137fc263b
add r15, 0x80d4c85; sub_carry
mov r15, qword ptr [r15 + 0x440]
add r15, r14
mov r14b, byte ptr [r15]
movzx r14, r14b
shl r14, 0x18
sub r13, r14
mov rbx, r13
movabs rsi, 0xfafe60f6
add rsi, 0x450b09ca; sub
=== 2215
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1088
add rsp, 1088
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov rdi, rbx
=== 2216
mov r14, rdi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r14
mov bl, byte ptr [r15]
mov rax, 0xff
shl rax, 0x10
not rax
and r14, rax
movzx rax, bl
shl rax, 0x10
or r14, rax
=== 2217
mov r14, r14
push r14
mov r14, rsp
mov r12, r14
=== 2218
mov r12, r14
mov rdi, r12
push r12
push 0x2215d89
push 0x665959e7
push 0x40c1865
push 0x3155236c
=== 2219
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov rbp, rdi
movzx rdi, dil
=== 2220
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xd5c8fee1
add r8, 0x6a4073df; sub_carry
mov r8, qword ptr [r8 + 0x208]
add r8, rdi
mov r14b, byte ptr [r8]
movzx r14, r14b
shl r14, 0x20
sub rbp, r14
mov rbx, rbp
movabs r14, 0xc6d056b3
add r14, 0x7939140d; sub
=== 2221
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 520
add rsp, 520
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov r12, rbx
=== 2222
mov r12, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r15
mov r8b, byte ptr [rcx]
mov r14, 0xff
shl r14, 0x18
not r14
and r12, r14
movzx r14, r8b
shl r14, 0x18
or r12, r14
=== 2223
mov r13, r12
push r13
mov r14, rsp
mov r13, r12
=== 2224
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov r13, r13
movzx r12, r12b
=== 2225
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xcfd9586b
add rdi, 0x70301a55; sub_carry
mov rdi, qword ptr [rdi]
add rdi, r12
mov cl, byte ptr [rdi]
movzx rcx, cl
shl rcx, 0x28
sub r13, rcx
mov rbx, r13
movabs r13, 0x11f6d6102
add r13, 0x209c09be; sub
=== 2226
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r13
mov r15, rbx
=== 2227
mov r12, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov bl, byte ptr [rbp]
mov r14, 0xff
shl r14, 0x20
not r14
and r12, r14
movzx r14, bl
shl r14, 0x20
or r12, r14
=== 2228
mov r11, r12
push r11
mov r13, rsp
mov rbx, r12
=== 2229
mov rcx, r13
mov rbp, rbx
push rcx
push 0x76dd7434
push 0x46574977
push 0x343a2460
push 0x4eea072c
=== 2230
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov r14, rbp
movzx rbp, bpl
=== 2231
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x128972a70
add r15, 0x17724850; sub_carry
mov r15, qword ptr [r15]
add r15, rbp
mov al, byte ptr [r15]
movzx rax, al
shl rax, 0x38
sub r14, rax
mov rdi, r14
movabs rsi, 0xf07b1f40
add rsi, 0x4f8e4b80; sub
=== 2232
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r15
mov rsi, rdi
=== 2233
mov r14, rsi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r14
mov bl, byte ptr [rdx]
mov rbp, 0xff
shl rbp, 0x30
not rbp
and r14, rbp
movzx rbp, bl
shl rbp, 0x30
or r14, rbp
=== 2234
movabs r11, 0xc148402c
push r11
push 0x50f91a69
push 0x356d189c
push 0x72c822b9
push 0x7d2446d7
add qword ptr [rsp + 0x20], 0x7f4178bc; input
mov rbx, r14
=== 2235
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r15
mov rdi, rbx
movzx r15, r15b
=== 2236
mov rax, r15
mov rdi, 0xfffffffff39d984a
add rdi, 0xcf27cda
push rdi
mov r14, rdi
mul qword ptr [rsp]
mov rbx, rax
=== 2237
mov rsi, r14
add rsi, rbx
=== 2238
mov r8, rsi
push r8
mov r13, rsp
mov rsi, rsi
=== 2239
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbp
mov rdi, rsi
movzx r14, r14b
=== 2240
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rdi
movabs rbx, 0x1000ad3dc
add rbx, 0x3ffe76e4; xor
=== 2241
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1192
add rsp, 1192
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov rbp, r13
=== 2242
mov r15, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov al, byte ptr [rax]
mov r15b, al
=== 2243
mov r13, r15
push r13
mov r12, rsp
mov rbp, r15
=== 2244
mov rbx, r12
mov rdi, rbp
push rbx
push 0x44b53ca9
push 0x6c0d7425
push 0xf4c1adc
=== 2245
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov rdi, rdi
movzx rbp, bpl
=== 2246
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rdi
movabs rbx, 0xc4633862
add rbx, 0x7ba6125e; xor
=== 2247
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1920
add rsp, 1920
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rax
mov rsi, rsi
=== 2248
mov rdi, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rdi
mov r12b, byte ptr [r13]
mov r8, 0xff
shl r8, 8
not r8
and rdi, r8
movzx r8, r12b
shl r8, 8
or rdi, r8
=== 2249
mov r14, rdi
push r14
mov rbp, rsp
mov rbx, rdi
=== 2250
mov r12, rbp
mov r15, rbx
push r12
push 0x78fa239f
push 0x4e4f0234
push 0x442d6796
push 0x1bf92a91
=== 2251
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov r15, r15
movzx rdi, dil
=== 2252
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r15
movabs rdi, 0xc17e2ec5
add rdi, 0x7e8b1bfb; xor
=== 2253
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 984
add rsp, 984
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rdi, r12
=== 2254
mov rbx, rdi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov bpl, byte ptr [r9]
mov r12, 0xff
shl r12, 0x10
not r12
and rbx, r12
movzx r12, bpl
shl r12, 0x10
or rbx, r12
=== 2255
mov r15, rbx
push r15
mov r15, rsp
mov r13, rbx
=== 2256
mov rbx, r15
mov r14, r13
push rbx
push 0x57da3d2f
push 0x72667155
push 0x31fa28d9
=== 2257
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov r12, r14
movzx r15, r15b
=== 2258
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xcd2a062f
push r11
push 0x5891d54
push 0x1083f1a
push 0x44905fca
push 0x5046516e
add qword ptr [rsp + 0x20], 0x72df4491; xor
mov rdi, r12
=== 2259
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 288
add rsp, 288
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov rbp, rdi
=== 2260
mov rdi, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov bl, byte ptr [r9]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and rdi, rbp
movzx rbp, bl
shl rbp, 0x18
or rdi, rbp
=== 2261
mov rdi, rdi
push rdi
mov r13, rsp
mov rbx, rdi
=== 2262
mov rdi, r13
mov r12, rbx
push rdi
push 0x56e97630
push 0x50de45c2
push 0x76d64883
=== 2263
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov r15, r12
movzx rbx, bl
=== 2264
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, r15
movabs rbp, 0xed693564
add rbp, 0x52a0155c; xor
=== 2265
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r12
mov r13, rdi
=== 2266
mov r12, r13
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov r10b, byte ptr [rcx]
mov rcx, 0xff
shl rcx, 0x20
not rcx
and r12, rcx
movzx rcx, r10b
shl rcx, 0x20
or r12, rcx
=== 2267
mov rdx, r12
push rdx
mov r12, rsp
mov rdi, r12
=== 2268
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r8
mov r13, rdi
movzx r12, r12b
=== 2269
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xfe77de31
push rdi
push 0x5f107d8b
push 0x447366d6
push 0x7e9e1f00
push 0x206563e4
add qword ptr [rsp + 0x20], 0x41916c8f; xor
mov r13, r13
=== 2270
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r8
mov r14, r13
=== 2271
mov r15, r14
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rdi
mov bl, byte ptr [rsi]
mov r14, 0xff
shl r14, 0x30
not r14
and r15, r14
movzx r14, bl
shl r14, 0x30
or r15, r14
=== 2272
mov rdi, r15
movabs r15, 0xe7a052e6
add r15, 0x58e96602; input
=== 2273
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 10
add rsp, 10
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rax
mov rsi, rdi
movzx rbx, bl
=== 2274
mov rax, rbx
mov r10, 0xffffffffdeed53fb
add r10, 0x21db43d1
push r10
mov rbp, rsi
mul qword ptr [rsp]
mov rbx, rax
=== 2275
mov r13, rbp
xor r13, rbx
=== 2276
mov r15, r13
push r15
mov r12, rsp
mov rsi, r13
=== 2277
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov r15, rsi
movzx rsi, sil
=== 2278
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xc71a2b58
push r11
push 0x10e46b22
push 0x4d5f0078
push 0x4dcf1933
add qword ptr [rsp + 0x18], 0x78ef1f68; xor
mov rsi, r15
=== 2279
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1344
add rsp, 1344
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rax
mov rdi, rsi
=== 2280
mov rbx, rdi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r12
mov dl, byte ptr [rsi]
mov bl, dl
=== 2281
mov r11, rbx
push r11
mov r15, rsp
mov rdi, rbx
=== 2282
mov rax, r15
mov r13, rdi
push rax
push 0xed11cc7
push 0xfca6a63
push 0x36534fb1
push 0x2df03dac
=== 2283
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r11
mov r15, r13
movzx r13, r13b
=== 2284
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r15
movabs rbp, 0xc9d0196a
add rbp, 0x76393156; xor
=== 2285
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1904
add rsp, 1904
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbp
mov rdi, r13
=== 2286
mov r12, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r12
mov bpl, byte ptr [rax]
mov r14, 0xff
shl r14, 8
not r14
and r12, r14
movzx r14, bpl
shl r14, 8
or r12, r14
=== 2287
mov r14, r12
push r14
mov r14, rsp
mov r13, r12
=== 2288
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r10
mov rbx, r13
movzx r14, r14b
=== 2289
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x1007df75d
push rbx
push 0x2d205bc9
push 0x54c72e53
push 0x5ab10637
add qword ptr [rsp + 0x18], 0x3f8b5363; xor
mov rdi, rbx
=== 2290
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1976
add rsp, 1976
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov rbp, rdi
=== 2291
mov r14, rbp
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbx
mov bpl, byte ptr [rbx]
mov r12, 0xff
shl r12, 0x10
not r12
and r14, r12
movzx r12, bpl
shl r12, 0x10
or r14, r12
=== 2292
mov rbx, r14
push rbx
mov r12, rsp
mov r15, r14
=== 2293
mov rbx, r12
mov rdi, r15
push rbx
push 0x6a375ff8
push 0x27ab4bf8
push 0x56cf4a5e
=== 2294
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rcx
mov rsi, rdi
movzx r13, r13b
=== 2295
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rsi
movabs rbp, 0xe21dd091
add rbp, 0x5deb7a2f; xor
=== 2296
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1912
add rsp, 1912
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r12
mov rbx, r15
=== 2297
mov r13, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov al, byte ptr [rcx]
mov rbx, 0xff
shl rbx, 0x18
not rbx
and r13, rbx
movzx rbx, al
shl rbx, 0x18
or r13, rbx
=== 2298
mov r8, r13
push r8
mov rsi, rsp
mov r14, r13
=== 2299
mov rbx, rsi
mov r14, r14
push rbx
push 0x3f23741a
push 0x42735c0d
push 0x2a727245
push 0x17df7e8d
=== 2300
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rax
mov r12, r14
movzx rsi, sil
=== 2301
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xe3ccd875
push rbx
push 0x133872fb
push 0x2c291e89
push 0x601c597c
add qword ptr [rsp + 0x18], 0x5c3c724b; xor
mov r15, r12
=== 2302
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r10
mov r14, r15
=== 2303
mov r13, r14
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r15
mov dil, byte ptr [r12]
mov rdx, 0xff
shl rdx, 0x20
not rdx
and r13, rdx
movzx rdx, dil
shl rdx, 0x20
or r13, rdx
=== 2304
mov r15, r13
push r15
mov r15, rsp
mov rdi, r13
=== 2305
mov r10, r15
mov rsi, rdi
push r10
push 0x23882c8f
push 0x7ef805e1
push 0x5f9117f
=== 2306
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r11
mov rbx, rsi
movzx rdi, dil
=== 2307
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xc7b7e6ab
push rdx
push 0x7c577dae
push 0x7f41551
push 0x3de44202
add qword ptr [rsp + 0x18], 0x78516415; xor
mov rbx, rbx
=== 2308
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdi
mov rsi, rbx
=== 2309
mov r15, rsi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r15
mov sil, byte ptr [r11]
mov r14, 0xff
shl r14, 0x28
not r14
and r15, r14
movzx r14, sil
shl r14, 0x28
or r15, r14
=== 2310
movabs r10, 0x10c789010
push r10
push 0x301e12d8
push 0x6493aad
push 0xfcb6a47
push 0x462005c5
add qword ptr [rsp + 0x20], 0x341128d8; input
mov r12, r15
=== 2311
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 14
add rsp, 14
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov r15, r12
movzx r12, r12b
=== 2312
mov rax, r12
mov r11, 0xffffffffcda90a32
add r11, 0x32ca0765
push r11
mov r14, r15
mul qword ptr [rsp]
mov rdi, rax
=== 2313
mov rdi, r14
xor rdi, rdi
=== 2314
mov r12, rdi
push r12
mov r14, rsp
mov rbx, rdi
=== 2315
mov r14, r14
mov rsi, rbx
push r14
push 0x66d4681f
push 0xbdd3289
push 0x4d184eb7
=== 2316
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov r14, rsi
movzx rbp, bpl
=== 2317
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x1070c46e5
add r11, 0x38fd1bdb; add_carry
mov r11, qword ptr [r11 + 0x310]
add r11, rbp
mov r11b, byte ptr [r11]
movzx r11, r11b
shl r11, 8
add r14, r11
mov r12, r14
movabs rdi, 0x117cbef2f
a
d
d
 
r
d
i
,
 
0
x
2
8
3
d
6
b
9
1
=== 2318
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 784
add rsp, 784
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov r12, r12
=== 2319
mov rbp, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rsi
mov dil, byte ptr [r10]
mov bpl, dil
=== 2320
mov r15, rbp
push r15
mov rsi, rsp
mov r12, rbp
=== 2321
mov r15, rsi
mov r12, r12
push r15
push 0x48511db8
push 0x5ee56b2a
push 0x21e86250
=== 2322
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov rbx, r12
movzx rdi, dil
=== 2323
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xd6d023db
add r15, 0x69393ee5; add_carry
mov r15, qword ptr [r15 + 0x690]
add r15, rdi
mov dl, byte ptr [r15]
movzx rdx, dl
shl rdx, 0x10
add rbx, rdx
movabs r11, 0x11b9c3dc1
push r11
push 0x3e2c5ca3
push 0x68635a02
push 0x7726e08
push 0xfab0bb6
add qword ptr [rsp + 0x20], 0x246d1cff; add
mov r15, rbx
=== 2324
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1680
add rsp, 1680
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdi
mov r12, r15
=== 2325
mov rsi, r12
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov r8b, byte ptr [rbp]
mov r12, 0xff
shl r12, 8
not r12
and rsi, r12
movzx r12, r8b
shl r12, 8
or rsi, r12
=== 2326
mov r12, rsi
push r12
mov rbx, rsp
mov rdi, rsi
=== 2327
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov r15, rdi
movzx rbx, bl
=== 2328
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x1313d2995
add r10, 0xecc392b; add_carry
mov r10, qword ptr [r10 + 0x500]
add r10, rbx
mov bl, byte ptr [r10]
movzx rbx, bl
shl rbx, 0x18
add r15, rbx
mov rsi, r15
movabs r13, 0xdcca3afb
add r13, 0x633f1fc5; add
=== 2329
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1280
add rsp, 1280
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbx
mov r15, rsi
=== 2330
mov rsi, r15
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r13
mov dil, byte ptr [rbx]
mov r10, 0xff
shl r10, 0x10
not r10
and rsi, r10
movzx r10, dil
shl r10, 0x10
or rsi, r10
=== 2331
mov rdx, rsi
push rdx
mov r15, rsp
mov rbx, rsi
=== 2332
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r13
mov r12, rbx
movzx rbp, bpl
=== 2333
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x126d8f54a
add r15, 0x19306d76; add_carry
mov r15, qword ptr [r15 + 0x338]
add r15, rbp
mov dil, byte ptr [r15]
movzx rdi, dil
shl rdi, 0x20
add r12, rdi
mov r15, r12
movabs r14, 0xe09c03bb
add r14, 0x5f6d5705; add
=== 2334
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 824
add rsp, 824
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r11
mov rdi, r15
=== 2335
mov rbx, rdi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov r14b, byte ptr [r9]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and rbx, rcx
movzx rcx, r14b
shl rcx, 0x18
or rbx, rcx
=== 2336
mov rbx, rbx
push rbx
mov r12, rsp
mov rdi, rbx
=== 2337
mov rax, r12
mov rbp, rdi
push rax
push 0x22922b30
push 0x36103886
push 0x76b52432
push 0x3a3d73e0
=== 2338
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov r15, rbp
movzx r14, r14b
=== 2339
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xf56d1189
add r14, 0x4a9c5137; add_carry
mov r14, qword ptr [r14]
add r14, r14
mov al, byte ptr [r14]
movzx rax, al
shl rax, 0x38
add r15, rax
movabs r12, 0xd2bc58e5
push r12
push 0x7bd36907
push 0xab630f3
push 0x26c80cf6
add qword ptr [rsp + 0x18], 0x6d4d01db; add
mov r15, r15
=== 2340
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov r13, r15
=== 2341
mov rbp, r13
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbp
mov r12b, byte ptr [rcx]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and rbp, rsi
movzx rsi, r12b
shl rsi, 0x30
or rbp, rsi
=== 2342
mov r10, rbp
push r10
mov rbx, rsp
mov rdi, rbp
=== 2343
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov r14, rdi
movzx r13, r13b
=== 2344
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x1101e0394
push rcx
push 0x10626d2b
push 0x1aa74188
push 0x45752c9
add qword ptr [rsp + 0x18], 0x2feb572c; add
mov rbp, r14
=== 2345
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rcx
mov r14, rbp
=== 2346
mov rbx, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rdi
mov r11b, byte ptr [r8]
mov r12, 0xff
shl r12, 0x38
not r12
and rbx, r12
movzx r12, r11b
shl r12, 0x38
or rbx, r12
=== 2347
mov r14, rbx
movabs rbp, 0x12f70800b
add rbp, 0x111938dd; input
=== 2348
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 30
add rsp, 30
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov r13, r14
movzx r15, r15b
=== 2349
mov rax, r15
mov rbp, 0xffffffffcb69fec9
add rbp, 0x34f55a53
push rbp
mov r15, r13
mul qword ptr [rsp]
mov rbp, rax
=== 2350
mov rdi, r15
add rdi, rbp
=== 2351
mov r8, rdi
push r8
mov r15, rsp
mov rbp, rdi
=== 2352
mov r13, r15
mov rdi, rbp
push r13
push 0x2baa3e5d
push 0x140735bc
push 0xfed6c4f
push 0x3a474f03
=== 2353
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r8
mov r14, rdi
movzx r13, r13b
=== 2354
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x13989276a
add r13, 0x6803b56; add_carry
mov r13, qword ptr [r13 + 0x7c8]
add r13, r13
mov dl, byte ptr [r13]
movzx rdx, dl
shl rdx, 8
add r14, rdx
movabs rbp, 0xf65ae1f8
push rbp
push 0x4b3b42be
push 0x2bcb71ed
push 0x52e468ff
push 0x7487334e
add qword ptr [rsp + 0x20], 0x49ae78c8; add
mov r13, r14
=== 2355
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1992
add rsp, 1992
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov rdi, r13
=== 2356
mov r12, rdi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rsi
mov r8b, byte ptr [r15]
mov r12b, r8b
=== 2357
mov rbp, r12
push rbp
mov rsi, rsp
mov rdi, r12
=== 2358
mov r14, rsi
mov rsi, rdi
push r14
push 0x7d564ee0
push 0x3f7e7504
push 0x258b5b75
push 0x5ca06863
=== 2359
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov r15, rsi
movzx r14, r14b
=== 2360
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x13b000429
add r13, 0x5095e97; add_carry
mov r13, qword ptr [r13 + 0x308]
add r13, r14
mov r13b, byte ptr [r13]
movzx r13, r13b
shl r13, 0x10
add r15, r13
mov r12, r15
movabs r14, 0xf03210c7
add r14, 0x4fd749f9; add
=== 2361
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 776
add rsp, 776
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov r14, r12
=== 2362
mov r14, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov r15b, byte ptr [rax]
mov r13, 0xff
shl r13, 8
not r13
and r14, r13
movzx r13, r15b
shl r13, 8
or r14, r13
=== 2363
mov r13, r14
push r13
mov rbp, rsp
mov r13, r14
=== 2364
mov rdi, rbp
mov rsi, r13
push rdi
push 0x39f938ed
push 0x305110db
push 0x7f360f0b
=== 2365
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r11
mov rbx, rsi
movzx r13, r13b
=== 2366
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xde02465e
add rcx, 0x62071c62; add_carry
mov rcx, qword ptr [rcx + 0x330]
add rcx, r13
mov dil, byte ptr [rcx]
movzx rdi, dil
shl rdi, 0x18
add rbx, rdi
mov r12, rbx
movabs rbp, 0xffd022fa
add rbp, 0x403937c6; add
=== 2367
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 816
add rsp, 816
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov rbx, r12
=== 2368
mov rbp, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r15
mov r11b, byte ptr [rcx]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and rbp, rdi
movzx rdi, r11b
shl rdi, 0x10
or rbp, rdi
=== 2369
mov rsi, rbp
push rsi
mov rbp, rsp
mov rsi, rbp
=== 2370
mov r11, rbp
mov rbx, rsi
push r11
push 0x502540ca
push 0x31c80beb
push 0x2f2e3095
=== 2371
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov rbp, rbx
movzx r13, r13b
=== 2372
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xcb75075c
add rbx, 0x74945b64; add_carry
mov rbx, qword ptr [rbx + 0x188]
add rbx, r13
mov r12b, byte ptr [rbx]
movzx r12, r12b
shl r12, 0x20
add rbp, r12
mov rdi, rbp
movabs rbx, 0xf12d2f5b
add rbx, 0x4edc2b65; add
=== 2373
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 392
add rsp, 392
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov rbx, rdi
=== 2374
mov r14, rbx
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rsi
mov bl, byte ptr [r13]
mov r9, 0xff
shl r9, 0x18
not r9
and r14, r9
movzx r9, bl
shl r9, 0x18
or r14, r9
=== 2375
mov rbp, r14
push rbp
mov r15, rsp
mov r14, r14
=== 2376
mov r12, r15
mov rbx, r14
push r12
push 0x42970ae8
push 0x5b6e5fd4
push 0x674b4e1d
push 0x3cb30944
=== 2377
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r8
mov rbx, rbx
movzx r12, r12b
=== 2378
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x13514242c
add r13, 0xaf53e94; add_carry
mov r13, qword ptr [r13]
add r13, r12
mov r8b, byte ptr [r13]
movzx r8, r8b
shl r8, 0x38
add rbx, r8
mov r13, rbx
movabs rbp, 0xff961a57
add rbp, 0x40734069; add
=== 2379
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov rdi, r13
=== 2380
mov rdi, rdi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov al, byte ptr [rbp]
mov r11, 0xff
shl r11, 0x30
not r11
and rdi, r11
movzx r11, al
shl r11, 0x30
or rdi, r11
=== 2381
mov rbx, rdi
movabs rbp, 0x10d797daa
add rbp, 0x33103b3e; input
=== 2382
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 26
add rsp, 26
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov r15, rbx
movzx r12, r12b
=== 2383
mov rax, r12
mov r8, 0xfffffffff09d62c9
add r8, 0xfba3a45
push r8
mov rbp, r15
mul qword ptr [rsp]
mov r13, rax
=== 2384
mov r13, rbp
add r13, r13
=== 2385
mov r14, r13
push r14
mov rbx, rsp
mov rsi, r13
=== 2386
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov rbp, rsi
movzx r12, r12b
=== 2387
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x1156b440d
add r13, 0x2a9e2eb3; sub_carry
mov r13, qword ptr [r13 + 0xe0]
add r13, r12
mov r11b, byte ptr [r13]
movzx r11, r11b
shl r11, 8
sub rbp, r11
movabs r11, 0xe813443d
push r11
push 0x56672e7
push 0x22941068
push 0x501e2266
push 0x708b4c90
add qword ptr [rsp + 0x20], 0x57f62683; sub
mov rbp, rbp
=== 2388
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 224
add rsp, 224
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rsi
mov r13, rbp
=== 2389
mov rdi, r13
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbx
mov r15b, byte ptr [rbp]
mov dil, r15b
=== 2390
mov rbp, rdi
push rbp
mov r14, rsp
mov r15, rdi
=== 2391
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdi
mov rbx, r15
movzx rsi, sil
=== 2392
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x123af5b1e
add rdx, 0x1c5a17a2; sub_carry
mov rdx, qword ptr [rdx + 0x7d0]
add rdx, rsi
mov al, byte ptr [rdx]
movzx rax, al
shl rax, 0x10
sub rbx, rax
mov rdi, rbx
movabs rsi, 0x1329a4375
add rsi, 0xd6f274b; sub
=== 2393
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2000
add rsp, 2000
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rsi
mov r13, rdi
=== 2394
mov rdi, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbp
mov r13b, byte ptr [rax]
mov r12, 0xff
shl r12, 8
not r12
and rdi, r12
movzx r12, r13b
shl r12, 8
or rdi, r12
=== 2395
mov rbp, rdi
push rbp
mov rdi, rsp
mov rbx, rdi
=== 2396
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov r12, rbx
movzx r15, r15b
=== 2397
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xfd1d5036
add rdx, 0x42ec228a; sub_carry
mov rdx, qword ptr [rdx + 0x138]
add rdx, r15
mov dl, byte ptr [rdx]
movzx rdx, dl
shl rdx, 0x18
sub r12, rdx
mov rsi, r12
movabs r15, 0xd87a3c74
add r15, 0x678f2e4c; sub
=== 2398
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 312
add rsp, 312
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdi
mov rdi, rsi
=== 2399
mov r13, rdi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov r12b, byte ptr [r15]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and r13, rbx
movzx rbx, r12b
shl rbx, 0x10
or r13, rbx
=== 2400
mov rbx, r13
push rbx
mov r14, rsp
mov rdi, r13
=== 2401
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rax
mov rsi, rdi
movzx rbx, bl
=== 2402
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xf0fd695f
add rbp, 0x4f0c0961; sub_carry
mov rbp, qword ptr [rbp + 0x1a0]
add rbp, rbx
mov dil, byte ptr [rbp]
movzx rdi, dil
shl rdi, 0x20
sub rsi, rdi
mov rsi, rsi
movabs r13, 0x12257086b
add r13, 0x1db26255; sub
=== 2403
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 416
add rsp, 416
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r15, rsi
=== 2404
mov r15, r15
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbx
mov bpl, byte ptr [rdi]
mov r13, 0xff
shl r13, 0x18
not r13
and r15, r13
movzx r13, bpl
shl r13, 0x18
or r15, r13
=== 2405
mov rbp, r15
push rbp
mov rbx, rsp
mov r15, r15
=== 2406
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov rsi, r15
movzx r13, r13b
=== 2407
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x1387600b0
add r14, 0x7937210; sub_carry
mov r14, qword ptr [r14]
add r14, r13
mov dil, byte ptr [r14]
movzx rdi, dil
shl rdi, 0x38
sub rsi, rdi
movabs r14, 0x11a0f51fd
push r14
push 0x6b020345
push 0x6e2e49a1
push 0x7e21797c
push 0x5533ee1
add qword ptr [rsp + 0x20], 0x25fa18c3; sub
mov rbx, rsi
=== 2408
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov r12, rbx
=== 2409
mov rsi, r12
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r13
mov dil, byte ptr [r12]
mov rcx, 0xff
shl rcx, 0x30
not rcx
and rsi, rcx
movzx rcx, dil
shl rcx, 0x30
or rsi, rcx
=== 2410
mov r11, rsi
push r11
mov rdi, rsp
mov r12, rsi
=== 2411
mov r14, rdi
mov rbp, r12
push r14
push 0x7eed7262
push 0x79817f45
push 0xc5a1174
push 0x47913763
=== 2412
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov rbx, rbp
movzx rbp, bpl
=== 2413
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xc74e5753
push r11
push 0x6f8c76f4
push 0xca672e6
push 0xcaa526e
push 0x2cc4839
add qword ptr [rsp + 0x20], 0x78bb136d; sub
mov rdi, rbx
=== 2414
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdx
mov rdi, rdi
=== 2415
mov rsi, rdi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r13
mov r10b, byte ptr [rbx]
mov rbp, 0xff
shl rbp, 0x38
not rbp
and rsi, rbp
movzx rbp, r10b
shl rbp, 0x38
or rsi, rbp
=== 2416
mov rcx, rsi
push rcx
mov rsi, rsp
mov r13, rsi
=== 2417
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov rsi, r13
movzx rbx, bl
=== 2418
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x111e9f3fb
add r12, 0x2e1f7ec5; sub_carry
mov r12, qword ptr [r12 + 0x258]
add r12, rbx
mov bl, byte ptr [r12]
movzx rbx, bl
shl rbx, 8
sub rsi, rbx
movabs r8, 0x122d9fdbb
push r8
push 0x75213c30
push 0x3ea25b1f
push 0x547d3bd4
push 0x5c114ea1
add qword ptr [rsp + 0x20], 0x1d2f6d05; sub
mov rbp, rsi
=== 2419
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 600
add rsp, 600
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdx
mov rdi, rbp
=== 2420
mov r13, rdi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rsi
mov cl, byte ptr [rbp]
mov r13b, cl
=== 2421
mov r15, r13
push r15
mov rbx, rsp
mov r14, r13
=== 2422
mov r12, rbx
mov rbx, r14
push r12
push 0x7cd84e28
push 0x55db4464
push 0x5ec90052
=== 2423
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov r13, rbx
movzx rdi, dil
=== 2424
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x1386f6439
add r14, 0x79a0e87; sub_carry
mov r14, qword ptr [r14 + 0x3a0]
add r14, rdi
mov r11b, byte ptr [r14]
movzx r11, r11b
shl r11, 0x10
sub r13, r11
mov rbp, r13
movabs r13, 0xdaf72ab9
add r13, 0x65124007; sub
=== 2425
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 928
add rsp, 928
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov r12, rbp
=== 2426
mov r13, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov sil, byte ptr [rcx]
mov r10, 0xff
shl r10, 8
not r10
and r13, r10
movzx r10, sil
shl r10, 8
or r13, r10
=== 2427
mov rax, r13
push rax
mov rbx, rsp
mov rbp, r13
=== 2428
mov rcx, rbx
mov rsi, rbp
push rcx
push 0x7b0d542d
push 0x26af1963
push 0x6f6e2256
=== 2429
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdi
mov rdi, rsi
movzx r12, r12b
=== 2430
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x1166855ee
add rsi, 0x29a11cd2; sub_carry
mov rsi, qword ptr [rsi + 0x68]
add rsi, r12
mov bpl, byte ptr [rsi]
movzx rbp, bpl
shl rbp, 0x18
sub rdi, rbp
mov rbp, rdi
movabs r12, 0xd935f7e4
add r12, 0x66d372dc; sub
=== 2431
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 104
add rsp, 104
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov r15, rbp
=== 2432
mov rdi, r15
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rdi
mov r14b, byte ptr [r12]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and rdi, rbp
movzx rbp, r14b
shl rbp, 0x10
or rdi, rbp
=== 2433
mov r11, rdi
push r11
mov r14, rsp
mov rbp, rdi
=== 2434
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r12
mov rdi, rbp
movzx r13, r13b
=== 2435
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x1136b466e
add r10, 0x2c9e2c52; sub_carry
mov r10, qword ptr [r10 + 0x480]
add r10, r13
mov r12b, byte ptr [r10]
movzx r12, r12b
shl r12, 0x20
sub rdi, r12
mov r12, rdi
movabs r15, 0x105ce4928
add r15, 0x3a3b2198; sub
=== 2436
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1152
add rsp, 1152
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r15
mov r13, r12
=== 2437
mov r13, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov r14b, byte ptr [r15]
mov r9, 0xff
shl r9, 0x18
not r9
and r13, r9
movzx r9, r14b
shl r9, 0x18
or r13, r9
=== 2438
mov r12, r13
push r12
mov rbp, rsp
mov r12, r13
=== 2439
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov r13, r12
movzx rsi, sil
=== 2440
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x10e1063a5
add rax, 0x31f90f1b; sub_carry
mov rax, qword ptr [rax]
add rax, rsi
mov bpl, byte ptr [rax]
movzx rbp, bpl
shl rbp, 0x30
sub r13, rbp
mov r14, r13
movabs r13, 0xc15031c0
add r13, 0x7eb93900; sub
=== 2441
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdi
mov rbp, r14
=== 2442
mov rsi, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov bpl, byte ptr [r10]
mov r14, 0xff
shl r14, 0x28
not r14
and rsi, r14
movzx r14, bpl
shl r14, 0x28
or rsi, r14
=== 2443
mov rbp, rsi
push rbp
mov rsi, rsp
mov r12, rsi
=== 2444
mov r13, rsi
mov rbx, r12
push r13
push 0x46415bce
push 0x6e732a7
push 0x6e9227c1
=== 2445
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r15
mov rsi, rbx
movzx rdi, dil
=== 2446
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xcc192b2d
push rdx
push 0x78af1b6c
push 0x32620975
push 0x371c670f
add qword ptr [rsp + 0x18], 0x73f01793
mov r13, rsi
=== 2447
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov r13, r13
=== 2448
mov rsi, r13
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r15
mov al, byte ptr [rbx]
mov sil, al
=== 2449
mov rcx, rsi
push rcx
mov r13, rsp
mov rdi, rsi
=== 2450
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov r15, rdi
movzx r14, r14b
=== 2451
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xcbdee4f8
push rcx
push 0x54655344
push 0x604f261f
push 0x24585799
add qword ptr [rsp + 0x18], 0x742a5dc8
mov rsi, r15
=== 2452
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r14
mov r12, rsi
=== 2453
mov r15, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r13
mov r14b, byte ptr [r11]
mov rcx, 0xff
shl rcx, 8
not rcx
and r15, rcx
movzx rcx, r14b
shl rcx, 8
or r15, rcx
=== 2454
mov r12, r15
push r12
mov rbp, rsp
mov rbx, r15
=== 2455
mov r9, rbp
mov rbx, rbx
push r9
push 0x1ac44723
push 0x48e41673
push 0x46706586
=== 2456
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r13
mov rsi, rbx
movzx r13, r13b
=== 2457
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x1319a0e59
push rax
push 0x60ce0d70
push 0x3354e81
push 0x5af80c20
push 0x5f1d0475
add qword ptr [rsp + 0x20], 0xe6f3467
mov rsi, rsi
=== 2458
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rcx
mov rdi, rsi
=== 2459
mov rsi, rdi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r15
mov r9b, byte ptr [r13]
mov r14, 0xff
shl r14, 0x10
not r14
and rsi, r14
movzx r14, r9b
shl r14, 0x10
or rsi, r14
=== 2460
mov rbp, rsi
push rbp
mov r15, rsp
mov rbx, rsi
=== 2461
mov r15, r15
mov rdi, rbx
push r15
push 0x2760dbe
push 0x4c3a5967
push 0x66570801
push 0x12354004
=== 2462
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rcx
mov r12, rdi
movzx rdi, dil
=== 2463
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r12
movabs rdi, 0x13009185d
add rdi, 0x10002a63
=== 2464
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rsi
mov rbx, r13
=== 2465
mov r14, rbx
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r15
mov r10b, byte ptr [r13]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and r14, rcx
movzx rcx, r10b
shl rcx, 0x18
or r14, rcx
=== 2466
mov r11, r14
push r11
mov rbp, rsp
mov r12, r14
=== 2467
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbp
mov rbp, r12
movzx r15, r15b
=== 2468
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xcf43f3a7
push rbp
push 0x7bb83e02
push 0x3cf5dc3
push 0x673d1413
push 0x47bb6217
add qword ptr [rsp + 0x20], 0x70c54f19
mov r14, rbp
=== 2469
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r12
mov r15, r14
=== 2470
mov rsi, r15
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rsi
mov r9b, byte ptr [r14]
mov r8, 0xff
shl r8, 0x20
not r8
and rsi, r8
movzx r8, r9b
shl r8, 0x20
or rsi, r8
=== 2471
mov r11, rsi
push r11
mov r13, rsp
mov rbp, rsi
=== 2472
mov rdx, r13
mov r14, rbp
push rdx
push 0x2ad92a14
push 0x6f874e6a
push 0x69c93075
push 0x64651e1a
=== 2473
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov r12, r14
movzx r13, r13b
=== 2474
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r12
movabs r15, 0x125313d86
add r15, 0x1ad8053a
=== 2475
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbp
mov rbp, rbx
=== 2476
mov r15, rbp
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov cl, byte ptr [rcx]
mov rdi, 0xff
shl rdi, 0x30
not rdi
and r15, rdi
movzx rdi, cl
shl rdi, 0x30
or r15, rdi
=== 2477
mov rdi, r15
push rdi
mov r12, rsp
mov r13, r15
=== 2478
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov rbx, r13
movzx r12, r12b
=== 2479
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rbx
movabs rdi, 0xf337d92a
add rdi, 0x4cd16996
=== 2480
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r14
mov r12, r12
=== 2481
mov r14, r12
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rsi
mov r9b, byte ptr [rsi]
mov r10, 0xff
shl r10, 0x38
not r10
and r14, r10
movzx r10, r9b
shl r10, 0x38
or r14, r10
=== 2482
mov r15, r14
movabs rbx, 0xf8b7ce34
add rbx, 0x474843bc
test r15, r15
lea rbp, [rip - 0x341f68]
cmovne rbp, rbx
jmp rbp
=== 2483
movabs rbp, 0x110a6a61c
push rbp
push 0x725f6144
push 0x341e51c6
push 0x1aed215f
add qword ptr [rsp + 0x18], 0x2fe312cc; input
=== 2484
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 23
add rsp, 23
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbp
movzx r15, r15b
=== 2485
mov rax, r15
mov r10, 0xffffffffc9ceb1e0
add r10, 0x36cc4916
push r10
mul qword ptr [rsp]
mov r15, rax
=== 2486
mov r8, r15
push r8
mov rdi, rsp
mov rsi, r15
=== 2487
mov rbp, rdi
mov rdi, rsi
push rbp
push 0x5bb07f69
push 0x76eb5788
push 0x57d5131
=== 2488
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbp
mov r12, rdi
movzx rdi, dil
=== 2489
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r12
movabs r15, 0x13ed4e0ad
add r15, 0x1346a13; xor
=== 2490
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 152
add rsp, 152
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov r15, r14
=== 2491
mov rbp, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov bl, byte ptr [r9]
mov bpl, bl
=== 2492
mov r15, rbp
push r15
mov rbp, rsp
mov rdi, rbp
=== 2493
mov r12, rbp
mov rdi, rdi
push r12
push 0xeb026aa
push 0x26721fef
push 0xbd16196
=== 2494
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
mov r13, rdi
movzx r12, r12b
=== 2495
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x121f94534
push rdi
push 0x1f9f4ecf
push 0x40c04e38
push 0x394b09e0
push 0x135c6e4d
add qword ptr [rsp + 0x20], 0x1e10058c; xor
mov rdi, r13
=== 2496
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 672
add rsp, 672
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov rsi, rdi
=== 2497
mov r12, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov cl, byte ptr [r14]
mov r15, 0xff
shl r15, 8
not r15
and r12, r15
movzx r15, cl
shl r15, 8
or r12, r15
=== 2498
mov rcx, r12
push rcx
mov rdi, rsp
mov r13, r12
=== 2499
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
mov rbx, r13
movzx r15, r15b
=== 2500
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rbx
movabs rbx, 0x13a75dae0
add rbx, 0x5936fe0; xor
=== 2501
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1096
add rsp, 1096
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov rsi, rbp
=== 2502
mov rbp, rsi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r14
mov bl, byte ptr [rdi]
mov r10, 0xff
shl r10, 0x10
not r10
and rbp, r10
movzx r10, bl
shl r10, 0x10
or rbp, r10
=== 2503
mov rax, rbp
push rax
mov rbp, rsp
mov rbx, rbp
=== 2504
mov rbx, rbp
mov rsi, rbx
push rbx
push 0x61f1c70
push 0x6cf02ceb
push 0x3dc52fd3
push 0x1234571b
=== 2505
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov r15, rsi
movzx rbp, bpl
=== 2506
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r15
movabs rdi, 0xe2e30e93
add rdi, 0x5d263c2d; xor
=== 2507
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1752
add rsp, 1752
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov rbx, r12
=== 2508
mov r14, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov bpl, byte ptr [rax]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r14, rsi
movzx rsi, bpl
shl rsi, 0x18
or r14, rsi
=== 2509
mov r10, r14
push r10
mov rdi, rsp
mov r12, r14
=== 2510
mov r9, rdi
mov r12, r12
push r9
push 0x71e14d9d
push 0xbb63d5f
push 0x66714130
push 0xf747bf
=== 2511
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov r15, r12
movzx r12, r12b
=== 2512
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r15
movabs rsi, 0xff75cf9c
add rsi, 0x40937b24; xor
=== 2513
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r15
mov rbx, r13
=== 2514
mov rbx, rbx
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r14
mov bpl, byte ptr [r13]
mov r15, 0xff
shl r15, 0x20
not r15
and rbx, r15
movzx r15, bpl
shl r15, 0x20
or rbx, r15
=== 2515
mov r10, rbx
push r10
mov rbx, rsp
mov r12, rbx
=== 2516
mov r10, rbx
mov rbx, r12
push r10
push 0x57c6341c
push 0x49894a37
push 0x7f833ad9
=== 2517
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov r13, rbx
movzx rdi, dil
=== 2518
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xc3b3f1eb
push rax
push 0x466f4b27
push 0x56ab2251
push 0x25500e0b
push 0x6220a44
add qword ptr [rsp + 0x20], 0x7c5558d5; xor
mov rbp, r13
=== 2519
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r9
mov r15, rbp
=== 2520
mov r13, r15
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rdi
mov bpl, byte ptr [r15]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and r13, rdx
movzx rdx, bpl
shl rdx, 0x28
or r13, rdx
=== 2521
mov rsi, r13
push rsi
mov r13, rsp
mov rdi, r13
=== 2522
mov rsi, r13
mov rdi, rdi
push rsi
push 0xf9a7023
push 0x18323b3c
push 0x725a27ec
push 0x3f365376
=== 2523
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov r15, rdi
movzx r12, r12b
=== 2524
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x11c66e6e3
push rbx
push 0x393c676a
push 0x343138f5
push 0x721e0578
push 0x11de47d7
add qword ptr [rsp + 0x20], 0x23a263dd; xor
mov r14, r15
=== 2525
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov r13, r14
=== 2526
mov r14, r13
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r15
mov r9b, byte ptr [r9]
mov rbp, 0xff
shl rbp, 0x38
not rbp
and r14, rbp
movzx rbp, r9b
shl rbp, 0x38
or r14, rbp
=== 2527
mov rdi, r14
movabs rbp, 0x10b91992f
add rbp, 0x34f81fb9; input
=== 2528
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 19
add rsp, 19
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rsi
mov rbx, rdi
movzx rbp, bpl
=== 2529
mov rax, rbp
mov rdi, 0xffffffff8179cac5
add rdi, 0x7f034f4d
push rdi
mov r15, rbx
mul qword ptr [rsp]
mov r13, rax
=== 2530
mov rbx, r15
add rbx, r13
=== 2531
mov r10, rbx
push r10
mov r12, rsp
mov rbx, rbx
=== 2532
mov rax, r12
mov rbp, rbx
push rax
push 0x26e743e0
push 0x1098504d
push 0x3c133e75
push 0x57df2c6f
=== 2533
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r11
mov rbx, rbp
movzx r13, r13b
=== 2534
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x122c233a3
add r12, 0x1d473f1d; sub_carry
mov r12, qword ptr [r12 + 0x220]
add r12, r13
mov dl, byte ptr [r12]
movzx rdx, dl
shl rdx, 8
sub rbx, rdx
mov r12, rbx
movabs rbp, 0xfa0d3fe5
add rbp, 0x45fc2adb; sub
=== 2535
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 544
add rsp, 544
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov r15, r12
=== 2536
mov rsi, r15
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rsi
mov r14b, byte ptr [r15]
mov sil, r14b
=== 2537
mov r14, rsi
push r14
mov r13, rsp
mov r14, rsi
=== 2538
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov r13, r14
movzx rbx, bl
=== 2539
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x13cad5f61
add rax, 0x35c135f; sub_carry
mov rax, qword ptr [rax + 0x7e0]
add rax, rbx
mov bl, byte ptr [rax]
movzx rbx, bl
shl rbx, 0x10
sub r13, rbx
mov r15, r13
movabs rbx, 0x106162ea7
add rbx, 0x39f33c19; sub
=== 2540
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2016
add rsp, 2016
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov r14, r15
=== 2541
mov rbx, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rsi
mov r14b, byte ptr [r15]
mov r12, 0xff
shl r12, 8
not r12
and rbx, r12
movzx r12, r14b
shl r12, 8
or rbx, r12
=== 2542
mov r13, rbx
push r13
mov r15, rsp
mov rsi, rbx
=== 2543
mov rdx, r15
mov r15, rsi
push rdx
push 0x38762c27
push 0x347e2d09
push 0x376b1986
push 0x1a411a2d
=== 2544
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov r12, r15
movzx rbx, bl
=== 2545
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xd9e3fc7d
add r15, 0x66257643; sub_carry
mov r15, qword ptr [r15 + 0x3c8]
add r15, rbx
mov r12b, byte ptr [r15]
movzx r12, r12b
shl r12, 0x18
sub r12, r12
mov r14, r12
movabs rbp, 0x13f71044b
add rbp, 0x986675; sub
=== 2546
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 968
add rsp, 968
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov rbx, r14
=== 2547
mov r14, rbx
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r15
mov r11b, byte ptr [r12]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r14, rdi
movzx rdi, r11b
shl rdi, 0x10
or r14, rdi
=== 2548
mov rsi, r14
push rsi
mov r12, rsp
mov r14, r14
=== 2549
mov rsi, r12
mov rdi, r14
push rsi
push 0x5801226e
push 0x69b773de
push 0x26ba6e53
push 0x1bbe2733
=== 2550
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov rsi, rdi
movzx r14, r14b
=== 2551
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x13ad52597
add rcx, 0x5344d29; sub_carry
mov rcx, qword ptr [rcx + 0x630]
add rcx, r14
mov bl, byte ptr [rcx]
movzx rbx, bl
shl rbx, 0x20
sub rsi, rbx
mov rbx, rsi
movabs r15, 0x11aff2e00
add r15, 0x250a3cc0; sub
=== 2552
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1584
add rsp, 1584
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdi
mov r13, rbx
=== 2553
mov r12, r13
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov r9b, byte ptr [r9]
mov r13, 0xff
shl r13, 0x18
not r13
and r12, r13
movzx r13, r9b
shl r13, 0x18
or r12, r13
=== 2554
mov r8, r12
push r8
mov rbp, rsp
mov r14, r12
=== 2555
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov r13, r14
movzx r15, r15b
=== 2556
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x123ea566e
add r12, 0x1c1f1c52; sub_carry
mov r12, qword ptr [r12]
add r12, r15
mov al, byte ptr [r12]
movzx rax, al
shl rax, 0x28
sub r13, rax
mov r12, r13
movabs r14, 0x136463332
add r14, 0x9c3378e; sub
=== 2557
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rsi
mov rbp, r12
=== 2558
mov r12, rbp
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r12
mov al, byte ptr [rdi]
mov r11, 0xff
shl r11, 0x20
not r11
and r12, r11
movzx r11, al
shl r11, 0x20
or r12, r11
=== 2559
mov rdi, r12
push rdi
mov rsi, rsp
mov r12, r12
=== 2560
mov rdi, rsi
mov r12, r12
push rdi
push 0x728a2385
push 0xfc14e8d
push 0x60007b1f
push 0x4d5f2481
=== 2561
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r13
mov r14, r12
movzx rbx, bl
=== 2562
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x1062ff2dc
add r12, 0x39d97fe4; sub_carry
mov r12, qword ptr [r12]
add r12, rbx
mov cl, byte ptr [r12]
movzx rcx, cl
shl rcx, 0x38
sub r14, rcx
mov rsi, r14
movabs rdi, 0x137d956a6
add rdi, 0x830141a; sub
=== 2563
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov r15, rsi
=== 2564
mov r12, r15
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rsi
mov bpl, byte ptr [r10]
mov rdx, 0xff
shl rdx, 0x30
not rdx
and r12, rdx
movzx rdx, bpl
shl rdx, 0x30
or r12, rdx
=== 2565
mov r10, r12
push r10
mov rbp, rsp
mov rbx, r12
=== 2566
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdi
mov rsi, rbx
movzx r14, r14b
=== 2567
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x1012916ca
push r14
push 0xbc6100
push 0x3b4d4323
push 0x674d6824
push 0x30f00005
add qword ptr [rsp + 0x20], 0x3ee053f6; sub
mov r15, rsi
=== 2568
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov r13, r15
=== 2569
mov r12, r13
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r15
mov r10b, byte ptr [rdi]
mov r15, 0xff
shl r15, 0x38
not r15
and r12, r15
movzx r15, r10b
shl r15, 0x38
or r12, r15
=== 2570
movabs rbp, 0x10bf84101
push rbp
push 0x2b4f24b5
push 0xeb77622
push 0x70935afb
push 0x49330871
add qword ptr [rsp + 0x20], 0x349177e7; input
mov rsi, r12
=== 2571
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 11
add rsp, 11
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov r12, rsi
movzx r15, r15b
=== 2572
mov rax, r15
mov rdi, 0xffffffffc5e74138
add rdi, 0x3a664379
push rdi
mov r14, r12
mul qword ptr [rsp]
mov rbx, rax
=== 2573
mov r15, r14
add r15, rbx
=== 2574
mov r14, r15
push r14
mov rbx, rsp
mov r15, r15
=== 2575
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rcx
mov r13, r15
movzx r12, r12b
=== 2576
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x103244dba
add rbp, 0x3ce51506; add_carry
mov rbp, qword ptr [rbp + 0x6e0]
add rbp, r12
mov bpl, byte ptr [rbp]
movzx rbp, bpl
shl rbp, 8
add r13, rbp
mov rbp, r13
movabs r12, 0x109d92562
add r12, 0x3630355e; add
=== 2577
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1760
add rsp, 1760
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov r12, rbp
=== 2578
mov r15, r12
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov cl, byte ptr [rbp]
mov r15b, cl
=== 2579
mov r13, r15
push r13
mov r15, rsp
mov r13, r15
=== 2580
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r15
mov rbx, r13
movzx rsi, sil
=== 2581
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xc0af60df
add r10, 0x7f5a01e1; add_carry
mov r10, qword ptr [r10 + 0x438]
add r10, rsi
mov r10b, byte ptr [r10]
movzx r10, r10b
shl r10, 0x10
add rbx, r10
movabs r10, 0xd14f0cab
push r10
push 0x76af4ede
push 0x3bac3b34
push 0x3f830a59
push 0x2e8152c4
add qword ptr [rsp + 0x20], 0x6eba4e15; add
mov r13, rbx
=== 2582
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1080
add rsp, 1080
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r9
mov rdi, r13
=== 2583
mov r12, rdi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov r14b, byte ptr [r9]
mov rdi, 0xff
shl rdi, 8
not rdi
and r12, rdi
movzx rdi, r14b
shl rdi, 8
or r12, rdi
=== 2584
mov rax, r12
push rax
mov rsi, rsp
mov rbp, r12
=== 2585
mov rbp, rsi
mov r13, rbp
push rbp
push 0x4848361d
push 0x100c1583
push 0x332b7173
=== 2586
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbx
mov rdi, r13
movzx rsi, sil
=== 2587
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xd0b5300a
add r12, 0x6f5432b6; add_carry
mov r12, qword ptr [r12 + 0x18]
add r12, rsi
mov r14b, byte ptr [r12]
movzx r14, r14b
shl r14, 0x18
add rdi, r14
movabs rdi, 0xee900945
push rdi
push 0x23995e8c
push 0x2c781553
push 0x36b45540
push 0x155b3ad8
add qword ptr [rsp + 0x20], 0x5179517b; add
mov r14, rdi
=== 2588
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 24
add rsp, 24
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rax
mov r13, r14
=== 2589
mov r12, r13
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r14
mov bl, byte ptr [rbx]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r12, rdi
movzx rdi, bl
shl rdi, 0x10
or r12, rdi
=== 2590
mov r12, r12
push r12
mov rsi, rsp
mov r12, r12
=== 2591
mov r15, rsi
mov rbp, r12
push r15
push 0x20fe68f7
push 0x70f259d6
push 0x7ec27960
push 0x1df769a3
=== 2592
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rax
mov r14, rbp
movzx rsi, sil
=== 2593
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x11e1d344f
add r13, 0x21ec2e71; add_carry
mov r13, qword ptr [r13 + 0x518]
add r13, rsi
mov al, byte ptr [r13]
movzx rax, al
shl rax, 0x20
add r14, rax
movabs rsi, 0x111bb0183
push rsi
push 0x73b0128c
push 0xf1c3e17
push 0x71015e55
add qword ptr [rsp + 0x18], 0x2e4e593d; add
mov r12, r14
=== 2594
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1304
add rsp, 1304
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r10
mov r13, r12
=== 2595
mov r14, r13
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r12
mov r13b, byte ptr [rsi]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r14, rsi
movzx rsi, r13b
shl rsi, 0x18
or r14, rsi
=== 2596
mov rbx, r14
push rbx
mov r13, rsp
mov rdi, r14
=== 2597
mov r11, r13
mov r12, rdi
push r11
push 0x6ca7071e
push 0x35221bee
push 0x76746058
=== 2598
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov r14, r12
movzx rdi, dil
=== 2599
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x130aa2555
add r8, 0xf5f3d6b; add_carry
mov r8, qword ptr [r8]
add r8, rdi
mov sil, byte ptr [r8]
movzx rsi, sil
shl rsi, 0x28
add r14, rsi
movabs rdx, 0xed0deb9a
push rdx
push 0x54ae263c
push 0x70f72368
push 0x22d94345
add qword ptr [rsp + 0x18], 0x52fb6f26; add
mov r12, r14
=== 2600
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbp
mov rsi, r12
=== 2601
mov rdi, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov r11b, byte ptr [r9]
mov rbx, 0xff
shl rbx, 0x20
not rbx
and rdi, rbx
movzx rbx, r11b
shl rbx, 0x20
or rdi, rbx
=== 2602
mov r15, rdi
push r15
mov rsi, rsp
mov rbx, rdi
=== 2603
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov rbp, rbx
movzx r14, r14b
=== 2604
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x11ed13ebe
add rax, 0x21382402; add_carry
mov rax, qword ptr [rax]
add rax, r14
mov r15b, byte ptr [rax]
movzx r15, r15b
shl r15, 0x30
add rbp, r15
mov rbx, rbp
movabs r14, 0x135ef539a
add r14, 0xa1a0726; add
=== 2605
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov r15, rbx
=== 2606
mov rsi, r15
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r14
mov r8b, byte ptr [rdi]
mov rcx, 0xff
shl rcx, 0x28
not rcx
and rsi, rcx
movzx rcx, r8b
shl rcx, 0x28
or rsi, rcx
=== 2607
mov r15, rsi
push r15
mov rbx, rsp
mov rdi, rsi
=== 2608
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov rbp, rdi
movzx rsi, sil
=== 2609
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xd1eae70c
add rdi, 0x6e1e7bb4; add_carry
mov rdi, qword ptr [rdi]
add rdi, rsi
mov r11b, byte ptr [rdi]
movzx r11, r11b
shl r11, 0x38
add rbp, r11
mov r12, rbp
movabs rsi, 0xfe551afe
add rsi, 0x41b43fc2; add
=== 2610
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov rbx, r12
=== 2611
mov rbx, rbx
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov r13b, byte ptr [r12]
mov r14, 0xff
shl r14, 0x30
not r14
and rbx, r14
movzx r14, r13b
shl r14, 0x30
or rbx, r14
=== 2612
mov rax, rbx
push rax
mov r13, rsp
mov rdi, rbx
=== 2613
mov rcx, r13
mov r13, rdi
push rcx
push 0x4ccc6a21
push 0x74c64449
push 0x32847e22
=== 2614
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov r14, r13
movzx rdi, dil
=== 2615
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xc66b4cae
push r10
push 0x26da4553
push 0x2e512540
push 0x21297ec4
push 0x3cf0782e
add qword ptr [rsp + 0x20], 0x799e0e12; add
mov rsi, r14
=== 2616
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov r12, rsi
=== 2617
mov r15, r12
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbx
mov r14b, byte ptr [r12]
mov r10, 0xff
shl r10, 0x38
not r10
and r15, r10
movzx r10, r14b
shl r10, 0x38
or r15, r10
=== 2618
mov r14, r15
movabs rdi, 0x13b294fb9
add rdi, 0x560692f; input
=== 2619
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 15
add rsp, 15
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov rbp, r14
movzx rsi, sil
=== 2620
mov rax, rsi
mov r10, 0xffffffffd85ad096
add r10, 0x27fa5ae2
push r10
mov r14, rbp
mul qword ptr [rsp]
mov r15, rax
=== 2621
mov r12, r14
sub r12, r15
=== 2622
mov r12, r12
push r12
mov r13, rsp
mov rsi, r12
=== 2623
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov r12, rsi
movzx r15, r15b
=== 2624
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r12
movabs r13, 0xee7ecbdf
add r13, 0x518a7ee1; xor
=== 2625
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 752
add rsp, 752
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov r15, rbp
=== 2626
mov r13, r15
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbp
mov bpl, byte ptr [r12]
mov r13b, bpl
=== 2627
mov rbp, r13
push rbp
mov r15, rsp
mov rsi, r13
=== 2628
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r10
mov r14, rsi
movzx rsi, sil
=== 2629
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r14
movabs rbp, 0x117454a6f
add rbp, 0x28c40051; xor
=== 2630
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 912
add rsp, 912
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov rbp, rbx
=== 2631
mov rbp, rbp
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r14
mov r8b, byte ptr [rsi]
mov rdi, 0xff
shl rdi, 8
not rdi
and rbp, rdi
movzx rdi, r8b
shl rdi, 8
or rbp, rdi
=== 2632
mov r10, rbp
push r10
mov r12, rsp
mov rbx, rbp
=== 2633
mov r11, r12
mov r13, rbx
push r11
push 0x24e75b74
push 0x72551a0c
push 0x2c567dc1
=== 2634
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov rbp, r13
movzx r12, r12b
=== 2635
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rbp
movabs r15, 0xd2aae4a3
add r15, 0x6d5e661d; xor
=== 2636
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 592
add rsp, 592
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov rbp, rsi
=== 2637
mov r13, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov al, byte ptr [r10]
mov r14, 0xff
shl r14, 0x10
not r14
and r13, r14
movzx r14, al
shl r14, 0x10
or r13, r14
=== 2638
mov rcx, r13
push rcx
mov rsi, rsp
mov rdi, r13
=== 2639
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov r13, rdi
movzx rdi, dil
=== 2640
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xc1b4fa37
push rcx
push 0x6423456d
push 0x2ae83bb1
push 0x4eb08ce
add qword ptr [rsp + 0x18], 0x7e545089; xor
mov rdi, r13
=== 2641
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1960
add rsp, 1960
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r13
mov r13, rdi
=== 2642
mov r13, r13
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbp
mov r12b, byte ptr [rdi]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and r13, rcx
movzx rcx, r12b
shl rcx, 0x18
or r13, rcx
=== 2643
mov rcx, r13
push rcx
mov r15, rsp
mov rbx, r13
=== 2644
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r14
mov rdi, rbx
movzx rsi, sil
=== 2645
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rdi
movabs rdi, 0xec93d9cf
add rdi, 0x537570f1; xor
=== 2646
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov r14, rbp
=== 2647
mov rbp, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbp
mov r12b, byte ptr [rax]
mov rbx, 0xff
shl rbx, 0x38
not rbx
and rbp, rbx
movzx rbx, r12b
shl rbx, 0x38
or rbp, rbx
=== 2648
movabs rbx, 0x119b73b7e
push rbx
push 0xf81773
push 0x63b94c5f
push 0x71bc3cac
push 0x441c653b
add qword ptr [rsp + 0x20], 0x26d27d6a; input
mov rsi, rbp
=== 2649
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov r14, rsi
movzx rbx, bl
=== 2650
mov rax, rbx
mov r14, 0xfffffffffa4214c2
add r14, 0x6b15ddf
push r14
mov rdi, r14
mul qword ptr [rsp]
mov r12, rax
=== 2651
mov r13, rdi
xor r13, r12
=== 2652
mov r8, r13
push r8
mov rdi, rsp
mov r14, r13
=== 2653
mov r9, rdi
mov r12, r14
push r9
push 0x157a6e6e
push 0x7efe6353
push 0x7b271ca
push 0x37503a0f
=== 2654
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbp
mov r13, r12
movzx r14, r14b
=== 2655
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x113eb5f75
add r8, 0x2c1e134b; sub_carry
mov r8, qword ptr [r8 + 0x568]
add r8, r14
mov sil, byte ptr [r8]
movzx rsi, sil
shl rsi, 8
sub r13, rsi
mov r14, r13
movabs rdi, 0xcf20606f
add rdi, 0x70e90a51; sub
=== 2656
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1384
add rsp, 1384
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r10
mov rdi, r14
=== 2657
mov rbx, rdi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r15
mov sil, byte ptr [r10]
mov bl, sil
=== 2658
mov r11, rbx
push r11
mov rsi, rsp
mov rbp, rbx
=== 2659
mov rbx, rsi
mov r15, rbp
push rbx
push 0x166c4aa1
push 0x18f81e53
push 0x309a356c
push 0x211e1453
=== 2660
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov r15, r15
movzx r13, r13b
=== 2661
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xcb486700
add r13, 0x74c10bc0; sub_carry
mov r13, qword ptr [r13 + 0x18]
add r13, r13
mov r11b, byte ptr [r13]
movzx r11, r11b
shl r11, 0x10
sub r15, r11
movabs rcx, 0xfc8808fe
push rcx
push 0x56ac5911
push 0xf4816e6
push 0x5de80e67
add qword ptr [rsp + 0x18], 0x438161c2; sub
mov r14, r15
=== 2662
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 24
add rsp, 24
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r11
mov r14, r14
=== 2663
mov rbp, r14
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r13
mov r11b, byte ptr [rbx]
mov r9, 0xff
shl r9, 8
not r9
and rbp, r9
movzx r9, r11b
shl r9, 8
or rbp, r9
=== 2664
mov rbx, rbp
push rbx
mov rbp, rsp
mov rbx, rbp
=== 2665
mov r12, rbp
mov rbx, rbx
push r12
push 0x6536116a
push 0x7a4519e8
push 0x45c671c0
push 0x4cec4f59
=== 2666
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov r13, rbx
movzx rbx, bl
=== 2667
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xe7860c84
add r13, 0x5883663c; sub_carry
mov r13, qword ptr [r13 + 0x288]
add r13, rbx
mov dil, byte ptr [r13]
movzx rdi, dil
shl rdi, 0x18
sub r13, rdi
mov rsi, r13
movabs rdi, 0xf6c7edff
add rdi, 0x49417cc1; sub
=== 2668
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 648
add rsp, 648
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r8
mov r12, rsi
=== 2669
mov rbx, r12
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r13
mov r12b, byte ptr [rsi]
mov r15, 0xff
shl r15, 0x10
not r15
and rbx, r15
movzx r15, r12b
shl r15, 0x10
or rbx, r15
=== 2670
mov rcx, rbx
push rcx
mov r12, rsp
mov r13, rbx
=== 2671
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov r12, r13
movzx rsi, sil
=== 2672
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x10f7435a8
add r13, 0x30953d18; sub_carry
mov r13, qword ptr [r13 + 0x260]
add r13, rsi
mov r8b, byte ptr [r13]
movzx r8, r8b
shl r8, 0x20
sub r12, r8
mov r15, r12
movabs rdi, 0xe33cf2bc
add rdi, 0x5ccc7804; sub
=== 2673
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 608
add rsp, 608
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov r14, r15
=== 2674
mov rbx, r14
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov r8b, byte ptr [rdx]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and rbx, rdi
movzx rdi, r8b
shl rdi, 0x18
or rbx, rdi
=== 2675
mov r10, rbx
push r10
mov rdi, rsp
mov r14, rbx
=== 2676
mov r15, rdi
mov rbx, r14
push r15
push 0x5966b25
push 0x43f4e0c
push 0x19ae6e16
=== 2677
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdi
mov rsi, rbx
movzx r14, r14b
=== 2678
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xe4e93700
add r8, 0x5b203bc0; sub_carry
mov r8, qword ptr [r8]
add r8, r14
mov cl, byte ptr [r8]
movzx rcx, cl
shl rcx, 0x28
sub rsi, rcx
mov rbx, rsi
movabs rsi, 0xf3c10b2f
add rsi, 0x4c485f91; sub
=== 2679
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov rbp, rbx
=== 2680
mov rsi, rbp
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov r12b, byte ptr [r15]
mov rdx, 0xff
shl rdx, 0x20
not rdx
and rsi, rdx
movzx rdx, r12b
shl rdx, 0x20
or rsi, rdx
=== 2681
movabs rax, 0x116d3ac1f
push rax
push 0x18cd3a76
push 0x343f3670
push 0xc52749d
push 0x1fd8230d
add qword ptr [rsp + 0x20], 0x29b60cc9; input
mov r12, rsi
=== 2682
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 31
add rsp, 31
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov r14, r12
movzx rsi, sil
=== 2683
mov rax, rsi
mov r12, 0xffffffffbc4aa9ee
add r12, 0x446964c7
push r12
mov rsi, r14
mul qword ptr [rsp]
mov r12, rax
=== 2684
mov rbp, rsi
add rbp, r12
=== 2685
mov rsi, rbp
push rsi
mov r15, rsp
mov r14, rbp
=== 2686
mov rdx, r15
mov r15, r14
push rdx
push 0x12fc5559
push 0x745e4c8c
push 0x355f3b94
=== 2687
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov rdi, r15
movzx r12, r12b
=== 2688
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rdi
movabs rdi, 0x10b752131
add rdi, 0x3494298f; xor
=== 2689
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1680
add rsp, 1680
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r13
mov rdi, r15
=== 2690
mov r14, rdi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov r13b, byte ptr [r13]
mov r14b, r13b
=== 2691
mov rdi, r14
push rdi
mov rdi, rsp
mov rbp, r14
=== 2692
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
mov r13, rbp
movzx rsi, sil
=== 2693
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x10e562920
push r11
push 0x20d53f87
push 0x41064dbc
push 0x53773d9
add qword ptr [rsp + 0x18], 0x31b321a0; xor
mov r15, r13
=== 2694
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 896
add rsp, 896
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rax
mov rsi, r15
=== 2695
mov rbp, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov dl, byte ptr [r9]
mov rsi, 0xff
shl rsi, 8
not rsi
and rbp, rsi
movzx rsi, dl
shl rsi, 8
or rbp, rsi
=== 2696
mov rdx, rbp
push rdx
mov rbx, rsp
mov r13, rbp
=== 2697
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov r15, r13
movzx r14, r14b
=== 2698
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r15
movabs r15, 0x1255cf84f
add r15, 0x1aac5271; xor
=== 2699
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2000
add rsp, 2000
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r14
mov r14, r12
=== 2700
mov r14, r14
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rsi
mov cl, byte ptr [rbp]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and r14, rbx
movzx rbx, cl
shl rbx, 0x10
or r14, rbx
=== 2701
mov r10, r14
push r10
mov rsi, rsp
mov r13, r14
=== 2702
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov r13, r13
movzx rsi, sil
=== 2703
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r13
movabs r13, 0xf7402a82
add r13, 0x48c9203e; xor
=== 2704
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 176
add rsp, 176
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdi
mov r12, r14
=== 2705
mov rsi, r12
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rdi
mov r15b, byte ptr [rbx]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and rsi, rbp
movzx rbp, r15b
shl rbp, 0x18
or rsi, rbp
=== 2706
mov r13, rsi
movabs rsi, 0x128f55190
add rsi, 0x17946758; input
=== 2707
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbp
mov rbx, r13
movzx r14, r14b
=== 2708
mov rax, r14
mov r8, 0xffffffffaa79e276
add r8, 0x562479a2
push r8
mov r15, rbx
mul qword ptr [rsp]
mov rdi, rax
=== 2709
mov rsi, r15
xor rsi, rdi
=== 2710
mov r13, rsi
push r13
mov rbx, rsp
mov r14, rsi
=== 2711
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r15
mov r14, r14
movzx rbp, bpl
=== 2712
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x106c31b71
add rdi, 0x3946474f; add_carry
mov rdi, qword ptr [rdi + 0x298]
add rdi, rbp
mov r15b, byte ptr [rdi]
movzx r15, r15b
shl r15, 8
add r14, r15
movabs r11, 0xea101ed6
push r11
push 0x5af86f27
push 0x22a46927
push 0x6ebe7f3b
push 0x30142587
add qword ptr [rsp + 0x20], 0x55f93bea; add
mov rdi, r14
=== 2713
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 664
add rsp, 664
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov rbx, rdi
=== 2714
mov rdi, rbx
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rsi
mov r11b, byte ptr [r10]
mov dil, r11b
=== 2715
mov rax, rdi
push rax
mov r14, rsp
mov rdi, rdi
=== 2716
mov r11, r14
mov rdi, rdi
push r11
push 0x5928671f
push 0x7076d4f
push 0x648c3885
=== 2717
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov r14, rdi
movzx rsi, sil
=== 2718
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xef25448d
add r11, 0x50e41e33; add_carry
mov r11, qword ptr [r11 + 0x218]
add r11, rsi
mov al, byte ptr [r11]
movzx rax, al
shl rax, 0x10
add r14, rax
movabs rbp, 0xe5bae914
push rbp
push 0x58796bd2
push 0x68cf649e
push 0x9c8458f
add qword ptr [rsp + 0x18], 0x5a4e71ac; add
mov rsi, r14
=== 2719
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 536
add rsp, 536
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov r15, rsi
=== 2720
mov r13, r15
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rdi
mov al, byte ptr [r12]
mov r14, 0xff
shl r14, 8
not r14
and r13, r14
movzx r14, al
shl r14, 8
or r13, r14
=== 2721
mov r13, r13
push r13
mov rdi, rsp
mov r14, r13
=== 2722
mov r14, rdi
mov rbp, r14
push r14
push 0x1c941634
push 0x4c5c636e
push 0x2eae36d0
push 0x5f5820bd
=== 2723
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdi
mov rbx, rbp
movzx r12, r12b
=== 2724
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xd8ca1977
add r10, 0x673f4949; add_carry
mov r10, qword ptr [r10 + 0x3c0]
add r10, r12
mov bpl, byte ptr [r10]
movzx rbp, bpl
shl rbp, 0x18
add rbx, rbp
movabs rax, 0xfe2ce7cf
push rax
push 0xd1c2465
push 0xaba6770
push 0x9257af6
push 0x4cd76a0e
add qword ptr [rsp + 0x20], 0x41dc72f1; add
mov rbx, rbx
=== 2725
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 960
add rsp, 960
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r9
mov r12, rbx
=== 2726
mov rsi, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rdi
mov r11b, byte ptr [r13]
mov rdx, 0xff
shl rdx, 0x10
not rdx
and rsi, rdx
movzx rdx, r11b
shl rdx, 0x10
or rsi, rdx
=== 2727
mov rbp, rsi
push rbp
mov rbp, rsp
mov r13, rsi
=== 2728
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbx
mov rdi, r13
movzx rsi, sil
=== 2729
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xe01b00f3
add rdi, 0x5fee61cd; add_carry
mov rdi, qword ptr [rdi + 0x1c0]
add rdi, rsi
mov r14b, byte ptr [rdi]
movzx r14, r14b
shl r14, 0x20
add rdi, r14
mov r13, rdi
movabs r14, 0x103d6095c
add r14, 0x3c335164; add
=== 2730
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 448
add rsp, 448
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r11
mov r13, r13
=== 2731
mov rbp, r13
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r14
mov cl, byte ptr [r13]
mov r15, 0xff
shl r15, 0x18
not r15
and rbp, r15
movzx r15, cl
shl r15, 0x18
or rbp, r15
=== 2732
mov rdi, rbp
push rdi
mov rsi, rsp
mov rdi, rbp
=== 2733
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbx
mov rbx, rdi
movzx r15, r15b
=== 2734
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xd9175957
add rsi, 0x66f20969; add_carry
mov rsi, qword ptr [rsi]
add rsi, r15
mov r12b, byte ptr [rsi]
movzx r12, r12b
shl r12, 0x30
add rbx, r12
movabs r13, 0xf56e2d54
push r13
push 0x3816242b
push 0x37343eb2
push 0x55c56e5d
push 0x7a4d2a05
add qword ptr [rsp + 0x20], 0x4a9b2d6c; add
mov rbx, rbx
=== 2735
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov rdi, rbx
=== 2736
mov rbx, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov sil, byte ptr [r8]
mov r11, 0xff
shl r11, 0x28
not r11
and rbx, r11
movzx r11, sil
shl r11, 0x28
or rbx, r11
=== 2737
mov r8, rbx
push r8
mov r14, rsp
mov rsi, rbx
=== 2738
mov r9, r14
mov r13, rsi
push r9
push 0x1aba1db6
push 0x31936ac5
push 0x76f853c9
push 0x2b5765d2
=== 2739
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov rbx, r13
movzx r14, r14b
=== 2740
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x13fd9fe77
add rbp, 0x2f6449; add_carry
mov rbp, qword ptr [rbp]
add rbp, r14
mov cl, byte ptr [rbp]
movzx rcx, cl
shl rcx, 0x38
add rbx, rcx
movabs rdi, 0xca373974
push rdi
push 0x1feb17cc
push 0x33f21756
push 0x7efa7efa
add qword ptr [rsp + 0x18], 0x75d2214c; add
mov r13, rbx
=== 2741
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov rbx, r13
=== 2742
mov r12, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov sil, byte ptr [rcx]
mov r11, 0xff
shl r11, 0x30
not r11
and r12, r11
movzx r11, sil
shl r11, 0x30
or r12, r11
=== 2743
mov rbp, r12
movabs rsi, 0x10601b76f
add rsi, 0x3a880179; input
=== 2744
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 27
add rsp, 27
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov rbp, rbp
movzx r13, r13b
=== 2745
mov rax, r13
mov r13, 0xffffffffec89ff94
add r13, 0x146851a7
push r13
mov rbx, rbp
mul qword ptr [rsp]
mov r13, rax
=== 2746
mov r15, rbx
xor r15, r13
=== 2747
mov r12, r15
push r12
mov r13, rsp
mov rbx, r15
=== 2748
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r11
mov r12, rbx
movzx rdi, dil
=== 2749
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x130e21fcb
add rcx, 0xf2742f5; add_carry
mov rcx, qword ptr [rcx + 0x780]
add rcx, rdi
mov dl, byte ptr [rcx]
movzx rdx, dl
shl rdx, 8
add r12, rdx
mov rbp, r12
movabs r15, 0x11d7afa4a
add r15, 0x228e6076; add
=== 2750
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1920
add rsp, 1920
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r15, rbp
=== 2751
mov r12, r15
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbx
mov cl, byte ptr [r13]
mov r12b, cl
=== 2752
mov r10, r12
push r10
mov rbp, rsp
mov r13, r12
=== 2753
mov r13, rbp
mov rdi, r13
push r13
push 0x7af7656e
push 0x1d5126eb
push 0x4c164b89
=== 2754
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov rbx, rdi
movzx rdi, dil
=== 2755
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xd9ff3e65
add r12, 0x660a245b; add_carry
mov r12, qword ptr [r12 + 0x48]
add r12, rdi
mov r14b, byte ptr [r12]
movzx r14, r14b
shl r14, 0x10
add rbx, r14
mov rbx, rbx
movabs r13, 0x12627f4e4
add r13, 0x19e165dc; add
=== 2756
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_SMALL 72
add rsp, 72
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r15
mov r13, rbx
=== 2757
mov rsi, r13
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov dl, byte ptr [rdx]
mov r11, 0xff
shl r11, 8
not r11
and rsi, r11
movzx r11, dl
shl r11, 8
or rsi, r11
=== 2758
mov r10, rsi
push r10
mov r15, rsp
mov rbp, rsi
=== 2759
mov r9, r15
mov rdi, rbp
push r9
push 0x23f834b3
push 0x600a1a42
push 0x1b0075ed
push 0x7fe568e4
=== 2760
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r11
mov r14, rdi
movzx rbx, bl
=== 2761
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x10385328a
add r13, 0x3c843036; add_carry
mov r13, qword ptr [r13 + 0x7e0]
add r13, rbx
mov dl, byte ptr [r13]
movzx rdx, dl
shl rdx, 0x18
add r14, rdx
movabs rcx, 0x13b650387
push rcx
push 0x5442274e
push 0x64b80d7d
push 0x285c4cb6
add qword ptr [rsp + 0x18], 0x4a45739; add
mov rbx, r14
=== 2762
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2016
add rsp, 2016
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r15
mov rdi, rbx
=== 2763
mov r15, rdi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov r10b, byte ptr [r10]
mov r12, 0xff
shl r12, 0x10
not r12
and r15, r12
movzx r12, r10b
shl r12, 0x10
or r15, r12
=== 2764
mov rcx, r15
push rcx
mov r14, rsp
mov r12, r15
=== 2765
mov r13, r14
mov rsi, r12
push r13
push 0x30811ce7
push 0x49f69bd
push 0x4928382a
push 0x1b5c41f4
=== 2766
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rax
mov r13, rsi
movzx rsi, sil
=== 2767
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x11f972dda
add r15, 0x207234e6; add_carry
mov r15, qword ptr [r15 + 0x508]
add r15, rsi
mov dl, byte ptr [r15]
movzx rdx, dl
shl rdx, 0x20
add r13, rdx
mov rdi, r13
movabs rbx, 0x13ee918fe
add rbx, 0x12041c2; add
=== 2768
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1288
add rsp, 1288
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r12
mov rsi, rdi
=== 2769
mov rdi, rsi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r13
mov bpl, byte ptr [r12]
mov r15, 0xff
shl r15, 0x18
not r15
and rdi, r15
movzx r15, bpl
shl r15, 0x18
or rdi, r15
=== 2770
mov rsi, rdi
push rsi
mov rbx, rsp
mov rsi, rdi
=== 2771
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r10
mov r15, rsi
movzx rsi, sil
=== 2772
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xe835f3e4
add r13, 0x57d36edc; add_carry
mov r13, qword ptr [r13]
add r13, rsi
mov r12b, byte ptr [r13]
movzx r12, r12b
shl r12, 0x30
add r15, r12
mov rbp, r15
movabs r12, 0xdba4fb92
add r12, 0x64645f2e; add
=== 2773
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r12
mov r14, rbp
=== 2774
mov r14, r14
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r15
mov r12b, byte ptr [rsi]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and r14, rdx
movzx rdx, r12b
shl rdx, 0x28
or r14, rdx
=== 2775
mov r13, r14
push r13
mov rbp, rsp
mov r14, r14
=== 2776
mov r8, rbp
mov r14, r14
push r8
push 0x67ed5406
push 0x499f32e5
push 0x2d003b7a
push 0x155b1cf5
=== 2777
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbp
mov rdi, r14
movzx r15, r15b
=== 2778
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rdi
movabs rbp, 0xd184f199
add rbp, 0x6e846927; add
=== 2779
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdi
mov r14, rsi
=== 2780
mov rdi, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r15
mov r12b, byte ptr [r9]
mov r10, 0xff
shl r10, 0x38
not r10
and rdi, r10
movzx r10, r12b
shl r10, 0x38
or rdi, r10
=== 2781
mov rbx, rdi
push rbx
mov rdi, rsp
mov r13, rdi
=== 2782
mov r8, rdi
mov r14, r13
push r8
push 0x60807c5b
push 0x6f427dc6
push 0x3e150b9b
=== 2783
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov rbx, r14
movzx rdi, dil
=== 2784
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xecff3a56
add r13, 0x530a386a; sub_carry
mov r13, qword ptr [r13 + 0x40]
add r13, rdi
mov dil, byte ptr [r13]
movzx rdi, dil
shl rdi, 8
sub rbx, rdi
mov r15, rbx
movabs r12, 0x1207f5729
add r12, 0x1f8a1397; sub
=== 2785
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 64
add rsp, 64
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rsi
mov r15, r15
=== 2786
mov rsi, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov dl, byte ptr [r9]
mov sil, dl
=== 2787
mov rdi, rsi
push rdi
mov r13, rsp
mov r15, rsi
=== 2788
mov rsi, r13
mov rbx, r15
push rsi
push 0x52f15097
push 0x63cd15ad
push 0x20001b60
=== 2789
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rsi
mov rdi, rbx
movzx rbp, bpl
=== 2790
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x1067a0042
add rax, 0x398f727e; sub_carry
mov rax, qword ptr [rax + 0x720]
add rax, rbp
mov dil, byte ptr [rax]
movzx rdi, dil
shl rdi, 0x10
sub rdi, rdi
mov rdi, rdi
movabs r12, 0x134115b09
add r12, 0xbf80fb7; sub
=== 2791
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1824
add rsp, 1824
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r10
mov rbp, rdi
=== 2792
mov r15, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov bpl, byte ptr [rax]
mov rdi, 0xff
shl rdi, 8
not rdi
and r15, rdi
movzx rdi, bpl
shl rdi, 8
or r15, rdi
=== 2793
mov r8, r15
push r8
mov rbx, rsp
mov r14, r15
=== 2794
mov rdx, rbx
mov rbx, r14
push rdx
push 0x1c111aa9
push 0x4f7e33af
push 0x12b77188
push 0x52ff3fdc
=== 2795
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov rdi, rbx
movzx rbp, bpl
=== 2796
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xda151b6a
add r13, 0x65f45756; sub_carry
mov r13, qword ptr [r13 + 0x6b0]
add r13, rbp
mov r13b, byte ptr [r13]
movzx r13, r13b
shl r13, 0x18
sub rdi, r13
movabs rsi, 0xdfae252f
push rsi
push 0x6e5f3f1e
push 0xd943329
push 0x5a4962ad
push 0x437b3dfe
add qword ptr [rsp + 0x20], 0x605b4591; sub
mov r14, rdi
=== 2797
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1712
add rsp, 1712
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r9
mov rsi, r14
=== 2798
mov r15, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r13
mov r9b, byte ptr [r13]
mov r11, 0xff
shl r11, 0x10
not r11
and r15, r11
movzx r11, r9b
shl r11, 0x10
or r15, r11
=== 2799
mov r11, r15
push r11
mov r13, rsp
mov r14, r15
=== 2800
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov rbx, r14
movzx r13, r13b
=== 2801
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x109576e0c
add r12, 0x36b204b4; sub_carry
mov r12, qword ptr [r12 + 8]
add r12, r13
mov dl, byte ptr [r12]
movzx rdx, dl
shl rdx, 0x20
sub rbx, rdx
mov r13, rbx
movabs r14, 0xdc275f06
add r14, 0x63e20bba; sub
=== 2802
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 8
add rsp, 8
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov rbx, r13
=== 2803
mov rsi, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov dl, byte ptr [r9]
mov rax, 0xff
shl rax, 0x18
not rax
and rsi, rax
movzx rax, dl
shl rax, 0x18
or rsi, rax
=== 2804
mov r13, rsi
push r13
mov rbp, rsp
mov rbx, rsi
=== 2805
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbp
mov r15, rbx
movzx r12, r12b
=== 2806
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x105ff5d33
add rdi, 0x3a0a158d; sub_carry
mov rdi, qword ptr [rdi + 8]
add rdi, r12
mov dil, byte ptr [rdi]
movzx rdi, dil
shl rdi, 0x28
sub r15, rdi
mov rsi, r15
movabs r13, 0x11ea2fb90
add r13, 0x21666f30; sub
=== 2807
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 8
add rsp, 8
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov r13, rsi
=== 2808
mov rbp, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov r9b, byte ptr [rax]
mov rax, 0xff
shl rax, 0x20
not rax
and rbp, rax
movzx rax, r9b
shl rax, 0x20
or rbp, rax
=== 2809
mov r11, rbp
push r11
mov r13, rsp
mov rsi, rbp
=== 2810
mov r13, r13
mov r14, rsi
push r13
push 0xb5c799a
push 0x1ab93983
push 0x7f743248
=== 2811
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r11
mov r12, r14
movzx rbx, bl
=== 2812
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xd8d05edb
add rbx, 0x673913e5; sub_carry
mov rbx, qword ptr [rbx]
add rbx, rbx
mov dil, byte ptr [rbx]
movzx rdi, dil
shl rdi, 0x30
sub r12, rdi
mov rsi, r12
movabs r15, 0x1359c36d0
add r15, 0xa6d33f0; sub
=== 2813
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov rbx, rsi
=== 2814
mov rbx, rbx
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rdi
mov al, byte ptr [rdx]
mov rbp, 0xff
shl rbp, 0x28
not rbp
and rbx, rbp
movzx rbp, al
shl rbp, 0x28
or rbx, rbp
=== 2815
mov r12, rbx
push r12
mov rbx, rsp
mov rdi, rbx
=== 2816
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov r14, rdi
movzx rbx, bl
=== 2817
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r14
movabs r15, 0xf669f1f6
add r15, 0x499f78ca; sub
=== 2818
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdx
mov r14, r14
=== 2819
mov r14, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov r15b, byte ptr [r11]
mov r10, 0xff
shl r10, 0x38
not r10
and r14, r10
movzx r10, r15b
shl r10, 0x38
or r14, r10
=== 2820
mov r10, r14
push r10
mov r12, rsp
mov r14, r14
=== 2821
mov r15, r12
mov rdi, r14
push r15
push 0x25cf204f
push 0x62c118b5
push 0x1e945597
push 0x3a3a758f
=== 2822
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov rsi, rdi
movzx r14, r14b
=== 2823
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rsi
movabs r14, 0x13563f8ac
add r14, 0xaa55a14; or
=== 2824
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov r15, r13
=== 2825
mov r15, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov sil, byte ptr [r9]
mov r15b, sil
=== 2826
mov r14, r15
push r14
mov rbp, rsp
mov r13, r15
=== 2827
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov rbp, r13
movzx rsi, sil
=== 2828
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rbp
movabs r12, 0x118bdf3eb
add r12, 0x274b5ed5; or
=== 2829
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov rbx, rsi
=== 2830
mov r12, rbx
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rsi
mov sil, byte ptr [rdi]
mov r10, 0xff
shl r10, 0x18
not r10
and r12, r10
movzx r10, sil
shl r10, 0x18
or r12, r10
=== 2831
mov rbp, r12
push rbp
mov rdi, rsp
mov rbx, r12
=== 2832
mov r9, rdi
mov rsi, rbx
push r9
push 0x21474e5b
push 0x69f33eec
push 0x14254766
push 0x19b81d76
=== 2833
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov r14, rsi
movzx r15, r15b
=== 2834
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r14
movabs r15, 0x12793ecfb
add r15, 0x187565c5; or
=== 2835
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov r12, rbp
=== 2836
mov rsi, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r13
mov dl, byte ptr [r13]
mov r11, 0xff
shl r11, 0x38
not r11
and rsi, r11
movzx r11, dl
shl r11, 0x38
or rsi, r11
=== 2837
mov rdi, rsi
movabs rbx, 0x118aee03a
add rbx, 0x275131b6
test rdi, rdi
lea r15, [rip - 0x34f2fc]
cmovne r15, rbx
jmp r15
=== 2838
movabs r13, 0xebab7e68
push r13
push 0x2b8a34dd
push 0x65e657bc
push 0x66bc78d3
push 0x7c2c64ef
add qword ptr [rsp + 0x20], 0x54de3a80; input
=== 2839
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 28
add rsp, 28
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r14
movzx rbp, bpl
=== 2840
mov rax, rbp
mov r10, 0xffffffff918108ff
add r10, 0x6f2b67ba
push r10
mul qword ptr [rsp]
mov r14, rax
=== 2841
mov r13, r14
push r13
mov r12, rsp
mov r15, r14
=== 2842
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r14
mov r14, r15
movzx rbp, bpl
=== 2843
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xc14233dc
add r14, 0x7ec72ee4; add_carry
mov r14, qword ptr [r14 + 0x190]
add r14, rbp
mov cl, byte ptr [r14]
movzx rcx, cl
shl rcx, 8
add r14, rcx
mov r15, r14
movabs rbx, 0x101f51ad1
add rbx, 0x3e143fef; add
=== 2844
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 400
add rsp, 400
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdx
mov r14, r15
=== 2845
mov r14, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rdi
mov bpl, byte ptr [rdi]
mov r14b, bpl
=== 2846
mov rax, r14
push rax
mov rbp, rsp
mov r15, r14
=== 2847
mov rbx, rbp
mov r14, r15
push rbx
push 0x6fe96427
push 0x2e611124
push 0x63b2890
=== 2848
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov rdi, r14
movzx r13, r13b
=== 2849
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xfa68f638
add rcx, 0x45a06c88; add_carry
mov rcx, qword ptr [rcx + 0x548]
add rcx, r13
mov r12b, byte ptr [rcx]
movzx r12, r12b
shl r12, 0x10
add rdi, r12
movabs rsi, 0x12a59239a
push rsi
push 0x2ac248f
push 0xcbc6998
push 0x5e96488c
add qword ptr [rsp + 0x18], 0x15b03726; add
mov rsi, rdi
=== 2850
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1352
add rsp, 1352
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov r12, rsi
=== 2851
mov r14, r12
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov al, byte ptr [rax]
mov rdx, 0xff
shl rdx, 8
not rdx
and r14, rdx
movzx rdx, al
shl rdx, 8
or r14, rdx
=== 2852
mov r8, r14
push r8
mov rsi, rsp
mov r13, r14
=== 2853
mov rbx, rsi
mov r13, r13
push rbx
push 0x52214a30
push 0x658f6b22
push 0x54315e28
=== 2854
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rsi
mov r14, r13
movzx r12, r12b
=== 2855
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xdbb6e9b5
add r12, 0x6452790b; add_carry
mov r12, qword ptr [r12 + 0x700]
add r12, r12
mov al, byte ptr [r12]
movzx rax, al
shl rax, 0x18
add r14, rax
mov rbx, r14
movabs rbp, 0x12033e99f
add rbp, 0x1fd57121; add
=== 2856
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1792
add rsp, 1792
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbp
mov r15, rbx
=== 2857
mov rdi, r15
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov r12b, byte ptr [r11]
mov r10, 0xff
shl r10, 0x10
not r10
and rdi, r10
movzx r10, r12b
shl r10, 0x10
or rdi, r10
=== 2858
mov r8, rdi
push r8
mov r12, rsp
mov rbx, rdi
=== 2859
mov r14, r12
mov rdi, rbx
push r14
push 0x289c5b15
push 0x615d6740
push 0x41250dd8
=== 2860
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov r14, rdi
movzx rbp, bpl
=== 2861
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x132e93759
add r10, 0xd202b67; add_carry
mov r10, qword ptr [r10 + 0x6d0]
add r10, rbp
mov dil, byte ptr [r10]
movzx rdi, dil
shl rdi, 0x20
add r14, rdi
movabs rdx, 0x13544e832
push rdx
push 0x64d52bc2
push 0x76731aaa
push 0x3ee049f0
push 0x4f36220b
add qword ptr [rsp + 0x20], 0xac4728e; add
mov rbx, r14
=== 2862
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1744
add rsp, 1744
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r15
mov r12, rbx
=== 2863
mov rbx, r12
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov bpl, byte ptr [r9]
mov r11, 0xff
shl r11, 0x18
not r11
and rbx, r11
movzx r11, bpl
shl r11, 0x18
or rbx, r11
=== 2864
mov r15, rbx
push r15
mov r13, rsp
mov rdi, rbx
=== 2865
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r12
mov r12, rdi
movzx r13, r13b
=== 2866
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x13b5cfd01
add r13, 0x4ac65bf; add_carry
mov r13, qword ptr [r13]
add r13, r13
mov al, byte ptr [r13]
movzx rax, al
shl rax, 0x38
add r12, rax
mov rbp, r12
movabs r12, 0x12a2afdb7
add r12, 0x15de5d09; add
=== 2867
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov r14, rbp
=== 2868
mov r13, r14
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r15
mov cl, byte ptr [rbx]
mov r9, 0xff
shl r9, 0x30
not r9
and r13, r9
movzx r9, cl
shl r9, 0x30
or r13, r9
=== 2869
mov r10, r13
push r10
mov r15, rsp
mov r12, r13
=== 2870
mov rdi, r15
mov r12, r12
push rdi
push 0x4dec4174
push 0x1bad5a2b
push 0x6f0872d4
=== 2871
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov rsi, r12
movzx rbx, bl
=== 2872
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xd1114c03
push rdi
push 0x72f113b2
push 0x404b53de
push 0x7b746bd5
push 0x791f1b2f
add qword ptr [rsp + 0x20], 0x6ef80ebd; add
mov rsi, rsi
=== 2873
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r15
mov r15, rsi
=== 2874
mov r13, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov r11b, byte ptr [r9]
mov rbx, 0xff
shl rbx, 0x38
not rbx
and r13, rbx
movzx rbx, r11b
shl rbx, 0x38
or r13, rbx
=== 2875
mov r13, r13
movabs rdi, 0xd5cc76ac
add rdi, 0x6abd423c; input
=== 2876
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov r12, r13
movzx rbx, bl
=== 2877
mov rax, rbx
mov rcx, 0xffffffffd35bbca5
add rcx, 0x2d686eca
push rcx
mov rdi, r12
mul qword ptr [rsp]
mov r15, rax
=== 2878
mov rbx, rdi
xor rbx, r15
=== 2879
mov r14, rbx
push r14
mov r13, rsp
mov rbp, rbx
=== 2880
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov r13, rbp
movzx r15, r15b
=== 2881
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r13
movabs rsi, 0xfc97dafb
add rsi, 0x43716fc5; xor
=== 2882
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 608
add rsp, 608
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdx
mov r15, rbp
=== 2883
mov r13, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov r9b, byte ptr [rcx]
mov r13b, r9b
=== 2884
mov r15, r13
push r15
mov rbp, rsp
mov r14, r13
=== 2885
mov r13, rbp
mov r14, r14
push r13
push 0x6e85480f
push 0x4aeb34a5
push 0x2ebf4e99
push 0x1e5a57f4
=== 2886
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov rdi, r14
movzx r15, r15b
=== 2887
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xef7ff2ed
push r8
push 0x9ea6684
push 0x16e67ea4
push 0x256f7144
push 0x2f0d4007
add qword ptr [rsp + 0x20], 0x508957d3; xor
mov rbp, rdi
=== 2888
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 128
add rsp, 128
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rax
mov r12, rbp
=== 2889
mov r13, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov al, byte ptr [r10]
mov r9, 0xff
shl r9, 8
not r9
and r13, r9
movzx r9, al
shl r9, 8
or r13, r9
=== 2890
mov rsi, r13
push rsi
mov rsi, rsp
mov rbx, r13
=== 2891
mov rbx, rsi
mov r13, rbx
push rbx
push 0x68af4dbe
push 0x17135032
push 0x742116df
push 0x2f663fee
=== 2892
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
mov rbp, r13
movzx rsi, sil
=== 2893
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xc7464198
push rsi
push 0x433628d1
push 0x4c823ec8
push 0x75dd3ff7
add qword ptr [rsp + 0x18], 0x78c30928; xor
mov r12, rbp
=== 2894
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 24
add rsp, 24
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdx
mov r12, r12
=== 2895
mov rdi, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov sil, byte ptr [rcx]
mov r14, 0xff
shl r14, 0x10
not r14
and rdi, r14
movzx r14, sil
shl r14, 0x10
or rdi, r14
=== 2896
mov r8, rdi
push r8
mov rsi, rsp
mov rbx, rdi
=== 2897
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov r12, rbx
movzx rdi, dil
=== 2898
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x12e523046
push rsi
push 0x24155101
push 0x533f3832
push 0x46f13d9b
push 0x523103aa
add qword ptr [rsp + 0x20], 0x11b71a7a; xor
mov rbp, r12
=== 2899
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1504
add rsp, 1504
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r11
mov rbp, rbp
=== 2900
mov r14, rbp
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rsi
mov sil, byte ptr [r15]
mov rax, 0xff
shl rax, 0x18
not rax
and r14, rax
movzx rax, sil
shl rax, 0x18
or r14, rax
=== 2901
mov rax, r14
push rax
mov r14, rsp
mov rbp, r14
=== 2902
mov rbx, r14
mov r12, rbp
push rbx
push 0x785c298a
push 0x11b11c9a
push 0x2a1a1123
=== 2903
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
mov rdi, r12
movzx rbx, bl
=== 2904
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rdi
movabs r15, 0x1276dff39
add r15, 0x189b4b87; xor
=== 2905
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r11
mov rsi, r14
=== 2906
mov r13, rsi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbp
mov sil, byte ptr [rbp]
mov rdi, 0xff
shl rdi, 0x28
not rdi
and r13, rdi
movzx rdi, sil
shl rdi, 0x28
or r13, rdi
=== 2907
mov rbx, r13
movabs r12, 0x11e43a1c3
add r12, 0x22461725; input
=== 2908
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r8
mov r14, rbx
movzx rbx, bl
=== 2909
mov rax, rbx
mov r8, 0xffffffffc3321d27
add r8, 0x3d54546c
push r8
mov rbx, r14
mul qword ptr [rsp]
mov rbp, rax
=== 2910
mov rsi, rbx
sub rsi, rbp
=== 2911
mov r11, rsi
push r11
mov rdi, rsp
mov rsi, rsi
=== 2912
mov r12, rdi
mov r13, rsi
push r12
push 0x46bf11dd
push 0x7c89257c
push 0x1a501b46
=== 2913
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r8
mov r14, r13
movzx r13, r13b
=== 2914
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xc6be55ff
add rcx, 0x794b0cc1; add_carry
mov rcx, qword ptr [rcx + 0x1d0]
add rcx, r13
mov r8b, byte ptr [rcx]
movzx r8, r8b
shl r8, 8
add r14, r8
movabs rax, 0x1122d0646
push rax
push 0x5af4ad8
push 0x6e283836
push 0x1d303fb0
add qword ptr [rsp + 0x18], 0x2ddc547a; add
mov rsi, r14
=== 2915
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 464
add rsp, 464
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbp
mov rbx, rsi
=== 2916
mov r12, rbx
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov r9b, byte ptr [r15]
mov r12b, r9b
=== 2917
mov r10, r12
push r10
mov r13, rsp
mov rbx, r12
=== 2918
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov rdi, rbx
movzx r13, r13b
=== 2919
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x107a7288d
add rsi, 0x38623a33; add_carry
mov rsi, qword ptr [rsi + 0x630]
add rsi, r13
mov al, byte ptr [rsi]
movzx rax, al
shl rax, 0x10
add rdi, rax
mov rbx, rdi
movabs r14, 0x11e412404
add r14, 0x21c836bc; add
=== 2920
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1584
add rsp, 1584
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r12
mov r12, rbx
=== 2921
mov rsi, r12
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rdi
mov r14b, byte ptr [r12]
mov rdi, 0xff
shl rdi, 8
not rdi
and rsi, rdi
movzx rdi, r14b
shl rdi, 8
or rsi, rdi
=== 2922
mov r15, rsi
push r15
mov rbx, rsp
mov rsi, rsi
=== 2923
mov r9, rbx
mov rbp, rsi
push r9
push 0x60017dfa
push 0x78510eba
push 0x7cbd3db5
push 0x751b2366
=== 2924
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov r13, rbp
movzx rdi, dil
=== 2925
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x108fa3ea5
add rcx, 0x370f241b; add_carry
mov rcx, qword ptr [rcx + 0x240]
add rcx, rdi
mov r11b, byte ptr [rcx]
movzx r11, r11b
shl r11, 0x18
add r13, r11
movabs rdx, 0x118131157
push rdx
push 0x5d125795
push 0x3af6d02
push 0x2597351f
add qword ptr [rsp + 0x18], 0x27f64969; add
mov rdi, r13
=== 2926
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 576
add rsp, 576
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov r12, rdi
=== 2927
mov r12, r12
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r14
mov bl, byte ptr [rdi]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r12, rdi
movzx rdi, bl
shl rdi, 0x10
or r12, rdi
=== 2928
mov r15, r12
push r15
mov r13, rsp
mov rbx, r12
=== 2929
mov r14, r13
mov rbp, rbx
push r14
push 0x39ae1ac5
push 0x117304f9
push 0x2e2a2da3
=== 2930
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov rdi, rbp
movzx r12, r12b
=== 2931
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x13c60234b
add r13, 0x3a93f75; add_carry
mov r13, qword ptr [r13 + 0x6e0]
add r13, r12
mov dl, byte ptr [r13]
movzx rdx, dl
shl rdx, 0x20
add rdi, rdx
mov rbx, rdi
movabs r13, 0xe10cfe01
add r13, 0x5efc5cbf; add
=== 2932
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1760
add rsp, 1760
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r11
mov rdi, rbx
=== 2933
mov r13, rdi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r14
mov dl, byte ptr [r10]
mov r12, 0xff
shl r12, 0x18
not r12
and r13, r12
movzx r12, dl
shl r12, 0x18
or r13, r12
=== 2934
mov r10, r13
push r10
mov r12, rsp
mov rbx, r13
=== 2935
mov r9, r12
mov rbp, rbx
push r9
push 0x17565b73
push 0x5332fb
push 0x49084ce6
push 0x4ad7262b
=== 2936
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov r15, rbp
movzx rsi, sil
=== 2937
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x100dcf00a
add r8, 0x3f2c72b6; add_carry
mov r8, qword ptr [r8]
add r8, rsi
mov r11b, byte ptr [r8]
movzx r11, r11b
shl r11, 0x30
add r15, r11
mov rsi, r15
movabs r13, 0xc3c94f78
add r13, 0x7c400b48; add
=== 2938
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov r14, rsi
=== 2939
mov rdi, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov r13b, byte ptr [r8]
mov r15, 0xff
shl r15, 0x28
not r15
and rdi, r15
movzx r15, r13b
shl r15, 0x28
or rdi, r15
=== 2940
mov r11, rdi
push r11
mov rbx, rsp
mov r15, rdi
=== 2941
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov rdi, r15
movzx r13, r13b
=== 2942
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x12c9de4ec
add rsi, 0x136b7dd4; add_carry
mov rsi, qword ptr [rsi]
add rsi, r13
mov r15b, byte ptr [rsi]
movzx r15, r15b
shl r15, 0x38
add rdi, r15
movabs r11, 0x11f3922d2
push r11
push 0x1cab76d7
push 0x4a765ab
push 0x6e97d6a
push 0x1ce03f0a
add qword ptr [rsp + 0x20], 0x20d037ee; add
mov r15, rdi
=== 2943
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r11
mov r15, r15
=== 2944
mov rdi, r15
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbp
mov al, byte ptr [rsi]
mov rdx, 0xff
shl rdx, 0x30
not rdx
and rdi, rdx
movzx rdx, al
shl rdx, 0x30
or rdi, rdx
=== 2945
mov r14, rdi
movabs rsi, 0xce1cb441
add rsi, 0x726d04a7; input
=== 2946
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 12
add rsp, 12
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov rbp, r14
movzx r14, r14b
=== 2947
mov rax, r14
mov r15, 0xffffffffaed9169b
add r15, 0x51941b63
push r15
mov rbx, rbp
mul qword ptr [rsp]
mov r13, rax
=== 2948
mov r13, rbx
sub r13, r13
=== 2949
mov rbx, r13
push rbx
mov rdi, rsp
mov rbx, r13
=== 2950
mov rdx, rdi
mov rbx, rbx
push rdx
push 0x514e4205
push 0x23d93813
push 0x1a28267a
push 0x42db104a
=== 2951
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdi
mov r12, rbx
movzx r14, r14b
=== 2952
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xd9104902
push rcx
push 0x679c2944
push 0x78834b59
push 0x659809d7
add qword ptr [rsp + 0x18], 0x66f901be; xor
mov rsi, r12
=== 2953
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1664
add rsp, 1664
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov rsi, rsi
=== 2954
mov rdi, rsi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbp
mov r13b, byte ptr [rbp]
mov dil, r13b
=== 2955
mov r8, rdi
push r8
mov rdi, rsp
mov r15, rdi
=== 2956
mov rsi, rdi
mov r12, r15
push rsi
push 0x3feb4aea
push 0x6c8e4979
push 0x1ddd17bc
push 0x39d66c1f
=== 2957
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov rbp, r12
movzx rdi, dil
=== 2958
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rbp
movabs r14, 0x11f683faf
add r14, 0x20a10b11; xor
=== 2959
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1456
add rsp, 1456
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov r13, rsi
=== 2960
mov rdi, r13
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov r9b, byte ptr [rcx]
mov r10, 0xff
shl r10, 8
not r10
and rdi, r10
movzx r10, r9b
shl r10, 8
or rdi, r10
=== 2961
mov rcx, rdi
push rcx
mov rdi, rsp
mov rsi, rdi
=== 2962
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov r14, rsi
movzx rbx, bl
=== 2963
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r14
movabs rbx, 0xd272cb2e
add rbx, 0x6d967f92; xor
=== 2964
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1392
add rsp, 1392
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov r15, r14
=== 2965
mov r14, r15
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov r10b, byte ptr [r13]
mov r13, 0xff
shl r13, 0x10
not r13
and r14, r13
movzx r13, r10b
shl r13, 0x10
or r14, r13
=== 2966
mov r15, r14
push r15
mov r15, rsp
mov rdi, r14
=== 2967
mov r14, r15
mov rdi, rdi
push r14
push 0x174d6810
push 0x49d65a67
push 0x6010fc2
=== 2968
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r15
mov r12, rdi
movzx rbp, bpl
=== 2969
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r12
movabs rbx, 0xee923020
add rbx, 0x51771aa0; xor
=== 2970
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 600
add rsp, 600
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov r15, r12
=== 2971
mov rsi, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov r8b, byte ptr [rcx]
mov r15, 0xff
shl r15, 0x18
not r15
and rsi, r15
movzx r15, r8b
shl r15, 0x18
or rsi, r15
=== 2972
mov r15, rsi
push r15
mov rbx, rsp
mov rsi, rsi
=== 2973
mov r8, rbx
mov r15, rsi
push r8
push 0x14b670a5
push 0xd576b99
push 0x505d25d7
=== 2974
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r14
mov r15, r15
movzx rdi, dil
=== 2975
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xd5cfe4cf
push rsi
push 0x16c63be5
push 0x38e61427
push 0x2d0d5f37
push 0x2e236663
add qword ptr [rsp + 0x20], 0x6a3965f1; xor
mov rbp, r15
=== 2976
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rsi
mov r14, rbp
=== 2977
mov r12, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rsi
mov cl, byte ptr [r15]
mov r9, 0xff
shl r9, 0x20
not r9
and r12, r9
movzx r9, cl
shl r9, 0x20
or r12, r9
=== 2978
mov r14, r12
push r14
mov r14, rsp
mov rdi, r12
=== 2979
mov rax, r14
mov rsi, rdi
push rax
push 0x640b20f7
push 0x12d12c09
push 0x23660ae1
=== 2980
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
mov r14, rsi
movzx rbx, bl
=== 2981
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r14
movabs r12, 0xf65e315b
add r12, 0x49ab1965; xor
=== 2982
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdx
mov r12, rbp
=== 2983
mov r13, r12
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r13
mov bpl, byte ptr [r12]
mov r12, 0xff
shl r12, 0x38
not r12
and r13, r12
movzx r12, bpl
shl r12, 0x38
or r13, r12
=== 2984
mov r14, r13
movabs r15, 0xd47c440d
add r15, 0x6c0d74db; input
=== 2985
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 16
add rsp, 16
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdi
mov r12, r14
movzx rbp, bpl
=== 2986
mov rax, rbp
mov r15, 0xffffffffce77474e
add r15, 0x3233670a
push r15
mov rbx, r12
mul qword ptr [rsp]
mov rbp, rax
=== 2987
mov rbp, rbx
sub rbp, rbp
=== 2988
mov r10, rbp
push r10
mov r12, rsp
mov r14, rbp
=== 2989
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov r14, r14
movzx rsi, sil
=== 2990
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x1377961fd
add r15, 0x89010c3; sub_carry
mov r15, qword ptr [r15 + 0x7c0]
add r15, rsi
mov r10b, byte ptr [r15]
movzx r10, r10b
shl r10, 8
sub r14, r10
mov r12, r14
movabs r14, 0x138a7254d
add r14, 0x7624573; sub
=== 2991
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1984
add rsp, 1984
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov rbp, r12
=== 2992
mov r14, rbp
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rdi
mov r12b, byte ptr [rsi]
mov r14b, r12b
=== 2993
mov rcx, r14
push rcx
mov r15, rsp
mov r13, r14
=== 2994
mov rbp, r15
mov r15, r13
push rbp
push 0x6d17649d
push 0x70ad50da
push 0x16d827cc
=== 2995
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov r13, r15
movzx r14, r14b
=== 2996
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x11b114e92
add r15, 0x24f8242e; sub_carry
mov r15, qword ptr [r15 + 0x108]
add r15, r14
mov r14b, byte ptr [r15]
movzx r14, r14b
shl r14, 0x10
sub r13, r14
movabs r14, 0x13e481b41
push r14
push 0x21b6776f
push 0x19b32edb
push 0x1873fc0
push 0x14170f9d
add qword ptr [rsp + 0x20], 0x1c14f7f; sub
mov r14, r13
=== 2997
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 264
add rsp, 264
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r8
mov r13, r14
=== 2998
mov rbx, r13
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov r13b, byte ptr [r11]
mov r9, 0xff
shl r9, 8
not r9
and rbx, r9
movzx r9, r13b
shl r9, 8
or rbx, r9
=== 2999
mov rdx, rbx
push rdx
mov rdi, rsp
mov r15, rbx
=== 3000
mov r8, rdi
mov r14, r15
push r8
push 0x1f8196e
push 0x75c664f9
push 0x763c26e1
=== 3001
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov r12, r14
movzx r14, r14b
=== 3002
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x104bb6330
add r11, 0x3b4e0f90; sub_carry
mov r11, qword ptr [r11 + 0x388]
add r11, r14
mov bl, byte ptr [r11]
movzx rbx, bl
shl rbx, 0x18
sub r12, rbx
movabs rcx, 0xc96c3d43
push rcx
push 0x52e80085
push 0x11446ba0
push 0x329832a2
add qword ptr [rsp + 0x18], 0x769d2d7d; sub
mov rbx, r12
=== 3003
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 904
add rsp, 904
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbp
mov rdi, rbx
=== 3004
mov r15, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov bl, byte ptr [rdx]
mov rax, 0xff
shl rax, 0x10
not rax
and r15, rax
movzx rax, bl
shl rax, 0x10
or r15, rax
=== 3005
mov rsi, r15
push rsi
mov rbp, rsp
mov rbx, r15
=== 3006
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r13
mov rdi, rbx
movzx rbp, bpl
=== 3007
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xd86c641d
add r14, 0x679d0ea3; sub_carry
mov r14, qword ptr [r14 + 0x668]
add r14, rbp
mov r15b, byte ptr [r14]
movzx r15, r15b
shl r15, 0x20
sub rdi, r15
mov rbp, rdi
movabs rdi, 0xd590639b
add rdi, 0x6a790725; sub
=== 3008
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1640
add rsp, 1640
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rsi
mov rbx, rbp
=== 3009
mov rsi, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov dl, byte ptr [rcx]
mov rax, 0xff
shl rax, 0x18
not rax
and rsi, rax
movzx rax, dl
shl rax, 0x18
or rsi, rax
=== 3010
mov rdx, rsi
push rdx
mov rbx, rsp
mov rsi, rsi
=== 3011
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
mov rbx, rsi
movzx r15, r15b
=== 3012
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x1340444fa
add r14, 0xc052dc6; sub_carry
mov r14, qword ptr [r14]
add r14, r15
mov r14b, byte ptr [r14]
movzx r14, r14b
shl r14, 0x30
sub rbx, r14
mov r15, rbx
movabs rbx, 0xe8190a00
add rbx, 0x57f060c0; sub
=== 3013
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov rbp, r15
=== 3014
mov rsi, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov bpl, byte ptr [rax]
mov rdi, 0xff
shl rdi, 0x28
not rdi
and rsi, rdi
movzx rdi, bpl
shl rdi, 0x28
or rsi, rdi
=== 3015
mov r11, rsi
push r11
mov rbx, rsp
mov rdi, rsi
=== 3016
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbx
mov r15, rdi
movzx rbx, bl
=== 3017
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xe3095ba2
add rax, 0x5d00171e; sub_carry
mov rax, qword ptr [rax]
add rax, rbx
mov dl, byte ptr [rax]
movzx rdx, dl
shl rdx, 0x38
sub r15, rdx
mov rbx, r15
movabs rsi, 0xfeaa1fc5
add rsi, 0x415f4afb; sub
=== 3018
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov rbx, rbx
=== 3019
mov rbx, rbx
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov bpl, byte ptr [r10]
mov rcx, 0xff
shl rcx, 0x30
not rcx
and rbx, rcx
movzx rcx, bpl
shl rcx, 0x30
or rbx, rcx
=== 3020
mov r13, rbx
push r13
mov rdi, rsp
mov r12, rbx
=== 3021
mov rsi, rdi
mov r14, r12
push rsi
push 0x2248708f
push 0x52261f0c
push 0x1e385f17
=== 3022
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov r13, r14
movzx r14, r14b
=== 3023
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, r13
movabs rsi, 0xf0832de4
add rsi, 0x4f863cdc; sub
=== 3024
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rcx
mov rbx, rdi
=== 3025
mov rbp, rbx
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r12
mov al, byte ptr [rsi]
mov r8, 0xff
shl r8, 0x38
not r8
and rbp, r8
movzx r8, al
shl r8, 0x38
or rbp, r8
=== 3026
movabs r14, 0xd5779a6f
push r14
push 0x5a427a0c
push 0x33200fe4
push 0x6af96838
add qword ptr [rsp + 0x18], 0x6b121e79; input
mov r12, rbp
=== 3027
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 20
add rsp, 20
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r14
mov rbp, r12
movzx r15, r15b
=== 3028
mov rax, r15
mov rdi, 0xffffffffdfef789a
add rdi, 0x20b031e0
push rdi
mov r14, rbp
mul qword ptr [rsp]
mov r13, rax
=== 3029
mov r15, r14
add r15, r13
=== 3030
mov rcx, r15
push rcx
mov rsi, rsp
mov r15, r15
=== 3031
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov r14, r15
movzx r13, r13b
=== 3032
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xc2e30d7a
add r14, 0x7d265546; add_carry
mov r14, qword ptr [r14 + 0x4e0]
add r14, r13
mov bl, byte ptr [r14]
movzx rbx, bl
shl rbx, 8
add r14, rbx
movabs rdx, 0xf2e01ef6
push rdx
push 0x60461eb6
push 0x370635d
push 0x776523
push 0x10a23f51
add qword ptr [rsp + 0x20], 0x4d293bca; add
mov r14, r14
=== 3033
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1248
add rsp, 1248
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rsi
mov r15, r14
=== 3034
mov rsi, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov r14b, byte ptr [r9]
mov sil, r14b
=== 3035
mov r11, rsi
push r11
mov r12, rsp
mov rsi, rsi
=== 3036
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbp
mov r14, rsi
movzx rsi, sil
=== 3037
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x1011a4263
add r11, 0x3eef205d; add_carry
mov r11, qword ptr [r11 + 0x160]
add r11, rsi
mov r12b, byte ptr [r11]
movzx r12, r12b
shl r12, 0x10
add r14, r12
movabs rbx, 0xf5fbea13
push rbx
push 0x89a4c01
push 0x4995055e
push 0x451616d6
add qword ptr [rsp + 0x18], 0x4a0d70ad; add
mov r15, r14
=== 3038
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 352
add rsp, 352
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r8
mov rbx, r15
=== 3039
mov r12, rbx
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rdi
mov dl, byte ptr [rdx]
mov r11, 0xff
shl r11, 8
not r11
and r12, r11
movzx r11, dl
shl r11, 8
or r12, r11
=== 3040
mov rax, r12
push rax
mov r12, rsp
mov rbp, r12
=== 3041
mov rbp, r12
mov rbx, rbp
push rbp
push 0x3884785e
push 0x1b335940
push 0x3d9851d9
push 0x4f556bf6
=== 3042
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov r12, rbx
movzx r13, r13b
=== 3043
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xecb00c98
add r14, 0x53595628; add_carry
mov r14, qword ptr [r14 + 0x50]
add r14, r13
mov r11b, byte ptr [r14]
movzx r11, r11b
shl r11, 0x18
add r12, r11
mov rbp, r12
movabs rsi, 0xed9e2061
add rsi, 0x526b3a5f; add
=== 3044
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 80
add rsp, 80
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov rsi, rbp
=== 3045
mov r15, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov cl, byte ptr [r8]
mov r9, 0xff
shl r9, 0x10
not r9
and r15, r9
movzx r9, cl
shl r9, 0x10
or r15, r9
=== 3046
mov r10, r15
push r10
mov r15, rsp
mov rbx, r15
=== 3047
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov r14, rbx
movzx r15, r15b
=== 3048
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x1060e5f81
add rbx, 0x39fb033f; add_carry
mov rbx, qword ptr [rbx + 0x5f0]
add rbx, r15
mov bpl, byte ptr [rbx]
movzx rbp, bpl
shl rbp, 0x20
add r14, rbp
mov rdi, r14
movabs rsi, 0x10f5b4fc4
add rsi, 0x30ae0afc; add
=== 3049
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1520
add rsp, 1520
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r11
mov r15, rdi
=== 3050
mov r12, r15
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rdi
mov dl, byte ptr [r8]
mov rbx, 0xff
shl rbx, 0x18
not rbx
and r12, rbx
movzx rbx, dl
shl rbx, 0x18
or r12, rbx
=== 3051
mov r10, r12
push r10
mov r14, rsp
mov rbx, r12
=== 3052
mov r14, r14
mov r12, rbx
push r14
push 0x6f6309fe
push 0x3c8166bd
push 0x3aee306d
push 0xd014689
=== 3053
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov r13, r12
movzx rbx, bl
=== 3054
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x10400155d
add rax, 0x3c094d63; add_carry
mov rax, qword ptr [rax]
add rax, rbx
mov r14b, byte ptr [rax]
movzx r14, r14b
shl r14, 0x30
add r13, r14
mov rsi, r13
movabs rbx, 0x104920850
add rbx, 0x3b775270; add
=== 3055
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov rbp, rsi
=== 3056
mov rbx, rbp
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov dil, byte ptr [rcx]
mov r11, 0xff
shl r11, 0x28
not r11
and rbx, r11
movzx r11, dil
shl r11, 0x28
or rbx, r11
=== 3057
mov rdi, rbx
push rdi
mov rbp, rsp
mov r12, rbx
=== 3058
mov r15, rbp
mov rbp, r12
push r15
push 0x40463cc7
push 0x75ac4009
push 0x69dd7aec
=== 3059
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdi
mov rbp, rbp
movzx rdi, dil
=== 3060
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x130dbf67f
add rbp, 0xf2d6c41; add_carry
mov rbp, qword ptr [rbp]
add rbp, rdi
mov dl, byte ptr [rbp]
movzx rdx, dl
shl rdx, 0x38
add rbp, rdx
movabs rdx, 0xc01eed61
push rdx
push 0x6a4237b4
push 0x62d90c48
push 0x20572c2b
add qword ptr [rsp + 0x18], 0x7fea6d5f; add
mov r13, rbp
=== 3061
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov r14, r13
=== 3062
mov rdi, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r13
mov sil, byte ptr [r15]
mov r15, 0xff
shl r15, 0x30
not r15
and rdi, r15
movzx r15, sil
shl r15, 0x30
or rdi, r15
=== 3063
mov r11, rdi
push r11
mov rsi, rsp
mov r15, rdi
=== 3064
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdi
mov rbp, r15
movzx rdi, dil
=== 3065
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rbp
movabs rbx, 0xd3440c53
add rbx, 0x6cc54e6d; add
=== 3066
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r11
mov rsi, r12
=== 3067
mov r15, rsi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov bpl, byte ptr [rax]
mov r12, 0xff
shl r12, 0x38
not r12
and r15, r12
movzx r12, bpl
shl r12, 0x38
or r15, r12
=== 3068
movabs r10, 0x11969a2b9
push r10
push 0xea218f
push 0x335c3393
push 0x44fc0ee8
add qword ptr [rsp + 0x18], 0x2720162f; input
mov rsi, r15
=== 3069
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 24
add rsp, 24
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
mov r14, rsi
movzx rbx, bl
=== 3070
mov rax, rbx
mov rdi, 0xffffffffd4f9e565
add rdi, 0x2b3b6561
push rdi
mov rbp, r14
mul qword ptr [rsp]
mov rbx, rax
=== 3071
mov r13, rbp
add r13, rbx
=== 3072
mov rbp, r13
push rbp
mov r13, rsp
mov r15, r13
=== 3073
mov rsi, r13
mov r14, r15
push rsi
push 0x1dc71cdc
push 0x560e601c
push 0x104858d9
=== 3074
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rbx, r14
movzx r13, r13b
=== 3075
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rbx
movabs rdi, 0xc9423e1b
add rdi, 0x76c70ca5; xor
=== 3076
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1928
add rsp, 1928
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdi
mov rsi, r12
=== 3077
mov rdi, rsi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbp
mov r14b, byte ptr [rbx]
mov dil, r14b
=== 3078
mov r11, rdi
push r11
mov rbx, rsp
mov rdi, rdi
=== 3079
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov rsi, rdi
movzx r13, r13b
=== 3080
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xdc90d9dc
push rcx
push 0x7f33813
push 0x7519772e
push 0x5b341ff6
push 0x59906896
add qword ptr [rsp + 0x20], 0x637870e4; xor
mov r13, rsi
=== 3081
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 184
add rsp, 184
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r12
mov r14, r13
=== 3082
mov rdi, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov r13b, byte ptr [rax]
mov r8, 0xff
shl r8, 8
not r8
and rdi, r8
movzx r8, r13b
shl r8, 8
or rdi, r8
=== 3083
mov rsi, rdi
push rsi
mov rbp, rsp
mov r13, rdi
=== 3084
mov rcx, rbp
mov r14, r13
push rcx
push 0x442023bc
push 0x463e5317
push 0x245d7b54
push 0x63d9757c
=== 3085
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbx
mov r12, r14
movzx rdi, dil
=== 3086
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x13422407a
push rbp
push 0x4d2f559a
push 0x5b7b6711
push 0x135c2c3f
push 0x36544dbe
add qword ptr [rsp + 0x20], 0xbe70a46; xor
mov r15, r12
=== 3087
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1384
add rsp, 1384
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov rsi, r15
=== 3088
mov rbp, rsi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r15
mov dil, byte ptr [rcx]
mov r10, 0xff
shl r10, 0x10
not r10
and rbp, r10
movzx r10, dil
shl r10, 0x10
or rbp, r10
=== 3089
mov r11, rbp
push r11
mov rsi, rsp
mov r14, rbp
=== 3090
mov r10, rsi
mov rbx, r14
push r10
push 0x403e79ed
push 0x3073105f
push 0x107171bf
=== 3091
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rcx
mov r14, rbx
movzx r13, r13b
=== 3092
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r14
movabs r15, 0xd5addb28
add r15, 0x6a5b6f98; xor
=== 3093
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1728
add rsp, 1728
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r10
mov r15, rbp
=== 3094
mov r15, r15
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rsi
mov sil, byte ptr [r8]
mov r8, 0xff
shl r8, 0x18
not r8
and r15, r8
movzx r8, sil
shl r8, 0x18
or r15, r8
=== 3095
mov rcx, r15
push rcx
mov rbp, rsp
mov rdi, r15
=== 3096
mov rdx, rbp
mov rbx, rdi
push rdx
push 0x78e00989
push 0x1ead6b65
push 0x5f733f01
push 0x40477616
=== 3097
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov r15, rbx
movzx rbp, bpl
=== 3098
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xdc5cd2e9
push rax
push 0x1423285e
push 0x790a6bf6
push 0x4a502255
push 0x75961698
add qword ptr [rsp + 0x20], 0x63ac77d7; xor
mov rbx, r15
=== 3099
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rsi
mov rbp, rbx
=== 3100
mov rbp, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbx
mov r13b, byte ptr [r12]
mov r11, 0xff
shl r11, 0x30
not r11
and rbp, r11
movzx r11, r13b
shl r11, 0x30
or rbp, r11
=== 3101
movabs r12, 0xdf00a087
push r12
push 0x375e7b06
push 0x1df870dd
push 0x29165a4c
add qword ptr [rsp + 0x18], 0x61891861; input
mov r15, rbp
=== 3102
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_SMALL 8
add rsp, 8
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r14
mov rsi, r15
movzx r15, r15b
=== 3103
mov rax, r15
mov r8, 0xffffffff8083e8bc
add r8, 0x7fbb420f
push r8
mov rbp, rsi
mul qword ptr [rsp]
mov rbx, rax
=== 3104
mov r15, rbp
sub r15, rbx
=== 3105
mov r13, r15
push r13
mov r14, rsp
mov r12, r15
=== 3106
mov r15, r14
mov r13, r12
push r15
push 0x63911834
push 0x4eb9566c
push 0x16224423
push 0xcfd701a
=== 3107
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
mov rdi, r13
movzx rsi, sil
=== 3108
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x12eec4cb7
add rdi, 0x111d2609; sub_carry
mov rdi, qword ptr [rdi + 0x448]
add rdi, rsi
mov al, byte ptr [rdi]
movzx rax, al
shl rax, 8
sub rdi, rax
mov r13, rdi
movabs rdi, 0xf01434ec
add rdi, 0x4ff535d4; sub
=== 3109
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1096
add rsp, 1096
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r12
mov rsi, r13
=== 3110
mov rsi, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov r10b, byte ptr [r9]
mov sil, r10b
=== 3111
mov rbx, rsi
push rbx
mov rbp, rsp
mov r15, rsi
=== 3112
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rsi
mov r13, r15
movzx r15, r15b
=== 3113
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xef551c9f
add r8, 0x50b45621; sub_carry
mov r8, qword ptr [r8 + 0x3e8]
add r8, r15
mov r10b, byte ptr [r8]
movzx r10, r10b
shl r10, 0x10
sub r13, r10
movabs rbp, 0xdf6cf9bb
push rbp
push 0xced4dec
push 0x3b914988
push 0x6deb6fde
add qword ptr [rsp + 0x18], 0x609c7105; sub
mov r15, r13
=== 3114
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1000
add rsp, 1000
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r11
mov r14, r15
=== 3115
mov rbx, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r15
mov r15b, byte ptr [r8]
mov rcx, 0xff
shl rcx, 8
not rcx
and rbx, rcx
movzx rcx, r15b
shl rcx, 8
or rbx, rcx
=== 3116
mov r11, rbx
push r11
mov r13, rsp
mov rbx, rbx
=== 3117
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbp
mov r12, rbx
movzx rsi, sil
=== 3118
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x11c090585
add r13, 0x24006d3b; sub_carry
mov r13, qword ptr [r13 + 0x358]
add r13, rsi
mov r15b, byte ptr [r13]
movzx r15, r15b
shl r15, 0x18
sub r12, r15
movabs rsi, 0xc607f76a
push rsi
push 0x64763f4d
push 0x75bc5300
push 0x47e7692b
add qword ptr [rsp + 0x18], 0x7a017356; sub
mov r13, r12
=== 3119
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 856
add rsp, 856
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdi
mov rbx, r13
=== 3120
mov rsi, rbx
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r13
mov dil, byte ptr [r14]
mov r15, 0xff
shl r15, 0x10
not r15
and rsi, r15
movzx r15, dil
shl r15, 0x10
or rsi, r15
=== 3121
mov rax, rsi
push rax
mov rsi, rsp
mov r14, rsi
=== 3122
mov r13, rsi
mov rbx, r14
push r13
push 0x399a34d0
push 0x58d26807
push 0x3d283aea
push 0x283478f3
=== 3123
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov rbx, rbx
movzx r14, r14b
=== 3124
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x13e896171
add r10, 0x180114f; sub_carry
mov r10, qword ptr [r10 + 0x458]
add r10, r14
mov bpl, byte ptr [r10]
movzx rbp, bpl
shl rbp, 0x20
sub rbx, rbp
mov r14, rbx
movabs r12, 0xfeae3ff5
add r12, 0x415b2acb; sub
=== 3125
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1112
add rsp, 1112
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov r12, r14
=== 3126
mov rbp, r12
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov bl, byte ptr [r9]
mov r15, 0xff
shl r15, 0x18
not r15
and rbp, r15
movzx r15, bl
shl r15, 0x18
or rbp, r15
=== 3127
mov r8, rbp
push r8
mov r13, rsp
mov r14, rbp
=== 3128
mov r13, r13
mov r14, r14
push r13
push 0x516501bd
push 0x6bb06271
push 0x1775257b
push 0x3141581f
=== 3129
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rax
mov rsi, r14
movzx r15, r15b
=== 3130
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xceb91433
add rsi, 0x71505e8d; sub_carry
mov rsi, qword ptr [rsi]
add rsi, r15
mov r8b, byte ptr [rsi]
movzx r8, r8b
shl r8, 0x28
sub rsi, r8
movabs r15, 0xfe3dfd6e
push r15
push 0x4bba43d7
push 0x37f124ad
push 0x2dcf13fb
push 0x64fe2c61
add qword ptr [rsp + 0x20], 0x41cb6d52; sub
mov rsi, rsi
=== 3131
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov rsi, rsi
=== 3132
mov rsi, rsi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov r11b, byte ptr [rdx]
mov rcx, 0xff
shl rcx, 0x20
not rcx
and rsi, rcx
movzx rcx, r11b
shl rcx, 0x20
or rsi, rcx
=== 3133
mov r10, rsi
push r10
mov r14, rsp
mov r13, rsi
=== 3134
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r13, r13
movzx rbx, bl
=== 3135
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x11b25637e
add r13, 0x24e40f42; sub_carry
mov r13, qword ptr [r13]
add r13, rbx
mov r8b, byte ptr [r13]
movzx r8, r8b
shl r8, 0x30
sub r13, r8
movabs rbp, 0xc0d911d6
push rbp
push 0xe0b6510
push 0x3901536
push 0x7eb4e65
add qword ptr [rsp + 0x18], 0x7f3058ea; sub
mov r15, r13
=== 3136
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rax
mov rdi, r15
=== 3137
mov r13, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov r9b, byte ptr [r8]
mov rdi, 0xff
shl rdi, 0x28
not rdi
and r13, rdi
movzx rdi, r9b
shl rdi, 0x28
or r13, rdi
=== 3138
mov r8, r13
push r8
mov rbx, rsp
mov r13, r13
=== 3139
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r14
mov r13, r13
movzx r15, r15b
=== 3140
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xf8be3e95
add rbp, 0x474b342b; sub_carry
mov rbp, qword ptr [rbp]
add rbp, r15
mov bpl, byte ptr [rbp]
movzx rbp, bpl
shl rbp, 0x38
sub r13, rbp
mov rsi, r13
movabs rbx, 0x130b6105d
add rbx, 0xf535a63; sub
=== 3141
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov r12, rsi
=== 3142
mov rbx, r12
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbp
mov r14b, byte ptr [rsi]
mov r10, 0xff
shl r10, 0x30
not r10
and rbx, r10
movzx r10, r14b
shl r10, 0x30
or rbx, r10
=== 3143
mov rax, rbx
push rax
mov rbx, rsp
mov r15, rbx
=== 3144
mov r12, rbx
mov r14, r15
push r12
push 0x69bc5e2c
push 0x1c841b26
push 0x576861c4
push 0x7060c8f
=== 3145
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov r15, r14
movzx r14, r14b
=== 3146
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r15
movabs rbp, 0xdf172978
add rbp, 0x60f24148; sub
=== 3147
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov rsi, r14
=== 3148
mov r12, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov r14b, byte ptr [r14]
mov rcx, 0xff
shl rcx, 0x38
not rcx
and r12, rcx
movzx rcx, r14b
shl rcx, 0x38
or r12, rcx
=== 3149
mov r13, r12
push r13
mov rdi, rsp
mov r13, r12
=== 3150
mov r12, rdi
mov r13, r13
push r12
push 0x37c2730d
push 0x651506cf
push 0xc883f31
=== 3151
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov r15, r13
movzx rbp, bpl
=== 3152
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xd7796374
add rsi, 0x68900f4c; sub_carry
mov rsi, qword ptr [rsi + 0x498]
add rsi, rbp
mov al, byte ptr [rsi]
movzx rax, al
shl rax, 8
sub r15, rax
movabs rbx, 0x1191e6662
push rbx
push 0x4e4b1624
push 0x30ea3515
push 0x797652fe
push 0xd492138
add qword ptr [rsp + 0x20], 0x26eb045e; sub
mov rsi, r15
=== 3153
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1176
add rsp, 1176
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov r12, rsi
=== 3154
mov rdi, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rdi
mov r14b, byte ptr [r13]
mov dil, r14b
=== 3155
mov rdi, rdi
push rdi
mov r14, rsp
mov rsi, rdi
=== 3156
mov r11, r14
mov rdi, rsi
push r11
push 0x53a84aa1
push 0x3d45145f
push 0x12b64627
push 0x3f658aa
=== 3157
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r14
mov r14, rdi
movzx rdi, dil
=== 3158
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xfed37228
add rsi, 0x41360098; sub_carry
mov rsi, qword ptr [rsi + 0x1b8]
add rsi, rdi
mov r14b, byte ptr [rsi]
movzx r14, r14b
shl r14, 0x10
sub r14, r14
mov r14, r14
movabs rsi, 0xefe14af3
add rsi, 0x50281fcd; sub
=== 3159
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 440
add rsp, 440
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov rbx, r14
=== 3160
mov rbx, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov dl, byte ptr [rax]
mov r10, 0xff
shl r10, 8
not r10
and rbx, r10
movzx r10, dl
shl r10, 8
or rbx, r10
=== 3161
mov r11, rbx
push r11
mov r15, rsp
mov r12, rbx
=== 3162
mov r13, r15
mov r12, r12
push r13
push 0x48533cc8
push 0x6ace13be
push 0x637d6f57
=== 3163
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov r15, r12
movzx rsi, sil
=== 3164
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x118342e99
add rbx, 0x27d54427; sub_carry
mov rbx, qword ptr [rbx + 0x608]
add rbx, rsi
mov cl, byte ptr [rbx]
movzx rcx, cl
shl rcx, 0x18
sub r15, rcx
mov rbx, r15
movabs r12, 0x1259d6993
add r12, 0x1a6c012d; sub
=== 3165
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1544
add rsp, 1544
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov r15, rbx
=== 3166
mov r12, r15
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r13
mov r9b, byte ptr [r15]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and r12, rbx
movzx rbx, r9b
shl rbx, 0x10
or r12, rbx
=== 3167
mov r10, r12
push r10
mov rdi, rsp
mov rbp, r12
=== 3168
mov r10, rdi
mov rsi, rbp
push r10
push 0x6cfd5e53
push 0xa72240
push 0xa6b4510
push 0x28a223e6
=== 3169
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov rbx, rsi
movzx r14, r14b
=== 3170
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xc5f839d3
add r12, 0x7a1138ed; sub_carry
mov r12, qword ptr [r12 + 0x318]
add r12, r14
mov sil, byte ptr [r12]
movzx rsi, sil
shl rsi, 0x20
sub rbx, rsi
mov rsi, rbx
movabs rdi, 0xf0c0eefc
add rdi, 0x4f487bc4; sub
=== 3171
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 792
add rsp, 792
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdx
mov r14, rsi
=== 3172
mov r12, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r13
mov r8b, byte ptr [rax]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r12, rsi
movzx rsi, r8b
shl rsi, 0x18
or r12, rsi
=== 3173
mov rdi, r12
push rdi
mov r14, rsp
mov rbp, r12
=== 3174
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov rbx, rbp
movzx r15, r15b
=== 3175
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x130304af7
add r15, 0xfd927c9; sub_carry
mov r15, qword ptr [r15 + 0x10]
add r15, r15
mov bl, byte ptr [r15]
movzx rbx, bl
shl rbx, 0x28
sub rbx, rbx
mov rbx, rbx
movabs rbp, 0x127955772
add rbp, 0x1874134e; sub
=== 3176
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 16
add rsp, 16
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r15
mov rbx, rbx
=== 3177
mov rbp, rbx
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r13
mov r11b, byte ptr [r11]
mov r8, 0xff
shl r8, 0x20
not r8
and rbp, r8
movzx r8, r11b
shl r8, 0x20
or rbp, r8
=== 3178
mov rbx, rbp
push rbx
mov rbp, rsp
mov r12, rbp
=== 3179
mov r8, rbp
mov r15, r12
push r8
push 0x7ff67127
push 0x44cc6946
push 0x5a4921cb
=== 3180
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov r12, r15
movzx r14, r14b
=== 3181
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xd9433e88
add rbp, 0x66c63438; sub_carry
mov rbp, qword ptr [rbp]
add rbp, r14
mov bl, byte ptr [rbp]
movzx rbx, bl
shl rbx, 0x38
sub r12, rbx
movabs r11, 0xc675fc53
push r11
push 0x54963bbe
push 0x34620d73
push 0x3d5a77f3
add qword ptr [rsp + 0x18], 0x79936e6d; sub
mov r14, r12
=== 3182
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rsi
mov r14, r14
=== 3183
mov r13, r14
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbx
mov r10b, byte ptr [rdx]
mov r8, 0xff
shl r8, 0x30
not r8
and r13, r8
movzx r8, r10b
shl r8, 0x30
or r13, r8
=== 3184
mov r13, r13
push r13
mov r14, rsp
mov rbx, r13
=== 3185
mov r11, r14
mov rdi, rbx
push r11
push 0x34681fd7
push 0x1f4b440c
push 0x4fd7587a
push 0x48594028
=== 3186
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov rsi, rdi
movzx rdi, dil
=== 3187
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xde2e2e84
push rdx
push 0x347907b4
push 0x22e6bef
push 0x63a367bc
push 0x4e222a00
add qword ptr [rsp + 0x20], 0x61db3c3c; sub
mov r13, rsi
=== 3188
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov r12, r13
=== 3189
mov rbp, r12
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov al, byte ptr [r8]
mov r11, 0xff
shl r11, 0x38
not r11
and rbp, r11
movzx r11, al
shl r11, 0x38
or rbp, r11
=== 3190
mov rdi, rbp
push rdi
mov rbp, rsp
mov r12, rbp
=== 3191
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov r15, r12
movzx rbx, bl
=== 3192
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r15
movabs r15, 0xf2ea424d
add r15, 0x4d1f0073
=== 3193
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r8
mov r12, r14
=== 3194
mov rdi, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rdi
mov r15b, byte ptr [r15]
mov dil, r15b
=== 3195
mov r10, rdi
push r10
mov r12, rsp
mov r14, rdi
=== 3196
mov r12, r12
mov rbx, r14
push r12
push 0x6de104b9
push 0x47926480
push 0x3e8971fc
=== 3197
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r10
mov rbp, rbx
movzx rsi, sil
=== 3198
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xc36acb61
push rdi
push 0x672a4e9b
push 0x6cc716df
push 0x38320867
add qword ptr [rsp + 0x18], 0x7c9e775f
mov r15, rbp
=== 3199
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rsi
mov rbp, r15
=== 3200
mov r14, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov r10b, byte ptr [rdx]
mov r9, 0xff
shl r9, 0x10
not r9
and r14, r9
movzx r9, r10b
shl r9, 0x10
or r14, r9
=== 3201
mov rdx, r14
push rdx
mov rbx, rsp
mov rbp, r14
=== 3202
mov rcx, rbx
mov r15, rbp
push rcx
push 0x7e312643
push 0x676d4b69
push 0x47304048
=== 3203
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov r12, r15
movzx r14, r14b
=== 3204
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xc9ddd76d
push rdi
push 0xad56ccd
push 0x4e7d14a3
push 0x4d155253
push 0x1d224625
add qword ptr [rsp + 0x20], 0x762b6b53
mov rbx, r12
=== 3205
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r12
mov r14, rbx
=== 3206
mov rsi, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r13
mov bpl, byte ptr [rax]
mov r8, 0xff
shl r8, 0x20
not r8
and rsi, r8
movzx r8, bpl
shl r8, 0x20
or rsi, r8
=== 3207
mov r15, rsi
push r15
mov r13, rsp
mov rsi, rsi
=== 3208
mov r10, r13
mov r14, rsi
push r10
push 0x6747600c
push 0x2e497040
push 0xf720a7b
push 0x7cf616e2
=== 3209
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov rbx, r14
movzx rdi, dil
=== 3210
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rbx
movabs rbp, 0xeb66f7d9
add rbp, 0x54a24ae7
=== 3211
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r11
mov rdi, r13
=== 3212
mov rsi, rdi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rsi
mov bpl, byte ptr [rbx]
mov r10, 0xff
shl r10, 0x30
not r10
and rsi, r10
movzx r10, bpl
shl r10, 0x30
or rsi, r10
=== 3213
mov r14, rsi
push r14
mov r12, rsp
mov rdi, rsi
=== 3214
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rcx
mov r14, rdi
movzx r13, r13b
=== 3215
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xf812de57
push rdi
push 0x74886b17
push 0x4c1b2b29
push 0x22c521b5
push 0x9ab1194
add qword ptr [rsp + 0x20], 0x47f66469
mov r12, r14
=== 3216
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rsi
mov r15, r12
=== 3217
mov r14, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbx
mov r13b, byte ptr [rbp]
mov rdi, 0xff
shl rdi, 0x38
not rdi
and r14, rdi
movzx rdi, r13b
shl rdi, 0x38
or r14, rdi
=== 3218
mov r13, r14
movabs rdi, 0xe384cc04
add rdi, 0x5c7b45ec
test r13, r13
lea r15, [rip - 0x35d344]
cmovne r15, rdi
jmp r15
=== 3219
movabs rdi, 0x118118d0c
add rdi, 0x28782bdc; input
=== 3220
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 29
add rsp, 29
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
movzx r14, r14b
=== 3221
mov rax, r14
mov r10, 0xffffffffb9827fb2
add r10, 0x476751d8
push r10
mul qword ptr [rsp]
mov r12, rax
=== 3222
mov r11, r12
push r11
mov r12, rsp
mov r15, r12
=== 3223
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rdi, r15
movzx r13, r13b
=== 3224
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xde1a26df
push r14
push 0x6bfc4344
push 0xb746e22
push 0x64653e20
add qword ptr [rsp + 0x18], 0x61ef23e1; xor
mov r13, rdi
=== 3225
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1872
add rsp, 1872
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov rbx, r13
=== 3226
mov rbp, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r15
mov r9b, byte ptr [r8]
mov bpl, r9b
=== 3227
mov r12, rbp
push r12
mov r13, rsp
mov rbx, rbp
=== 3228
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov r13, rbx
movzx rbx, bl
=== 3229
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x133e4e0c4
push rbp
push 0x202d3abe
push 0x6dcf4adb
push 0x6ac14030
add qword ptr [rsp + 0x18], 0xc2469fc; xor
mov rbx, r13
=== 3230
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 696
add rsp, 696
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r12
mov rsi, rbx
=== 3231
mov rbp, rsi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r13
mov r14b, byte ptr [rdi]
mov r10, 0xff
shl r10, 8
not r10
and rbp, r10
movzx r10, r14b
shl r10, 8
or rbp, r10
=== 3232
mov r15, rbp
push r15
mov r15, rsp
mov rbx, rbp
=== 3233
mov rbx, r15
mov rdi, rbx
push rbx
push 0x545762cb
push 0x62441b0e
push 0x2a4e3244
=== 3234
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov rsi, rdi
movzx rdi, dil
=== 3235
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xd6f143f5
push rbp
push 0x50872ba7
push 0x20b06169
push 0x13a97bc8
push 0x41b02af7
add qword ptr [rsp + 0x20], 0x691806cb; xor
mov r15, rsi
=== 3236
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 680
add rsp, 680
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r12
mov r12, r15
=== 3237
mov rbp, r12
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r13
mov r14b, byte ptr [rdi]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and rbp, rdi
movzx rdi, r14b
shl rdi, 0x10
or rbp, rdi
=== 3238
mov r8, rbp
push r8
mov rbx, rsp
mov rdi, rbp
=== 3239
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov rbp, rdi
movzx rsi, sil
=== 3240
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xf0860eab
push rcx
push 0x781c225b
push 0x59856ae9
push 0x26db0f17
push 0x2d897514
add qword ptr [rsp + 0x20], 0x4f833c15; xor
mov rsi, rbp
=== 3241
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1624
add rsp, 1624
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r10
mov r14, rsi
=== 3242
mov r12, r14
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rdi
mov r14b, byte ptr [r14]
mov r8, 0xff
shl r8, 0x18
not r8
and r12, r8
movzx r8, r14b
shl r8, 0x18
or r12, r8
=== 3243
mov rbp, r12
push rbp
mov r12, rsp
mov r13, r12
=== 3244
mov rbx, r12
mov r13, r13
push rbx
push 0x17f934b0
push 0x5d1012e
push 0x7f10ad6
push 0x385b6393
=== 3245
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbx
mov r13, r13
movzx rbx, bl
=== 3246
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xc382076d
push rbx
push 0x76307792
push 0x12a94005
push 0x311f46c1
push 0x3d7b539b
add qword ptr [rsp + 0x20], 0x7c874353; xor
mov rbp, r13
=== 3247
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov r14, rbp
=== 3248
mov rdi, r14
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rsi
mov sil, byte ptr [rsi]
mov r14, 0xff
shl r14, 0x20
not r14
and rdi, r14
movzx r14, sil
shl r14, 0x20
or rdi, r14
=== 3249
mov r8, rdi
push r8
mov r14, rsp
mov r12, rdi
=== 3250
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdi
mov rdi, r12
movzx r14, r14b
=== 3251
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rdi
movabs r12, 0x12aa82df1
add r12, 0x15611ccf; xor
=== 3252
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rax
mov rsi, r14
=== 3253
mov rdi, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbp
mov r10b, byte ptr [r14]
mov rax, 0xff
shl rax, 0x28
not rax
and rdi, rax
movzx rax, r10b
shl rax, 0x28
or rdi, rax
=== 3254
mov rdi, rdi
push rdi
mov rdi, rsp
mov r12, rdi
=== 3255
mov rax, rdi
mov rbp, r12
push rax
push 0x399d1e5d
push 0x53da4f74
push 0x77703edb
=== 3256
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r14
mov r12, rbp
movzx rbp, bpl
=== 3257
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r12
movabs r15, 0x10dc0ffdf
add r15, 0x32484ae1; xor
=== 3258
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdi
mov r15, r14
=== 3259
mov r12, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov r14b, byte ptr [r9]
mov r13, 0xff
shl r13, 0x30
not r13
and r12, r13
movzx r13, r14b
shl r13, 0x30
or r12, r13
=== 3260
movabs rax, 0x12fb07a4d
push rax
push 0x53db773f
push 0x59325908
push 0x15ea4798
push 0x3f133f1f
add qword ptr [rsp + 0x20], 0x10d93e9b; input
mov rdi, r12
=== 3261
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 25
add rsp, 25
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov r13, rdi
movzx r14, r14b
=== 3262
mov rax, r14
mov r13, 0xfffffffff7f32813
add r13, 0x8977da6
push r13
mov rbx, r13
mul qword ptr [rsp]
mov r12, rax
=== 3263
mov rbx, rbx
xor rbx, r12
=== 3264
mov r11, rbx
push r11
mov rsi, rsp
mov r15, rbx
=== 3265
mov r15, rsi
mov r14, r15
push r15
push 0xd4929c7
push 0x70c527dd
push 0x16505452
=== 3266
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov r13, r14
movzx r12, r12b
=== 3267
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xe4bbfe5a
push r15
push 0x218c1ec4
push 0x405d189d
push 0x3db640af
push 0x7a553e22
add qword ptr [rsp + 0x20], 0x5b4d4c66; xor
mov rdi, r13
=== 3268
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 48
add rsp, 48
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbx
mov rsi, rdi
=== 3269
mov rbp, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbx
mov r8b, byte ptr [r14]
mov bpl, r8b
=== 3270
mov rcx, rbp
push rcx
mov rbp, rsp
mov rdi, rbp
=== 3271
mov r10, rbp
mov r14, rdi
push r10
push 0x369465a8
push 0x4e207c33
push 0x21fb4c2c
push 0x50cc269d
=== 3272
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov r14, r14
movzx r15, r15b
=== 3273
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r14
movabs rbx, 0xfa481aac
add rbx, 0x45c13014; xor
=== 3274
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1352
add rsp, 1352
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov r15, r15
=== 3275
mov r13, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov r15b, byte ptr [r9]
mov r12, 0xff
shl r12, 8
not r12
and r13, r12
movzx r12, r15b
shl r12, 8
or r13, r12
=== 3276
mov rbp, r13
push rbp
mov r13, rsp
mov rsi, r13
=== 3277
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov r12, rsi
movzx rbp, bpl
=== 3278
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xce86dea9
push rdx
push 0x6940c2
push 0x5fe1569
push 0x45a26334
push 0x3cd721b6
add qword ptr [rsp + 0x20], 0x71826c17; xor
mov r13, r12
=== 3279
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 296
add rsp, 296
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov rsi, r13
=== 3280
mov rbp, rsi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov r9b, byte ptr [r15]
mov rax, 0xff
shl rax, 0x10
not rax
and rbp, rax
movzx rax, r9b
shl rax, 0x10
or rbp, rax
=== 3281
mov r11, rbp
push r11
mov r15, rsp
mov r13, rbp
=== 3282
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r9
mov rsi, r13
movzx rdi, dil
=== 3283
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xceb7cd86
push rax
push 0x18cc608c
push 0x4dfd64e5
push 0x2bc066c1
push 0x26ee01aa
add qword ptr [rsp + 0x20], 0x71517d3a; xor
mov r14, rsi
=== 3284
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1160
add rsp, 1160
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov r12, r14
=== 3285
mov r15, r12
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r14
mov bl, byte ptr [rbx]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and r15, rdx
movzx rdx, bl
shl rdx, 0x18
or r15, rdx
=== 3286
mov r8, r15
push r8
mov r12, rsp
mov rbx, r15
=== 3287
mov rax, r12
mov rdi, rbx
push rax
push 0x2616473b
push 0x73d44be3
push 0x2a254ea7
=== 3288
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov rsi, rdi
movzx r13, r13b
=== 3289
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rsi
movabs r15, 0x11b3f0433
add r15, 0x24ca468d; xor
=== 3290
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rsi, rbp
=== 3291
mov r13, rsi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r13
mov dil, byte ptr [rbx]
mov r9, 0xff
shl r9, 0x20
not r9
and r13, r9
movzx r9, dil
shl r9, 0x20
or r13, r9
=== 3292
mov rdi, r13
push rdi
mov rsi, rsp
mov r12, r13
=== 3293
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov rsi, r12
movzx rdi, dil
=== 3294
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rsi
movabs rdi, 0xf26a46ec
add rdi, 0x4d9f03d4; xor
=== 3295
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r10
mov r13, rbx
=== 3296
mov rsi, r13
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov cl, byte ptr [r9]
mov r11, 0xff
shl r11, 0x38
not r11
and rsi, r11
movzx r11, cl
shl r11, 0x38
or rsi, r11
=== 3297
movabs r15, 0xd93ab3b8
push r15
push 0x1077040c
push 0xed7f82
push 0x761c2eb9
add qword ptr [rsp + 0x18], 0x674f0530; input
mov r14, rsi
=== 3298
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 17
add rsp, 17
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov r15, r14
movzx r14, r14b
=== 3299
mov rax, r14
mov rbx, 0xffffffffd04ec2da
add rbx, 0x2fd556bd
push rbx
mov r15, r15
mul qword ptr [rsp]
mov r14, rax
=== 3300
mov r14, r15
sub r14, r14
=== 3301
mov r10, r14
push r10
mov r13, rsp
mov r12, r14
=== 3302
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbx
mov rbx, r12
movzx rdi, dil
=== 3303
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xc5a22aa3
add r13, 0x7a67381d; add_carry
mov r13, qword ptr [r13 + 0x5c0]
add r13, rdi
mov sil, byte ptr [r13]
movzx rsi, sil
shl rsi, 8
add rbx, rsi
mov r14, rbx
movabs rsi, 0x13eabef18
add rsi, 0x15d6ba8; add
=== 3304
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1472
add rsp, 1472
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbp
mov r13, r14
=== 3305
mov rsi, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rsi
mov r15b, byte ptr [r15]
mov sil, r15b
=== 3306
mov r10, rsi
push r10
mov r12, rsp
mov r13, rsi
=== 3307
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov rsi, r13
movzx rbp, bpl
=== 3308
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x10be2133e
add rcx, 0x34274f82; add_carry
mov rcx, qword ptr [rcx + 0x7e0]
add rcx, rbp
mov r15b, byte ptr [rcx]
movzx r15, r15b
shl r15, 0x10
add rsi, r15
movabs r13, 0xd4f60d93
push r13
push 0x2f3f5d5d
push 0x6e29594f
push 0x7d705fe9
add qword ptr [rsp + 0x18], 0x6b134d2d; add
mov rdi, rsi
=== 3309
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2016
add rsp, 2016
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r9
mov r15, rdi
=== 3310
mov r15, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov dl, byte ptr [rcx]
mov rax, 0xff
shl rax, 8
not rax
and r15, rax
movzx rax, dl
shl rax, 8
or r15, rax
=== 3311
mov r14, r15
push r14
mov r14, rsp
mov r13, r15
=== 3312
mov r12, r14
mov rbp, r13
push r12
push 0x4ca107e7
push 0x7bda471e
push 0x6bba367e
push 0x4be50f3
=== 3313
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
mov r13, rbp
movzx rsi, sil
=== 3314
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x13f98f40a
add r14, 0x706eb6; add_carry
mov r14, qword ptr [r14 + 0x230]
add r14, rsi
mov sil, byte ptr [r14]
movzx rsi, sil
shl rsi, 0x18
add r13, rsi
movabs rcx, 0xc67bef03
push rcx
push 0x7b8554e2
push 0x1b4548e9
push 0x11fd3944
add qword ptr [rsp + 0x18], 0x798d6bbd; add
mov rbp, r13
=== 3315
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 560
add rsp, 560
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov r12, rbp
=== 3316
mov r14, r12
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov bpl, byte ptr [r9]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and r14, rsi
movzx rsi, bpl
shl rsi, 0x10
or r14, rsi
=== 3317
mov r12, r14
push r12
mov rdi, rsp
mov rsi, r14
=== 3318
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov rsi, rsi
movzx r13, r13b
=== 3319
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x12c9041cd
add rcx, 0x137920f3; add_carry
mov rcx, qword ptr [rcx + 0x370]
add rcx, r13
mov bpl, byte ptr [rcx]
movzx rbp, bpl
shl rbp, 0x20
add rsi, rbp
movabs r11, 0x10024ef27
push r11
push 0x67a20480
push 0x5b3b0b10
push 0x7fa01889
add qword ptr [rsp + 0x18], 0x3fe46b99; add
mov rdi, rsi
=== 3320
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 880
add rsp, 880
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r14
mov rbp, rdi
=== 3321
mov rdi, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov dl, byte ptr [rdx]
mov r10, 0xff
shl r10, 0x18
not r10
and rdi, r10
movzx r10, dl
shl r10, 0x18
or rdi, r10
=== 3322
movabs rdi, 0xebf5494a
push rdi
push 0x175a3514
push 0xc040f6a
push 0x42056385
add qword ptr [rsp + 0x18], 0x54946f9e; input
mov rbx, rdi
=== 3323
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r15
mov rsi, rbx
movzx rdi, dil
=== 3324
mov rax, rdi
mov r15, 0xffffffffac94abf4
add r15, 0x544f2e1b
push r15
mov r14, rsi
mul qword ptr [rsp]
mov rbp, rax
=== 3325
mov r13, r14
add r13, rbp
=== 3326
mov rsi, r13
push rsi
mov rsi, rsp
mov rbx, r13
=== 3327
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r11
mov r13, rbx
movzx r12, r12b
=== 3328
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xe1eff6d4
add rcx, 0x5e196bec; add_carry
mov rcx, qword ptr [rcx + 0x760]
add rcx, r12
mov r13b, byte ptr [rcx]
movzx r13, r13b
shl r13, 8
add r13, r13
mov rsi, r13
movabs r12, 0x110a60805
add r12, 0x2f6352bb; add
=== 3329
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1888
add rsp, 1888
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov r12, rsi
=== 3330
mov r14, r12
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbx
mov cl, byte ptr [rdi]
mov r14b, cl
=== 3331
mov r10, r14
push r10
mov rbp, rsp
mov rbx, r14
=== 3332
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r14
mov r13, rbx
movzx rbp, bpl
=== 3333
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xd8ec2c8f
add r14, 0x671d3631; add_carry
mov r14, qword ptr [r14 + 0x140]
add r14, rbp
mov dil, byte ptr [r14]
movzx rdi, dil
shl rdi, 0x18
add r13, rdi
movabs rax, 0xf41bff63
push rax
push 0x4c6a625a
push 0x39611525
push 0x7c657d1
add qword ptr [rsp + 0x18], 0x4bed5b5d; add
mov rdi, r13
=== 3334
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 320
add rsp, 320
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov rbp, rdi
=== 3335
mov r14, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov r12b, byte ptr [r9]
mov r13, 0xff
shl r13, 0x10
not r13
and r14, r13
movzx r13, r12b
shl r13, 0x10
or r14, r13
=== 3336
mov r11, r14
push r11
mov rsi, rsp
mov r14, r14
=== 3337
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov rdi, r14
movzx rbx, bl
=== 3338
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xcdb7fc51
add r14, 0x7251666f; add_carry
mov r14, qword ptr [r14 + 0x220]
add r14, rbx
mov bpl, byte ptr [r14]
movzx rbp, bpl
shl rbp, 0x20
add rdi, rbp
mov rsi, rdi
movabs rdi, 0x11de9434b
add rdi, 0x22201775; add
=== 3339
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 544
add rsp, 544
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbx
mov rbx, rsi
=== 3340
mov r14, rbx
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov r15b, byte ptr [r11]
mov r8, 0xff
shl r8, 0x18
not r8
and r14, r8
movzx r8, r15b
shl r8, 0x18
or r14, r8
=== 3341
mov rsi, r14
push rsi
mov r12, rsp
mov rsi, r14
=== 3342
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov r15, rsi
movzx rsi, sil
=== 3343
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x1305e506a
add rbx, 0xfab1256; add_carry
mov rbx, qword ptr [rbx]
add rbx, rsi
mov cl, byte ptr [rbx]
movzx rcx, cl
shl rcx, 0x28
add r15, rcx
movabs r8, 0xf77f0f76
push r8
push 0x598e5b45
push 0x4ee87975
push 0x2f775ec6
add qword ptr [rsp + 0x18], 0x488a4b4a; add
mov r14, r15
=== 3344
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdi
mov rbp, r14
=== 3345
mov rdi, rbp
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r12
mov al, byte ptr [r11]
mov rsi, 0xff
shl rsi, 0x20
not rsi
and rdi, rsi
movzx rsi, al
shl rsi, 0x20
or rdi, rsi
=== 3346
mov r15, rdi
push r15
mov rdi, rsp
mov rbx, rdi
=== 3347
mov rdi, rdi
mov r12, rbx
push rdi
push 0x2b8a50b1
push 0x565a30a3
push 0x2240245f
=== 3348
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov r15, r12
movzx r12, r12b
=== 3349
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x127ab6265
add rax, 0x185e005b; add_carry
mov rax, qword ptr [rax]
add rax, r12
mov r10b, byte ptr [rax]
movzx r10, r10b
shl r10, 0x30
add r15, r10
mov r12, r15
movabs r15, 0xdd44fcb1
add r15, 0x62c45e0f; add
=== 3350
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov r15, r12
=== 3351
mov r14, r15
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r14
mov al, byte ptr [r13]
mov r10, 0xff
shl r10, 0x28
not r10
and r14, r10
movzx r10, al
shl r10, 0x28
or r14, r10
=== 3352
mov r8, r14
push r8
mov rbx, rsp
mov r13, r14
=== 3353
mov rdx, rbx
mov rsi, r13
push rdx
push 0x4d8d325e
push 0x6d303f7b
push 0x42682fc3
push 0x10270050
=== 3354
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov rbx, rsi
movzx rbp, bpl
=== 3355
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xc79f2548
add rsi, 0x786a3d78; add_carry
mov rsi, qword ptr [rsi]
add rsi, rbp
mov dil, byte ptr [rsi]
movzx rdi, dil
shl rdi, 0x38
add rbx, rdi
mov rbp, rbx
movabs r15, 0xdcbbded9
add r15, 0x634d7be7; add
=== 3356
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov rdi, rbp
=== 3357
mov rsi, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov r14b, byte ptr [r8]
mov r13, 0xff
shl r13, 0x30
not r13
and rsi, r13
movzx r13, r14b
shl r13, 0x30
or rsi, r13
=== 3358
mov r12, rsi
push r12
mov rsi, rsp
mov rbp, rsi
=== 3359
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov r14, rbp
movzx rbp, bpl
=== 3360
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xd2390098
push rcx
push 0x33555150
push 0x39b26fea
push 0x5fc42776
push 0x41c7503c
add qword ptr [rsp + 0x20], 0x6dd05a28; add
mov rbx, r14
=== 3361
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbp
mov r12, rbx
=== 3362
mov rbp, r12
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov r8b, byte ptr [r9]
mov r15, 0xff
shl r15, 0x38
not r15
and rbp, r15
movzx r15, r8b
shl r15, 0x38
or rbp, r15
=== 3363
mov rdi, rbp
movabs r12, 0x12cec6e5c
add r12, 0x139d4a8c; input
=== 3364
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 13
add rsp, 13
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov r14, rdi
movzx rdi, dil
=== 3365
mov rax, rdi
mov rbx, 0xffffffffc4b0d43e
add rbx, 0x3bf525ad
push rbx
mov r13, r14
mul qword ptr [rsp]
mov rbx, rax
=== 3366
mov r14, r13
add r14, rbx
=== 3367
mov r14, r14
push r14
mov r13, rsp
mov rdi, r14
=== 3368
mov rcx, r13
mov rbx, rdi
push rcx
push 0x77f36df3
push 0x1cde2bcd
push 0x75215d3b
push 0x314653d2
=== 3369
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov r14, rbx
movzx r15, r15b
=== 3370
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xcef26177
add r12, 0x71170149; add_carry
mov r12, qword ptr [r12 + 0x578]
add r12, r15
mov r14b, byte ptr [r12]
movzx r14, r14b
shl r14, 8
add r14, r14
mov rbx, r14
movabs rbp, 0xd27c39d6
add rbp, 0x6d8d20ea; add
=== 3371
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1400
add rsp, 1400
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r13
mov r13, rbx
=== 3372
mov rsi, r13
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov r11b, byte ptr [r9]
mov sil, r11b
=== 3373
mov rax, rsi
push rax
mov rdi, rsp
mov r15, rsi
=== 3374
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rsi
mov rdi, r15
movzx rbp, bpl
=== 3375
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x1094c0e2b
add rdx, 0x36bd5495; add_carry
mov rdx, qword ptr [rdx + 0x7c8]
add rdx, rbp
mov bl, byte ptr [rdx]
movzx rbx, bl
shl rbx, 0x10
add rdi, rbx
mov rbp, rdi
movabs r15, 0xdab830bf
add r15, 0x65512a01; add
=== 3376
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1992
add rsp, 1992
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov r13, rbp
=== 3377
mov r15, r13
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rsi
mov r11b, byte ptr [r13]
mov rdx, 0xff
shl rdx, 8
not rdx
and r15, rdx
movzx rdx, r11b
shl rdx, 8
or r15, rdx
=== 3378
mov r13, r15
push r13
mov r13, rsp
mov r15, r15
=== 3379
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov r13, r15
movzx r12, r12b
=== 3380
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x10ed52d25
add rax, 0x3134359b; add_carry
mov rax, qword ptr [rax + 0x740]
add rax, r12
mov r10b, byte ptr [rax]
movzx r10, r10b
shl r10, 0x18
add r13, r10
movabs rbp, 0xe84c028b
push rbp
push 0x13e80070
push 0x66c56679
push 0x17006114
add qword ptr [rsp + 0x18], 0x57bd5835; add
mov rbp, r13
=== 3381
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1856
add rsp, 1856
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rsi
mov r13, rbp
=== 3382
mov rbx, r13
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov r13b, byte ptr [rbp]
mov r14, 0xff
shl r14, 0x10
not r14
and rbx, r14
movzx r14, r13b
shl r14, 0x10
or rbx, r14
=== 3383
mov rsi, rbx
push rsi
mov r12, rsp
mov r13, rbx
=== 3384
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
mov r15, r13
movzx r12, r12b
=== 3385
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xdb65000f
add rsi, 0x64a462b1; add_carry
mov rsi, qword ptr [rsi + 0x5e8]
add rsi, r12
mov r11b, byte ptr [rsi]
movzx r11, r11b
shl r11, 0x20
add r15, r11
mov rsi, r15
movabs r15, 0xd6d91372
add r15, 0x6930474e; add
=== 3386
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1512
add rsp, 1512
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov r12, rsi
=== 3387
mov r13, r12
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r13
mov r8b, byte ptr [r8]
mov r11, 0xff
shl r11, 0x18
not r11
and r13, r11
movzx r11, r8b
shl r11, 0x18
or r13, r11
=== 3388
mov r14, r13
push r14
mov r13, rsp
mov r12, r13
=== 3389
mov r14, r13
mov rbp, r12
push r14
push 0x4ac85830
push 0x4df34b92
push 0x3dd54d47
=== 3390
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rax
mov r12, rbp
movzx r15, r15b
=== 3391
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xc8044609
add r14, 0x78051cb7; add_carry
mov r14, qword ptr [r14]
add r14, r15
mov sil, byte ptr [r14]
movzx rsi, sil
shl rsi, 0x38
add r12, rsi
movabs r11, 0xc1e7110e
push r11
push 0x736b7548
push 0x14852b6f
push 0x16826c8f
push 0x4daf5fbc
add qword ptr [rsp + 0x20], 0x7e2249b2; add
mov rbp, r12
=== 3392
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r13
mov rsi, rbp
=== 3393
mov r12, rsi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov bpl, byte ptr [r10]
mov rbx, 0xff
shl rbx, 0x30
not rbx
and r12, rbx
movzx rbx, bpl
shl rbx, 0x30
or r12, rbx
=== 3394
mov r15, r12
push r15
mov rbp, rsp
mov r14, r12
=== 3395
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov r13, r14
movzx rdi, dil
=== 3396
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r13
movabs r14, 0xcde3fd45
add r14, 0x72255d7b; add
=== 3397
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbx
mov rdi, r13
=== 3398
mov r14, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov al, byte ptr [rdx]
mov rcx, 0xff
shl rcx, 0x38
not rcx
and r14, rcx
movzx rcx, al
shl rcx, 0x38
or r14, rcx
=== 3399
mov rbp, r14
movabs r13, 0x11ca87ab4
add r13, 0x23e13e34; input
=== 3400
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 21
add rsp, 21
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov rdi, rbp
movzx r13, r13b
=== 3401
mov rax, r13
mov r9, 0xffffffffbe1cdd18
add r9, 0x42ba03e3
push r9
mov r13, rdi
mul qword ptr [rsp]
mov rdi, rax
=== 3402
mov r12, r13
add r12, rdi
=== 3403
mov r13, r12
push r13
mov rbx, rsp
mov r15, r12
=== 3404
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov rsi, r15
movzx rbp, bpl
=== 3405
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xcfc61386
add rbp, 0x70435f3a; sub_carry
mov rbp, qword ptr [rbp + 0x218]
add rbp, rbp
mov dl, byte ptr [rbp]
movzx rdx, dl
shl rdx, 8
sub rsi, rdx
movabs r15, 0xeff8eb38
push r15
push 0x3da1722e
push 0x63cb3f14
push 0x52923d23
push 0x81a47b7
add qword ptr [rsp + 0x20], 0x50107f88; sub
mov r15, rsi
=== 3406
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 536
add rsp, 536
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov r15, r15
=== 3407
mov rdi, r15
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r14
mov r8b, byte ptr [r13]
mov dil, r8b
=== 3408
mov rdi, rdi
push rdi
mov r15, rsp
mov r13, rdi
=== 3409
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov rbx, r13
movzx r14, r14b
=== 3410
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xfd55f2e3
add r15, 0x42b37fdd; sub_carry
mov r15, qword ptr [r15 + 0x390]
add r15, r14
mov r10b, byte ptr [r15]
movzx r10, r10b
shl r10, 0x10
sub rbx, r10
movabs rbp, 0xf232682d
push rbp
push 0xc684a89
push 0x7186649a
push 0x28387d6a
push 0x712d1cc3
add qword ptr [rsp + 0x20], 0x4dd70293; sub
mov rbx, rbx
=== 3411
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 912
add rsp, 912
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov rsi, rbx
=== 3412
mov r13, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov cl, byte ptr [r9]
mov r12, 0xff
shl r12, 8
not r12
and r13, r12
movzx r12, cl
shl r12, 8
or r13, r12
=== 3413
mov r15, r13
push r15
mov rdi, rsp
mov r13, r13
=== 3414
mov r13, rdi
mov rdi, r13
push r13
push 0x568223e6
push 0x6dd32c62
push 0x48e67bc1
push 0x69de1863
=== 3415
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov rbx, rdi
movzx r14, r14b
=== 3416
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x13ba56f20
add r11, 0x46403a0; sub_carry
mov r11, qword ptr [r11 + 0x6c8]
add r11, r14
mov sil, byte ptr [r11]
movzx rsi, sil
shl rsi, 0x18
sub rbx, rsi
movabs r11, 0x133edff7b
push r11
push 0x18ac30b9
push 0x5bdf5ddd
push 0xc156b0d
add qword ptr [rsp + 0x18], 0xc1b6b45; sub
mov rdi, rbx
=== 3417
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1736
add rsp, 1736
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r15
mov r14, rdi
=== 3418
mov r12, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbp
mov dil, byte ptr [rdi]
mov r13, 0xff
shl r13, 0x10
not r13
and r12, r13
movzx r13, dil
shl r13, 0x10
or r12, r13
=== 3419
mov r8, r12
push r8
mov r14, rsp
mov rbx, r12
=== 3420
mov r14, r14
mov r12, rbx
push r14
push 0x164f1243
push 0x403c352d
push 0x25f86e06
push 0x12f25dc1
=== 3421
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rcx
mov rsi, r12
movzx rbp, bpl
=== 3422
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xeae726d9
add rbp, 0x55224be7; sub_carry
mov rbp, qword ptr [rbp + 0x648]
add rbp, rbp
mov r12b, byte ptr [rbp]
movzx r12, r12b
shl r12, 0x20
sub rsi, r12
mov r13, rsi
movabs rbx, 0x10f5c1593
add rbx, 0x30ad552d; sub
=== 3423
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1608
add rsp, 1608
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rcx
mov rbp, r13
=== 3424
mov r15, rbp
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r15
mov bpl, byte ptr [rsi]
mov r8, 0xff
shl r8, 0x18
not r8
and r15, r8
movzx r8, bpl
shl r8, 0x18
or r15, r8
=== 3425
mov r11, r15
push r11
mov rsi, rsp
mov r13, r15
=== 3426
mov rcx, rsi
mov r12, r13
push rcx
push 0x10bc5dd6
push 0x56bd2ee8
push 0x4f772361
push 0x64ee0090
=== 3427
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
mov r13, r12
movzx r15, r15b
=== 3428
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x1117d0cfd
add r12, 0x2e8c65c3; sub_carry
mov r12, qword ptr [r12]
add r12, r15
mov r12b, byte ptr [r12]
movzx r12, r12b
shl r12, 0x28
sub r13, r12
mov rsi, r13
movabs r13, 0xfe5bf194
add r13, 0x41ad792c; sub
=== 3429
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbx
mov r15, rsi
=== 3430
mov r13, r15
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r12
mov r14b, byte ptr [rbx]
mov rdi, 0xff
shl rdi, 0x20
not rdi
and r13, rdi
movzx rdi, r14b
shl rdi, 0x20
or r13, rdi
=== 3431
mov rsi, r13
push rsi
mov rdi, rsp
mov r14, r13
=== 3432
mov rdi, rdi
mov rsi, r14
push rdi
push 0x7fb7159f
push 0x7add5a27
push 0x43f95a19
push 0x13f00950
=== 3433
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov r15, rsi
movzx r13, r13b
=== 3434
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xdc02576e
add r15, 0x64071b52; sub_carry
mov r15, qword ptr [r15]
add r15, r13
mov dl, byte ptr [r15]
movzx rdx, dl
shl rdx, 0x30
sub r15, rdx
movabs rbp, 0x124e01845
push rbp
push 0x7148124d
push 0x2bc51f4f
push 0x3b291c73
add qword ptr [rsp + 0x18], 0x1b29527b; sub
mov r12, r15
=== 3435
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov r15, r12
=== 3436
mov rdi, r15
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r14
mov r10b, byte ptr [rsi]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and rdi, rdx
movzx rdx, r10b
shl rdx, 0x28
or rdi, rdx
=== 3437
mov rsi, rdi
movabs r12, 0xfa6b8992
add r12, 0x461e2f56; input
=== 3438
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rax
mov r15, rsi
movzx rbx, bl
=== 3439
mov rax, rbx
mov rbx, 0xffffffffc61c6de6
add rbx, 0x3a715588
push rbx
mov rdi, r15
mul qword ptr [rsp]
mov r15, rax
=== 3440
mov rbx, rdi
add rbx, r15
=== 3441
mov rsi, rbx
push rsi
mov rbx, rsp
mov r13, rbx
=== 3442
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov r12, r13
movzx rdi, dil
=== 3443
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xda2954c1
add rbp, 0x65e00dff; add_carry
mov rbp, qword ptr [rbp + 0x108]
add rbp, rdi
mov dil, byte ptr [rbp]
movzx rdi, dil
shl rdi, 8
add r12, rdi
movabs r8, 0xf67e08bd
push r8
push 0x765e72a9
push 0x12f72383
push 0x5f8640e0
add qword ptr [rsp + 0x18], 0x498b5203; add
mov rdi, r12
=== 3444
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 264
add rsp, 264
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov rbx, rdi
=== 3445
mov r12, rbx
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rsi
mov r15b, byte ptr [rsi]
mov r12b, r15b
=== 3446
mov rdx, r12
push rdx
mov rsi, rsp
mov rbx, r12
=== 3447
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r9
mov r15, rbx
movzx r13, r13b
=== 3448
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xf597f2c1
add rdx, 0x4a716fff; add_carry
mov rdx, qword ptr [rdx + 0x3e8]
add rdx, r13
mov dil, byte ptr [rdx]
movzx rdi, dil
shl rdi, 0x10
add r15, rdi
mov rbp, r15
movabs r14, 0xd44300f9
add r14, 0x6bc659c7; add
=== 3449
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1000
add rsp, 1000
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rax
mov r15, rbp
=== 3450
mov r15, r15
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov r14b, byte ptr [r10]
mov r11, 0xff
shl r11, 8
not r11
and r15, r11
movzx r11, r14b
shl r11, 8
or r15, r11
=== 3451
mov r11, r15
push r11
mov r12, rsp
mov rdi, r15
=== 3452
mov r14, r12
mov r12, rdi
push r14
push 0x104a1e74
push 0x8cf28d2
push 0x50ed510c
push 0x78555d9f
=== 3453
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r8
mov r14, r12
movzx r12, r12b
=== 3454
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xcf5d41e3
add r14, 0x70ac20dd; add_carry
mov r14, qword ptr [r14 + 0x258]
add r14, r12
mov r12b, byte ptr [r14]
movzx r12, r12b
shl r12, 0x18
add r14, r12
mov rbx, r14
movabs rsi, 0x101514771
add rsi, 0x3eb8134f; add
=== 3455
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 600
add rsp, 600
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov r12, rbx
=== 3456
mov rdi, r12
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r14
mov r8b, byte ptr [r12]
mov r10, 0xff
shl r10, 0x10
not r10
and rdi, r10
movzx r10, r8b
shl r10, 0x10
or rdi, r10
=== 3457
mov r15, rdi
push r15
mov r12, rsp
mov rsi, rdi
=== 3458
mov rcx, r12
mov rbx, rsi
push rcx
push 0x52b92d80
push 0x69276292
push 0x6cfc54fb
=== 3459
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov r14, rbx
movzx r15, r15b
=== 3460
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xe12c4eba
add rsi, 0x5edd1406; add_carry
mov rsi, qword ptr [rsi + 0x628]
add rsi, r15
mov r15b, byte ptr [rsi]
movzx r15, r15b
shl r15, 0x20
add r14, r15
mov rsi, r14
movabs r14, 0x124681e07
add r14, 0x1ba13cb9; add
=== 3461
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1576
add rsp, 1576
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r11
mov rdi, rsi
=== 3462
mov rbp, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r15
mov al, byte ptr [rcx]
mov r10, 0xff
shl r10, 0x18
not r10
and rbp, r10
movzx r10, al
shl r10, 0x18
or rbp, r10
=== 3463
mov r15, rbp
push r15
mov r14, rsp
mov rsi, rbp
=== 3464
mov rbx, r14
mov rdi, rsi
push rbx
push 0x64855c0f
push 0x7cf51831
push 0x3cd45a7e
push 0x5134597a
=== 3465
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov r15, rdi
movzx r13, r13b
=== 3466
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x13ccdeac0
add r12, 0x33b7800; add_carry
mov r12, qword ptr [r12]
add r12, r13
mov bpl, byte ptr [r12]
movzx rbp, bpl
shl rbp, 0x38
add r15, rbp
movabs rdi, 0x12bc50355
push rdi
push 0x5d4d4c2b
push 0x3d2632d4
push 0x67174c6d
add qword ptr [rsp + 0x18], 0x1444576b; add
mov rbp, r15
=== 3467
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r15
mov rbx, rbp
=== 3468
mov rbx, rbx
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbp
mov r8b, byte ptr [rdi]
mov rax, 0xff
shl rax, 0x30
not rax
and rbx, rax
movzx rax, r8b
shl rax, 0x30
or rbx, rax
=== 3469
movabs rdx, 0xcc405aee
push rdx
push 0x715279c3
push 0x12f70f20
push 0x61356fa4
push 0x40fe4111
add qword ptr [rsp + 0x20], 0x74495dfa; input
mov r14, rbx
=== 3470
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 9
add rsp, 9
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov r15, r14
movzx r14, r14b
=== 3471
mov rax, r14
mov r15, 0xfffffffff2fd2105
add r15, 0xdb351e9
push r15
mov rbx, r15
mul qword ptr [rsp]
mov r12, rax
=== 3472
mov rsi, rbx
xor rsi, r12
=== 3473
mov rsi, rsi
push rsi
mov r12, rsp
mov rbx, rsi
=== 3474
mov r13, r12
mov rbp, rbx
push r13
push 0x7a46748
push 0x5b27df9
push 0x4b691b8a
=== 3475
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdi
mov rsi, rbp
movzx r12, r12b
=== 3476
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xebd538be
add r14, 0x54343a02; sub_carry
mov r14, qword ptr [r14 + 0x608]
add r14, r12
mov bpl, byte ptr [r14]
movzx rbp, bpl
shl rbp, 8
sub rsi, rbp
movabs r15, 0x10a0cfc42
push r15
push 0x759b09c3
push 0x56d60abb
push 0xe3d4fc1
push 0xad6463f
add qword ptr [rsp + 0x20], 0x35fc6e7e; sub
mov r13, rsi
=== 3477
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1544
add rsp, 1544
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdi
mov rbp, r13
=== 3478
mov rdi, rbp
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rdi
mov bl, byte ptr [r14]
mov dil, bl
=== 3479
mov rbp, rdi
push rbp
mov r13, rsp
mov r14, rdi
=== 3480
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov rbp, r14
movzx rsi, sil
=== 3481
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x133a0f37c
add rdx, 0xc687f44; sub_carry
mov rdx, qword ptr [rdx + 0x580]
add rdx, rsi
mov bl, byte ptr [rdx]
movzx rbx, bl
shl rbx, 0x10
sub rbp, rbx
mov r14, rbp
movabs r15, 0x105a34443
add r15, 0x3a66267d; sub
=== 3482
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1408
add rsp, 1408
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbx
mov r13, r14
=== 3483
mov r14, r13
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov r11b, byte ptr [r11]
mov r13, 0xff
shl r13, 8
not r13
and r14, r13
movzx r13, r11b
shl r13, 8
or r14, r13
=== 3484
mov r8, r14
push r8
mov rdi, rsp
mov r12, r14
=== 3485
mov rbx, rdi
mov rbp, r12
push rbx
push 0x4a015b74
push 0x5b85a5c
push 0x3eb65d0f
push 0x42683a2f
=== 3486
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov r13, rbp
movzx r14, r14b
=== 3487
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xdda50d82
add rdx, 0x6264653e; sub_carry
mov rdx, qword ptr [rdx + 0xd0]
add rdx, r14
mov dil, byte ptr [rdx]
movzx rdi, dil
shl rdi, 0x18
sub r13, rdi
mov rbx, r13
movabs rsi, 0xd7856686
add rsi, 0x6884043a; sub
=== 3488
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 208
add rsp, 208
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov r14, rbx
=== 3489
mov rsi, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rsi
mov r9b, byte ptr [r15]
mov rax, 0xff
shl rax, 0x10
not rax
and rsi, rax
movzx rax, r9b
shl rax, 0x10
or rsi, rax
=== 3490
mov r15, rsi
push r15
mov r12, rsp
mov r13, rsi
=== 3491
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov r12, r13
movzx rdi, dil
=== 3492
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x10f8c6d11
add r12, 0x307d05af; sub_carry
mov r12, qword ptr [r12 + 0x150]
add r12, rdi
mov dil, byte ptr [r12]
movzx rdi, dil
shl rdi, 0x20
sub r12, rdi
movabs r14, 0xeae33258
push r14
push 0x3bbb4dd6
push 0x26e15c21
push 0x2f0c443b
push 0x41a9737c
add qword ptr [rsp + 0x20], 0x55263868; sub
mov rbp, r12
=== 3493
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 336
add rsp, 336
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rsi
mov r13, rbp
=== 3494
mov r12, r13
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbp
mov r13b, byte ptr [r14]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r12, rsi
movzx rsi, r13b
shl rsi, 0x18
or r12, rsi
=== 3495
mov r12, r12
push r12
mov rdi, rsp
mov rbx, r12
=== 3496
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov r15, rbx
movzx rsi, sil
=== 3497
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x13dc960fc
add rdx, 0x24011c4; sub_carry
mov rdx, qword ptr [rdx]
add rdx, rsi
mov r14b, byte ptr [rdx]
movzx r14, r14b
shl r14, 0x38
sub r15, r14
movabs r12, 0xc3ae0b65
push r12
push 0x8d87025
push 0x1485253d
push 0x31c45173
push 0x33da40bc
add qword ptr [rsp + 0x20], 0x7c5b5f5b; sub
mov rdi, r15
=== 3498
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov r15, rdi
=== 3499
mov rdi, r15
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov bl, byte ptr [r10]
mov r10, 0xff
shl r10, 0x30
not r10
and rdi, r10
movzx r10, bl
shl r10, 0x30
or rdi, r10
=== 3500
mov rsi, rdi
push rsi
mov r14, rsp
mov r13, rdi
=== 3501
mov r10, r14
mov r13, r13
push r10
push 0x3eae6315
push 0x184f1c44
push 0x71e73f6
push 0x532d7836
=== 3502
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov rdi, r13
movzx rsi, sil
=== 3503
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xe3c05cea
add r15, 0x5c4915d6; sub_carry
mov r15, qword ptr [r15 + 0x6d8]
add r15, rsi
mov r10b, byte ptr [r15]
movzx r10, r10b
shl r10, 8
sub rdi, r10
movabs rbp, 0x10e140e0e
push rbp
push 0x15b707ab
push 0x6444ef6
push 0x1c414fa9
push 0x15c72bf0
add qword ptr [rsp + 0x20], 0x31f55cb2; sub
mov rsi, rdi
=== 3504
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1752
add rsp, 1752
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov r14, rsi
=== 3505
mov r12, r14
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov bpl, byte ptr [rdx]
mov r12b, bpl
=== 3506
mov r15, r12
push r15
mov rbx, rsp
mov rsi, r12
=== 3507
mov rbx, rbx
mov r15, rsi
push rbx
push 0x63a44e72
push 0x24be065c
push 0x3fa66da8
push 0x4c206114
=== 3508
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
mov rdi, r15
movzx rsi, sil
=== 3509
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x10c051707
add r10, 0x34045bb9; sub_carry
mov r10, qword ptr [r10 + 0x220]
add r10, rsi
mov cl, byte ptr [r10]
movzx rcx, cl
shl rcx, 0x10
sub rdi, rcx
movabs r12, 0xcdac06a8
push r12
push 0x4f675482
push 0x2925622e
push 0x70e2794c
add qword ptr [rsp + 0x18], 0x725d6418; sub
mov r12, rdi
=== 3510
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 544
add rsp, 544
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov r13, r12
=== 3511
mov r12, r13
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r15
mov dil, byte ptr [r10]
mov r15, 0xff
shl r15, 8
not r15
and r12, r15
movzx r15, dil
shl r15, 8
or r12, r15
=== 3512
mov rbx, r12
push rbx
mov rbp, rsp
mov rsi, r12
=== 3513
mov r12, rbp
mov rbp, rsi
push r12
push 0x683a0876
push 0x231a58f6
push 0x738e4a58
push 0x1507948
=== 3514
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r10
mov r13, rbp
movzx r14, r14b
=== 3515
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x132e50492
add rbx, 0xd246e2e; sub_carry
mov rbx, qword ptr [rbx + 0x100]
add rbx, r14
mov dil, byte ptr [rbx]
movzx rdi, dil
shl rdi, 0x18
sub r13, rdi
mov r13, r13
movabs r15, 0xc45f0354
add r15, 0x7baa676c; sub
=== 3516
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 256
add rsp, 256
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov rsi, r13
=== 3517
mov r14, rsi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbp
mov r13b, byte ptr [r12]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and r14, rbx
movzx rbx, r13b
shl rbx, 0x10
or r14, rbx
=== 3518
mov r15, r14
push r15
mov r12, rsp
mov rbx, r14
=== 3519
mov r11, r12
mov rsi, rbx
push r11
push 0x7a17557a
push 0x52685382
push 0x497e5176
=== 3520
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov r14, rsi
movzx r15, r15b
=== 3521
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x11b753bee
add rdx, 0x249436d2; sub_carry
mov rdx, qword ptr [rdx + 0x5f8]
add rdx, r15
mov r14b, byte ptr [rdx]
movzx r14, r14b
shl r14, 0x20
sub r14, r14
mov r13, r14
movabs r14, 0xded5498b
add r14, 0x61342135; sub
=== 3522
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1528
add rsp, 1528
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rax
mov rbx, r13
=== 3523
mov rsi, rbx
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r15
mov cl, byte ptr [r10]
mov r12, 0xff
shl r12, 0x18
not r12
and rsi, r12
movzx r12, cl
shl r12, 0x18
or rsi, r12
=== 3524
mov r11, rsi
push r11
mov r12, rsp
mov rdi, rsi
=== 3525
mov rbx, r12
mov r12, rdi
push rbx
push 0x655a0d98
push 0x54e23752
push 0x56a92440
push 0x42ef7d68
=== 3526
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov r12, r12
movzx rsi, sil
=== 3527
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x125791694
add rdx, 0x1a905c2c; sub_carry
mov rdx, qword ptr [rdx + 0x10]
add rdx, rsi
mov r14b, byte ptr [rdx]
movzx r14, r14b
shl r14, 0x28
sub r12, r14
movabs rbp, 0x10a7d2dc8
push rbp
push 0x30246e79
push 0x3f436880
push 0x43fe13a3
push 0x708702d0
add qword ptr [rsp + 0x20], 0x358c3cf8; sub
mov rsi, r12
=== 3528
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 16
add rsp, 16
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbp
mov r15, rsi
=== 3529
mov r14, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov r8b, byte ptr [r9]
mov rbx, 0xff
shl rbx, 0x20
not rbx
and r14, rbx
movzx rbx, r8b
shl rbx, 0x20
or r14, rbx
=== 3530
mov rax, r14
push rax
mov r14, rsp
mov rbx, r14
=== 3531
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov rbp, rbx
movzx rbx, bl
=== 3532
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xc6283f23
add rdx, 0x79e1339d; sub_carry
mov rdx, qword ptr [rdx]
add rdx, rbx
mov r15b, byte ptr [rdx]
movzx r15, r15b
shl r15, 0x30
sub rbp, r15
movabs r11, 0x12dd53473
push r11
push 0xdb0717
push 0x7e4073bc
push 0x253a6a2a
push 0x784a5219
add qword ptr [rsp + 0x20], 0x1234364d; sub
mov rdi, rbp
=== 3533
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r11
mov rbx, rdi
=== 3534
mov rsi, rbx
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rdi
mov dl, byte ptr [r12]
mov rax, 0xff
shl rax, 0x28
not rax
and rsi, rax
movzx rax, dl
shl rax, 0x28
or rsi, rax
=== 3535
mov r12, rsi
push r12
mov r15, rsp
mov rbx, rsi
=== 3536
mov rdi, r15
mov rbx, rbx
push rdi
push 0x93d69b8
push 0x17fd1364
push 0x3dfb4974
push 0x7a15f5f
=== 3537
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov rdi, rbx
movzx r15, r15b
=== 3538
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rdi
movabs r15, 0x13f6166e7
add r15, 0xa803d9; sub
=== 3539
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov r13, rbx
=== 3540
mov rbp, r13
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rsi
mov r12b, byte ptr [rbx]
mov rbx, 0xff
shl rbx, 0x38
not rbx
and rbp, rbx
movzx rbx, r12b
shl rbx, 0x38
or rbp, rbx
=== 3541
mov rbp, rbp
push rbp
mov r15, rsp
mov r13, rbp
=== 3542
mov rdi, r15
mov rbx, r13
push rdi
push 0x7d850616
push 0x5ab92123
push 0x4b4a3a17
push 0x53921072
=== 3543
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov rbp, rbx
movzx rsi, sil
=== 3544
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rbp
movabs r12, 0x13d60ce74
add r12, 0x2a8744c
=== 3545
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov rdi, r14
=== 3546
mov r15, rdi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov cl, byte ptr [rbp]
mov r15b, cl
=== 3547
mov rbp, r15
push rbp
mov rbx, rsp
mov r14, r15
=== 3548
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov rbx, r14
movzx rdi, dil
=== 3549
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xe697dedb
push r15
push 0x254b39e0
push 0x26ff0d16
push 0x38383719
push 0x3cfa6ae1
add qword ptr [rsp + 0x20], 0x597163e5
mov rbp, rbx
=== 3550
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rcx
mov r13, rbp
=== 3551
mov rbx, r13
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov dil, byte ptr [r11]
mov r8, 0xff
shl r8, 0x10
not r8
and rbx, r8
movzx r8, dil
shl r8, 0x10
or rbx, r8
=== 3552
mov r13, rbx
push r13
mov r14, rsp
mov rdi, rbx
=== 3553
mov r8, r14
mov r14, rdi
push r8
push 0x20440f5c
push 0x4f4d0904
push 0x37e4209
=== 3554
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov rsi, r14
movzx r14, r14b
=== 3555
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xf6864051
push r15
push 0x70fc7051
push 0x6dd21426
push 0x77c23f43
push 0x1d126f98
add qword ptr [rsp + 0x20], 0x4983026f
mov r13, rsi
=== 3556
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rsi
mov rbp, r13
=== 3557
mov r13, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov al, byte ptr [rax]
mov rdx, 0xff
shl rdx, 0x20
not rdx
and r13, rdx
movzx rdx, al
shl rdx, 0x20
or r13, rdx
=== 3558
mov rbp, r13
push rbp
mov rbx, rsp
mov r12, r13
=== 3559
mov rdx, rbx
mov r13, r12
push rdx
push 0x4b3b1c28
push 0x7aa35ce8
push 0x38d05adf
=== 3560
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r8
mov rsi, r13
movzx r13, r13b
=== 3561
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x13f81c4a0
push rdx
push 0x42216b9f
push 0x4ea66b26
push 0x527a1bec
push 0x337929de
add qword ptr [rsp + 0x20], 0x877e20
mov r14, rsi
=== 3562
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov rbp, r14
=== 3563
mov r12, rbp
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rsi
mov al, byte ptr [r15]
mov r15, 0xff
shl r15, 0x28
not r15
and r12, r15
movzx r15, al
shl r15, 0x28
or r12, r15
=== 3564
mov rsi, r12
push rsi
mov rbp, rsp
mov rdi, r12
=== 3565
mov r12, rbp
mov rbp, rdi
push r12
push 0x762c7c78
push 0x592b70a6
push 0x14152bb1
=== 3566
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov rdi, rbp
movzx rbx, bl
=== 3567
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xfe703cd3
push rbx
push 0x73790467
push 0x64a574ff
push 0x1c5157bc
add qword ptr [rsp + 0x18], 0x419905ed
mov r13, rdi
=== 3568
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov r12, r13
=== 3569
mov r12, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r13
mov r10b, byte ptr [rcx]
mov rbp, 0xff
shl rbp, 0x30
not rbp
and r12, rbp
movzx rbp, r10b
shl rbp, 0x30
or r12, rbp
=== 3570
mov r13, r12
push r13
mov r15, rsp
mov rbx, r12
=== 3571
mov rbx, r15
mov r14, rbx
push rbx
push 0x2f4947ec
push 0x32342e63
push 0x2a680155
=== 3572
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdi
mov rsi, r14
movzx r14, r14b
=== 3573
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xea16eed2
push rdi
push 0x79a70037
push 0x7a6c490d
push 0x7cad4f8a
add qword ptr [rsp + 0x18], 0x55f253ee
mov r12, rsi
=== 3574
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov rdi, r12
=== 3575
mov r13, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbp
mov r11b, byte ptr [rax]
mov rcx, 0xff
shl rcx, 0x38
not rcx
and r13, rcx
movzx rcx, r11b
shl rcx, 0x38
or r13, rcx
=== 3576
mov rbx, r13
movabs r12, 0xebdba5d0
add r12, 0x54246c20
test rbx, rbx
lea r13, [rip - 0x36ae24]
cmovne r13, r12
jmp r13
=== 3577
movabs r10, 0xf6b29592
push r10
push 0x1ee50068
push 0x1207b8f
push 0x5e6b11ef
add qword ptr [rsp + 0x18], 0x49d72356; input
=== 3578
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 30
add rsp, 30
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbx
movzx r14, r14b
=== 3579
mov rax, r14
mov r10, 0xffffffff9e743052
add r10, 0x625d1eec
push r10
mul qword ptr [rsp]
mov rdi, rax
=== 3580
mov rsi, rdi
push rsi
mov rdi, rsp
mov r15, rdi
=== 3581
mov r12, rdi
mov rsi, r15
push r12
push 0x41ae3831
push 0x1da02fcd
push 0x79eb63c4
=== 3582
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov r14, rsi
movzx r13, r13b
=== 3583
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r14
movabs r15, 0xde092d9a
add r15, 0x62001d26; xor
=== 3584
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 728
add rsp, 728
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r14
mov rsi, r12
=== 3585
mov rbp, rsi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbx
mov dl, byte ptr [rsi]
mov bpl, dl
=== 3586
mov r13, rbp
push r13
mov rbx, rsp
mov r14, rbp
=== 3587
mov rsi, rbx
mov r13, r14
push rsi
push 0x250264ae
push 0x4397033d
push 0x2bf40753
push 0x10942990
=== 3588
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov rbp, r13
movzx r12, r12b
=== 3589
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rbp
movabs rsi, 0x11a26d08b
add rsi, 0x25e27a35; xor
=== 3590
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 264
add rsp, 264
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdi
mov rsi, r15
=== 3591
mov rbp, rsi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r14
mov r15b, byte ptr [rsi]
mov r9, 0xff
shl r9, 8
not r9
and rbp, r9
movzx r9, r15b
shl r9, 8
or rbp, r9
=== 3592
mov rax, rbp
push rax
mov r15, rsp
mov r12, rbp
=== 3593
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r8
mov r15, r12
movzx rbp, bpl
=== 3594
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r15
movabs rbx, 0xd8bcd5d4
add rbx, 0x674c74ec; xor
=== 3595
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 864
add rsp, 864
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov rsi, r13
=== 3596
mov rbx, rsi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r12
mov r10b, byte ptr [r11]
mov r13, 0xff
shl r13, 0x10
not r13
and rbx, r13
movzx r13, r10b
shl r13, 0x10
or rbx, r13
=== 3597
mov r11, rbx
push r11
mov r13, rsp
mov r14, rbx
=== 3598
mov r15, r13
mov rbx, r14
push r15
push 0x593212c0
push 0x1e204b4c
push 0x1a8b7def
=== 3599
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov rdi, rbx
movzx r14, r14b
=== 3600
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x11a9e0dea
push rax
push 0x5fd73d85
push 0x31af586f
push 0x1f4177c3
add qword ptr [rsp + 0x18], 0x256b3cd6; xor
mov r14, rdi
=== 3601
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1280
add rsp, 1280
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r15
mov rbp, r14
=== 3602
mov rbx, rbp
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r14
mov dil, byte ptr [r13]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and rbx, rbp
movzx rbp, dil
shl rbp, 0x18
or rbx, rbp
=== 3603
mov r10, rbx
push r10
mov rbp, rsp
mov r15, rbx
=== 3604
mov rsi, rbp
mov r13, r15
push rsi
push 0x4f16c15
push 0x71f86486
push 0x19e80504
push 0x6af96e49
=== 3605
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov rsi, r13
movzx r14, r14b
=== 3606
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xf68bfe50
push r8
push 0x70de609c
push 0x214b7de7
push 0x71980bd2
push 0x1ccd1702
add qword ptr [rsp + 0x20], 0x497d4c70; xor
mov r13, rsi
=== 3607
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r15
mov rdi, r13
=== 3608
mov r14, rdi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov r10b, byte ptr [r10]
mov r12, 0xff
shl r12, 0x38
not r12
and r14, r12
movzx r12, r10b
shl r12, 0x38
or r14, r12
=== 3609
mov rbx, r14
movabs r12, 0xd964456a
add r12, 0x6725737e; input
=== 3610
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 26
add rsp, 26
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov r15, rbx
movzx r14, r14b
=== 3611
mov rax, r14
mov rdi, 0xfffffffffcb3e8b3
add rdi, 0x412040c
push rdi
mov r15, r15
mul qword ptr [rsp]
mov rsi, rax
=== 3612
mov r14, r15
sub r14, rsi
=== 3613
mov r12, r14
push r12
mov rsi, rsp
mov r12, r14
=== 3614
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbp
mov rdi, r12
movzx r12, r12b
=== 3615
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x122ca2807
add r10, 0x1d3f3ab9; add_carry
mov r10, qword ptr [r10 + 0x600]
add r10, r12
mov sil, byte ptr [r10]
movzx rsi, sil
shl rsi, 8
add rdi, rsi
mov rsi, rdi
movabs r13, 0x10c27db64
add r13, 0x33e17f5c; add
=== 3616
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1536
add rsp, 1536
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rax
mov rsi, rsi
=== 3617
mov rdi, rsi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov r11b, byte ptr [rax]
mov dil, r11b
=== 3618
mov rdi, rdi
push rdi
mov r13, rsp
mov rsi, rdi
=== 3619
mov rax, r13
mov r13, rsi
push rax
push 0x51152ff6
push 0x11cd29cf
push 0xccb5001
=== 3620
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov r15, r13
movzx rbx, bl
=== 3621
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x1290e03a4
add rdi, 0x16fb5f1c; add_carry
mov rdi, qword ptr [rdi + 0x628]
add rdi, rbx
mov dil, byte ptr [rdi]
movzx rdi, dil
shl rdi, 0x10
add r15, rdi
movabs r15, 0xce5eebde
push r15
push 0x5f28347f
push 0x4ef447a5
push 0x7ae24826
add qword ptr [rsp + 0x18], 0x71aa6ee2; add
mov r14, r15
=== 3622
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1576
add rsp, 1576
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov r15, r14
=== 3623
mov rbp, r15
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rdi
mov r10b, byte ptr [rdx]
mov rdi, 0xff
shl rdi, 8
not rdi
and rbp, rdi
movzx rdi, r10b
shl rdi, 8
or rbp, rdi
=== 3624
mov r15, rbp
push r15
mov r15, rsp
mov rbx, rbp
=== 3625
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r12
mov r14, rbx
movzx rbx, bl
=== 3626
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xf29e0d35
add r11, 0x4d6b558b; add_carry
mov r11, qword ptr [r11 + 0x4b8]
add r11, rbx
mov cl, byte ptr [r11]
movzx rcx, cl
shl rcx, 0x18
add r14, rcx
movabs rbx, 0xec73586c
push rbx
push 0x5d0f7111
push 0x6c0c2335
push 0x62ca52a1
add qword ptr [rsp + 0x18], 0x53960254; add
mov rsi, r14
=== 3627
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1208
add rsp, 1208
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r14
mov r15, rsi
=== 3628
mov rsi, r15
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov r15b, byte ptr [r13]
mov r11, 0xff
shl r11, 0x10
not r11
and rsi, r11
movzx r11, r15b
shl r11, 0x10
or rsi, r11
=== 3629
mov r10, rsi
push r10
mov rdi, rsp
mov r13, rsi
=== 3630
mov rbx, rdi
mov rsi, r13
push rbx
push 0x2eb10c3d
push 0x5f941e2f
push 0x9d6e74
=== 3631
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov rdi, rsi
movzx r14, r14b
=== 3632
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x13735f17a
add r10, 0x8d37146; add_carry
mov r10, qword ptr [r10 + 0x588]
add r10, r14
mov r11b, byte ptr [r10]
movzx r11, r11b
shl r11, 0x20
add rdi, r11
mov r15, rdi
movabs r14, 0x13aeade53
add r14, 0x51e7c6d; add
=== 3633
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1416
add rsp, 1416
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov rbp, r15
=== 3634
mov rsi, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r15
mov bl, byte ptr [r8]
mov r10, 0xff
shl r10, 0x18
not r10
and rsi, r10
movzx r10, bl
shl r10, 0x18
or rsi, r10
=== 3635
mov rdx, rsi
push rdx
mov rdi, rsp
mov r15, rsi
=== 3636
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbp
mov r13, r15
movzx rdi, dil
=== 3637
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xdbb54296
add rdx, 0x6454202a; add_carry
mov rdx, qword ptr [rdx]
add rdx, rdi
mov r13b, byte ptr [rdx]
movzx r13, r13b
shl r13, 0x28
add r13, r13
movabs rbx, 0xfa4c3791
push rbx
push 0x27330c3d
push 0x583e6025
push 0x7f6405d3
add qword ptr [rsp + 0x18], 0x45bd232f; add
mov rbp, r13
=== 3638
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdi
mov rbp, rbp
=== 3639
mov rbp, rbp
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r13
mov al, byte ptr [rbx]
mov r12, 0xff
shl r12, 0x20
not r12
and rbp, r12
movzx r12, al
shl r12, 0x20
or rbp, r12
=== 3640
mov r15, rbp
push r15
mov r14, rsp
mov r15, rbp
=== 3641
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov r13, r15
movzx rsi, sil
=== 3642
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r13
movabs rbx, 0xe2652b5f
add rbx, 0x5da42f61; add
=== 3643
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rax
mov rsi, rbp
=== 3644
mov rdi, rsi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov dl, byte ptr [r10]
mov r14, 0xff
shl r14, 0x38
not r14
and rdi, r14
movzx r14, dl
shl r14, 0x38
or rdi, r14
=== 3645
mov rdi, rdi
movabs rbx, 0xe7604b72
add rbx, 0x59296d76; input
=== 3646
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov r12, rdi
movzx r13, r13b
=== 3647
mov rax, r13
mov rsi, 0xffffffff8b9fcff2
add rsi, 0x747a2faa
push rsi
mov rbx, r12
mul qword ptr [rsp]
mov rbp, rax
=== 3648
mov rsi, rbx
xor rsi, rbp
=== 3649
mov rdi, rsi
push rdi
mov rbx, rsp
mov r12, rsi
=== 3650
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rcx
mov r14, r12
movzx r13, r13b
=== 3651
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r14
movabs rbp, 0x12e102055
add rbp, 0x11f92a6b; xor
=== 3652
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 864
add rsp, 864
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rax
mov r12, r12
=== 3653
mov rsi, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rdi
mov r9b, byte ptr [r13]
mov sil, r9b
=== 3654
mov r11, rsi
push r11
mov rdi, rsp
mov r14, rsi
=== 3655
mov r13, rdi
mov r15, r14
push r13
push 0x1f332faa
push 0x58723f9f
push 0x1450a23
=== 3656
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov r14, r15
movzx r15, r15b
=== 3657
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r14
movabs r14, 0xddd0ccde
add r14, 0x62387de2; xor
=== 3658
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1664
add rsp, 1664
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r15
mov rbp, rsi
=== 3659
mov rbx, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov r12b, byte ptr [rax]
mov r15, 0xff
shl r15, 8
not r15
and rbx, r15
movzx r15, r12b
shl r15, 8
or rbx, r15
=== 3660
mov rbx, rbx
push rbx
mov rbp, rsp
mov r12, rbx
=== 3661
mov rax, rbp
mov rdi, r12
push rax
push 0x436f4184
push 0x6a865b5a
push 0x1c056867
push 0x63112afe
=== 3662
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r9
mov r13, rdi
movzx rdi, dil
=== 3663
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x108063809
push r10
push 0x2d2b6d48
push 0x746520de
push 0x357853de
add qword ptr [rsp + 0x18], 0x380312b7; xor
mov rbx, r13
=== 3664
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1848
add rsp, 1848
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov r15, rbx
=== 3665
mov rsi, r15
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov r12b, byte ptr [r10]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and rsi, rbp
movzx rbp, r12b
shl rbp, 0x10
or rsi, rbp
=== 3666
mov r12, rsi
push r12
mov r15, rsp
mov rsi, rsi
=== 3667
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov rdi, rsi
movzx rbx, bl
=== 3668
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rdi
movabs rbx, 0x12e7c08f4
add rbx, 0x118d41cc; xor
=== 3669
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 816
add rsp, 816
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov r12, rsi
=== 3670
mov r12, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov r14b, byte ptr [rdx]
mov rax, 0xff
shl rax, 0x18
not rax
and r12, rax
movzx rax, r14b
shl rax, 0x18
or r12, rax
=== 3671
mov rdi, r12
push rdi
mov r12, rsp
mov rdi, r12
=== 3672
mov rcx, r12
mov r15, rdi
push rcx
push 0x6471206
push 0x57ae6361
push 0x5c026c6a
push 0x32b5291c
=== 3673
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov r14, r15
movzx r13, r13b
=== 3674
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xf698f3fe
push rbp
push 0x17c96822
push 0x245b55c9
push 0x2ebe10a4
add qword ptr [rsp + 0x18], 0x497056c2; xor
mov rsi, r14
=== 3675
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r15
mov r12, rsi
=== 3676
mov rbp, r12
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rsi
mov r15b, byte ptr [rdi]
mov rcx, 0xff
shl rcx, 0x20
not rcx
and rbp, rcx
movzx rcx, r15b
shl rcx, 0x20
or rbp, rcx
=== 3677
mov rsi, rbp
push rsi
mov rsi, rsp
mov rdi, rbp
=== 3678
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r15
mov r12, rdi
movzx rsi, sil
=== 3679
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r12
movabs rbp, 0x12fc9ccfd
add rbp, 0x103f7dc3; xor
=== 3680
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov r13, r15
=== 3681
mov rbp, r13
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rsi
mov r8b, byte ptr [rdi]
mov r9, 0xff
shl r9, 0x28
not r9
and rbp, r9
movzx r9, r8b
shl r9, 0x28
or rbp, r9
=== 3682
mov r15, rbp
movabs r13, 0xddf8b8a0
add r13, 0x62910048; input
=== 3683
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov rdi, r15
movzx rbx, bl
=== 3684
mov rax, rbx
mov rbp, 0xffffffff88c0d736
add rbp, 0x78225155
push rbp
mov rbx, rdi
mul qword ptr [rsp]
mov rdi, rax
=== 3685
mov rbx, rbx
add rbx, rdi
=== 3686
mov rsi, rbx
push rsi
mov rbx, rsp
mov r14, rbx
=== 3687
mov r15, rbx
mov rdi, r14
push r15
push 0x32f267b
push 0x4d885b16
push 0x48ef7b30
push 0x7c3278a3
=== 3688
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r14
mov rbp, rdi
movzx rdi, dil
=== 3689
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rbp
movabs rbp, 0x13a36e4d7
add rbp, 0x5d265e9; xor
=== 3690
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 296
add rsp, 296
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov r14, rsi
=== 3691
mov r14, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov dil, byte ptr [r9]
mov r14b, dil
=== 3692
mov rsi, r14
push rsi
mov rdi, rsp
mov r14, r14
=== 3693
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r10
mov r13, r14
movzx rbp, bpl
=== 3694
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, r13
movabs r14, 0x10816fd13
add r14, 0x37f24dad; xor
=== 3695
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 536
add rsp, 536
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbx
mov r12, rdi
=== 3696
mov rbx, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov r8b, byte ptr [rdx]
mov rsi, 0xff
shl rsi, 8
not rsi
and rbx, rsi
movzx rsi, r8b
shl rsi, 8
or rbx, rsi
=== 3697
mov rsi, rbx
push rsi
mov rbp, rsp
mov r15, rbx
=== 3698
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
mov r15, r15
movzx rbx, bl
=== 3699
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x1344721ae
push r10
push 0x31cd43cc
push 0x6c28421d
push 0x6b9a5f47
add qword ptr [rsp + 0x18], 0xbc22912; xor
mov r13, r15
=== 3700
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1400
add rsp, 1400
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r14
mov rdi, r13
=== 3701
mov rdi, rdi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov r12b, byte ptr [r10]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and rdi, rbp
movzx rbp, r12b
shl rbp, 0x10
or rdi, rbp
=== 3702
mov r13, rdi
push r13
mov r14, rsp
mov rsi, rdi
=== 3703
mov r11, r14
mov rdi, rsi
push r11
push 0x54e248d3
push 0x3ece0ed4
push 0x624f6ce2
=== 3704
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov rbx, rdi
movzx r14, r14b
=== 3705
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rbx
movabs rbx, 0xc037cc36
add rbx, 0x7fd17e8a; xor
=== 3706
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1024
add rsp, 1024
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rcx
mov rdi, r14
=== 3707
mov rbx, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov r12b, byte ptr [rdx]
mov r13, 0xff
shl r13, 0x18
not r13
and rbx, r13
movzx r13, r12b
shl r13, 0x18
or rbx, r13
=== 3708
mov r13, rbx
push r13
mov r13, rsp
mov r12, rbx
=== 3709
mov r8, r13
mov r13, r12
push r8
push 0x2f1c4d64
push 0x398224d2
push 0x778206a9
push 0x760777b5
=== 3710
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov rbx, r13
movzx rdi, dil
=== 3711
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rbx
movabs r14, 0x105323a54
add r14, 0x3ad7106c; xor
=== 3712
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdx
mov r14, rsi
=== 3713
mov r13, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov dil, byte ptr [r10]
mov rbp, 0xff
shl rbp, 0x20
not rbp
and r13, rbp
movzx rbp, dil
shl rbp, 0x20
or r13, rbp
=== 3714
mov rdx, r13
push rdx
mov rbp, rsp
mov rsi, r13
=== 3715
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov r13, rsi
movzx r12, r12b
=== 3716
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x118481196
push r10
push 0x346c0658
push 0x330331da
push 0x224851db
push 0x732e459d
add qword ptr [rsp + 0x20], 0x27c1392a; xor
mov r12, r13
=== 3717
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov r15, r12
=== 3718
mov r14, r15
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rdi
mov r10b, byte ptr [rdx]
mov r9, 0xff
shl r9, 0x28
not r9
and r14, r9
movzx r9, r10b
shl r9, 0x28
or r14, r9
=== 3719
mov rdi, r14
push rdi
mov rsi, rsp
mov r12, r14
=== 3720
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbp
mov r15, r12
movzx rsi, sil
=== 3721
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xc2de172e
push rdi
push 0x28e942d5
push 0x61e53629
push 0x3b1d6e6a
push 0x34c31bbd
add qword ptr [rsp + 0x20], 0x7d2b3392; xor
mov r14, r15
=== 3722
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov r14, r14
=== 3723
mov rbp, r14
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r15
mov dil, byte ptr [r12]
mov rbx, 0xff
shl rbx, 0x30
not rbx
and rbp, rbx
movzx rbx, dil
shl rbx, 0x30
or rbp, rbx
=== 3724
mov rbp, rbp
push rbp
mov r15, rsp
mov r12, rbp
=== 3725
mov rbp, r15
mov rsi, r12
push rbp
push 0x7373aa2
push 0x6f2a1d04
push 0x55cb6b83
push 0x45f561c5
=== 3726
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov rbp, rsi
movzx r14, r14b
=== 3727
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x10ad9d11e
push rbx
push 0x26a641bd
push 0x273c3fa1
push 0x33957bb6
push 0x20e50ebd
add qword ptr [rsp + 0x20], 0x352f79a2; xor
mov rsi, rbp
=== 3728
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov r13, rsi
=== 3729
mov rsi, r13
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r12
mov dl, byte ptr [r11]
mov rdi, 0xff
shl rdi, 0x38
not rdi
and rsi, rdi
movzx rdi, dl
shl rdi, 0x38
or rsi, rdi
=== 3730
movabs rbp, 0x1301e6108
push rbp
push 0x465a7c71
push 0x7a0011e0
push 0x25c64e35
add qword ptr [rsp + 0x18], 0x106b57e0; input
mov rdi, rsi
=== 3731
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 10
add rsp, 10
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
mov r14, rdi
movzx rsi, sil
=== 3732
mov rax, rsi
mov r14, 0xffffffffc225691c
add r14, 0x3eaa4870
push r14
mov r14, r14
mul qword ptr [rsp]
mov r15, rax
=== 3733
mov rsi, r14
xor rsi, r15
=== 3734
mov r8, rsi
push r8
mov rsi, rsp
mov rbx, rsi
=== 3735
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov rbp, rbx
movzx r15, r15b
=== 3736
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xe3c259a9
add rcx, 0x5c471917; sub_carry
mov rcx, qword ptr [rcx + 0x498]
add rcx, r15
mov r11b, byte ptr [rcx]
movzx r11, r11b
shl r11, 8
sub rbp, r11
mov r14, rbp
movabs rbp, 0x121a00467
add rbp, 0x1e696659; sub
=== 3737
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1176
add rsp, 1176
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r12
mov r12, r14
=== 3738
mov rbx, r12
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov sil, byte ptr [r9]
mov bl, sil
=== 3739
mov r15, rbx
push r15
mov r12, rsp
mov rbx, rbx
=== 3740
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r8
mov rsi, rbx
movzx rbx, bl
=== 3741
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xc41c6c13
add rcx, 0x7bed06ad; sub_carry
mov rcx, qword ptr [rcx + 0x418]
add rcx, rbx
mov bpl, byte ptr [rcx]
movzx rbp, bpl
shl rbp, 0x10
sub rsi, rbp
movabs rbp, 0x119a5013c
push rbp
push 0x76b35cb1
push 0x3cdf26e3
push 0x5f8063b6
push 0x981b63
add qword ptr [rsp + 0x20], 0x26646984; sub
mov r15, rsi
=== 3742
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1048
add rsp, 1048
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov r15, r15
=== 3743
mov r14, r15
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r14
mov r12b, byte ptr [rdx]
mov rdx, 0xff
shl rdx, 8
not rdx
and r14, rdx
movzx rdx, r12b
shl rdx, 8
or r14, rdx
=== 3744
mov r10, r14
push r10
mov r12, rsp
mov r13, r14
=== 3745
mov rdi, r12
mov rbp, r13
push rdi
push 0x6d2f4560
push 0x2dec205d
push 0x303f5b24
=== 3746
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov r15, rbp
movzx rbx, bl
=== 3747
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x112cb59dd
add rsi, 0x2d3e18e3; sub_carry
mov rsi, qword ptr [rsi + 0x1e0]
add rsi, rbx
mov dl, byte ptr [rsi]
movzx rdx, dl
shl rdx, 0x18
sub r15, rdx
mov r15, r15
movabs rbx, 0x10f61531a
add rbx, 0x30a817a6; sub
=== 3748
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 480
add rsp, 480
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov r12, r15
=== 3749
mov rbx, r12
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov al, byte ptr [r12]
mov r8, 0xff
shl r8, 0x10
not r8
and rbx, r8
movzx r8, al
shl r8, 0x10
or rbx, r8
=== 3750
mov rax, rbx
push rax
mov rdi, rsp
mov rbx, rbx
=== 3751
mov r14, rdi
mov r13, rbx
push r14
push 0x3e37f8c
push 0x6ff742d9
push 0x432600ce
=== 3752
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r10
mov r13, r13
movzx r14, r14b
=== 3753
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xf0c00dfb
add r14, 0x4f4964c5; sub_carry
mov r14, qword ptr [r14 + 0x708]
add r14, r14
mov r13b, byte ptr [r14]
movzx r13, r13b
shl r13, 0x20
sub r13, r13
movabs rbp, 0x12ccb584f
push rbp
push 0x23b81659
push 0x34c201fa
push 0x414f51ae
push 0x1d41537d
add qword ptr [rsp + 0x20], 0x133e1271; sub
mov rdi, r13
=== 3754
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1800
add rsp, 1800
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov r14, rdi
=== 3755
mov r12, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbp
mov r10b, byte ptr [r15]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and r12, rdi
movzx rdi, r10b
shl rdi, 0x18
or r12, rdi
=== 3756
mov r11, r12
push r11
mov r14, rsp
mov r13, r12
=== 3757
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r14
mov rdi, r13
movzx r15, r15b
=== 3758
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x1059b7172
add r15, 0x3a6e014e; sub_carry
mov r15, qword ptr [r15]
add r15, r15
mov r8b, byte ptr [r15]
movzx r8, r8b
shl r8, 0x28
sub rdi, r8
movabs r13, 0xc73b5b77
push r13
push 0x2fac0a3c
push 0x6a962724
push 0x4fad3f1b
push 0xcb64773
add qword ptr [rsp + 0x20], 0x78ce0f49; sub
mov r13, rdi
=== 3759
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r10
mov rdi, r13
=== 3760
mov rsi, rdi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r12
mov r13b, byte ptr [r14]
mov rcx, 0xff
shl rcx, 0x20
not rcx
and rsi, rcx
movzx rcx, r13b
shl rcx, 0x20
or rsi, rcx
=== 3761
mov rbp, rsi
push rbp
mov rbx, rsp
mov r12, rsi
=== 3762
mov r10, rbx
mov r13, r12
push r10
push 0x339301e2
push 0x45a606ce
push 0x71244b37
=== 3763
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rcx
mov r12, r13
movzx r13, r13b
=== 3764
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xe7a7392e
add r14, 0x58623992; sub_carry
mov r14, qword ptr [r14]
add r14, r13
mov bl, byte ptr [r14]
movzx rbx, bl
shl rbx, 0x38
sub r12, rbx
movabs r13, 0xc7024871
push r13
push 0x23803c87
push 0x7dfa00d8
push 0x8b12348
add qword ptr [rsp + 0x18], 0x7907224f; sub
mov r14, r12
=== 3765
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbx
mov r15, r14
=== 3766
mov rdi, r15
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r12
mov bl, byte ptr [r11]
mov r15, 0xff
shl r15, 0x30
not r15
and rdi, r15
movzx r15, bl
shl r15, 0x30
or rdi, r15
=== 3767
mov rbp, rdi
push rbp
mov rdi, rsp
mov rbp, rdi
=== 3768
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov r15, rbp
movzx r14, r14b
=== 3769
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x123a21e19
push rdx
push 0x60e54c8b
push 0x8fc6cbb
push 0x2985659b
push 0x6e751235
add qword ptr [rsp + 0x20], 0x1c674ca7; sub
mov rdi, r15
=== 3770
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r12
mov r13, rdi
=== 3771
mov rbx, r13
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov dl, byte ptr [rcx]
mov rax, 0xff
shl rax, 0x38
not rax
and rbx, rax
movzx rax, dl
shl rax, 0x38
or rbx, rax
=== 3772
mov rsi, rbx
movabs rdi, 0xff9c5ada
add rdi, 0x40ed5e0e; input
=== 3773
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 18
add rsp, 18
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov rsi, rsi
movzx r13, r13b
=== 3774
mov rax, r13
mov r12, 0xfffffffff739e651
add r12, 0x9982294
push r12
mov rbx, rsi
mul qword ptr [rsp]
mov r13, rax
=== 3775
mov r15, rbx
xor r15, r13
=== 3776
mov r10, r15
push r10
mov r12, rsp
mov rbp, r15
=== 3777
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov r14, rbp
movzx rbx, bl
=== 3778
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x13dc510a8
add rbp, 0x2445218; add_carry
mov rbp, qword ptr [rbp + 0x288]
add rbp, rbx
mov sil, byte ptr [rbp]
movzx rsi, sil
shl rsi, 8
add r14, rsi
movabs r8, 0x100cc0c5d
push r8
push 0x7a0a387c
push 0x7b3e3b70
push 0xa972d44
add qword ptr [rsp + 0x18], 0x3f3d4e63; add
mov r12, r14
=== 3779
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 648
add rsp, 648
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r14
mov rdi, r12
=== 3780
mov rbp, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rsi
mov r8b, byte ptr [r8]
mov bpl, r8b
=== 3781
mov rdx, rbp
push rdx
mov rbx, rsp
mov r14, rbp
=== 3782
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov r12, r14
movzx rbx, bl
=== 3783
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xcef359f5
add r10, 0x711608cb; add_carry
mov r10, qword ptr [r10 + 0x158]
add r10, rbx
mov cl, byte ptr [r10]
movzx rcx, cl
shl rcx, 0x10
add r12, rcx
mov r14, r12
movabs rbx, 0x1280d1f4f
add rbx, 0x17fc3b71; add
=== 3784
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 344
add rsp, 344
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbp
mov r14, r14
=== 3785
mov r15, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov r10b, byte ptr [rax]
mov r12, 0xff
shl r12, 8
not r12
and r15, r12
movzx r12, r10b
shl r12, 8
or r15, r12
=== 3786
mov rax, r15
push rax
mov rbp, rsp
mov rdi, r15
=== 3787
mov rdi, rbp
mov r14, rdi
push rdi
push 0x63e72193
push 0x5ab3332
push 0x4655039f
=== 3788
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rax
mov rbp, r14
movzx rbx, bl
=== 3789
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xc38ce706
add rbx, 0x7c7c7bba; add_carry
mov rbx, qword ptr [rbx + 0x368]
add rbx, rbx
mov r11b, byte ptr [rbx]
movzx r11, r11b
shl r11, 0x18
add rbp, r11
movabs rbp, 0xd36c46f6
push rbp
push 0x33c17d4b
push 0x48736912
push 0x1d325002
add qword ptr [rsp + 0x18], 0x6c9d13ca; add
mov r13, rbp
=== 3790
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 872
add rsp, 872
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov r15, r13
=== 3791
mov rsi, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov dl, byte ptr [rbp]
mov r11, 0xff
shl r11, 0x10
not r11
and rsi, r11
movzx r11, dl
shl r11, 0x10
or rsi, r11
=== 3792
mov r12, rsi
push r12
mov rsi, rsp
mov rbx, rsi
=== 3793
mov rsi, rsi
mov r14, rbx
push rsi
push 0x7f1d0851
push 0xa796ccc
push 0x37da2677
=== 3794
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r12
mov r13, r14
movzx r14, r14b
=== 3795
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xc3be620c
add rdi, 0x7c4b00b4; add_carry
mov rdi, qword ptr [rdi + 0x7c8]
add rdi, r14
mov r11b, byte ptr [rdi]
movzx r11, r11b
shl r11, 0x20
add r13, r11
movabs r14, 0x13f60498d
push r14
push 0x736b2c85
push 0x167753bb
push 0x7e8a5b2a
add qword ptr [rsp + 0x18], 0xa91133; add
mov r12, r13
=== 3796
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1992
add rsp, 1992
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r15
mov r14, r12
=== 3797
mov rbx, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov r10b, byte ptr [r15]
mov r9, 0xff
shl r9, 0x18
not r9
and rbx, r9
movzx r9, r10b
shl r9, 0x18
or rbx, r9
=== 3798
mov r14, rbx
push r14
mov rsi, rsp
mov r12, rbx
=== 3799
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r15
mov r13, r12
movzx rdi, dil
=== 3800
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xe6ba2a93
add r11, 0x594f382d; add_carry
mov r11, qword ptr [r11]
add r11, rdi
mov r15b, byte ptr [r11]
movzx r15, r15b
shl r15, 0x28
add r13, r15
mov r12, r13
movabs rdi, 0x1182ef3ea
add rdi, 0x27da66d6; add
=== 3801
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov rbx, r12
=== 3802
mov rsi, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r12
mov dl, byte ptr [rax]
mov r12, 0xff
shl r12, 0x20
not r12
and rsi, r12
movzx r12, dl
shl r12, 0x20
or rsi, r12
=== 3803
mov rbp, rsi
push rbp
mov rsi, rsp
mov rbx, rsi
=== 3804
mov rsi, rsi
mov r12, rbx
push rsi
push 0x10f41789
push 0x7de35940
push 0x13905d0
push 0x487f35f6
=== 3805
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r8
mov rdi, r12
movzx r12, r12b
=== 3806
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xd6231515
add rdi, 0x69e64dab; add_carry
mov rdi, qword ptr [rdi]
add rdi, r12
mov bpl, byte ptr [rdi]
movzx rbp, bpl
shl rbp, 0x30
add rdi, rbp
mov rbp, rdi
movabs r13, 0x1325cdb96
add r13, 0xdac7f2a; add
=== 3807
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rcx
mov r12, rbp
=== 3808
mov r12, r12
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rdi
mov dil, byte ptr [rdi]
mov r10, 0xff
shl r10, 0x28
not r10
and r12, r10
movzx r10, dil
shl r10, 0x28
or r12, r10
=== 3809
mov rdx, r12
push rdx
mov rdi, rsp
mov r14, r12
=== 3810
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov rdi, r14
movzx rsi, sil
=== 3811
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rdi
movabs r14, 0x100b74d68
add r14, 0x3f520d58; add
=== 3812
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r15
mov r12, rbx
=== 3813
mov r13, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov dil, byte ptr [r15]
mov r14, 0xff
shl r14, 0x38
not r14
and r13, r14
movzx r14, dil
shl r14, 0x38
or r13, r14
=== 3814
mov rdi, r13
movabs rbx, 0x108a0690d
add rbx, 0x37e94fdb; input
=== 3815
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 14
add rsp, 14
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov rbx, rdi
movzx r14, r14b
=== 3816
mov rax, r14
mov r9, 0xffffffff9c7cd7a8
add r9, 0x63c54c67
push r9
mov r13, rbx
mul qword ptr [rsp]
mov rdi, rax
=== 3817
mov r15, r13
add r15, rdi
=== 3818
mov rdi, r15
push rdi
mov rbp, rsp
mov rbx, r15
=== 3819
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov rdi, rbx
movzx rbx, bl
=== 3820
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xd7df3817
add rbx, 0x682a3aa9; sub_carry
mov rbx, qword ptr [rbx + 0x1e8]
add rbx, rbx
mov bl, byte ptr [rbx]
movzx rbx, bl
shl rbx, 8
sub rdi, rbx
movabs r14, 0x1148064b0
push r14
push 0x6ef86a3d
push 0x6c7173b2
push 0x61396e61
add qword ptr [rsp + 0x18], 0x2b890610; sub
mov rdi, rdi
=== 3821
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 488
add rsp, 488
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r8
mov r14, rdi
=== 3822
mov rbp, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov cl, byte ptr [r9]
mov bpl, cl
=== 3823
mov r13, rbp
push r13
mov r14, rsp
mov rbx, rbp
=== 3824
mov rdi, r14
mov r13, rbx
push rdi
push 0x4bd60306
push 0x5c9d5481
push 0x5f633ba6
push 0x7b916907
=== 3825
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r11
mov rbx, r13
movzx r13, r13b
=== 3826
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xdfec5b00
add rbp, 0x601d17c0; sub_carry
mov rbp, qword ptr [rbp + 0x138]
add rbp, r13
mov cl, byte ptr [rbp]
movzx rcx, cl
shl rcx, 0x10
sub rbx, rcx
movabs r14, 0x13afe4986
push r14
push 0x584b796a
push 0x6808755b
push 0x528d0d98
add qword ptr [rsp + 0x18], 0x50b213a; sub
mov rbp, rbx
=== 3827
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 312
add rsp, 312
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rcx
mov r14, rbp
=== 3828
mov r15, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rdi
mov sil, byte ptr [rdi]
mov rbx, 0xff
shl rbx, 8
not rbx
and r15, rbx
movzx rbx, sil
shl rbx, 8
or r15, rbx
=== 3829
mov r11, r15
push r11
mov r14, rsp
mov r13, r15
=== 3830
mov r15, r14
mov rdi, r13
push r15
push 0x4d2e3af1
push 0x4f232319
push 0x1ed70691
push 0x3c0d376c
=== 3831
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rcx
mov r13, rdi
movzx rdi, dil
=== 3832
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x10f430fff
add rbp, 0x30c662c1; sub_carry
mov rbp, qword ptr [rbp + 0x190]
add rbp, rdi
mov r10b, byte ptr [rbp]
movzx r10, r10b
shl r10, 0x18
sub r13, r10
mov r14, r13
movabs rbx, 0x1129d2e44
add rbx, 0x2d6c3c7c; sub
=== 3833
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 400
add rsp, 400
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r10
mov rsi, r14
=== 3834
mov r13, rsi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov dl, byte ptr [rcx]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r13, rdi
movzx rdi, dl
shl rdi, 0x10
or r13, rdi
=== 3835
mov r10, r13
push r10
mov rdi, rsp
mov r13, r13
=== 3836
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov r14, r13
movzx rbx, bl
=== 3837
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xe5546422
add r14, 0x5ab50e9e; sub_carry
mov r14, qword ptr [r14 + 0x438]
add r14, rbx
mov al, byte ptr [r14]
movzx rax, al
shl rax, 0x20
sub r14, rax
mov rdi, r14
movabs r15, 0xc83c62cd
add r15, 0x77cd07f3; sub
=== 3838
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1080
add rsp, 1080
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r14
mov rbx, rdi
=== 3839
mov rbx, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rsi
mov r15b, byte ptr [r8]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and rbx, rsi
movzx rsi, r15b
shl rsi, 0x18
or rbx, rsi
=== 3840
mov rbx, rbx
push rbx
mov rbx, rsp
mov rdi, rbx
=== 3841
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rax
mov rsi, rdi
movzx r15, r15b
=== 3842
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xd7333b0a
add rdx, 0x68d637b6; sub_carry
mov rdx, qword ptr [rdx]
add rdx, r15
mov al, byte ptr [rdx]
movzx rax, al
shl rax, 0x28
sub rsi, rax
mov rbx, rsi
movabs r12, 0xeb18654e
add r12, 0x54f10572; sub
=== 3843
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rbx, rbx
=== 3844
mov rsi, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov r10b, byte ptr [r9]
mov rdi, 0xff
shl rdi, 0x20
not rdi
and rsi, rdi
movzx rdi, r10b
shl rdi, 0x20
or rsi, rdi
=== 3845
mov r14, rsi
push r14
mov rbp, rsp
mov r12, rsi
=== 3846
mov rdi, rbp
mov r14, r12
push rdi
push 0x6b763c01
push 0x46195b67
push 0x76867625
=== 3847
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r10
mov rdi, r14
movzx r14, r14b
=== 3848
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x11fc5f784
add rdx, 0x20437b3c; sub_carry
mov rdx, qword ptr [rdx]
add rdx, r14
mov r12b, byte ptr [rdx]
movzx r12, r12b
shl r12, 0x30
sub rdi, r12
movabs rax, 0x12b25405b
push rax
push 0x4dfd1312
push 0x6be0718c
push 0x23666810
add qword ptr [rsp + 0x18], 0x14e42a65; sub
mov rdi, rdi
=== 3849
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r14
mov rbp, rdi
=== 3850
mov r15, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbx
mov sil, byte ptr [rdx]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and r15, rdx
movzx rdx, sil
shl rdx, 0x28
or r15, rdx
=== 3851
mov rbx, r15
push rbx
mov rbx, rsp
mov rbp, r15
=== 3852
mov rbp, rbx
mov rsi, rbp
push rbp
push 0x6c84256
push 0xf3c756e
push 0x48ce0383
push 0x6d8f54ee
=== 3853
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r13
mov rbx, rsi
movzx r14, r14b
=== 3854
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x110e63e7c
add rsi, 0x2f233444; sub_carry
mov rsi, qword ptr [rsi]
add rsi, r14
mov bpl, byte ptr [rsi]
movzx rbp, bpl
shl rbp, 0x38
sub rbx, rbp
mov rdi, rbx
movabs r12, 0x1284e34f8
add r12, 0x17bb35c8; sub
=== 3855
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rax
mov rbp, rdi
=== 3856
mov rbx, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbx
mov al, byte ptr [r12]
mov r11, 0xff
shl r11, 0x30
not r11
and rbx, r11
movzx r11, al
shl r11, 0x30
or rbx, r11
=== 3857
mov r11, rbx
push r11
mov rsi, rsp
mov r12, rbx
=== 3858
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r8
mov rbx, r12
movzx rbp, bpl
=== 3859
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xca35f0b4
push rbx
push 0x66fc1afb
push 0x61ae01ba
push 0x5ea26bf7
push 0x1aa25400
add qword ptr [rsp + 0x20], 0x75d37a0c; sub
mov r14, rbx
=== 3860
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov rbx, r14
=== 3861
mov rdi, rbx
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rsi
mov dl, byte ptr [rbx]
mov rbx, 0xff
shl rbx, 0x38
not rbx
and rdi, rbx
movzx rbx, dl
shl rbx, 0x38
or rdi, rbx
=== 3862
mov rbx, rdi
movabs rsi, 0x1288a4ced
add rsi, 0x17ff6bfb; input
=== 3863
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 22
add rsp, 22
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov rdi, rbx
movzx r13, r13b
=== 3864
mov rax, r13
mov r15, 0xfffffffff7fae16d
add r15, 0x8217f2b
push r15
mov r12, rdi
mul qword ptr [rsp]
mov r14, rax
=== 3865
mov r13, r12
sub r13, r14
=== 3866
mov rdi, r13
push rdi
mov rbp, rsp
mov rbx, r13
=== 3867
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov r15, rbx
movzx r13, r13b
=== 3868
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x118160d41
add rsi, 0x27f3657f; sub_carry
mov rsi, qword ptr [rsi + 0x2d0]
add rsi, r13
mov r8b, byte ptr [rsi]
movzx r8, r8b
shl r8, 8
sub r15, r8
mov r12, r15
movabs r14, 0x1287762a0
add r14, 0x17920820; sub
=== 3869
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 720
add rsp, 720
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rax
mov rdi, r12
=== 3870
mov r13, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov r10b, byte ptr [rax]
mov r13b, r10b
=== 3871
mov rsi, r13
push rsi
mov rbp, rsp
mov rdi, r13
=== 3872
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r11
mov r12, rdi
movzx r13, r13b
=== 3873
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x138b839bf
add r14, 0x7513901; sub_carry
mov r14, qword ptr [r14 + 0x2e0]
add r14, r13
mov dil, byte ptr [r14]
movzx rdi, dil
shl rdi, 0x10
sub r12, rdi
movabs rbp, 0x12b2858de
push rbp
push 0x71053532
push 0x17fe5d2d
push 0x2bf0f1d
push 0x5fa62809
add qword ptr [rsp + 0x20], 0x14e111e2; sub
mov r13, r12
=== 3874
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 736
add rsp, 736
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r11
mov r12, r13
=== 3875
mov r15, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r14
mov r14b, byte ptr [r13]
mov rax, 0xff
shl rax, 8
not rax
and r15, rax
movzx rax, r14b
shl rax, 8
or r15, rax
=== 3876
mov rsi, r15
push rsi
mov rbp, rsp
mov rsi, r15
=== 3877
mov rdi, rbp
mov r15, rsi
push rdi
push 0x5db2215f
push 0x6e077ad6
push 0x56ea31ca
push 0x39e565e
=== 3878
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov rsi, r15
movzx r15, r15b
=== 3879
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xe92e22bf
add r11, 0x56db5001; sub_carry
mov r11, qword ptr [r11 + 0x6a0]
add r11, r15
mov sil, byte ptr [r11]
movzx rsi, sil
shl rsi, 0x18
sub rsi, rsi
movabs rdx, 0xfced09fc
push rdx
push 0x98e25cb
push 0x27cc0005
push 0x8867da4
add qword ptr [rsp + 0x18], 0x431c60c4; sub
mov rbp, rsi
=== 3880
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1696
add rsp, 1696
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov rsi, rbp
=== 3881
mov rsi, rsi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbp
mov dil, byte ptr [r12]
mov rcx, 0xff
shl rcx, 0x10
not rcx
and rsi, rcx
movzx rcx, dil
shl rcx, 0x10
or rsi, rcx
=== 3882
mov rdx, rsi
push rdx
mov rsi, rsp
mov r14, rsi
=== 3883
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov r15, r14
movzx r12, r12b
=== 3884
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x11ad84a7c
add r15, 0x25312844; sub_carry
mov r15, qword ptr [r15 + 0x698]
add r15, r12
mov r13b, byte ptr [r15]
movzx r13, r13b
shl r13, 0x20
sub r15, r13
movabs r12, 0xc1ed00a0
push r12
push 0x1b323a4f
push 0x31497e44
push 0x4d537b3b
push 0x5391f32
add qword ptr [rsp + 0x20], 0x7e1c6a20; sub
mov rbp, r15
=== 3885
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1688
add rsp, 1688
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r15
mov rbx, rbp
=== 3886
mov rbx, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov al, byte ptr [r9]
mov r9, 0xff
shl r9, 0x18
not r9
and rbx, r9
movzx r9, al
shl r9, 0x18
or rbx, r9
=== 3887
mov rsi, rbx
push rsi
mov rbx, rsp
mov r13, rbx
=== 3888
mov r11, rbx
mov r14, r13
push r11
push 0x1aea6592
push 0x3ecf6d9a
push 0x537f4b15
=== 3889
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov r13, r14
movzx rdi, dil
=== 3890
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xdb8a6e29
add r10, 0x647f0497; sub_carry
mov r10, qword ptr [r10]
add r10, rdi
mov bl, byte ptr [r10]
movzx rbx, bl
shl rbx, 0x30
sub r13, rbx
mov rbx, r13
movabs r13, 0xc83df7b1
add r13, 0x77cb730f; sub
=== 3891
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov r15, rbx
=== 3892
mov r14, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov dil, byte ptr [rcx]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and r14, rdx
movzx rdx, dil
shl rdx, 0x28
or r14, rdx
=== 3893
mov r12, r14
push r12
mov r13, rsp
mov r14, r14
=== 3894
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov rsi, r14
movzx rbp, bpl
=== 3895
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rsi
movabs r13, 0xde910559
add r13, 0x61786567; sub
=== 3896
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov r15, rbx
=== 3897
mov rsi, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov dil, byte ptr [r9]
mov r14, 0xff
shl r14, 0x38
not r14
and rsi, r14
movzx r14, dil
shl r14, 0x38
or rsi, r14
=== 3898
mov rdx, rsi
push rdx
mov rbx, rsp
mov r14, rsi
=== 3899
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov r13, r14
movzx r12, r12b
=== 3900
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xe3000879
add r15, 0x5d096a47; sub_carry
mov r15, qword ptr [r15 + 0x2d8]
add r15, r12
mov r15b, byte ptr [r15]
movzx r15, r15b
shl r15, 8
sub r13, r15
movabs r8, 0x11c84f67b
push r8
push 0x79a5165
push 0xb150d5e
push 0x63080c59
push 0x79c760eb
add qword ptr [rsp + 0x20], 0x23847445; sub
mov r15, r13
=== 3901
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 728
add rsp, 728
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov rdi, r15
=== 3902
mov rdi, rdi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov r11b, byte ptr [r10]
mov dil, r11b
=== 3903
mov rbp, rdi
push rbp
mov r12, rsp
mov rdi, rdi
=== 3904
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r14
mov rdi, rdi
movzx rbp, bpl
=== 3905
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xeae859ea
add rdx, 0x552118d6; sub_carry
mov rdx, qword ptr [rdx + 0x3f0]
add rdx, rbp
mov r13b, byte ptr [rdx]
movzx r13, r13b
shl r13, 0x10
sub rdi, r13
movabs r14, 0xd9df1c58
push r14
push 0x611e7833
push 0x6e79087b
push 0x324060eb
add qword ptr [rsp + 0x18], 0x662a4e68; sub
mov r12, rdi
=== 3906
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1008
add rsp, 1008
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov r12, r12
=== 3907
mov r15, r12
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r15
mov dil, byte ptr [r12]
mov rbx, 0xff
shl rbx, 8
not rbx
and r15, rbx
movzx rbx, dil
shl rbx, 8
or r15, rbx
=== 3908
mov r8, r15
push r8
mov rsi, rsp
mov r13, r15
=== 3909
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r15
mov r12, r13
movzx rbp, bpl
=== 3910
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xd339132b
add rdx, 0x6cd05f95; sub_carry
mov rdx, qword ptr [rdx + 0x1e8]
add rdx, rbp
mov r8b, byte ptr [rdx]
movzx r8, r8b
shl r8, 0x18
sub r12, r8
movabs r12, 0xe4f5ee2e
push r12
push 0x51ec57c8
push 0x593827e6
push 0x4c606a33
add qword ptr [rsp + 0x18], 0x5b137c92; sub
mov r12, r12
=== 3911
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 488
add rsp, 488
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r13
mov rbp, r12
=== 3912
mov r12, rbp
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r14
mov r10b, byte ptr [r11]
mov r15, 0xff
shl r15, 0x10
not r15
and r12, r15
movzx r15, r10b
shl r15, 0x10
or r12, r15
=== 3913
mov r11, r12
push r11
mov rbx, rsp
mov rsi, r12
=== 3914
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov rdi, rsi
movzx r12, r12b
=== 3915
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x1331e2198
add r14, 0xceb5128; sub_carry
mov r14, qword ptr [r14 + 0x58]
add r14, r12
mov bl, byte ptr [r14]
movzx rbx, bl
shl rbx, 0x20
sub rdi, rbx
movabs r14, 0xf458f766
push r14
push 0x3646011b
push 0x470a2474
push 0x4ff71556
push 0x6f805b0d
add qword ptr [rsp + 0x20], 0x4bb0735a; sub
mov rbx, rdi
=== 3916
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 88
add rsp, 88
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r10
mov r13, rbx
=== 3917
mov rbp, r13
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov r8b, byte ptr [r11]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and rbp, rdx
movzx rdx, r8b
shl rdx, 0x18
or rbp, rdx
=== 3918
mov rdx, rbp
push rdx
mov rdi, rsp
mov r13, rbp
=== 3919
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rsi
mov rsi, r13
movzx r15, r15b
=== 3920
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xddb43280
add r11, 0x62554040; sub_carry
mov r11, qword ptr [r11]
add r11, r15
mov r11b, byte ptr [r11]
movzx r11, r11b
shl r11, 0x38
sub rsi, r11
mov r12, rsi
movabs r14, 0x119ce1adc
add r14, 0x263b4fe4; sub
=== 3921
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r15
mov rsi, r12
=== 3922
mov rdi, rsi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbx
mov cl, byte ptr [rbx]
mov r11, 0xff
shl r11, 0x30
not r11
and rdi, r11
movzx r11, cl
shl r11, 0x30
or rdi, r11
=== 3923
mov rsi, rdi
push rsi
mov r13, rsp
mov rsi, rdi
=== 3924
mov r13, r13
mov rbp, rsi
push r13
push 0x3ddf1d2f
push 0x7b773ab4
push 0x5b795795
push 0x4f7570f1
=== 3925
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r10
mov rdi, rbp
movzx rbp, bpl
=== 3926
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xe0033f4f
push rcx
push 0x29102c68
push 0x549f651c
push 0x31072e0f
add qword ptr [rsp + 0x18], 0x60061371; or
mov rbp, rdi
=== 3927
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r12
mov r15, rbp
=== 3928
mov r13, r15
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbp
mov r10b, byte ptr [r8]
mov r15, 0xff
shl r15, 8
not r15
and r13, r15
movzx r15, r10b
shl r15, 8
or r13, r15
=== 3929
mov rsi, r13
push rsi
mov rdi, rsp
mov r13, r13
=== 3930
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r14
mov r12, r13
movzx rdi, dil
=== 3931
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xf7294c8f
push r14
push 0x5062553b
push 0x18f965fa
push 0x2a2149d6
push 0x8da71bd
add qword ptr [rsp + 0x20], 0x48e00631; or
mov r13, r12
=== 3932
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov rbp, r13
=== 3933
mov r13, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rsi
mov sil, byte ptr [r10]
mov r9, 0xff
shl r9, 0x10
not r9
and r13, r9
movzx r9, sil
shl r9, 0x10
or r13, r9
=== 3934
mov rax, r13
push rax
mov r14, rsp
mov r15, r13
=== 3935
mov rax, r14
mov rbp, r15
push rax
push 0x437f4244
push 0xd056a6a
push 0x27875991
push 0x359851db
=== 3936
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov rbx, rbp
movzx r14, r14b
=== 3937
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x12afa38b3
push r12
push 0x568c7b88
push 0x79f1b64
push 0x6cea1d56
add qword ptr [rsp + 0x18], 0x150f1a0d; or
mov rbx, rbx
=== 3938
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r12
mov rbx, rbx
=== 3939
mov r13, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov cl, byte ptr [rax]
mov rbx, 0xff
shl rbx, 0x30
not rbx
and r13, rbx
movzx rbx, cl
shl rbx, 0x30
or r13, rbx
=== 3940
mov rdi, r13
movabs r13, 0xe18dc104
add r13, 0x5e7250ec
test rdi, rdi
lea r12, [rip - 0x3785de]
cmovne r12, r13
jmp r12
=== 3941
movabs r12, 0xe73b90ce
add r12, 0x594e281a; input
=== 3942
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 11
add rsp, 11
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
movzx rsi, sil
=== 3943
mov rax, rsi
mov rsi, 0xfffffffffe5b6370
add rsi, 0x1dc055c
push rsi
mul qword ptr [rsp]
mov r12, rax
=== 3944
mov r11, r12
push r11
mov r15, rsp
mov rsi, r12
=== 3945
mov rbp, r15
mov rbx, rsi
push rbp
push 0x317123cb
push 0x6545794c
push 0x30af54ec
=== 3946
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov rbp, rbx
movzx rsi, sil
=== 3947
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x10d47e22a
push rax
push 0x246f754d
push 0x635c64e7
push 0x3a8e6c16
push 0x65b69a4
add qword ptr [rsp + 0x20], 0x32c16896; xor
mov rbp, rbp
=== 3948
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 200
add rsp, 200
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdi
mov rsi, rbp
=== 3949
mov r13, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r13
mov dl, byte ptr [r8]
mov r13b, dl
=== 3950
mov rdx, r13
push rdx
mov rdi, rsp
mov r14, r13
=== 3951
mov r8, rdi
mov rbx, r14
push r8
push 0x68324031
push 0x5bf2646e
push 0x16ce15ee
=== 3952
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r13
mov rbx, rbx
movzx r15, r15b
=== 3953
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rbx
movabs rbx, 0x13965dae4
add rbx, 0x6a36fdc; xor
=== 3954
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 160
add rsp, 160
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rax
mov r14, r14
=== 3955
mov rdi, r14
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r12
mov sil, byte ptr [rbx]
mov r8, 0xff
shl r8, 8
not r8
and rdi, r8
movzx r8, sil
shl r8, 8
or rdi, r8
=== 3956
mov r13, rdi
push r13
mov rdi, rsp
mov rbp, rdi
=== 3957
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov rsi, rbp
movzx r14, r14b
=== 3958
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xd320e720
push r14
push 0x2fe64d57
push 0x49ab5294
push 0x3bb74c70
push 0x510011be
add qword ptr [rsp + 0x20], 0x6ce863a0; xor
mov rdi, rsi
=== 3959
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1968
add rsp, 1968
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r13
mov rbx, rdi
=== 3960
mov r12, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r14
mov r15b, byte ptr [rcx]
mov rdx, 0xff
shl rdx, 0x10
not rdx
and r12, rdx
movzx rdx, r15b
shl rdx, 0x10
or r12, rdx
=== 3961
mov r15, r12
push r15
mov r12, rsp
mov r14, r12
=== 3962
mov r15, r12
mov rbx, r14
push r15
push 0x2123537f
push 0x460565b2
push 0x146f37bd
=== 3963
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r10
mov rbp, rbx
movzx r14, r14b
=== 3964
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xde61019d
push rbp
push 0xdd3341f
push 0x25035ddd
push 0x2d647db5
push 0x5d07529e
add qword ptr [rsp + 0x20], 0x61a84923; xor
mov r12, rbp
=== 3965
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 200
add rsp, 200
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r9
mov r14, r12
=== 3966
mov r13, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov cl, byte ptr [rax]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and r13, rbp
movzx rbp, cl
shl rbp, 0x18
or r13, rbp
=== 3967
mov r8, r13
push r8
mov rbp, rsp
mov r12, r13
=== 3968
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov rdi, r12
movzx r12, r12b
=== 3969
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rdi
movabs rbx, 0x1005713f0
add rbx, 0x3fb236d0; xor
=== 3970
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbp
mov rdi, rdi
=== 3971
mov r12, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov bl, byte ptr [rdx]
mov r8, 0xff
shl r8, 0x28
not r8
and r12, r8
movzx r8, bl
shl r8, 0x28
or r12, r8
=== 3972
movabs rbx, 0x132a6547a
push rbx
push 0x68274c67
push 0x2aa33731
push 0x7a2a1851
push 0xf384f1b
add qword ptr [rsp + 0x20], 0xde3646e; input
mov r14, r12
=== 3973
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov rbp, r14
movzx r14, r14b
=== 3974
mov rax, r14
mov r10, 0xfffffffff1897b79
add r10, 0xeba429d
push r10
mov r12, rbp
mul qword ptr [rsp]
mov r15, rax
=== 3975
mov rbp, r12
sub rbp, r15
=== 3976
mov rsi, rbp
push rsi
mov rdi, rsp
mov rbp, rbp
=== 3977
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov r14, rbp
movzx rbp, bpl
=== 3978
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x12bb3012d
add rcx, 0x14566193; add_carry
mov rcx, qword ptr [rcx + 0x540]
add rcx, rbp
mov r13b, byte ptr [rcx]
movzx r13, r13b
shl r13, 8
add r14, r13
mov rbp, r14
movabs r13, 0xe111f60a
add r13, 0x5ef764b6; add
=== 3979
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1344
add rsp, 1344
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdi
mov rsi, rbp
=== 3980
mov rbx, rsi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov r13b, byte ptr [rbp]
mov bl, r13b
=== 3981
mov rdi, rbx
push rdi
mov rbx, rsp
mov r13, rbx
=== 3982
mov rcx, rbx
mov rsi, r13
push rcx
push 0x1a2e710e
push 0x2702963
push 0x57462ff8
=== 3983
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov r12, rsi
movzx rsi, sil
=== 3984
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x1337e27ef
add r11, 0xc8b3ad1; add_carry
mov r11, qword ptr [r11 + 0x630]
add r11, rsi
mov al, byte ptr [r11]
movzx rax, al
shl rax, 0x10
add r12, rax
movabs rdx, 0xd45a3f8c
push rdx
push 0x4d100a95
push 0x7411778a
push 0xb285589
add qword ptr [rsp + 0x18], 0x6baf1b34; add
mov r14, r12
=== 3985
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1584
add rsp, 1584
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov r13, r14
=== 3986
mov r13, r13
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rdi
mov dil, byte ptr [rdi]
mov rbp, 0xff
shl rbp, 8
not rbp
and r13, rbp
movzx rbp, dil
shl rbp, 8
or r13, rbp
=== 3987
mov rsi, r13
push rsi
mov rdi, rsp
mov r13, r13
=== 3988
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rsi
mov rdi, r13
movzx r15, r15b
=== 3989
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xc0e9574a
add r13, 0x7f200b76; add_carry
mov r13, qword ptr [r13 + 0x360]
add r13, r15
mov r8b, byte ptr [r13]
movzx r8, r8b
shl r8, 0x18
add rdi, r8
movabs rsi, 0x123272e50
push rsi
push 0x55367a
push 0x17c188d
push 0x657b3918
push 0x2c800a96
add qword ptr [rsp + 0x20], 0x1ce22c70; add
mov r15, rdi
=== 3990
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 864
add rsp, 864
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r12, r15
=== 3991
mov r14, r12
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbx
mov r13b, byte ptr [rbp]
mov rdx, 0xff
shl rdx, 0x10
not rdx
and r14, rdx
movzx rdx, r13b
shl rdx, 0x10
or r14, rdx
=== 3992
mov rdx, r14
push rdx
mov r15, rsp
mov rbx, r14
=== 3993
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rsi
mov r15, rbx
movzx rbp, bpl
=== 3994
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xc390f441
add r11, 0x7c786e7f; add_carry
mov r11, qword ptr [r11 + 0x2b0]
add r11, rbp
mov r11b, byte ptr [r11]
movzx r11, r11b
shl r11, 0x20
add r15, r11
movabs r8, 0x11b47e86e
push r8
push 0x31874edb
push 0x6cab3707
push 0x6b1c4d45
push 0xdb67d67
add qword ptr [rsp + 0x20], 0x24c17252; add
mov rdi, r15
=== 3995
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 688
add rsp, 688
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdx
mov rsi, rdi
=== 3996
mov rbx, rsi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov r10b, byte ptr [rbp]
mov r13, 0xff
shl r13, 0x18
not r13
and rbx, r13
movzx r13, r10b
shl r13, 0x18
or rbx, r13
=== 3997
mov r10, rbx
push r10
mov rbx, rsp
mov r15, rbx
=== 3998
mov rdx, rbx
mov rdi, r15
push rdx
push 0x1b105684
push 0x44a60b73
push 0x61cc6ca6
push 0x5af7044e
=== 3999
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r11
mov rbp, rdi
movzx rbx, bl
=== 4000
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xc1a23a1d
add rdi, 0x7e6728a3; add_carry
mov rdi, qword ptr [rdi]
add rdi, rbx
mov dil, byte ptr [rdi]
movzx rdi, dil
shl rdi, 0x28
add rbp, rdi
mov rdi, rbp
movabs rbp, 0xc8c11028
add rbp, 0x77484a98; add
=== 4001
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rax
mov r13, rdi
=== 4002
mov r12, r13
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbp
mov r15b, byte ptr [rbp]
mov rdx, 0xff
shl rdx, 0x20
not rdx
and r12, rdx
movzx rdx, r15b
shl rdx, 0x20
or r12, rdx
=== 4003
mov r13, r12
push r13
mov r13, rsp
mov r12, r12
=== 4004
mov rbp, r13
mov r12, r12
push rbp
push 0x59642f41
push 0x21d35859
push 0x146e7708
=== 4005
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r13
mov r12, r12
movzx r15, r15b
=== 4006
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xe0e0ee3b
add r15, 0x5f287485; add_carry
mov r15, qword ptr [r15]
add r15, r15
mov r12b, byte ptr [r15]
movzx r12, r12b
shl r12, 0x30
add r12, r12
movabs r15, 0xc06f219f
push r15
push 0x33736292
push 0x31f83ca6
push 0x1a4751eb
add qword ptr [rsp + 0x18], 0x7f9a3921; add
mov rbx, r12
=== 4007
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r15
mov rbp, rbx
=== 4008
mov rbx, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov dl, byte ptr [rax]
mov r9, 0xff
shl r9, 0x28
not r9
and rbx, r9
movzx r9, dl
shl r9, 0x28
or rbx, r9
=== 4009
mov rdi, rbx
push rdi
mov r13, rsp
mov r14, rbx
=== 4010
mov rbx, r13
mov r12, r14
push rbx
push 0x515f7311
push 0x48712ee6
push 0x24105320
=== 4011
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
mov rsi, r12
movzx r12, r12b
=== 4012
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xc77f16dd
add r11, 0x788a4be3; add_carry
mov r11, qword ptr [r11]
add r11, r12
mov r10b, byte ptr [r11]
movzx r10, r10b
shl r10, 0x38
add rsi, r10
mov r12, rsi
movabs r15, 0xf630e7f2
add r15, 0x49d872ce; add
=== 4013
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov r13, r12
=== 4014
mov r12, r13
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov r14b, byte ptr [r10]
mov r15, 0xff
shl r15, 0x30
not r15
and r12, r15
movzx r15, r14b
shl r15, 0x30
or r12, r15
=== 4015
movabs r11, 0xfe75b882
push r11
push 0x31ca5ada
push 0x6ed65922
push 0x65a619f1
push 0xb6e17ba
add qword ptr [rsp + 0x20], 0x42140066; input
mov rbx, r12
=== 4016
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 15
add rsp, 15
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov r15, rbx
movzx r13, r13b
=== 4017
mov rax, r13
mov r14, 0xffffffffe66c7a37
add r14, 0x1a4b526e
push r14
mov rbx, r15
mul qword ptr [rsp]
mov r12, rax
=== 4018
mov r12, rbx
xor r12, r12
=== 4019
mov r12, r12
push r12
mov r13, rsp
mov rsi, r12
=== 4020
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r12
mov r12, rsi
movzx r13, r13b
=== 4021
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x12a0616eb
add rbp, 0x16034bd5; add_carry
mov rbp, qword ptr [rbp + 0x4f0]
add rbp, r13
mov cl, byte ptr [rbp]
movzx rcx, cl
shl rcx, 8
add r12, rcx
mov rsi, r12
movabs r14, 0x13ed61b6e
add r14, 0x1333f52; add
=== 4022
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1264
add rsp, 1264
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov rdi, rsi
=== 4023
mov rbx, rdi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov r9b, byte ptr [rbp]
mov bl, r9b
=== 4024
mov r13, rbx
push r13
mov r14, rsp
mov rbp, rbx
=== 4025
mov r9, r14
mov r12, rbp
push r9
push 0x1d2c28a3
push 0x3e1d1db5
push 0x693a018c
push 0xe0c0378
=== 4026
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r15
mov r12, r12
movzx r15, r15b
=== 4027
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x13dd80b80
add rcx, 0x2315740; add_carry
mov rcx, qword ptr [rcx + 0x2c8]
add rcx, r15
mov r15b, byte ptr [rcx]
movzx r15, r15b
shl r15, 0x10
add r12, r15
mov rbp, r12
movabs rbx, 0x100b3dfec
add rbx, 0x3f557ad4; add
=== 4028
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 712
add rsp, 712
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov rbp, rbp
=== 4029
mov rbx, rbp
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r14
mov r15b, byte ptr [r11]
mov r11, 0xff
shl r11, 8
not r11
and rbx, r11
movzx r11, r15b
shl r11, 8
or rbx, r11
=== 4030
mov rbx, rbx
push rbx
mov r12, rsp
mov r14, rbx
=== 4031
mov r11, r12
mov r13, r14
push r11
push 0x7c175e47
push 0x6d794c8a
push 0x3b26409
=== 4032
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov rbp, r13
movzx rdi, dil
=== 4033
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xf1c02190
add rsi, 0x4e494130; add_carry
mov rsi, qword ptr [rsi + 0x580]
add rsi, rdi
mov bl, byte ptr [rsi]
movzx rbx, bl
shl rbx, 0x18
add rbp, rbx
mov rbp, rbp
movabs r12, 0xc65e32bf
add r12, 0x79ab2801; add
=== 4034
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1408
add rsp, 1408
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rcx
mov r12, rbp
=== 4035
mov r12, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r14
mov r10b, byte ptr [r15]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and r12, rsi
movzx rsi, r10b
shl rsi, 0x10
or r12, rsi
=== 4036
mov r10, r12
push r10
mov rdi, rsp
mov r13, r12
=== 4037
mov r9, rdi
mov r13, r13
push r9
push 0x2db91547
push 0x7c933ba2
push 0xccc686d
=== 4038
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbx
mov r14, r13
movzx r15, r15b
=== 4039
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xd4e247b3
add rcx, 0x6b271b0d; add_carry
mov rcx, qword ptr [rcx + 0x368]
add rcx, r15
mov al, byte ptr [rcx]
movzx rax, al
shl rax, 0x20
add r14, rax
movabs rbx, 0xdab430e1
push rbx
push 0x309b6696
push 0xc016f20
push 0x7c3f6183
add qword ptr [rsp + 0x18], 0x655529df; add
mov r14, r14
=== 4040
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 872
add rsp, 872
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov r12, r14
=== 4041
mov rdi, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbp
mov al, byte ptr [r15]
mov r14, 0xff
shl r14, 0x18
not r14
and rdi, r14
movzx r14, al
shl r14, 0x18
or rdi, r14
=== 4042
mov r15, rdi
push r15
mov r13, rsp
mov rsi, rdi
=== 4043
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov r13, rsi
movzx rsi, sil
=== 4044
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xc2cdf62e
add r12, 0x7d3b6c92; add_carry
mov r12, qword ptr [r12]
add r12, rsi
mov dl, byte ptr [r12]
movzx rdx, dl
shl rdx, 0x30
add r13, rdx
mov r12, r13
movabs rbx, 0x138df3c68
add rbx, 0x72a1e58; add
=== 4045
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r11
mov r15, r12
=== 4046
mov rbp, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r13
mov dil, byte ptr [rcx]
mov r8, 0xff
shl r8, 0x28
not r8
and rbp, r8
movzx r8, dil
shl r8, 0x28
or rbp, r8
=== 4047
mov rdx, rbp
push rdx
mov rsi, rsp
mov rbx, rbp
=== 4048
mov rdx, rsi
mov rbp, rbx
push rdx
push 0x15497e74
push 0x433e08af
push 0x44855ff8
=== 4049
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov rbx, rbp
movzx r12, r12b
=== 4050
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rbx
movabs r13, 0xf4d94524
add r13, 0x4b30159c; add
=== 4051
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r9
mov rdi, rbx
=== 4052
mov r15, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r13
mov dil, byte ptr [r8]
mov rax, 0xff
shl rax, 0x38
not rax
and r15, rax
movzx rax, dil
shl rax, 0x38
or r15, rax
=== 4053
movabs r10, 0x13c994d2e
push r10
push 0x79de209c
push 0x30102b7
push 0x27b56794
add qword ptr [rsp + 0x18], 0x3f06bba; input
mov r15, r15
=== 4054
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 27
add rsp, 27
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov r13, r15
movzx rbx, bl
=== 4055
mov rax, rbx
mov rdi, 0xffffffff9a2ff1bf
add rdi, 0x66c64fe0
push rdi
mov r14, r13
mul qword ptr [rsp]
mov r13, rax
=== 4056
mov rbx, r14
add rbx, r13
=== 4057
mov rdi, rbx
push rdi
mov r13, rsp
mov r15, rbx
=== 4058
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r8
mov r15, r15
movzx r12, r12b
=== 4059
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xfa763d02
push r13
push 0x3f1f0a67
push 0x2ff07ecd
push 0x11d46ef4
add qword ptr [rsp + 0x18], 0x45930dbe; xor
mov r12, r15
=== 4060
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 448
add rsp, 448
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdx
mov rsi, r12
=== 4061
mov r13, rsi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov al, byte ptr [r10]
mov r13b, al
=== 4062
mov rdx, r13
push rdx
mov rbx, rsp
mov rbp, r13
=== 4063
mov rdi, rbx
mov rbx, rbp
push rdi
push 0x77c659fc
push 0x214e6ed6
push 0x4970681f
push 0x54e40252
=== 4064
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r14
mov r13, rbx
movzx rdi, dil
=== 4065
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r13
movabs rdi, 0xc89d4366
add rdi, 0x776c075a; xor
=== 4066
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 424
add rsp, 424
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov rsi, rbp
=== 4067
mov rsi, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbp
mov r8b, byte ptr [r14]
mov r13, 0xff
shl r13, 8
not r13
and rsi, r13
movzx r13, r8b
shl r13, 8
or rsi, r13
=== 4068
mov r10, rsi
push r10
mov rdi, rsp
mov rbx, rsi
=== 4069
mov rbx, rdi
mov rdi, rbx
push rbx
push 0x4c9a690a
push 0x5787360b
push 0x53fc4b1a
=== 4070
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r11
mov r13, rdi
movzx rbx, bl
=== 4071
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, r13
movabs r13, 0x138f447e0
add r13, 0x71502e0; xor
=== 4072
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 776
add rsp, 776
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov r14, rdi
=== 4073
mov r12, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rsi
mov bpl, byte ptr [r10]
mov r13, 0xff
shl r13, 0x10
not r13
and r12, r13
movzx r13, bpl
shl r13, 0x10
or r12, r13
=== 4074
mov rdi, r12
push rdi
mov r15, rsp
mov rdi, r12
=== 4075
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov rbp, rdi
movzx r14, r14b
=== 4076
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x117e53012
push rbp
push 0x6ba136f3
push 0x38c05638
push 0x6ee935b2
push 0x193e1f70
add qword ptr [rsp + 0x20], 0x28241aae; xor
mov rbp, rbp
=== 4077
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1512
add rsp, 1512
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rcx
mov rsi, rbp
=== 4078
mov r13, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbp
mov r11b, byte ptr [r14]
mov rbx, 0xff
shl rbx, 0x18
not rbx
and r13, rbx
movzx rbx, r11b
shl rbx, 0x18
or r13, rbx
=== 4079
mov rbx, r13
push rbx
mov r14, rsp
mov rdi, r13
=== 4080
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rsi
mov rbp, rdi
movzx r15, r15b
=== 4081
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x1354b369e
push rax
push 0x127f0208
push 0x5cc9270a
push 0x1e7a51d7
add qword ptr [rsp + 0x18], 0xabe1422; xor
mov rbx, rbp
=== 4082
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov rbx, rbx
=== 4083
mov rbp, rbx
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r14
mov r14b, byte ptr [r10]
mov r15, 0xff
shl r15, 0x28
not r15
and rbp, r15
movzx r15, r14b
shl r15, 0x28
or rbp, r15
=== 4084
mov r15, rbp
push r15
mov r15, rsp
mov rbp, rbp
=== 4085
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
mov rdi, rbp
movzx r12, r12b
=== 4086
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xed6af336
push rax
push 0x383c5bfd
push 0x738b41de
push 0x60c735b7
push 0x1089774b
add qword ptr [rsp + 0x20], 0x529e578a; xor
mov rsi, rdi
=== 4087
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov r13, rsi
=== 4088
mov rdi, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov r8b, byte ptr [r15]
mov rdx, 0xff
shl rdx, 0x30
not rdx
and rdi, rdx
movzx rdx, r8b
shl rdx, 0x30
or rdi, rdx
=== 4089
movabs rdi, 0xdf69b55e
push rdi
push 0x3eee010c
push 0x676c1548
push 0xeae21da
add qword ptr [rsp + 0x18], 0x6120038a; input
mov rbx, rdi
=== 4090
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 19
add rsp, 19
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov r13, rbx
movzx rdi, dil
=== 4091
mov rax, rdi
mov rdx, 0xffffffffb2e911be
add rdx, 0x4dc5413e
push rdx
mov r14, r13
mul qword ptr [rsp]
mov r15, rax
=== 4092
mov r12, r14
xor r12, r15
=== 4093
mov r15, r12
push r15
mov rdi, rsp
mov rbp, r12
=== 4094
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov rbx, rbp
movzx r13, r13b
=== 4095
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xced919a0
add r8, 0x71304920; add_carry
mov r8, qword ptr [r8 + 0x6e8]
add r8, r13
mov r13b, byte ptr [r8]
movzx r13, r13b
shl r13, 8
add rbx, r13
mov r15, rbx
movabs rbp, 0x1117adf80
add rbp, 0x2e8e7b40; add
=== 4096
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1768
add rsp, 1768
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rax
mov r12, r15
=== 4097
mov r14, r12
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r13
mov cl, byte ptr [rbx]
mov r14b, cl
=== 4098
mov rcx, r14
push rcx
mov r15, rsp
mov rsi, r14
=== 4099
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r8
mov rdi, rsi
movzx r13, r13b
=== 4100
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x11d3c103f
add r14, 0x22cd5281; add_carry
mov r14, qword ptr [r14 + 0x220]
add r14, r13
mov sil, byte ptr [r14]
movzx rsi, sil
shl rsi, 0x10
add rdi, rsi
movabs rbx, 0x11df63c1f
push rbx
push 0x4a1f79e7
push 0x636317d0
push 0x772253a5
push 0x78a41882
add qword ptr [rsp + 0x20], 0x22131ea1; add
mov r13, rdi
=== 4101
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 544
add rsp, 544
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov r14, r13
=== 4102
mov r14, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov r13b, byte ptr [r10]
mov r15, 0xff
shl r15, 8
not r15
and r14, r15
movzx r15, r13b
shl r15, 8
or r14, r15
=== 4103
mov rax, r14
push rax
mov r14, rsp
mov r12, r14
=== 4104
mov r13, r14
mov rdi, r12
push r13
push 0x2bbc7132
push 0x697d3e33
push 0x4c0704bf
=== 4105
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov r14, rdi
movzx r13, r13b
=== 4106
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xc7531cd9
add rcx, 0x78b645e7; add_carry
mov rcx, qword ptr [rcx + 0x3d0]
add rcx, r13
mov r12b, byte ptr [rcx]
movzx r12, r12b
shl r12, 0x18
add r14, r12
mov rdi, r14
movabs r14, 0x11481f227
add r14, 0x2b876899; add
=== 4107
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 976
add rsp, 976
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov rbx, rdi
=== 4108
mov r13, rbx
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbp
mov r12b, byte ptr [rdi]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r13, rdi
movzx rdi, r12b
shl rdi, 0x10
or r13, rdi
=== 4109
mov rbx, r13
push rbx
mov rdi, rsp
mov rsi, r13
=== 4110
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov r12, rsi
movzx rbx, bl
=== 4111
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xd5a7fa40
add rax, 0x6a616880; add_carry
mov rax, qword ptr [rax + 0x388]
add rax, rbx
mov r13b, byte ptr [rax]
movzx r13, r13b
shl r13, 0x20
add r12, r13
mov rbx, r12
movabs r13, 0xf9f43885
add r13, 0x4615223b; add
=== 4112
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 904
add rsp, 904
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rax
mov rdi, rbx
=== 4113
mov rdi, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r13
mov r9b, byte ptr [r12]
mov r8, 0xff
shl r8, 0x18
not r8
and rdi, r8
movzx r8, r9b
shl r8, 0x18
or rdi, r8
=== 4114
mov rdi, rdi
push rdi
mov rsi, rsp
mov r13, rdi
=== 4115
mov rsi, rsi
mov rdi, r13
push rsi
push 0x373c7741
push 0x7a2d07ab
push 0x38d7786a
push 0x5c891cef
=== 4116
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov rbx, rdi
movzx r12, r12b
=== 4117
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x100942df8
add rsi, 0x3f7534c8; add_carry
mov rsi, qword ptr [rsi]
add rsi, r12
mov dil, byte ptr [rsi]
movzx rdi, dil
shl rdi, 0x28
add rbx, rdi
movabs r13, 0xf7fc0b67
push r13
push 0x678579ae
push 0x71f25402
push 0x3b2a1d9a
add qword ptr [rsp + 0x18], 0x480d4f59; add
mov rsi, rbx
=== 4118
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbx
mov rsi, rsi
=== 4119
mov r12, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r14
mov dil, byte ptr [r13]
mov rcx, 0xff
shl rcx, 0x20
not rcx
and r12, rcx
movzx rcx, dil
shl rcx, 0x20
or r12, rcx
=== 4120
mov rdx, r12
push rdx
mov rbx, rsp
mov rdi, r12
=== 4121
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov r12, rdi
movzx rdi, dil
=== 4122
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x117eb1ff6
add rcx, 0x281e42ca; add_carry
mov rcx, qword ptr [rcx]
add rcx, rdi
mov r14b, byte ptr [rcx]
movzx r14, r14b
shl r14, 0x38
add r12, r14
mov rsi, r12
movabs rdi, 0x1018035be
add rdi, 0x3e892502; add
=== 4123
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdi
mov rsi, rsi
=== 4124
mov rbx, rsi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbp
mov r12b, byte ptr [rdi]
mov r8, 0xff
shl r8, 0x30
not r8
and rbx, r8
movzx r8, r12b
shl r8, 0x30
or rbx, r8
=== 4125
mov rdi, rbx
movabs rbp, 0xfffc956c
add rbp, 0x408d237c; input
=== 4126
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 23
add rsp, 23
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov r13, rdi
movzx r15, r15b
=== 4127
mov rax, r15
mov rdi, 0xfffffffffebc7b41
add rdi, 0x1a27040
push rdi
mov rsi, r13
mul qword ptr [rsp]
mov rbp, rax
=== 4128
mov r12, rsi
sub r12, rbp
=== 4129
mov rbp, r12
push rbp
mov r12, rsp
mov r15, r12
=== 4130
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r11
mov rsi, r15
movzx r12, r12b
=== 4131
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x101631b51
add r10, 0x3ea6476f; add_carry
mov r10, qword ptr [r10 + 0x168]
add r10, r12
mov dl, byte ptr [r10]
movzx rdx, dl
shl rdx, 8
add rsi, rdx
mov r14, rsi
movabs rbp, 0x13a8eecce
add rbp, 0x57a6df2; add
=== 4132
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 360
add rsp, 360
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov rdi, r14
=== 4133
mov r12, rdi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r13
mov bl, byte ptr [r15]
mov r12b, bl
=== 4134
mov rbp, r12
push rbp
mov r15, rsp
mov r14, r12
=== 4135
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov r12, r14
movzx rdi, dil
=== 4136
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x12bb21b40
add rsi, 0x14574780; add_carry
mov rsi, qword ptr [rsi + 0xc0]
add rsi, rdi
mov r14b, byte ptr [rsi]
movzx r14, r14b
shl r14, 0x10
add r12, r14
movabs rdx, 0x13e43feda
push rdx
push 0x306a1ec3
push 0x66424442
push 0x2bba7fda
push 0x53fe3779
add qword ptr [rsp + 0x20], 0x1c55be6; add
mov r13, r12
=== 4137
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 192
add rsp, 192
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbx
mov r15, r13
=== 4138
mov r15, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r14
mov r14b, byte ptr [rcx]
mov r11, 0xff
shl r11, 8
not r11
and r15, r11
movzx r11, r14b
shl r11, 8
or r15, r11
=== 4139
mov r12, r15
push r12
mov r12, rsp
mov r14, r15
=== 4140
mov r12, r12
mov r15, r14
push r12
push 0x7b091775
push 0x3d017ee3
push 0x45486554
push 0x37b31167
=== 4141
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r11
mov rsi, r15
movzx rbp, bpl
=== 4142
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x10dc038ba
add r8, 0x32492a06; add_carry
mov r8, qword ptr [r8 + 0x10]
add r8, rbp
mov r12b, byte ptr [r8]
movzx r12, r12b
shl r12, 0x18
add rsi, r12
movabs rbx, 0x13c14dc04
push rbx
push 0x5d714725
push 0xbba31a3
push 0x1ae7659f
push 0x2dbf199c
add qword ptr [rsp + 0x20], 0x3f47ebc; add
mov r15, rsi
=== 4143
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 16
add rsp, 16
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r11
mov rsi, r15
=== 4144
mov r14, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov r13b, byte ptr [r13]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r14, rdi
movzx rdi, r13b
shl rdi, 0x10
or r14, rdi
=== 4145
mov r12, r14
push r12
mov rsi, rsp
mov r13, r14
=== 4146
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov r14, r13
movzx r13, r13b
=== 4147
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x109c841e2
add rdx, 0x364120de; add_carry
mov rdx, qword ptr [rdx + 0x6e8]
add rdx, r13
mov cl, byte ptr [rdx]
movzx rcx, cl
shl rcx, 0x20
add r14, rcx
mov rdi, r14
movabs r15, 0xc91f07fa
add r15, 0x76ea52c6; add
=== 4148
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1768
add rsp, 1768
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r14
mov rdi, rdi
=== 4149
mov r13, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r13
mov r8b, byte ptr [r12]
mov r14, 0xff
shl r14, 0x18
not r14
and r13, r14
movzx r14, r8b
shl r14, 0x18
or r13, r14
=== 4150
mov r8, r13
push r8
mov r13, rsp
mov r15, r13
=== 4151
mov r12, r13
mov rdi, r15
push r12
push 0x1d5b590e
push 0xb6a2dfd
push 0x206b0d55
=== 4152
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r14
mov r13, rdi
movzx r15, r15b
=== 4153
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x131b005b7
add rsi, 0xe595d09; add_carry
mov rsi, qword ptr [rsi]
add rsi, r15
mov r10b, byte ptr [rsi]
movzx r10, r10b
shl r10, 0x30
add r13, r10
movabs r11, 0xd1573cb5
push r11
push 0xbed4044
push 0x5de90707
push 0x1c6c1968
push 0x3e311fa4
add qword ptr [rsp + 0x20], 0x6eb21e0b; add
mov rdi, r13
=== 4154
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbp
mov r12, rdi
=== 4155
mov rdi, r12
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov dl, byte ptr [r9]
mov r11, 0xff
shl r11, 0x28
not r11
and rdi, r11
movzx r11, dl
shl r11, 0x28
or rdi, r11
=== 4156
mov r10, rdi
push r10
mov r14, rsp
mov r13, rdi
=== 4157
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov r14, r13
movzx r15, r15b
=== 4158
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xce9d317c
add r10, 0x716c3144; add_carry
mov r10, qword ptr [r10]
add r10, r15
mov r15b, byte ptr [r10]
movzx r15, r15b
shl r15, 0x38
add r14, r15
mov rbx, r14
movabs rsi, 0xc681ef21
add rsi, 0x79876b9f; add
=== 4159
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov r15, rbx
=== 4160
mov rbx, r15
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov r13b, byte ptr [r8]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and rbx, rsi
movzx rsi, r13b
shl rsi, 0x30
or rbx, rsi
=== 4161
movabs rcx, 0xf7d5572b
push rcx
push 0x2a20475e
push 0x2a7b3948
push 0x542e6c11
add qword ptr [rsp + 0x18], 0x48b461bd; input
mov rdi, rbx
=== 4162
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov r12, rdi
movzx rbp, bpl
=== 4163
mov rax, rbp
mov r11, 0xffffffff8fda0d84
add r11, 0x71120ac1
push r11
mov rsi, r12
mul qword ptr [rsp]
mov r14, rax
=== 4164
mov rbx, rsi
xor rbx, r14
=== 4165
mov rbp, rbx
push rbp
mov r15, rsp
mov r12, rbx
=== 4166
mov r12, r15
mov rsi, r12
push r12
push 0x37237fbe
push 0x12d34114
push 0x455c0f10
=== 4167
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r11
mov rsi, rsi
movzx rbp, bpl
=== 4168
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rsi
movabs rbp, 0xf66f2695
add rbp, 0x499a242b; xor
=== 4169
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 176
add rsp, 176
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov r12, rbx
=== 4170
mov rsi, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rsi
mov r8b, byte ptr [rdx]
mov sil, r8b
=== 4171
mov rdi, rsi
push rdi
mov r14, rsp
mov rbp, rsi
=== 4172
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov rdi, rbp
movzx r14, r14b
=== 4173
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x13c25f1c8
push r8
push 0x9116caf
push 0x5b753549
push 0x695c1ba8
push 0x61c16c81
add qword ptr [rsp + 0x20], 0x3e358f8; xor
mov r15, rdi
=== 4174
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 672
add rsp, 672
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rcx
mov rbx, r15
=== 4175
mov r12, rbx
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r15
mov dl, byte ptr [r13]
mov rbp, 0xff
shl rbp, 8
not rbp
and r12, rbp
movzx rbp, dl
shl rbp, 8
or r12, rbp
=== 4176
mov rcx, r12
push rcx
mov rbp, rsp
mov r14, r12
=== 4177
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov r13, r14
movzx r14, r14b
=== 4178
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, r13
movabs rsi, 0xdb33faa2
add rsi, 0x64d5501e; xor
=== 4179
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1136
add rsp, 1136
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rcx
mov rsi, rdi
=== 4180
mov rbp, rsi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r12
mov r15b, byte ptr [rax]
mov rcx, 0xff
shl rcx, 0x10
not rcx
and rbp, rcx
movzx rcx, r15b
shl rcx, 0x10
or rbp, rcx
=== 4181
mov rsi, rbp
push rsi
mov r14, rsp
mov rbp, rbp
=== 4182
mov r14, r14
mov rsi, rbp
push r14
push 0x53ce253b
push 0x9211f3f
push 0x641931c9
push 0x49a45691
=== 4183
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov r12, rsi
movzx rdi, dil
=== 4184
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r12
movabs r15, 0x132d928c3
add r15, 0xd3021fd; xor
=== 4185
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1912
add rsp, 1912
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r14
mov r14, rsi
=== 4186
mov r12, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rsi
mov r11b, byte ptr [r15]
mov r14, 0xff
shl r14, 0x18
not r14
and r12, r14
movzx r14, r11b
shl r14, 0x18
or r12, r14
=== 4187
mov rcx, r12
push rcx
mov r15, rsp
mov rdi, r12
=== 4188
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov rbx, rdi
movzx r14, r14b
=== 4189
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rbx
movabs rbp, 0x11b3f4a9a
add rbp, 0x24ca0026; xor
=== 4190
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov r14, r14
=== 4191
mov r13, r14
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov r15b, byte ptr [r12]
mov rcx, 0xff
shl rcx, 0x20
not rcx
and r13, rcx
movzx rcx, r15b
shl rcx, 0x20
or r13, rcx
=== 4192
movabs r8, 0xdde5a3a9
push r8
push 0x6ef84927
push 0x508b612b
push 0x5cea1daf
add qword ptr [rsp + 0x18], 0x62a4153f; input
mov rbp, r13
=== 4193
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 31
add rsp, 31
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
mov rbp, rbp
movzx r15, r15b
=== 4194
mov rax, r15
mov rcx, 0xffffffff84b46103
add rcx, 0x7bad42bb
push rcx
mov r13, rbp
mul qword ptr [rsp]
mov rbp, rax
=== 4195
mov r13, r13
add r13, rbp
=== 4196
mov r8, r13
push r8
mov rsi, rsp
mov r13, r13
=== 4197
mov rax, rsi
mov r15, r13
push rax
push 0x11460a6d
push 0x26db5784
push 0x7c767b50
=== 4198
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rcx
mov rbp, r15
movzx r12, r12b
=== 4199
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rbp
movabs rbp, 0x11b2edaae
add rbp, 0x24da7012; xor
=== 4200
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2000
add rsp, 2000
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbp
mov r13, rsi
=== 4201
mov rsi, r13
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov bpl, byte ptr [r8]
mov sil, bpl
=== 4202
mov rsi, rsi
push rsi
mov rbp, rsp
mov rdi, rsi
=== 4203
mov rcx, rbp
mov r14, rdi
push rcx
push 0x11da3e0b
push 0x3b261c39
push 0x49b375f6
push 0x31ec4556
=== 4204
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov rbx, r14
movzx r14, r14b
=== 4205
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xfac1f41d
push rdi
push 0x40a013ff
push 0x50ac7652
push 0x3ec504c1
add qword ptr [rsp + 0x18], 0x454756a3; xor
mov rbp, rbx
=== 4206
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1696
add rsp, 1696
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov r14, rbp
=== 4207
mov rdi, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov bpl, byte ptr [r13]
mov r11, 0xff
shl r11, 8
not r11
and rdi, r11
movzx r11, bpl
shl r11, 8
or rdi, r11
=== 4208
mov r8, rdi
push r8
mov r15, rsp
mov r13, rdi
=== 4209
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov rsi, r13
movzx rbx, bl
=== 4210
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rsi
movabs rbx, 0x1192dd58a
add rbx, 0x26db7536; xor
=== 4211
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1088
add rsp, 1088
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r14
mov rbx, rbp
=== 4212
mov rbp, rbx
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r13
mov sil, byte ptr [r13]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and rbp, rbx
movzx rbx, sil
shl rbx, 0x10
or rbp, rbx
=== 4213
mov rdi, rbp
push rdi
mov rbx, rsp
mov r14, rbp
=== 4214
mov rdx, rbx
mov rsi, r14
push rdx
push 0x5c2b4f48
push 0x166914c3
push 0x4848739a
=== 4215
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbx
mov rsi, rsi
movzx rdi, dil
=== 4216
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rsi
movabs r13, 0x10da0e6d8
add r13, 0x326863e8; xor
=== 4217
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1168
add rsp, 1168
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rcx
mov r14, rdi
=== 4218
mov rbx, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov al, byte ptr [r10]
mov r14, 0xff
shl r14, 0x18
not r14
and rbx, r14
movzx r14, al
shl r14, 0x18
or rbx, r14
=== 4219
mov rsi, rbx
push rsi
mov rsi, rsp
mov rbp, rbx
=== 4220
mov rbx, rsi
mov r13, rbp
push rbx
push 0x3e7c74d2
push 0x3ee22ca
push 0xc05008c
=== 4221
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r14
mov rdi, r13
movzx r15, r15b
=== 4222
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rdi
movabs rbx, 0xd92b289e
add rbx, 0x66de2222; xor
=== 4223
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r11
mov r15, r13
=== 4224
mov rbx, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov dl, byte ptr [rax]
mov r14, 0xff
shl r14, 0x20
not r14
and rbx, r14
movzx r14, dl
shl r14, 0x20
or rbx, r14
=== 4225
mov rdx, rbx
push rdx
mov rbx, rsp
mov rdi, rbx
=== 4226
mov rbp, rbx
mov r12, rdi
push rbp
push 0x5c50697e
push 0x6635ccf
push 0x546826a1
=== 4227
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r10
mov r12, r12
movzx rbp, bpl
=== 4228
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x1121031ef
push rbx
push 0x3f1e538c
push 0x7f760536
push 0x3f79364d
add qword ptr [rsp + 0x18], 0x2df918d1; xor
mov rbx, r12
=== 4229
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov r12, rbx
=== 4230
mov r15, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbp
mov r10b, byte ptr [r11]
mov r8, 0xff
shl r8, 0x30
not r8
and r15, r8
movzx r8, r10b
shl r8, 0x30
or r15, r8
=== 4231
mov r8, r15
push r8
mov rdi, rsp
mov r12, r15
=== 4232
mov rdi, rdi
mov rbx, r12
push rdi
push 0x7a724f89
push 0x523f2449
push 0x3ed40457
push 0x593909bb
=== 4233
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov r15, rbx
movzx r13, r13b
=== 4234
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x125cf3c7e
add rdx, 0x1a3a3642; sub_carry
mov rdx, qword ptr [rdx + 0x28]
add rdx, r13
mov r14b, byte ptr [rdx]
movzx r14, r14b
shl r14, 8
sub r15, r14
movabs r12, 0x139b51a82
push r12
push 0x3da81d3f
push 0x3e1b3ade
push 0x59304133
push 0x68aa54af
add qword ptr [rsp + 0x20], 0x654503e; sub
mov rdi, r15
=== 4235
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 40
add rsp, 40
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r11
mov rbp, rdi
=== 4236
mov rbp, rbp
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rsi
mov r8b, byte ptr [rdi]
mov bpl, r8b
=== 4237
mov r11, rbp
push r11
mov rdi, rsp
mov r13, rbp
=== 4238
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
mov rbx, r13
movzx r12, r12b
=== 4239
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x10c462085
add r14, 0x33c3523b; sub_carry
mov r14, qword ptr [r14 + 0x5f0]
add r14, r12
mov dil, byte ptr [r14]
movzx rdi, dil
shl rdi, 0x10
sub rbx, rdi
mov r12, rbx
movabs rdi, 0xce4d317d
add rdi, 0x71bc3943; sub
=== 4240
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1520
add rsp, 1520
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r14
mov rsi, r12
=== 4241
mov r14, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov sil, byte ptr [r13]
mov r9, 0xff
shl r9, 8
not r9
and r14, r9
movzx r9, sil
shl r9, 8
or r14, r9
=== 4242
mov rsi, r14
push rsi
mov r12, rsp
mov rdi, r14
=== 4243
mov r14, r12
mov r13, rdi
push r14
push 0x116d6658
push 0x99c7f6e
push 0x240d48af
push 0x67fb1b9e
=== 4244
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r8
mov rbx, r13
movzx r12, r12b
=== 4245
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x13f8f0de4
add r11, 0x7a64dc; sub_carry
mov r11, qword ptr [r11 + 0x5e8]
add r11, r12
mov sil, byte ptr [r11]
movzx rsi, sil
shl rsi, 0x18
sub rbx, rsi
mov r12, rbx
movabs rbp, 0xcdc12255
add rbp, 0x7248486b; sub
=== 4246
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1512
add rsp, 1512
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r11
mov r12, r12
=== 4247
mov rsi, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov bl, byte ptr [r13]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and rsi, rbp
movzx rbp, bl
shl rbp, 0x10
or rsi, rbp
=== 4248
mov r11, rsi
push r11
mov r15, rsp
mov rdi, rsi
=== 4249
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov rbx, rdi
movzx rdi, dil
=== 4250
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xf81d537e
add rbx, 0x47ec1f42; sub_carry
mov rbx, qword ptr [rbx + 0x408]
add rbx, rdi
mov bpl, byte ptr [rbx]
movzx rbp, bpl
shl rbp, 0x20
sub rbx, rbp
movabs r8, 0x12701fa0e
push r8
push 0x558f0f5c
push 0x514b61cb
push 0x6dc47423
push 0x2f355c6b
add qword ptr [rsp + 0x20], 0x190770b2; sub
mov rdi, rbx
=== 4251
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1032
add rsp, 1032
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r13, rdi
=== 4252
mov r13, r13
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbx
mov sil, byte ptr [rdx]
mov r8, 0xff
shl r8, 0x18
not r8
and r13, r8
movzx r8, sil
shl r8, 0x18
or r13, r8
=== 4253
mov rcx, r13
push rcx
mov rsi, rsp
mov r13, r13
=== 4254
mov r8, rsi
mov r14, r13
push r8
push 0x30406139
push 0x53050dbc
push 0x7365719e
push 0x5dae0ff8
=== 4255
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov rdi, r14
movzx r15, r15b
=== 4256
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x1320a155e
add rbp, 0xdff5d62; sub_carry
mov rbp, qword ptr [rbp + 0x10]
add rbp, r15
mov cl, byte ptr [rbp]
movzx rcx, cl
shl rcx, 0x28
sub rdi, rcx
movabs r13, 0xd8283920
push r13
push 0x3a3a5bf0
push 0x36c3329
push 0x35663e24
add qword ptr [rsp + 0x18], 0x67e131a0; sub
mov rdi, rdi
=== 4257
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 16
add rsp, 16
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov r15, rdi
=== 4258
mov r12, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbp
mov r13b, byte ptr [rbp]
mov r11, 0xff
shl r11, 0x20
not r11
and r12, r11
movzx r11, r13b
shl r11, 0x20
or r12, r11
=== 4259
mov rbx, r12
push rbx
mov r13, rsp
mov r12, r12
=== 4260
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r13
mov r12, r12
movzx rbp, bpl
=== 4261
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x116183fa6
add r13, 0x29f1331a; sub_carry
mov r13, qword ptr [r13]
add r13, rbp
mov sil, byte ptr [r13]
movzx rsi, sil
shl rsi, 0x30
sub r12, rsi
mov rbp, r12
movabs rsi, 0x10a541d2b
add rsi, 0x35b54d95; sub
=== 4262
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdx
mov r15, rbp
=== 4263
mov rbx, r15
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbx
mov r8b, byte ptr [rdx]
mov rax, 0xff
shl rax, 0x28
not rax
and rbx, rax
movzx rax, r8b
shl rax, 0x28
or rbx, rax
=== 4264
mov r14, rbx
push r14
mov rsi, rsp
mov r14, rbx
=== 4265
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov r13, r14
movzx rdi, dil
=== 4266
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xf480f2e6
add rdx, 0x4b887fda; sub_carry
mov rdx, qword ptr [rdx]
add rdx, rdi
mov r13b, byte ptr [rdx]
movzx r13, r13b
shl r13, 0x38
sub r13, r13
mov r12, r13
movabs rbp, 0x1168568b8
add rbp, 0x29840208; sub
=== 4267
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r15
mov r12, r12
=== 4268
mov rbx, r12
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbx
mov sil, byte ptr [r12]
mov rcx, 0xff
shl rcx, 0x30
not rcx
and rbx, rcx
movzx rcx, sil
shl rcx, 0x30
or rbx, rcx
=== 4269
mov r15, rbx
push r15
mov r13, rsp
mov r14, rbx
=== 4270
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov rbp, r14
movzx r13, r13b
=== 4271
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xfd555e84
push rbx
push 0x64ee5a74
push 0x7a4106be
push 0x55fa7ed4
add qword ptr [rsp + 0x18], 0x42b40c3c; sub
mov rbx, rbp
=== 4272
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r13
mov rsi, rbx
=== 4273
mov rbp, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbp
mov r8b, byte ptr [r8]
mov r14, 0xff
shl r14, 0x38
not r14
and rbp, r14
movzx r14, r8b
shl r14, 0x38
or rbp, r14
=== 4274
mov rcx, rbp
push rcx
mov rsi, rsp
mov rdi, rbp
=== 4275
mov r10, rsi
mov r15, rdi
push r10
push 0x46bd7178
push 0x30af6473
push 0x38f92217
=== 4276
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov rbx, r15
movzx rsi, sil
=== 4277
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xe63c0e37
push rsi
push 0xefe6ceb
push 0x5b6329eb
push 0x6e606f2f
push 0xc9764dd
add qword ptr [rsp + 0x20], 0x59cd3489
mov rbx, rbx
=== 4278
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r12
mov r14, rbx
=== 4279
mov rdi, r14
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbp
mov cl, byte ptr [rbp]
mov dil, cl
=== 4280
mov r13, rdi
push r13
mov rsi, rsp
mov r13, rdi
=== 4281
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov rsi, r13
movzx r15, r15b
=== 4282
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rsi
movabs r12, 0xc0ac29ac
add r12, 0x7f5d1914
=== 4283
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov rbp, r14
=== 4284
mov rbx, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov r12b, byte ptr [r12]
mov r8, 0xff
shl r8, 0x10
not r8
and rbx, r8
movzx r8, r12b
shl r8, 0x10
or rbx, r8
=== 4285
mov r14, rbx
push r14
mov rdi, rsp
mov rbx, rbx
=== 4286
mov r12, rdi
mov r13, rbx
push r12
push 0x76911ae0
push 0x2f53038f
push 0x15ab5af8
push 0x1304cc9
=== 4287
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov rbp, r13
movzx rdi, dil
=== 4288
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x11aa42df0
push r11
push 0x77882be9
push 0x4f5b1f56
push 0x317632b0
add qword ptr [rsp + 0x18], 0x256514d0
mov r12, rbp
=== 4289
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r9
mov rbx, r12
=== 4290
mov rbx, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rdi
mov r15b, byte ptr [r8]
mov r10, 0xff
shl r10, 0x18
not r10
and rbx, r10
movzx r10, r15b
shl r10, 0x18
or rbx, r10
=== 4291
mov r12, rbx
push r12
mov r14, rsp
mov rbx, rbx
=== 4292
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov rbx, rbx
movzx r12, r12b
=== 4293
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rbx
movabs rbp, 0x11529179a
add rbp, 0x2ae02b26
=== 4294
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rsi
mov r13, r14
=== 4295
mov rsi, r13
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbp
mov al, byte ptr [rdi]
mov r14, 0xff
shl r14, 0x20
not r14
and rsi, r14
movzx r14, al
shl r14, 0x20
or rsi, r14
=== 4296
mov rbx, rsi
movabs r12, 0xdadab24b
add r12, 0x65255fa5
test rbx, rbx
lea r13, [rip - 0x3851ad]
cmovne r13, r12
jmp r13
=== 4297
movabs rax, 0xcd415df5
push rax
push 0x34fc773c
push 0x421e4d98
push 0x431c4daa
push 0x30c77f8f
add qword ptr [rsp + 0x20], 0x73485af3; input
=== 4298
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 16
add rsp, 16
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r13
movzx rbp, bpl
=== 4299
mov rax, rbp
mov r9, 0xfffffffff2ff3f60
add r9, 0xd342f31
push r9
mul qword ptr [rsp]
mov rbp, rax
=== 4300
mov rsi, rbp
push rsi
mov rsi, rsp
mov r12, rbp
=== 4301
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r11
mov rbx, r12
movzx rdi, dil
=== 4302
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xe76318f6
add r14, 0x58a649ca; add_carry
mov r14, qword ptr [r14 + 0x718]
add r14, rdi
mov cl, byte ptr [r14]
movzx rcx, cl
shl rcx, 8
add rbx, rcx
mov r13, rbx
movabs rbp, 0x12076e641
add rbp, 0x1f92747f; add
=== 4303
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1816
add rsp, 1816
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r11
mov r13, r13
=== 4304
mov r15, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov r11b, byte ptr [rax]
mov r15b, r11b
=== 4305
mov r12, r15
push r12
mov r14, rsp
mov rdi, r15
=== 4306
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r11
mov rsi, rdi
movzx rbp, bpl
=== 4307
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x13acc3a52
add r13, 0x53d286e; add_carry
mov r13, qword ptr [r13 + 0x100]
add r13, rbp
mov r15b, byte ptr [r13]
movzx r15, r15b
shl r15, 0x10
add rsi, r15
mov r12, rsi
movabs r14, 0xd6781336
add r14, 0x6991478a; add
=== 4308
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 256
add rsp, 256
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov rbp, r12
=== 4309
mov r14, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r15
mov r10b, byte ptr [r12]
mov r12, 0xff
shl r12, 8
not r12
and r14, r12
movzx r12, r10b
shl r12, 8
or r14, r12
=== 4310
mov r14, r14
push r14
mov rbp, rsp
mov rdi, r14
=== 4311
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbx
mov rbp, rdi
movzx r15, r15b
=== 4312
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xd2b9f03a
add rcx, 0x6d4f7286; add_carry
mov rcx, qword ptr [rcx + 0x758]
add rcx, r15
mov r15b, byte ptr [rcx]
movzx r15, r15b
shl r15, 0x18
add rbp, r15
movabs r14, 0x12a104322
push r14
push 0x418e7434
push 0x48d4058e
push 0x540e56e1
add qword ptr [rsp + 0x18], 0x15f9179e; add
mov rbx, rbp
=== 4313
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1880
add rsp, 1880
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdi
mov r12, rbx
=== 4314
mov rsi, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbx
mov al, byte ptr [r13]
mov r13, 0xff
shl r13, 0x10
not r13
and rsi, r13
movzx r13, al
shl r13, 0x10
or rsi, r13
=== 4315
mov r12, rsi
push r12
mov rdi, rsp
mov rbx, rsi
=== 4316
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r10
mov r15, rbx
movzx r14, r14b
=== 4317
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xeb302c74
add r13, 0x54d9364c; add_carry
mov r13, qword ptr [r13 + 0x508]
add r13, r14
mov dl, byte ptr [r13]
movzx rdx, dl
shl rdx, 0x20
add r15, rdx
mov r14, r15
movabs rbx, 0xe88d1812
add rbx, 0x577c42ae; add
=== 4318
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1288
add rsp, 1288
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov rbx, r14
=== 4319
mov rbp, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov r8b, byte ptr [r8]
mov r15, 0xff
shl r15, 0x18
not r15
and rbp, r15
movzx r15, r8b
shl r15, 0x18
or rbp, r15
=== 4320
mov rsi, rbp
push rsi
mov r12, rsp
mov r15, rbp
=== 4321
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov rbx, r15
movzx r14, r14b
=== 4322
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x13785f07c
add rax, 0x8837244; add_carry
mov rax, qword ptr [rax]
add rax, r14
mov r12b, byte ptr [rax]
movzx r12, r12b
shl r12, 0x28
add rbx, r12
movabs r12, 0xeffc53f3
push r12
push 0x547e2f33
push 0x2fdb0215
push 0x1b211619
add qword ptr [rsp + 0x18], 0x500d06cd; add
mov rsi, rbx
=== 4323
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r14
mov r15, rsi
=== 4324
mov rbp, r15
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbp
mov r13b, byte ptr [r12]
mov r12, 0xff
shl r12, 0x20
not r12
and rbp, r12
movzx r12, r13b
shl r12, 0x20
or rbp, r12
=== 4325
mov r12, rbp
push r12
mov r12, rsp
mov rbx, rbp
=== 4326
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r11
mov rbp, rbx
movzx rbx, bl
=== 4327
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xfccd48c0
add rdi, 0x433c1a00; add_carry
mov rdi, qword ptr [rdi]
add rdi, rbx
mov r14b, byte ptr [rdi]
movzx r14, r14b
shl r14, 0x38
add rbp, r14
mov rbp, rbp
movabs r12, 0xd32b09e0
add r12, 0x6cde50e0; add
=== 4328
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rax
mov rsi, rbp
=== 4329
mov rdi, rsi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov r13b, byte ptr [r15]
mov rdx, 0xff
shl rdx, 0x30
not rdx
and rdi, rdx
movzx rdx, r13b
shl rdx, 0x30
or rdi, rdx
=== 4330
movabs rbx, 0xd4b354d2
push rbx
push 0x5673e8e
push 0x56063d0a
push 0x54d85e14
add qword ptr [rsp + 0x18], 0x6bd66416; input
mov rsi, rdi
=== 4331
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov r12, rsi
movzx rdi, dil
=== 4332
mov rax, rdi
mov rbp, 0xffffffffa204e432
add rbp, 0x5ecf79b7
push rbp
mov r15, r12
mul qword ptr [rsp]
mov r13, rax
=== 4333
mov rbx, r15
sub rbx, r13
=== 4334
mov rax, rbx
push rax
mov rbp, rsp
mov r12, rbx
=== 4335
mov r14, rbp
mov r12, r12
push r14
push 0x77136ef4
push 0x717f7e76
push 0x3822037d
push 0x79a311f4
=== 4336
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
mov rdi, r12
movzx rsi, sil
=== 4337
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xc15cf9b5
add r14, 0x7eac790b; sub_carry
mov r14, qword ptr [r14 + 0xd0]
add r14, rsi
mov r10b, byte ptr [r14]
movzx r10, r10b
shl r10, 8
sub rdi, r10
mov rdi, rdi
movabs rsi, 0xd069ee02
add rsi, 0x6f9f7cbe; sub
=== 4338
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 208
add rsp, 208
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r15
mov r14, rdi
=== 4339
mov r14, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov bl, byte ptr [r13]
mov r14b, bl
=== 4340
mov r14, r14
push r14
mov r14, rsp
mov rbx, r14
=== 4341
mov r12, r14
mov rbx, rbx
push r12
push 0x3c327252
push 0x2a00507f
push 0x77a255b3
=== 4342
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdi
mov rdi, rbx
movzx r14, r14b
=== 4343
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x12b1d33bc
add rax, 0x14ec3f04; sub_carry
mov rax, qword ptr [rax + 0x638]
add rax, r14
mov r11b, byte ptr [rax]
movzx r11, r11b
shl r11, 0x10
sub rdi, r11
mov r14, rdi
movabs rbp, 0x1344ef76e
add rbp, 0xbba7352; sub
=== 4344
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1592
add rsp, 1592
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdi
mov rdi, r14
=== 4345
mov rsi, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbp
mov bl, byte ptr [rax]
mov r8, 0xff
shl r8, 8
not r8
and rsi, r8
movzx r8, bl
shl r8, 8
or rsi, r8
=== 4346
mov rdi, rsi
push rdi
mov rbp, rsp
mov rsi, rsi
=== 4347
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov rbp, rsi
movzx r14, r14b
=== 4348
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xcb2e6577
add rsi, 0x74db0d49; sub_carry
mov rsi, qword ptr [rsi + 0xd0]
add rsi, r14
mov r10b, byte ptr [rsi]
movzx r10, r10b
shl r10, 0x18
sub rbp, r10
movabs r11, 0x12a164d05
push r11
push 0x12aa2726
push 0x5afe0cb5
push 0x2f822451
add qword ptr [rsp + 0x18], 0x15f31dbb; sub
mov r12, rbp
=== 4349
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 208
add rsp, 208
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r15
mov r14, r12
=== 4350
mov r12, r14
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rdi
mov al, byte ptr [r14]
mov r11, 0xff
shl r11, 0x10
not r11
and r12, r11
movzx r11, al
shl r11, 0x10
or r12, r11
=== 4351
mov rbp, r12
push rbp
mov r15, rsp
mov rdi, r12
=== 4352
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r13
mov rbx, rdi
movzx r15, r15b
=== 4353
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x13f556961
add r13, 0xb4095f; sub_carry
mov r13, qword ptr [r13 + 0x1c0]
add r13, r15
mov r14b, byte ptr [r13]
movzx r14, r14b
shl r14, 0x20
sub rbx, r14
movabs rbx, 0x10d1611d1
push rbx
push 0xdf37b82
push 0x10e20274
push 0x6d0d1377
push 0x1633011b
add qword ptr [rsp + 0x20], 0x32f358ef; sub
mov r14, rbx
=== 4354
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 448
add rsp, 448
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbp
mov rsi, r14
=== 4355
mov rdi, rsi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbx
mov sil, byte ptr [rbp]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and rdi, rcx
movzx rcx, sil
shl rcx, 0x18
or rdi, rcx
=== 4356
movabs r12, 0xde8d52db
push r12
push 0x106d788d
push 0x3dd00603
push 0x41671c30
push 0x54df4e38
add qword ptr [rsp + 0x20], 0x61fc660d; input
mov rdi, rdi
=== 4357
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 8
add rsp, 8
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
mov r14, rdi
movzx rbx, bl
=== 4358
mov rax, rbx
mov rcx, 0xffffffffdfdc784a
add rcx, 0x209a50ae
push rcx
mov r14, r14
mul qword ptr [rsp]
mov r13, rax
=== 4359
mov r14, r14
add r14, r13
=== 4360
mov rdx, r14
push rdx
mov rbp, rsp
mov r13, r14
=== 4361
mov rbx, rbp
mov r14, r13
push rbx
push 0x2c892216
push 0x1b792aad
push 0x21117c5b
=== 4362
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov rsi, r14
movzx r13, r13b
=== 4363
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rsi
movabs r12, 0xc17d261a
add r12, 0x7e8c24a6; xor
=== 4364
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1640
add rsp, 1640
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdx
mov r12, r13
=== 4365
mov rsi, r12
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r15
mov bl, byte ptr [r8]
mov sil, bl
=== 4366
mov rcx, rsi
push rcx
mov rsi, rsp
mov rbp, rsi
=== 4367
mov r12, rsi
mov rbx, rbp
push r12
push 0x65074136
push 0xea85705
push 0x77380d16
push 0x4e3427d8
=== 4368
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov r14, rbx
movzx rdi, dil
=== 4369
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x12470d82f
push r13
push 0x58aa2c5e
push 0x624c7158
push 0x15546369
add qword ptr [rsp + 0x18], 0x1b987291; xor
mov rbx, r14
=== 4370
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1296
add rsp, 1296
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r15
mov r12, rbx
=== 4371
mov rbx, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbx
mov r11b, byte ptr [r13]
mov rdx, 0xff
shl rdx, 8
not rdx
and rbx, rdx
movzx rdx, r11b
shl rdx, 8
or rbx, rdx
=== 4372
mov rdi, rbx
push rdi
mov r13, rsp
mov rbp, rbx
=== 4373
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov rbx, rbp
movzx r12, r12b
=== 4374
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x1022502a3
push rsi
push 0x1d157d3d
push 0x1aea2415
push 0x47e2149c
add qword ptr [rsp + 0x18], 0x3de4481d; xor
mov r12, rbx
=== 4375
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1616
add rsp, 1616
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r15
mov rbx, r12
=== 4376
mov r13, rbx
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rdi
mov r15b, byte ptr [rdi]
mov r8, 0xff
shl r8, 0x10
not r8
and r13, r8
movzx r8, r15b
shl r8, 0x10
or r13, r8
=== 4377
mov rdx, r13
push rdx
mov rbx, rsp
mov r14, r13
=== 4378
mov rbx, rbx
mov rsi, r14
push rbx
push 0x30354ab1
push 0x18e61f07
push 0x3d9c2af9
=== 4379
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov rbp, rsi
movzx r15, r15b
=== 4380
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rbp
movabs r12, 0x10ca20866
add r12, 0x3367425a; xor
=== 4381
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1728
add rsp, 1728
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r15
mov r13, rsi
=== 4382
mov rsi, r13
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rdi
mov r15b, byte ptr [rdi]
mov r9, 0xff
shl r9, 0x18
not r9
and rsi, r9
movzx r9, r15b
shl r9, 0x18
or rsi, r9
=== 4383
mov rbp, rsi
push rbp
mov r12, rsp
mov r14, rsi
=== 4384
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rax
mov r15, r14
movzx rsi, sil
=== 4385
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x11640ff65
push rcx
push 0x79ac1753
push 0xed14167
push 0x5acf25f5
add qword ptr [rsp + 0x18], 0x29c84b5b; xor
mov rbx, r15
=== 4386
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r11
mov rsi, rbx
=== 4387
mov r14, rsi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r15
mov r15b, byte ptr [rdi]
mov rax, 0xff
shl rax, 0x20
not rax
and r14, rax
movzx rax, r15b
shl rax, 0x20
or r14, rax
=== 4388
mov r8, r14
push r8
mov r12, rsp
mov rsi, r14
=== 4389
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov rsi, rsi
movzx r13, r13b
=== 4390
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rsi
movabs r14, 0x11037209b
add r14, 0x2fd22a25; xor
=== 4391
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rsi, r12
=== 4392
mov r13, rsi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r13
mov sil, byte ptr [r15]
mov r14, 0xff
shl r14, 0x28
not r14
and r13, r14
movzx r14, sil
shl r14, 0x28
or r13, r14
=== 4393
mov rax, r13
push rax
mov rsi, rsp
mov rbp, r13
=== 4394
mov r10, rsi
mov rdi, rbp
push r10
push 0x61e352ef
push 0x4ee90ece
push 0x1ad37d79
push 0x6cc27b12
=== 4395
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov rsi, rdi
movzx r14, r14b
=== 4396
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xdf2a4324
push r15
push 0x34675a54
push 0x45f7104a
push 0x4c8471e1
push 0x7c28308b
add qword ptr [rsp + 0x20], 0x60df079c; xor
mov r12, rsi
=== 4397
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rax
mov rdi, r12
=== 4398
mov r15, rdi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbx
mov r11b, byte ptr [rsi]
mov r12, 0xff
shl r12, 0x38
not r12
and r15, r12
movzx r12, r11b
shl r12, 0x38
or r15, r12
=== 4399
mov r15, r15
movabs rbp, 0x1002b97bf
add rbp, 0x405e2129; input
=== 4400
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 20
add rsp, 20
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbp
mov r15, r15
movzx rsi, sil
=== 4401
mov rax, rsi
mov rdi, 0xffffffffdcfae3cb
add rdi, 0x23996f6e
push rdi
mov rsi, r15
mul qword ptr [rsp]
mov rbp, rax
=== 4402
mov r14, rsi
sub r14, rbp
=== 4403
mov rdi, r14
push rdi
mov rdi, rsp
mov r15, r14
=== 4404
mov r12, rdi
mov rsi, r15
push r12
push 0x6826680f
push 0x7ae77edf
push 0x627f76a9
=== 4405
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov r13, rsi
movzx r14, r14b
=== 4406
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xd53df47f
add r15, 0x6acb6e41; add_carry
mov r15, qword ptr [r15 + 0x7d0]
add r15, r14
mov r15b, byte ptr [r15]
movzx r15, r15b
shl r15, 8
add r13, r15
mov r12, r13
movabs r15, 0x13ee0ffec
add r15, 0x1285ad4; add
=== 4407
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2000
add rsp, 2000
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov rbp, r12
=== 4408
mov rbx, rbp
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r14
mov r13b, byte ptr [rsi]
mov bl, r13b
=== 4409
mov r11, rbx
push r11
mov r13, rsp
mov r14, rbx
=== 4410
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rcx
mov r15, r14
movzx rdi, dil
=== 4411
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xc92fe620
add rbx, 0x76d97ca0; add_carry
mov rbx, qword ptr [rbx + 0x3f0]
add rbx, rdi
mov r10b, byte ptr [rbx]
movzx r10, r10b
shl r10, 0x10
add r15, r10
mov rdi, r15
movabs rsi, 0xc59b4046
add rsi, 0x7a6e1a7a; add
=== 4412
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1008
add rsp, 1008
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov r12, rdi
=== 4413
mov rbp, r12
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbp
mov r14b, byte ptr [rbx]
mov rbx, 0xff
shl rbx, 8
not rbx
and rbp, rbx
movzx rbx, r14b
shl rbx, 8
or rbp, rbx
=== 4414
mov rsi, rbp
push rsi
mov rsi, rsp
mov r15, rbp
=== 4415
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov r12, r15
movzx rbp, bpl
=== 4416
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xc5df007f
add r8, 0x7a2a6241; add_carry
mov r8, qword ptr [r8 + 0x268]
add r8, rbp
mov dl, byte ptr [r8]
movzx rdx, dl
shl rdx, 0x18
add r12, rdx
mov r15, r12
movabs r14, 0x11e2641c5
add r14, 0x21e318fb; add
=== 4417
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 616
add rsp, 616
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rsi
mov rsi, r15
=== 4418
mov rdi, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r14
mov r8b, byte ptr [r13]
mov r15, 0xff
shl r15, 0x10
not r15
and rdi, r15
movzx r15, r8b
shl r15, 0x10
or rdi, r15
=== 4419
mov r11, rdi
push r11
mov rbx, rsp
mov rbp, rdi
=== 4420
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov r12, rbp
movzx rbp, bpl
=== 4421
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x1181b1ebe
add r8, 0x27ee4402; add_carry
mov r8, qword ptr [r8 + 0x290]
add r8, rbp
mov r10b, byte ptr [r8]
movzx r10, r10b
shl r10, 0x20
add r12, r10
mov rsi, r12
movabs r14, 0x12201ea01
add r14, 0x1e0770bf; add
=== 4422
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 656
add rsp, 656
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdi
mov r13, rsi
=== 4423
mov rdi, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov al, byte ptr [r15]
mov r13, 0xff
shl r13, 0x18
not r13
and rdi, r13
movzx r13, al
shl r13, 0x18
or rdi, r13
=== 4424
mov r12, rdi
push r12
mov rbp, rsp
mov rbx, rdi
=== 4425
mov r9, rbp
mov rbx, rbx
push r9
push 0x5cc15365
push 0x355526c7
push 0x107b26fd
push 0x75fd0cee
=== 4426
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov rsi, rbx
movzx r13, r13b
=== 4427
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xc556f212
add rbx, 0x7ab270ae; add_carry
mov rbx, qword ptr [rbx]
add rbx, r13
mov bpl, byte ptr [rbx]
movzx rbp, bpl
shl rbp, 0x28
add rsi, rbp
movabs rdx, 0x11b3f0934
push rdx
push 0x19dc01ee
push 0xe456832
push 0x57f2e7a
add qword ptr [rsp + 0x18], 0x24ca518c; add
mov r15, rsi
=== 4428
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r14
mov r13, r15
=== 4429
mov rbp, r13
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rsi
mov r9b, byte ptr [r10]
mov r13, 0xff
shl r13, 0x20
not r13
and rbp, r13
movzx r13, r9b
shl r13, 0x20
or rbp, r13
=== 4430
mov r15, rbp
push r15
mov rdi, rsp
mov r12, rbp
=== 4431
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov rsi, r12
movzx r14, r14b
=== 4432
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x1264af625
add r10, 0x19be6c9b; add_carry
mov r10, qword ptr [r10]
add r10, r14
mov dl, byte ptr [r10]
movzx rdx, dl
shl rdx, 0x30
add rsi, rdx
mov rdi, rsi
movabs rbp, 0xc38cf5e8
add rbp, 0x7c7c64d8; add
=== 4433
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r15
mov r14, rdi
=== 4434
mov r13, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbp
mov r12b, byte ptr [rax]
mov r15, 0xff
shl r15, 0x28
not r15
and r13, r15
movzx r15, r12b
shl r15, 0x28
or r13, r15
=== 4435
mov r13, r13
push r13
mov rbx, rsp
mov rsi, r13
=== 4436
mov rax, rbx
mov rbx, rsi
push rax
push 0x2ee60b74
push 0x69e20970
push 0x5e047c4a
=== 4437
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r13
mov r13, rbx
movzx rbp, bpl
=== 4438
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x13f07e4bb
add r8, 0x1017e05; add_carry
mov r8, qword ptr [r8]
add r8, rbp
mov r10b, byte ptr [r8]
movzx r10, r10b
shl r10, 0x38
add r13, r10
movabs r10, 0xec72deba
push r10
push 0x678b265e
push 0x1bf265a2
push 0x7cfe46f7
add qword ptr [rsp + 0x18], 0x53967c06; add
mov rsi, r13
=== 4439
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdi
mov rbx, rsi
=== 4440
mov r13, rbx
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbp
mov r10b, byte ptr [rdi]
mov r9, 0xff
shl r9, 0x30
not r9
and r13, r9
movzx r9, r10b
shl r9, 0x30
or r13, r9
=== 4441
mov r12, r13
push r12
mov rbx, rsp
mov rdi, r13
=== 4442
mov r10, rbx
mov r12, rdi
push r10
push 0x31f93c73
push 0x678f1826
push 0x359f30f2
=== 4443
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov r15, r12
movzx r12, r12b
=== 4444
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x12cd42043
push r10
push 0x3d2b69b5
push 0x60b4131e
push 0x24450853
add qword ptr [rsp + 0x18], 0x13353a7d; add
mov rbx, r15
=== 4445
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbp
mov rdi, rbx
=== 4446
mov r13, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov r12b, byte ptr [rdx]
mov rdx, 0xff
shl rdx, 0x38
not rdx
and r13, rdx
movzx rdx, r12b
shl rdx, 0x38
or r13, rdx
=== 4447
movabs r11, 0x11707528e
push r11
push 0x47bf1aeb
push 0x4d0b6909
push 0x7974bdb
push 0x56c6491d
add qword ptr [rsp + 0x20], 0x2982665a; input
mov r13, r13
=== 4448
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 12
add rsp, 12
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r9
mov r12, r13
movzx r13, r13b
=== 4449
mov rax, r13
mov rbp, 0xffffffffb8e8461d
add rbp, 0x475c2ecf
push rbp
mov r14, r12
mul qword ptr [rsp]
mov rbp, rax
=== 4450
mov rbx, r14
add rbx, rbp
=== 4451
mov rbp, rbx
push rbp
mov rbx, rsp
mov rdi, rbx
=== 4452
mov r9, rbx
mov rbx, rdi
push r9
push 0x6c4c1e06
push 0x499247c9
push 0x708611e8
push 0x77bf3b08
=== 4453
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov rbp, rbx
movzx r12, r12b
=== 4454
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x11ae22e52
add r15, 0x2527446e; sub_carry
mov r15, qword ptr [r15 + 0x668]
add r15, r12
mov cl, byte ptr [r15]
movzx rcx, cl
shl rcx, 8
sub rbp, rcx
mov r13, rbp
movabs rbp, 0xf3582eeb
add rbp, 0x4cb13bd5; sub
=== 4455
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1640
add rsp, 1640
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbp
mov rdi, r13
=== 4456
mov r13, rdi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rsi
mov bl, byte ptr [rbx]
mov r13b, bl
=== 4457
mov rsi, r13
push rsi
mov rbx, rsp
mov rsi, r13
=== 4458
mov rdi, rbx
mov r15, rsi
push rdi
push 0xc20245d
push 0x6af23522
push 0x72dd01ef
push 0x3a2c6d6c
=== 4459
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov rsi, r15
movzx r14, r14b
=== 4460
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xe7803011
add r13, 0x588942af; sub_carry
mov r13, qword ptr [r13 + 0x410]
add r13, r14
mov r15b, byte ptr [r13]
movzx r15, r15b
shl r15, 0x10
sub rsi, r15
movabs r13, 0x101232f1e
push r13
push 0x19376e4c
push 0x23d67f14
push 0x442253f3
push 0x40b7459f
add qword ptr [rsp + 0x20], 0x3ee63ba2; sub
mov r13, rsi
=== 4461
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1040
add rsp, 1040
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov rbx, r13
=== 4462
mov rbp, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov r9b, byte ptr [rax]
mov rcx, 0xff
shl rcx, 8
not rcx
and rbp, rcx
movzx rcx, r9b
shl rcx, 8
or rbp, rcx
=== 4463
mov rdx, rbp
push rdx
mov r14, rsp
mov rbp, rbp
=== 4464
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov r15, rbp
movzx rdi, dil
=== 4465
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xd8b83c73
add rax, 0x6751364d; sub_carry
mov rax, qword ptr [rax + 0x3f0]
add rax, rdi
mov r15b, byte ptr [rax]
movzx r15, r15b
shl r15, 0x18
sub r15, r15
mov rsi, r15
movabs r14, 0xf66f6910
add r14, 0x499a01b0; sub
=== 4466
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1008
add rsp, 1008
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov r13, rsi
=== 4467
mov r15, r13
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov r13b, byte ptr [r11]
mov r9, 0xff
shl r9, 0x10
not r9
and r15, r9
movzx r9, r13b
shl r9, 0x10
or r15, r9
=== 4468
mov r15, r15
push r15
mov rbp, rsp
mov rdi, r15
=== 4469
mov rdx, rbp
mov rbp, rdi
push rdx
push 0x2cd805ed
push 0x744b2d3e
push 0x52b10f5c
=== 4470
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rcx
mov r13, rbp
movzx r12, r12b
=== 4471
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xeb5bf3ea
add rbx, 0x54ad7ed6; sub_carry
mov rbx, qword ptr [rbx + 0x720]
add rbx, r12
mov r11b, byte ptr [rbx]
movzx r11, r11b
shl r11, 0x20
sub r13, r11
movabs r12, 0xea6e31f5
push r12
push 0x186f1d76
push 0x52e16794
push 0x20297bf9
add qword ptr [rsp + 0x18], 0x559b38cb; sub
mov rsi, r13
=== 4472
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1824
add rsp, 1824
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov rsi, rsi
=== 4473
mov rbp, rsi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbx
mov r9b, byte ptr [rdi]
mov rax, 0xff
shl rax, 0x18
not rax
and rbp, rax
movzx rax, r9b
shl rax, 0x18
or rbp, rax
=== 4474
mov rax, rbp
push rax
mov rbp, rsp
mov r14, rbp
=== 4475
mov rdx, rbp
mov rbx, r14
push rdx
push 0x675f6fc5
push 0x5e1457ef
push 0x36df6a58
push 0x3a4b2855
=== 4476
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r13
mov rbx, rbx
movzx rbp, bpl
=== 4477
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x13a67727e
add r12, 0x5a20042; sub_carry
mov r12, qword ptr [r12]
add r12, rbp
mov r15b, byte ptr [r12]
movzx r15, r15b
shl r15, 0x30
sub rbx, r15
mov rbx, rbx
movabs r13, 0x12146507e
add r13, 0x1ec31a42; sub
=== 4478
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rsi
mov rbp, rbx
=== 4479
mov r13, rbp
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rdi
mov dl, byte ptr [rbx]
mov rcx, 0xff
shl rcx, 0x28
not rcx
and r13, rcx
movzx rcx, dl
shl rcx, 0x28
or r13, rcx
=== 4480
mov rdi, r13
push rdi
mov r14, rsp
mov rdi, r13
=== 4481
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov r13, rdi
movzx r14, r14b
=== 4482
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x13df65fc3
add r15, 0x21312fd; sub_carry
mov r15, qword ptr [r15]
add r15, r14
mov sil, byte ptr [r15]
movzx rsi, sil
shl rsi, 0x38
sub r13, rsi
mov rbx, r13
movabs r13, 0x122da1596
add r13, 0x1d2f552a; sub
=== 4483
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r14
mov r14, rbx
=== 4484
mov rdi, r14
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rdi
mov bl, byte ptr [r14]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and rdi, rsi
movzx rsi, bl
shl rsi, 0x30
or rdi, rsi
=== 4485
mov r13, rdi
movabs rbp, 0x13d355105
add rbp, 0x35467e3; input
=== 4486
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r15
mov rbx, r13
movzx r13, r13b
=== 4487
mov rax, r13
mov rcx, 0xffffffffee908bb4
add rcx, 0x11c0799b
push rcx
mov rbx, rbx
mul qword ptr [rsp]
mov r12, rax
=== 4488
mov r13, rbx
xor r13, r12
=== 4489
mov r13, r13
push r13
mov rdi, rsp
mov rbp, r13
=== 4490
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rsi
mov r14, rbp
movzx r15, r15b
=== 4491
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x12692488c
push r11
push 0x51e64499
push 0x60b71994
push 0x46a929f7
push 0x1a952bf2
add qword ptr [rsp + 0x20], 0x19770234; xor
mov rbp, r14
=== 4492
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1416
add rsp, 1416
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r11
mov r15, rbp
=== 4493
mov r15, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov r11b, byte ptr [rax]
mov r15b, r11b
=== 4494
mov r14, r15
push r14
mov rbx, rsp
mov r13, r15
=== 4495
mov r15, rbx
mov r13, r13
push r15
push 0x58221b72
push 0x61e45789
push 0x36ee6e54
=== 4496
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov rsi, r13
movzx r14, r14b
=== 4497
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x13b5bd788
push rbp
push 0x5bf067b1
push 0x5f3b3d05
push 0x64f36b66
add qword ptr [rsp + 0x18], 0x4ad7338; xor
mov rdi, rsi
=== 4498
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1608
add rsp, 1608
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r14, rdi
=== 4499
mov r15, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbx
mov al, byte ptr [r13]
mov r12, 0xff
shl r12, 8
not r12
and r15, r12
movzx r12, al
shl r12, 8
or r15, r12
=== 4500
mov rsi, r15
push rsi
mov rbp, rsp
mov rbx, r15
=== 4501
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov r13, rbx
movzx r14, r14b
=== 4502
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r13
movabs r12, 0xe26328a3
add r12, 0x5da6221d; xor
=== 4503
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 264
add rsp, 264
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdi
mov rbp, rsi
=== 4504
mov r12, rbp
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r15
mov r11b, byte ptr [rcx]
mov r9, 0xff
shl r9, 0x10
not r9
and r12, r9
movzx r9, r11b
shl r9, 0x10
or r12, r9
=== 4505
mov rdi, r12
push rdi
mov rsi, rsp
mov r15, r12
=== 4506
mov r8, rsi
mov r13, r15
push r8
push 0x41930193
push 0x692560e6
push 0x3c485136
=== 4507
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r15, r13
movzx rbx, bl
=== 4508
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x11117e3e1
push r10
push 0x7c450a57
push 0xc2e7d4d
push 0x4d752654
add qword ptr [rsp + 0x18], 0x2ef166df; xor
mov r15, r15
=== 4509
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 408
add rsp, 408
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r13
mov r14, r15
=== 4510
mov r12, r14
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbp
mov r10b, byte ptr [rcx]
mov rax, 0xff
shl rax, 0x18
not rax
and r12, rax
movzx rax, r10b
shl rax, 0x18
or r12, rax
=== 4511
mov r8, r12
push r8
mov rbx, rsp
mov rdi, r12
=== 4512
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r15
mov rbx, rdi
movzx rbp, bpl
=== 4513
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xd7e4dbf8
push rdx
push 0x2eba4884
push 0x72826007
push 0x15b81157
push 0x431275a1
add qword ptr [rsp + 0x20], 0x68246ec8; xor
mov rdi, rbx
=== 4514
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov r15, rdi
=== 4515
mov rdi, r15
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r14
mov dl, byte ptr [r10]
mov r11, 0xff
shl r11, 0x20
not r11
and rdi, r11
movzx r11, dl
shl r11, 0x20
or rdi, r11
=== 4516
mov r14, rdi
push r14
mov r14, rsp
mov rbx, rdi
=== 4517
mov r9, r14
mov r15, rbx
push r9
push 0x657875ad
push 0x3ab4252f
push 0x2036365b
push 0x5d736dfc
=== 4518
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov r14, r15
movzx r13, r13b
=== 4519
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x123b32fbe
push rsi
push 0x2dfb358f
push 0x56566563
push 0x7405126d
push 0x1c9e060d
add qword ptr [rsp + 0x20], 0x1c561b02; xor
mov r13, r14
=== 4520
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r11
mov rsi, r13
=== 4521
mov r12, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r13
mov bl, byte ptr [r14]
mov r9, 0xff
shl r9, 0x38
not r9
and r12, r9
movzx r9, bl
shl r9, 0x38
or r12, r9
=== 4522
movabs rsi, 0x12a968c63
push rsi
push 0x7f794403
push 0x29552e1b
push 0x2c2563b4
push 0x7b4838a3
add qword ptr [rsp + 0x20], 0x15f32c85; input
mov rdi, r12
=== 4523
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_SMALL 24
add rsp, 24
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov rbx, rdi
movzx r14, r14b
=== 4524
mov rax, r14
mov rsi, 0xffffffffcaded88f
add rsi, 0x35f912ac
push rsi
mov rbx, rbx
mul qword ptr [rsp]
mov r15, rax
=== 4525
mov r13, rbx
sub r13, r15
=== 4526
mov rsi, r13
push rsi
mov rbp, rsp
mov r12, r13
=== 4527
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov r14, r12
movzx rdi, dil
=== 4528
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xeed4131c
add r10, 0x51354fa4; add_carry
mov r10, qword ptr [r10 + 0x4e8]
add r10, rdi
mov bpl, byte ptr [r10]
movzx rbp, bpl
shl rbp, 8
add r14, rbp
mov r12, r14
movabs r13, 0xe50e19cf
add r13, 0x5afb40f1; add
=== 4529
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1256
add rsp, 1256
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbp
mov rdi, r12
=== 4530
mov rsi, rdi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rsi
mov r8b, byte ptr [r14]
mov sil, r8b
=== 4531
mov rcx, rsi
push rcx
mov r15, rsp
mov rsi, rsi
=== 4532
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov r14, rsi
movzx rdi, dil
=== 4533
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xeeda13db
add r14, 0x512f4ee5; add_carry
mov r14, qword ptr [r14 + 0x410]
add r14, rdi
mov r8b, byte ptr [r14]
movzx r8, r8b
shl r8, 0x10
add r14, r8
mov rbp, r14
movabs r14, 0xd3013506
add r14, 0x6d0825ba; add
=== 4534
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1040
add rsp, 1040
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov rbx, rbp
=== 4535
mov r12, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov r10b, byte ptr [r9]
mov rsi, 0xff
shl rsi, 8
not rsi
and r12, rsi
movzx rsi, r10b
shl rsi, 8
or r12, rsi
=== 4536
mov rcx, r12
push rcx
mov r13, rsp
mov rsi, r12
=== 4537
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov rdi, rsi
movzx rbx, bl
=== 4538
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xf1c2fd41
add r10, 0x4e46657f; add_carry
mov r10, qword ptr [r10 + 0x7b0]
add r10, rbx
mov r10b, byte ptr [r10]
movzx r10, r10b
shl r10, 0x18
add rdi, r10
movabs rdx, 0xce99fcbf
push rdx
push 0x3a7c0f71
push 0x172c405b
push 0x4107211e
push 0x66383531
add qword ptr [rsp + 0x20], 0x716f5e01; add
mov rdi, rdi
=== 4539
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1968
add rsp, 1968
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov rbx, rdi
=== 4540
mov r13, rbx
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov r12b, byte ptr [r14]
mov r10, 0xff
shl r10, 0x10
not r10
and r13, r10
movzx r10, r12b
shl r10, 0x10
or r13, r10
=== 4541
mov rbx, r13
push rbx
mov r15, rsp
mov r12, r13
=== 4542
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rcx
mov r15, r12
movzx r12, r12b
=== 4543
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x11712edc2
add r10, 0x28f674fe; add_carry
mov r10, qword ptr [r10 + 0x1b0]
add r10, r12
mov bl, byte ptr [r10]
movzx rbx, bl
shl rbx, 0x20
add r15, rbx
mov r12, r15
movabs rdi, 0xce1fe23d
add rdi, 0x71e97883; add
=== 4544
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 432
add rsp, 432
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbp
mov r12, r12
=== 4545
mov rbx, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbx
mov r14b, byte ptr [r13]
mov r10, 0xff
shl r10, 0x18
not r10
and rbx, r10
movzx r10, r14b
shl r10, 0x18
or rbx, r10
=== 4546
mov r14, rbx
push r14
mov r12, rsp
mov r13, rbx
=== 4547
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov rdi, r13
movzx rbp, bpl
=== 4548
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xf5513e24
push rsi
push 0x79975616
push 0x43266a36
push 0x3f3c4361
push 0x39117b1f
add qword ptr [rsp + 0x20], 0x4ab81c9c; add
mov r14, rdi
=== 4549
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rcx
mov rbp, r14
=== 4550
mov rsi, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov r9b, byte ptr [rdx]
mov rax, 0xff
shl rax, 0x38
not rax
and rsi, rax
movzx rax, r9b
shl rax, 0x38
or rsi, rax
=== 4551
movabs r8, 0xebd64d3b
push r8
push 0x169f3983
push 0x3f065b15
push 0x2b117129
push 0x38256fc7
add qword ptr [rsp + 0x20], 0x54b36bad; input
mov rbx, rsi
=== 4552
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 28
add rsp, 28
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov r13, rbx
movzx r15, r15b
=== 4553
mov rax, r15
mov r15, 0xffffffffeed847ec
add r15, 0x11d50af5
push r15
mov r13, r13
mul qword ptr [rsp]
mov rsi, rax
=== 4554
mov r14, r13
sub r14, rsi
=== 4555
mov rbp, r14
push rbp
mov rbp, rsp
mov r15, r14
=== 4556
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov r13, r15
movzx rbp, bpl
=== 4557
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x13345e361
push r8
push 0x6c5c3f60
push 0x7f284f5d
push 0x3281614c
push 0x6008009f
add qword ptr [rsp + 0x20], 0xcc3675f; xor
mov r12, r13
=== 4558
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 208
add rsp, 208
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r11
mov r15, r12
=== 4559
mov rbx, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbp
mov r13b, byte ptr [rbp]
mov bl, r13b
=== 4560
mov r10, rbx
push r10
mov r14, rsp
mov r13, rbx
=== 4561
mov rbp, r14
mov rbx, r13
push rbp
push 0x6bc70d2a
push 0x19024151
push 0x3e4643b3
push 0x39f10bf9
=== 4562
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rax
mov r13, rbx
movzx r15, r15b
=== 4563
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x11553d874
push r14
push 0x4a813332
push 0x706073
push 0x3e515aab
push 0x164c1db6
add qword ptr [rsp + 0x20], 0x2ab5724c; xor
mov r14, r13
=== 4564
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 192
add rsp, 192
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r8
mov r14, r14
=== 4565
mov r13, r14
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r13
mov bl, byte ptr [rsi]
mov rcx, 0xff
shl rcx, 8
not rcx
and r13, rcx
movzx rcx, bl
shl rcx, 8
or r13, rcx
=== 4566
mov r10, r13
push r10
mov r14, rsp
mov rsi, r13
=== 4567
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov rbp, rsi
movzx rsi, sil
=== 4568
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x12aab036d
push r10
push 0x1f3d239a
push 0x76c24afa
push 0x4d505a0
push 0x79ea0ba9
add qword ptr [rsp + 0x20], 0x155e4753; xor
mov rbx, rbp
=== 4569
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1808
add rsp, 1808
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r14
mov rdi, rbx
=== 4570
mov r12, rdi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbx
mov bl, byte ptr [r14]
mov r9, 0xff
shl r9, 0x10
not r9
and r12, r9
movzx r9, bl
shl r9, 0x10
or r12, r9
=== 4571
mov r11, r12
push r11
mov rbx, rsp
mov r15, r12
=== 4572
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov r14, r15
movzx r15, r15b
=== 4573
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xe9ecf616
push rax
push 0x114f7ae7
push 0x24087f2c
push 0x625f250e
add qword ptr [rsp + 0x18], 0x561c54aa; xor
mov r13, r14
=== 4574
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 864
add rsp, 864
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r12
mov r13, r13
=== 4575
mov rbp, r13
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rsi
mov r11b, byte ptr [rdx]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and rbp, rsi
movzx rsi, r11b
shl rsi, 0x18
or rbp, rsi
=== 4576
mov rdi, rbp
push rdi
mov r12, rsp
mov r13, rbp
=== 4577
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov rbx, r13
movzx r14, r14b
=== 4578
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xf16d303d
push r8
push 0x5e7521f4
push 0x3df4350a
push 0x7e02a69
push 0x35994db2
add qword ptr [rsp + 0x20], 0x4e9c1a83; xor
mov rbp, rbx
=== 4579
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rsi
mov r14, rbp
=== 4580
mov rbx, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbp
mov r14b, byte ptr [rax]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and rbx, rdx
movzx rdx, r14b
shl rdx, 0x28
or rbx, rdx
=== 4581
mov rax, rbx
push rax
mov r15, rsp
mov r12, rbx
=== 4582
mov r12, r15
mov rbx, r12
push r12
push 0x16d14f34
push 0x2143392a
push 0x756c0b7d
push 0x526916bd
=== 4583
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov rbx, rbx
movzx rsi, sil
=== 4584
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rbx
movabs r12, 0x12516d2d0
add r12, 0x1af277f0; xor
=== 4585
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r15
mov r13, rsi
=== 4586
mov rdi, r13
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r12
mov bpl, byte ptr [rbx]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and rdi, rsi
movzx rsi, bpl
shl rsi, 0x30
or rdi, rsi
=== 4587
mov r14, rdi
push r14
mov r14, rsp
mov r15, rdi
=== 4588
mov rbx, r14
mov rdi, r15
push rbx
push 0x620e158d
push 0x35c07ba
push 0x5b685ff4
push 0x34a97b1d
=== 4589
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov r14, rdi
movzx rsi, sil
=== 4590
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xf0b347af
add r15, 0x4f562b11; sub_carry
mov r15, qword ptr [r15 + 0x218]
add r15, rsi
mov r14b, byte ptr [r15]
movzx r14, r14b
shl r14, 8
sub r14, r14
mov r12, r14
movabs rsi, 0xf3bb46bb
add rsi, 0x4c4e2405; sub
=== 4591
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 536
add rsp, 536
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r14, r12
=== 4592
mov r13, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov al, byte ptr [r15]
mov r13b, al
=== 4593
mov r12, r13
push r12
mov rbx, rsp
mov r13, r13
=== 4594
mov rsi, rbx
mov r14, r13
push rsi
push 0x196676bc
push 0x75f97887
push 0x3da01c94
=== 4595
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov r14, r14
movzx r12, r12b
=== 4596
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xd87d2a7b
add r10, 0x678c4845; sub_carry
mov r10, qword ptr [r10 + 0x220]
add r10, r12
mov dil, byte ptr [r10]
movzx rdi, dil
shl rdi, 0x10
sub r14, rdi
mov rdi, r14
movabs r14, 0x101914a58
add r14, 0x3e782068; sub
=== 4597
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 544
add rsp, 544
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov r14, rdi
=== 4598
mov r12, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov al, byte ptr [r10]
mov r15, 0xff
shl r15, 8
not r15
and r12, r15
movzx r15, al
shl r15, 8
or r12, r15
=== 4599
mov rbx, r12
push rbx
mov rdi, rsp
mov r13, r12
=== 4600
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
mov rdi, r13
movzx r12, r12b
=== 4601
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xe2f14413
add r13, 0x5d182ead; sub_carry
mov r13, qword ptr [r13 + 0x4d8]
add r13, r12
mov r15b, byte ptr [r13]
movzx r15, r15b
shl r15, 0x18
sub rdi, r15
mov r13, rdi
movabs r14, 0xde9e5319
add r14, 0x616b17a7; sub
=== 4602
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1240
add rsp, 1240
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r14
mov rbx, r13
=== 4603
mov r15, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rsi
mov bl, byte ptr [rbp]
mov rcx, 0xff
shl rcx, 0x10
not rcx
and r15, rcx
movzx rcx, bl
shl rcx, 0x10
or r15, rcx
=== 4604
mov rbp, r15
push rbp
mov r12, rsp
mov r13, r15
=== 4605
mov r11, r12
mov r14, r13
push r11
push 0x145b6a74
push 0x7b720f73
push 0x73030893
push 0x13e8396d
=== 4606
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rdi, r14
movzx r13, r13b
=== 4607
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x10cd06034
add r12, 0x3339128c; sub_carry
mov r12, qword ptr [r12 + 0x798]
add r12, r13
mov al, byte ptr [r12]
movzx rax, al
shl rax, 0x20
sub rdi, rax
mov r13, rdi
movabs r14, 0xf5bc4bc8
add r14, 0x4a4d1ef8; sub
=== 4608
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1944
add rsp, 1944
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r11
mov r15, r13
=== 4609
mov r14, r15
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r13
mov r9b, byte ptr [rbx]
mov r15, 0xff
shl r15, 0x18
not r15
and r14, r15
movzx r15, r9b
shl r15, 0x18
or r14, r15
=== 4610
mov rbx, r14
push rbx
mov r12, rsp
mov r15, r14
=== 4611
mov rdi, r12
mov r14, r15
push rdi
push 0x2a6c08d9
push 0x51de5a3d
push 0x3a4d47af
push 0x28f00b88
=== 4612
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r15
mov r12, r14
movzx r15, r15b
=== 4613
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x133e15fd2
add r11, 0xc2812ee; sub_carry
mov r11, qword ptr [r11 + 0x7f8]
add r11, r15
mov cl, byte ptr [r11]
movzx rcx, cl
shl rcx, 0x28
sub r12, rcx
movabs r10, 0x129c23b1d
push r10
push 0x1bb36854
push 0x116112af
push 0x46b9658c
add qword ptr [rsp + 0x18], 0x16472fa3; sub
mov rdi, r12
=== 4614
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdx
mov r13, rdi
=== 4615
mov r12, r13
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r15
mov r10b, byte ptr [r10]
mov rbp, 0xff
shl rbp, 0x20
not rbp
and r12, rbp
movzx rbp, r10b
shl rbp, 0x20
or r12, rbp
=== 4616
mov rsi, r12
push rsi
mov r12, rsp
mov r13, r12
=== 4617
mov rsi, r12
mov rdi, r13
push rsi
push 0x71df0891
push 0x1c876e3a
push 0x297602f0
=== 4618
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbp
mov r14, rdi
movzx r15, r15b
=== 4619
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x101d20747
add r12, 0x3e376b79; sub_carry
mov r12, qword ptr [r12 + 0x7f8]
add r12, r15
mov cl, byte ptr [r12]
movzx rcx, cl
shl rcx, 0x30
sub r14, rcx
movabs r15, 0xfe7850a0
push r15
push 0x2cbc3354
push 0x80c7fa0
push 0x658c702e
push 0x4cb542c9
add qword ptr [rsp + 0x20], 0x41911a20; sub
mov r14, r14
=== 4620
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rax
mov rbx, r14
=== 4621
mov rsi, rbx
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbp
mov al, byte ptr [r14]
mov r9, 0xff
shl r9, 0x28
not r9
and rsi, r9
movzx r9, al
shl r9, 0x28
or rsi, r9
=== 4622
mov r11, rsi
push r11
mov r12, rsp
mov rbx, rsi
=== 4623
mov rsi, r12
mov rbx, rbx
push rsi
push 0x77926eea
push 0x106743d
push 0x58103e3e
push 0x5f01dc4
=== 4624
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov r15, rbx
movzx rdi, dil
=== 4625
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xef901e88
add rcx, 0x50795438; sub_carry
mov rcx, qword ptr [rcx + 0x7f8]
add rcx, rdi
mov r12b, byte ptr [rcx]
movzx r12, r12b
shl r12, 0x38
sub r15, r12
movabs rdi, 0xf5845144
push rdi
push 0x52d447ee
push 0x73974ab2
push 0x14d378de
add qword ptr [rsp + 0x18], 0x4a85197c; sub
mov rsi, r15
=== 4626
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov r15, rsi
=== 4627
mov rsi, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov r14b, byte ptr [r9]
mov rdx, 0xff
shl rdx, 0x30
not rdx
and rsi, rdx
movzx rdx, r14b
shl rdx, 0x30
or rsi, rdx
=== 4628
mov r13, rsi
push r13
mov r12, rsp
mov rsi, rsi
=== 4629
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rcx
mov rsi, rsi
movzx r13, r13b
=== 4630
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rsi
movabs r13, 0xe1000ea4
add r13, 0x5f095c1c; sub
=== 4631
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r12
mov rbp, rbp
=== 4632
mov r14, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r13
mov r13b, byte ptr [r8]
mov rbp, 0xff
shl rbp, 0x38
not rbp
and r14, rbp
movzx rbp, r13b
shl rbp, 0x38
or r14, rbp
=== 4633
mov rcx, r14
push rcx
mov rdi, rsp
mov r14, r14
=== 4634
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r13
mov rbx, r14
movzx r13, r13b
=== 4635
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x12912043a
push rax
push 0x152b4338
push 0x81524dd
push 0x745d7eb7
push 0x77322ff9
add qword ptr [rsp + 0x20], 0x16f74e86; or
mov rbx, rbx
=== 4636
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov rdi, rbx
=== 4637
mov r13, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r13
mov r9b, byte ptr [rcx]
mov r13b, r9b
=== 4638
mov rbx, r13
push rbx
mov r14, rsp
mov rsi, r13
=== 4639
mov rbx, r14
mov r12, rsi
push rbx
push 0x77cd3be7
push 0x7c45543a
push 0xcc34322
=== 4640
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r10
mov r12, r12
movzx r14, r14b
=== 4641
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xcff1188a
push r14
push 0x53c22dcf
push 0x46530d13
push 0x6c4376ed
push 0x2fc7be7
add qword ptr [rsp + 0x20], 0x70183a36; or
mov rbp, r12
=== 4642
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rax
mov rdi, rbp
=== 4643
mov r12, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov r11b, byte ptr [rax]
mov rsi, 0xff
shl rsi, 0x28
not rsi
and r12, rsi
movzx rsi, r11b
shl rsi, 0x28
or r12, rsi
=== 4644
mov r14, r12
movabs r12, 0xd9d595fb
add r12, 0x662a7bf5
test r14, r14
lea rsi, [rip - 0x392468]
cmovne rsi, r12
jmp rsi
=== 4645
movabs r12, 0xc4d8802d
add r12, 0x7bb138bb; input
=== 4646
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 29
add rsp, 29
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
movzx r15, r15b
=== 4647
mov rax, r15
mov r12, 0xffffffff84b1eb0c
add r12, 0x7bc0654d
push r12
mul qword ptr [rsp]
mov r13, rax
=== 4648
mov rcx, r13
push rcx
mov rbx, rsp
mov rdi, r13
=== 4649
mov r13, rbx
mov rsi, rdi
push r13
push 0x5d32346
push 0x773f510a
push 0x1ca20bc8
=== 4650
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r8
mov rbp, rsi
movzx r13, r13b
=== 4651
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xe5e32037
push r12
push 0x64ba321e
push 0x288d108e
push 0x2f461acc
add qword ptr [rsp + 0x18], 0x5a262a89; xor
mov rsi, rbp
=== 4652
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 856
add rsp, 856
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r14
mov rdi, rsi
=== 4653
mov rsi, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov r9b, byte ptr [r12]
mov sil, r9b
=== 4654
mov rcx, rsi
push rcx
mov rdi, rsp
mov r15, rsi
=== 4655
mov r12, rdi
mov r14, r15
push r12
push 0x32102f46
push 0x1e643950
push 0x57c2419e
=== 4656
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov rbx, r14
movzx rdi, dil
=== 4657
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x11f7bfd5d
push r8
push 0x2efd0a8f
push 0x44e73385
push 0x28471686
push 0x56bb74b3
add qword ptr [rsp + 0x20], 0x208d4d63; xor
mov rbp, rbx
=== 4658
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1272
add rsp, 1272
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov r14, rbp
=== 4659
mov r12, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rsi
mov r14b, byte ptr [rdi]
mov rsi, 0xff
shl rsi, 8
not rsi
and r12, rsi
movzx rsi, r14b
shl rsi, 8
or r12, rsi
=== 4660
mov rax, r12
push rax
mov r13, rsp
mov rbx, r12
=== 4661
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdi
mov r14, rbx
movzx rsi, sil
=== 4662
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r14
movabs r14, 0x110b1e63b
add r14, 0x2f576485; xor
=== 4663
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1456
add rsp, 1456
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov rbp, r12
=== 4664
mov r14, rbp
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbx
mov r8b, byte ptr [rbx]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and r14, rbx
movzx rbx, r8b
shl rbx, 0x10
or r14, rbx
=== 4665
mov r10, r14
push r10
mov r13, rsp
mov rsi, r14
=== 4666
mov rbx, r13
mov rdi, rsi
push rbx
push 0x29132bff
push 0x3589546f
push 0x125847e0
=== 4667
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbp
mov r13, rdi
movzx r12, r12b
=== 4668
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r13
movabs rsi, 0x11dde0dfb
add rsi, 0x222b3cc5; xor
=== 4669
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1344
add rsp, 1344
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov r13, r14
=== 4670
mov rdi, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbp
mov r15b, byte ptr [r15]
mov r9, 0xff
shl r9, 0x18
not r9
and rdi, r9
movzx r9, r15b
shl r9, 0x18
or rdi, r9
=== 4671
mov r14, rdi
push r14
mov rsi, rsp
mov r13, rdi
=== 4672
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rsi
mov rbp, r13
movzx r15, r15b
=== 4673
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rbp
movabs rsi, 0xe8c7caea
a
d
d
 
r
s
i
,
 
0
x
5
7
4
1
7
f
d
6
=== 4674
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov rbx, r13
=== 4675
mov r15, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov r14b, byte ptr [r8]
mov rdi, 0xff
shl rdi, 0x30
not rdi
and r15, rdi
movzx rdi, r14b
shl rdi, 0x30
or r15, rdi
=== 4676
mov rdx, r15
push rdx
mov r15, rsp
mov r12, r15
=== 4677
mov rbx, r15
mov r13, r12
push rbx
push 0x74244be
push 0x625c638c
push 0x2eeb6d53
push 0x1a590e50
=== 4678
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rax
mov r13, r13
movzx rbx, bl
=== 4679
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x1257bcd0b
push rbp
push 0x5bdb469c
push 0x352a2c4a
push 0x53ab6bee
push 0x5ce53b25
add qword ptr [rsp + 0x20], 0x1a8d7db5; xor
mov rbx, r13
=== 4680
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov rdi, rbx
=== 4681
mov r15, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov cl, byte ptr [rcx]
mov r11, 0xff
shl r11, 0x38
not r11
and r15, r11
movzx r11, cl
shl r11, 0x38
or r15, r11
=== 4682
mov r15, r15
movabs r13, 0xf3259f00
add r13, 0x4d6419e8; input
=== 4683
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 17
add rsp, 17
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbp
mov r13, r15
movzx r12, r12b
=== 4684
mov rax, r12
mov r9, 0xffffffffdfe866ae
add r9, 0x20856939
push r9
mov rdi, r13
mul qword ptr [rsp]
mov r15, rax
=== 4685
mov rbx, rdi
add rbx, r15
=== 4686
mov r14, rbx
push r14
mov rdi, rsp
mov r12, rbx
=== 4687
mov r15, rdi
mov r12, r12
push r15
push 0x5e057df9
push 0x528e51c5
push 0x34533506
=== 4688
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov r13, r12
movzx rdi, dil
=== 4689
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x1375820a4
push rdi
push 0x161f2965
push 0x658416e0
push 0x436a55d1
push 0x11400af2
add qword ptr [rsp + 0x20], 0x8b12a1c; xor
mov rbx, r13
=== 4690
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1232
add rsp, 1232
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov rdi, rbx
=== 4691
mov r14, rdi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r15
mov al, byte ptr [r13]
mov r14b, al
=== 4692
mov r14, r14
push r14
mov r14, rsp
mov r15, r14
=== 4693
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov rsi, r15
movzx r15, r15b
=== 4694
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rsi
movabs rsi, 0xd9fc0912
add rsi, 0x660d41ae; xor
=== 4695
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 288
add rsp, 288
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdi
mov r15, rbp
=== 4696
mov rbx, r15
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r14
mov r9b, byte ptr [r11]
mov r10, 0xff
shl r10, 8
not r10
and rbx, r10
movzx r10, r9b
shl r10, 8
or rbx, r10
=== 4697
mov r12, rbx
push r12
mov rbp, rsp
mov rbx, rbx
=== 4698
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rsi
mov r14, rbx
movzx r12, r12b
=== 4699
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r14
movabs rdi, 0x13474e2c0
add rdi, 0xb946800; xor
=== 4700
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 480
add rsp, 480
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rax
mov rbx, r13
=== 4701
mov rbx, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r12
mov r14b, byte ptr [rbp]
mov r13, 0xff
shl r13, 0x10
not r13
and rbx, r13
movzx r13, r14b
shl r13, 0x10
or rbx, r13
=== 4702
mov rcx, rbx
push rcx
mov rsi, rsp
mov r13, rbx
=== 4703
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbx
mov rbx, r13
movzx r15, r15b
=== 4704
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xf921d159
push rdx
push 0x75cb3d5c
push 0x79e20f09
push 0x420e5b0f
add qword ptr [rsp + 0x18], 0x46e77967; xor
mov r14, rbx
=== 4705
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 808
add rsp, 808
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r11
mov r15, r14
=== 4706
mov r15, r15
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rsi
mov sil, byte ptr [rbx]
mov rax, 0xff
shl rax, 0x18
not rax
and r15, rax
movzx rax, sil
shl rax, 0x18
or r15, rax
=== 4707
mov r8, r15
push r8
mov r15, rsp
mov rsi, r15
=== 4708
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov r14, rsi
movzx rbx, bl
=== 4709
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x11870cba8
push r12
push 0x15448f0
push 0x74877c12
push 0x142113c6
add qword ptr [rsp + 0x18], 0x27987f18; xor
mov r12, r14
=== 4710
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rcx
mov r12, r12
=== 4711
mov r14, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov dil, byte ptr [r10]
mov r15, 0xff
shl r15, 0x20
not r15
and r14, r15
movzx r15, dil
shl r15, 0x20
or r14, r15
=== 4712
mov rbp, r14
push rbp
mov r12, rsp
mov rsi, r14
=== 4713
mov r11, r12
mov rsi, rsi
push r11
push 0x2ccc2e69
push 0x44b4321c
push 0x58b77984
=== 4714
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
mov r13, rsi
movzx rsi, sil
=== 4715
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xccf8cffa
push r11
push 0x42f94fbf
push 0x2ff67fa8
push 0x73c02fa5
add qword ptr [rsp + 0x18], 0x73107ac6; xor
mov rbx, r13
=== 4716
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov r15, rbx
=== 4717
mov r14, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov r12b, byte ptr [r9]
mov r10, 0xff
shl r10, 0x28
not r10
and r14, r10
movzx r10, r12b
shl r10, 0x28
or r14, r10
=== 4718
movabs rsi, 0xdaa9887f
push rsi
push 0x53d230fc
push 0x43cd4ac2
push 0x7e780a86
add qword ptr [rsp + 0x18], 0x65e03069; input
mov rbx, r14
=== 4719
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov rbx, rbx
movzx r15, r15b
=== 4720
mov rax, r15
mov rdx, 0xfffffffffd06f6b5
add rdx, 0x388558f
push rdx
mov r13, rbx
mul qword ptr [rsp]
mov rbp, rax
=== 4721
mov r14, r13
add r14, rbp
=== 4722
mov rdx, r14
push rdx
mov rdi, rsp
mov r15, r14
=== 4723
mov r15, rdi
mov rbp, r15
push r15
push 0x22403604
push 0x4f81329e
push 0xb136754
=== 4724
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov rbx, rbp
movzx r14, r14b
=== 4725
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xee812555
push r8
push 0x4d2f7a63
push 0x7cfc2de1
push 0x641306c5
add qword ptr [rsp + 0x18], 0x5188256b; xor
mov r14, rbx
=== 4726
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1064
add rsp, 1064
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r11
mov r12, r14
=== 4727
mov rsi, r12
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov r12b, byte ptr [rax]
mov sil, r12b
=== 4728
mov r10, rsi
push r10
mov rbp, rsp
mov r13, rsi
=== 4729
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r14
mov r14, r13
movzx r15, r15b
=== 4730
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xca8141cc
push rbx
push 0xef9000a
push 0x4e003939
push 0x7ff04b0c
push 0x48a36667
add qword ptr [rsp + 0x20], 0x758808f4; xor
mov rdi, r14
=== 4731
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 944
add rsp, 944
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov rsi, rdi
=== 4732
mov r15, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov cl, byte ptr [r14]
mov rbx, 0xff
shl rbx, 8
not rbx
and r15, rbx
movzx rbx, cl
shl rbx, 8
or r15, rbx
=== 4733
mov rsi, r15
push rsi
mov r12, rsp
mov rbx, r15
=== 4734
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
mov r12, rbx
movzx rbx, bl
=== 4735
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x117ae0f25
push r10
push 0x731e2f24
push 0x6a711fe1
push 0x2d162764
push 0x697255dc
add qword ptr [rsp + 0x20], 0x285b3b9b; xor
mov rbx, r12
=== 4736
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1856
add rsp, 1856
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r12, rbx
=== 4737
mov rbx, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov r10b, byte ptr [r15]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and rbx, rsi
movzx rsi, r10b
shl rsi, 0x10
or rbx, rsi
=== 4738
mov r8, rbx
push r8
mov rsi, rsp
mov r14, rbx
=== 4739
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r13
mov r15, r14
movzx r12, r12b
=== 4740
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r15
movabs rbp, 0xca693b1c
add rbp, 0x75a00fa4; xor
=== 4741
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 832
add rsp, 832
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r15
mov r13, r14
=== 4742
mov rdi, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov r11b, byte ptr [r15]
mov r8, 0xff
shl r8, 0x18
not r8
and rdi, r8
movzx r8, r11b
shl r8, 0x18
or rdi, r8
=== 4743
mov rcx, rdi
push rcx
mov r14, rsp
mov rbx, rdi
=== 4744
mov rdi, r14
mov rsi, rbx
push rdi
push 0x1888265c
push 0x41fe3205
push 0x76d53776
push 0x3b8b0e2d
=== 4745
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r12
mov rsi, rsi
movzx r14, r14b
=== 4746
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rsi
movabs rsi, 0x13c710ab1
add rsi, 0x398400f; xor
=== 4747
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rax
mov r15, r14
=== 4748
mov r15, r15
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov cl, byte ptr [rdx]
mov r13, 0xff
shl r13, 0x28
not r13
and r15, r13
movzx r13, cl
shl r13, 0x28
or r15, r13
=== 4749
mov rcx, r15
push rcx
mov r15, rsp
mov rdi, r15
=== 4750
mov r14, r15
mov r13, rdi
push r14
push 0x75bb7aa6
push 0x76e07b3e
push 0x5dbd4e27
=== 4751
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov r15, r13
movzx r13, r13b
=== 4752
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xc9df1197
push r13
push 0x7a4576eb
push 0x590f1891
push 0x21304823
add qword ptr [rsp + 0x18], 0x762a3929; xor
mov rsi, r15
=== 4753
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbx
mov r13, rsi
=== 4754
mov rsi, r13
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rsi
mov r13b, byte ptr [rbx]
mov r9, 0xff
shl r9, 0x30
not r9
and rsi, r9
movzx r9, r13b
shl r9, 0x30
or rsi, r9
=== 4755
mov r15, rsi
push r15
mov r15, rsp
mov rdi, rsi
=== 4756
mov r10, r15
mov rbx, rdi
push r10
push 0x47e40b2d
push 0x6ce21b65
push 0x6046199e
push 0x6761539c
=== 4757
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov rbx, rbx
movzx r14, r14b
=== 4758
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rbx
movabs r15, 0xff1d10da
add r15, 0x40ec39e6; xor
=== 4759
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rax
mov rdi, rdi
=== 4760
mov r14, rdi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r14
mov r10b, byte ptr [rdi]
mov rax, 0xff
shl rax, 0x38
not rax
and r14, rax
movzx rax, r10b
shl rax, 0x38
or r14, rax
=== 4761
mov r13, r14
movabs rbp, 0xe33354ae
add rbp, 0x5d56643a; input
=== 4762
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 9
add rsp, 9
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov rsi, r13
movzx r12, r12b
=== 4763
mov rax, r12
mov rdi, 0xffffffffe283dacf
add rdi, 0x1e4f19ff
push rdi
mov rdi, rsi
mul qword ptr [rsp]
mov rbp, rax
=== 4764
mov r12, rdi
sub r12, rbp
=== 4765
mov rbp, r12
push rbp
mov r15, rsp
mov rbx, r12
=== 4766
mov r15, r15
mov r13, rbx
push r15
push 0x2b186e44
push 0x6613e94
push 0x1b8047a7
=== 4767
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov rbx, r13
movzx r14, r14b
=== 4768
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x12b28fbc4
add rcx, 0x14e076fc; sub_carry
mov rcx, qword ptr [rcx + 0x628]
add rcx, r14
mov dl, byte ptr [rcx]
movzx rdx, dl
shl rdx, 8
sub rbx, rdx
mov r13, rbx
movabs rbx, 0xf4a73b12
add rbx, 0x4b622fae; sub
=== 4769
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1576
add rsp, 1576
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov r14, r13
=== 4770
mov rbp, r14
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r12
mov dil, byte ptr [r14]
mov bpl, dil
=== 4771
mov rdi, rbp
push rdi
mov rdi, rsp
mov rsi, rbp
=== 4772
mov r12, rdi
mov r14, rsi
push r12
push 0x1a566849
push 0x3adf2086
push 0x691e1f48
push 0x23e0088
=== 4773
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r13
mov r13, r14
movzx r12, r12b
=== 4774
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xcda70980
add r14, 0x72626940; sub_carry
mov r14, qword ptr [r14 + 0x468]
add r14, r12
mov dl, byte ptr [r14]
movzx rdx, dl
shl rdx, 0x10
sub r13, rdx
mov r13, r13
movabs rbx, 0xfb441b5d
add rbx, 0x44c54f63; sub
=== 4775
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1128
add rsp, 1128
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r11
mov rsi, r13
=== 4776
mov rsi, rsi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov r12b, byte ptr [rbp]
mov r14, 0xff
shl r14, 8
not r14
and rsi, r14
movzx r14, r12b
shl r14, 8
or rsi, r14
=== 4777
mov rcx, rsi
push rcx
mov rdi, rsp
mov r14, rsi
=== 4778
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbp
mov r14, r14
movzx r12, r12b
=== 4779
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xd56907b0
add r8, 0x6aa06b10; sub_carry
mov r8, qword ptr [r8 + 0x118]
add r8, r12
mov bl, byte ptr [r8]
movzx rbx, bl
shl rbx, 0x18
sub r14, rbx
mov r13, r14
movabs r12, 0xfe044db9
add r12, 0x42051d07; sub
=== 4780
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 280
add rsp, 280
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbp
mov r15, r13
=== 4781
mov rbp, r15
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r13
mov dil, byte ptr [r13]
mov r11, 0xff
shl r11, 0x10
not r11
and rbp, r11
movzx r11, dil
shl r11, 0x10
or rbp, r11
=== 4782
mov rdx, rbp
push rdx
mov r14, rsp
mov rbx, rbp
=== 4783
mov rdi, r14
mov rbx, rbx
push rdi
push 0x4c253dc
push 0x34031113
push 0x726e44ba
push 0x8e10cbd
=== 4784
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov rdi, rbx
movzx rsi, sil
=== 4785
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x1020260b8
add r14, 0x3e071208; sub_carry
mov r14, qword ptr [r14 + 0x438]
add r14, rsi
mov al, byte ptr [r14]
movzx rax, al
shl rax, 0x20
sub rdi, rax
movabs rax, 0x12c2ceb0c
push rax
push 0x432765a9
push 0x580378ef
push 0x655f37ef
add qword ptr [rsp + 0x18], 0x13dc7fb4; sub
mov r15, rdi
=== 4786
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1080
add rsp, 1080
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbp
mov r13, r15
=== 4787
mov rsi, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r12
mov r11b, byte ptr [rax]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and rsi, rbp
movzx rbp, r11b
shl rbp, 0x18
or rsi, rbp
=== 4788
mov rdi, rsi
push rdi
mov r12, rsp
mov rbp, rsi
=== 4789
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
mov rdi, rbp
movzx rbx, bl
=== 4790
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xd3b1396e
add r15, 0x6c583952; sub_carry
mov r15, qword ptr [r15]
add r15, rbx
mov r13b, byte ptr [r15]
movzx r13, r13b
shl r13, 0x30
sub rdi, r13
movabs r14, 0xdcbf0608
push r14
push 0x239712f1
push 0x49fe6dc8
push 0x119a376d
add qword ptr [rsp + 0x18], 0x634a64b8; sub
mov rbx, rdi
=== 4791
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov rbp, rbx
=== 4792
mov rdi, rbp
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov sil, byte ptr [r15]
mov r13, 0xff
shl r13, 0x28
not r13
and rdi, r13
movzx r13, sil
shl r13, 0x28
or rdi, r13
=== 4793
movabs r8, 0x10b25a169
push r8
push 0x282b0aea
push 0x6999349c
push 0x58c666e0
push 0x56b65088
add qword ptr [rsp + 0x20], 0x3564177f; input
mov r13, rdi
=== 4794
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 13
add rsp, 13
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov rsi, r13
movzx r12, r12b
=== 4795
mov rax, r12
mov r9, 0xfffffffffa3a8967
add r9, 0x6af13d8
push r9
mov rbp, rsi
mul qword ptr [rsp]
mov r14, rax
=== 4796
mov r12, rbp
xor r12, r14
=== 4797
mov rbp, r12
push rbp
mov r15, rsp
mov rbx, r12
=== 4798
mov r11, r15
mov r13, rbx
push r11
push 0x63801768
push 0x30c82a90
push 0x3394339d
=== 4799
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov rdi, r13
movzx r14, r14b
=== 4800
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xdcde4033
add rdx, 0x632b228d; add_carry
mov rdx, qword ptr [rdx + 0x3d0]
add rdx, r14
mov cl, byte ptr [rdx]
movzx rcx, cl
shl rcx, 8
add rdi, rcx
mov rsi, rdi
movabs r13, 0xce68f86a
add r13, 0x71a06256; add
=== 4801
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 976
add rsp, 976
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov rdi, rsi
=== 4802
mov r14, rdi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r15
mov dil, byte ptr [r9]
mov r14b, dil
=== 4803
mov rbp, r14
push rbp
mov r12, rsp
mov rdi, r14
=== 4804
mov r13, r12
mov rbx, rdi
push r13
push 0x5c965140
push 0x3fb56571
push 0x7838321e
push 0x26b42b53
=== 4805
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdi
mov rbp, rbx
movzx r12, r12b
=== 4806
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x1393cf4c0
add rcx, 0x6cc6e00; add_carry
mov rcx, qword ptr [rcx + 0x3c8]
add rcx, r12
mov bl, byte ptr [rcx]
movzx rbx, bl
shl rbx, 0x10
add rbp, rbx
movabs r11, 0xe79557fb
push r11
push 0x44c4320d
push 0x40155fce
push 0x2d3d4a3c
add qword ptr [rsp + 0x18], 0x587402c5; add
mov r12, rbp
=== 4807
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 968
add rsp, 968
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov rbx, r12
=== 4808
mov r14, rbx
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rdi
mov r9b, byte ptr [rbx]
mov r13, 0xff
shl r13, 8
not r13
and r14, r13
movzx r13, r9b
shl r13, 8
or r14, r13
=== 4809
mov r14, r14
push r14
mov r14, rsp
mov rbp, r14
=== 4810
mov r13, r14
mov rbx, rbp
push r13
push 0x3ea03383
push 0x71b46f71
push 0x2604b3c
=== 4811
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
mov r12, rbx
movzx rsi, sil
=== 4812
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xfa7515e0
add r14, 0x45944ce0; add_carry
mov r14, qword ptr [r14 + 0xb0]
add r14, rsi
mov r8b, byte ptr [r14]
movzx r8, r8b
shl r8, 0x18
add r12, r8
movabs r15, 0x13cee0284
push r15
push 0x76504189
push 0x409c4032
push 0x266f2122
add qword ptr [rsp + 0x18], 0x31b583c; add
mov r15, r12
=== 4813
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 176
add rsp, 176
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov rbx, r15
=== 4814
mov r14, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbp
mov r9b, byte ptr [r8]
mov r15, 0xff
shl r15, 0x10
not r15
and r14, r15
movzx r15, r9b
shl r15, 0x10
or r14, r15
=== 4815
mov r10, r14
push r10
mov r13, rsp
mov rsi, r14
=== 4816
mov rcx, r13
mov r14, rsi
push rcx
push 0x2bcd1097
push 0x3e49649c
push 0x28567aa6
push 0x44372a9f
=== 4817
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov rbx, r14
movzx r15, r15b
=== 4818
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xf7a7ef58
add r15, 0x48617368; add_carry
mov r15, qword ptr [r15 + 0x768]
add r15, r15
mov r11b, byte ptr [r15]
movzx r11, r11b
shl r11, 0x20
add rbx, r11
mov r14, rbx
movabs r12, 0xfe3312c1
add r12, 0x41d647ff; add
=== 4819
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1896
add rsp, 1896
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov rbp, r14
=== 4820
mov r14, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r15
mov dil, byte ptr [r12]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and r14, rbp
movzx rbp, dil
shl rbp, 0x18
or r14, rbp
=== 4821
mov r13, r14
push r13
mov rdi, rsp
mov rbx, r14
=== 4822
mov r13, rdi
mov r15, rbx
push r13
push 0x13152f56
push 0x6c631b9e
push 0x551169e7
push 0x7da23c42
=== 4823
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r12
mov rbp, r15
movzx r14, r14b
=== 4824
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x1259a5e17
add rbx, 0x1a6f04a9; add_carry
mov rbx, qword ptr [rbx]
add rbx, r14
mov al, byte ptr [rbx]
movzx rax, al
shl rax, 0x28
add rbp, rax
mov r15, rbp
movabs r13, 0xf218de8a
add r13, 0x4df07c36; add
=== 4825
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r11
mov r14, r15
=== 4826
mov rbx, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r13
mov dl, byte ptr [rdi]
mov r11, 0xff
shl r11, 0x20
not r11
and rbx, r11
movzx r11, dl
shl r11, 0x20
or rbx, r11
=== 4827
mov rdx, rbx
push rdx
mov rsi, rsp
mov r13, rbx
=== 4828
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r15, r13
movzx rbx, bl
=== 4829
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xd2f804fe
add r13, 0x6d115dc2; add_carry
mov r13, qword ptr [r13]
add r13, rbx
mov r15b, byte ptr [r13]
movzx r15, r15b
shl r15, 0x30
add r15, r15
mov rdi, r15
movabs rsi, 0x12c784a73
add rsi, 0x1391104d; add
=== 4830
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rcx
mov rbp, rdi
=== 4831
mov rbx, rbp
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov r10b, byte ptr [r13]
mov rax, 0xff
shl rax, 0x28
not rax
and rbx, rax
movzx rax, r10b
shl rax, 0x28
or rbx, rax
=== 4832
mov rbx, rbx
push rbx
mov rsi, rsp
mov r15, rbx
=== 4833
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov r13, r15
movzx r14, r14b
=== 4834
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xf90f4bed
add r11, 0x46fa16d3; add_carry
mov r11, qword ptr [r11]
add r11, r14
mov r8b, byte ptr [r11]
movzx r8, r8b
shl r8, 0x38
add r13, r8
mov r14, r13
movabs r15, 0x10d08170c
add r15, 0x330143b4; add
=== 4835
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbp
mov rsi, r14
=== 4836
mov r13, rsi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbx
mov bpl, byte ptr [rbx]
mov rbx, 0xff
shl rbx, 0x30
not rbx
and r13, rbx
movzx rbx, bpl
shl rbx, 0x30
or r13, rbx
=== 4837
mov r13, r13
movabs rsi, 0xdc767d3e
add rsi, 0x64133baa; input
=== 4838
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r12
mov r15, r13
movzx rbx, bl
=== 4839
mov rax, rbx
mov rcx, 0xffffffffc2ae76c1
add rcx, 0x3dff2e75
push rcx
mov rbp, r15
mul qword ptr [rsp]
mov r15, rax
=== 4840
mov rdi, rbp
add rdi, r15
=== 4841
mov r12, rdi
push r12
mov rbp, rsp
mov rsi, rdi
=== 4842
mov rdx, rbp
mov rbp, rsi
push rdx
push 0xb8e0ce3
push 0x1aa31b87
push 0x5d475766
push 0x3ef64170
=== 4843
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov r14, rbp
movzx rsi, sil
=== 4844
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xe9592dd1
add r15, 0x56b044ef; sub_carry
mov r15, qword ptr [r15 + 0x548]
add r15, rsi
mov r11b, byte ptr [r15]
movzx r11, r11b
shl r11, 8
sub r14, r11
mov r13, r14
movabs rdi, 0x116f237ef
add rdi, 0x291732d1; sub
=== 4845
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1352
add rsp, 1352
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov rsi, r13
=== 4846
mov rsi, rsi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r13
mov bl, byte ptr [rcx]
mov sil, bl
=== 4847
mov r14, rsi
push r14
mov r12, rsp
mov rsi, rsi
=== 4848
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov rbp, rsi
movzx r14, r14b
=== 4849
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xc3c53f9c
add rbp, 0x7c443324; sub_carry
mov rbp, qword ptr [rbp + 0x2d0]
add rbp, r14
mov r8b, byte ptr [rbp]
movzx r8, r8b
shl r8, 0x10
sub rbp, r8
mov rsi, rbp
movabs rbx, 0x1154216ae
add rbx, 0x2ac75412; sub
=== 4850
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 720
add rsp, 720
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r15
mov rsi, rsi
=== 4851
mov rbx, rsi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov r11b, byte ptr [rcx]
mov r8, 0xff
shl r8, 8
not r8
and rbx, r8
movzx r8, r11b
shl r8, 8
or rbx, r8
=== 4852
mov r13, rbx
push r13
mov r12, rsp
mov r15, rbx
=== 4853
mov r8, r12
mov r15, r15
push r8
push 0xbd466e6
push 0x3c7b41cf
push 0x104115cf
push 0xc0a49e7
=== 4854
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r8
mov r13, r15
movzx r12, r12b
=== 4855
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x1230b2f00
add r15, 0x1cfe43c0; sub_carry
mov r15, qword ptr [r15 + 0x500]
add r15, r12
mov r13b, byte ptr [r15]
movzx r13, r13b
shl r13, 0x18
sub r13, r13
movabs r8, 0x12c3745db
push r8
push 0x2891320c
push 0x26375ad7
push 0x43ce7275
push 0x425d3397
add qword ptr [rsp + 0x20], 0x13d224e5; sub
mov rdi, r13
=== 4856
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1280
add rsp, 1280
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov rbx, rdi
=== 4857
mov rbx, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov r12b, byte ptr [rax]
mov rcx, 0xff
shl rcx, 0x10
not rcx
and rbx, rcx
movzx rcx, r12b
shl rcx, 0x10
or rbx, rcx
=== 4858
mov rdx, rbx
push rdx
mov rbx, rsp
mov rdi, rbx
=== 4859
mov r15, rbx
mov r12, rdi
push r15
push 0x645840ee
push 0x6b4264f4
push 0x1b7e25e7
=== 4860
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov rbp, r12
movzx rsi, sil
=== 4861
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x11c5ffbdb
add rax, 0x23a976e5; sub_carry
mov rax, qword ptr [rax + 0x4a8]
add rax, rsi
mov r14b, byte ptr [rax]
movzx r14, r14b
shl r14, 0x20
sub rbp, r14
movabs rax, 0xda66f324
push rax
push 0x7e2d659f
push 0x61db46e2
push 0x449f6d16
push 0x34cf74ac
add qword ptr [rsp + 0x20], 0x65a2779c; sub
mov rsi, rbp
=== 4862
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1192
add rsp, 1192
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov rdi, rsi
=== 4863
mov r14, rdi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov r12b, byte ptr [r11]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and r14, rdi
movzx rdi, r12b
shl rdi, 0x18
or r14, rdi
=== 4864
mov rdx, r14
push rdx
mov rsi, rsp
mov r15, r14
=== 4865
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
mov r15, r15
movzx rbx, bl
=== 4866
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x1017f702f
add r8, 0x3e8a0291; sub_carry
mov r8, qword ptr [r8]
add r8, rbx
mov bl, byte ptr [r8]
movzx rbx, bl
shl rbx, 0x38
sub r15, rbx
movabs r11, 0xcbd3693e
push r11
push 0x7e9b2341
push 0x5074794b
push 0xa546cfa
push 0x4fd50cbe
add qword ptr [rsp + 0x20], 0x74360182; sub
mov rsi, r15
=== 4867
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r8
mov rsi, rsi
=== 4868
mov r14, rsi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r13
mov r12b, byte ptr [r11]
mov rbp, 0xff
shl rbp, 0x30
not rbp
and r14, rbp
movzx rbp, r12b
shl rbp, 0x30
or r14, rbp
=== 4869
movabs r12, 0x11380851b
push r12
push 0x1c2e422d
push 0x141d2e12
push 0x6aa05c86
add qword ptr [rsp + 0x18], 0x2d0933cd; input
mov r15, r14
=== 4870
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 25
add rsp, 25
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov r12, r15
movzx r14, r14b
=== 4871
mov rax, r14
mov r15, 0xffffffff8e4757a5
add r15, 0x72995bad
push r15
mov r14, r12
mul qword ptr [rsp]
mov r13, rax
=== 4872
mov rsi, r14
sub rsi, r13
=== 4873
mov r13, rsi
push r13
mov rdi, rsp
mov rbp, rsi
=== 4874
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r8
mov rsi, rbp
movzx rbp, bpl
=== 4875
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x116b62dee
push rbx
push 0x2a761ee1
push 0x4a184aad
push 0x7e0470d7
add qword ptr [rsp + 0x18], 0x29531cd2; xor
mov r14, rsi
=== 4876
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 256
add rsp, 256
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov rdi, r14
=== 4877
mov rbx, rdi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r12
mov dl, byte ptr [r11]
mov bl, dl
=== 4878
mov rdx, rbx
push rdx
mov rdi, rsp
mov r15, rbx
=== 4879
mov r14, rdi
mov rbp, r15
push r14
push 0x28be1fb3
push 0x47461be6
push 0x4ca36790
=== 4880
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov rbp, rbp
movzx r13, r13b
=== 4881
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rbp
movabs r13, 0x129ed1611
add r13, 0x161c34af; xor
=== 4882
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1536
add rsp, 1536
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov r13, rdi
=== 4883
mov r14, r13
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov r8b, byte ptr [r12]
mov r9, 0xff
shl r9, 0x10
not r9
and r14, r9
movzx r9, r8b
shl r9, 0x10
or r14, r9
=== 4884
mov r8, r14
push r8
mov rsi, rsp
mov r14, r14
=== 4885
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r15
mov rdi, r14
movzx r13, r13b
=== 4886
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rdi
movabs rbx, 0x128dd225b
add rbx, 0x172c2865; xor
=== 4887
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 536
add rsp, 536
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r10
mov r14, r13
=== 4888
mov rsi, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov cl, byte ptr [rax]
mov rbx, 0xff
shl rbx, 0x18
not rbx
and rsi, rbx
movzx rbx, cl
shl rbx, 0x18
or rsi, rbx
=== 4889
mov rsi, rsi
push rsi
mov r13, rsp
mov rdi, rsi
=== 4890
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbx
mov r14, rdi
movzx rdi, dil
=== 4891
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xf403de49
push r8
push 0x5cbb1eb7
push 0x30ce21d4
push 0x694b15fd
add qword ptr [rsp + 0x18], 0x4c056c77; xor
mov r13, r14
=== 4892
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov r15, r13
=== 4893
mov r12, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov r8b, byte ptr [rbp]
mov rsi, 0xff
shl rsi, 0x20
not rsi
and r12, rsi
movzx rsi, r8b
shl rsi, 0x20
or r12, rsi
=== 4894
mov r11, r12
push r11
mov rsi, rsp
mov r12, r12
=== 4895
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov rdi, r12
movzx rbx, bl
=== 4896
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x12512de41
push r13
push 0x1cb171d0
push 0x3a104b2d
push 0x76e92755
add qword ptr [rsp + 0x18], 0x1af66c7f; xor
mov rdi, rdi
=== 4897
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov rbx, rdi
=== 4898
mov rbx, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov sil, byte ptr [r8]
mov r15, 0xff
shl r15, 0x28
not r15
and rbx, r15
movzx r15, sil
shl r15, 0x28
or rbx, r15
=== 4899
mov r15, rbx
push r15
mov rsi, rsp
mov r15, rbx
=== 4900
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov r13, r15
movzx rdi, dil
=== 4901
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r13
movabs r15, 0xdb001e50
add r15, 0x65092c70; xor
=== 4902
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov r14, rsi
=== 4903
mov rsi, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov r10b, byte ptr [rax]
mov r14, 0xff
shl r14, 0x30
not r14
and rsi, r14
movzx r14, r10b
shl r14, 0x30
or rsi, r14
=== 4904
mov rax, rsi
push rax
mov rsi, rsp
mov r13, rsi
=== 4905
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r15
mov r13, r13
movzx rsi, sil
=== 4906
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r13
movabs r15, 0x10b0fe859
add r15, 0x34f96267; xor
=== 4907
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov rbx, r12
=== 4908
mov rsi, rbx
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbp
mov bl, byte ptr [r12]
mov rcx, 0xff
shl rcx, 0x38
not rcx
and rsi, rcx
movzx rcx, bl
shl rcx, 0x38
or rsi, rcx
=== 4909
movabs rsi, 0x1116778aa
push rsi
push 0xb856dbd
push 0x509d7314
push 0x17713692
add qword ptr [rsp + 0x18], 0x2f22403e; input
mov r13, rsi
=== 4910
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 21
add rsp, 21
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r15
mov r14, r13
movzx rdi, dil
=== 4911
mov rax, rdi
mov rbx, 0xffffffffaadf4a34
add rbx, 0x55a72b82
push rbx
mov r12, r14
mul qword ptr [rsp]
mov r13, rax
=== 4912
mov r15, r12
add r15, r13
=== 4913
mov r8, r15
push r8
mov r15, rsp
mov r12, r15
=== 4914
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov r14, r12
movzx rbx, bl
=== 4915
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xf2cd2adf
add rdx, 0x4d3c37e1; add_carry
mov rdx, qword ptr [rdx + 0x98]
add rdx, rbx
mov r11b, byte ptr [rdx]
movzx r11, r11b
shl r11, 8
add r14, r11
movabs rax, 0xf319e1c9
push rax
push 0x51f05b3b
push 0x56a80875
push 0x3eb411ba
add qword ptr [rsp + 0x18], 0x4cef78f7; add
mov rsi, r14
=== 4916
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 152
add rsp, 152
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r10
mov r15, rsi
=== 4917
mov rbp, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov r14b, byte ptr [rcx]
mov bpl, r14b
=== 4918
mov rdi, rbp
push rdi
mov rbx, rsp
mov r15, rbp
=== 4919
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov rbp, r15
movzx rsi, sil
=== 4920
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xc4e41b2e
add rdx, 0x7b254792; add_carry
mov rdx, qword ptr [rdx + 0x490]
add rdx, rsi
mov sil, byte ptr [rdx]
movzx rsi, sil
shl rsi, 0x10
add rbp, rsi
movabs r12, 0x10626fec6
push r12
push 0x39473536
push 0x78f76b5b
push 0x4c7088b
add qword ptr [rsp + 0x18], 0x39e25bfa; add
mov rbx, rbp
=== 4921
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1168
add rsp, 1168
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r8
mov rbp, rbx
=== 4922
mov rdi, rbp
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r13
mov r11b, byte ptr [r14]
mov rsi, 0xff
shl rsi, 8
not rsi
and rdi, rsi
movzx rsi, r11b
shl rsi, 8
or rdi, rsi
=== 4923
mov rax, rdi
push rax
mov r13, rsp
mov r14, rdi
=== 4924
mov rbp, r13
mov r14, r14
push rbp
push 0x10ba03e5
push 0x1d84031c
push 0x47aa0517
=== 4925
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r9
mov rbx, r14
movzx rdi, dil
=== 4926
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x112c140b9
add r13, 0x2d482207; add_carry
mov r13, qword ptr [r13 + 0x510]
add r13, rdi
mov dl, byte ptr [r13]
movzx rdx, dl
shl rdx, 0x18
add rbx, rdx
movabs rcx, 0xf4dcf838
push rcx
push 0x1d066296
push 0x36734d97
push 0xe647da7
add qword ptr [rsp + 0x18], 0x4b2c6288; add
mov r15, rbx
=== 4927
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1296
add rsp, 1296
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rax
mov r15, r15
=== 4928
mov r13, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov r12b, byte ptr [rax]
mov rax, 0xff
shl rax, 0x10
not rax
and r13, rax
movzx rax, r12b
shl rax, 0x10
or r13, rax
=== 4929
mov r10, r13
push r10
mov r12, rsp
mov r13, r13
=== 4930
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov rdi, r13
movzx r15, r15b
=== 4931
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x113c9e749
add rbp, 0x2c3f7b77; add_carry
mov rbp, qword ptr [rbp + 0x1a0]
add rbp, r15
mov r10b, byte ptr [rbp]
movzx r10, r10b
shl r10, 0x20
add rdi, r10
mov r15, rdi
movabs r12, 0x11b51f5e5
add r12, 0x24b764db; add
=== 4932
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 416
add rsp, 416
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov rsi, r15
=== 4933
mov r15, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov r8b, byte ptr [r9]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and r15, rdx
movzx rdx, r8b
shl rdx, 0x18
or r15, rdx
=== 4934
mov rax, r15
push rax
mov r12, rsp
mov r14, r15
=== 4935
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov r12, r14
movzx rdi, dil
=== 4936
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x10404f9fb
add r14, 0x3c0468c5; add_carry
mov r14, qword ptr [r14]
add r14, rdi
mov r11b, byte ptr [r14]
movzx r11, r11b
shl r11, 0x28
add r12, r11
movabs r13, 0x1109cee94
push r13
push 0x4ca4d62
push 0x5f0d1165
push 0x539937d9
push 0xd4d08ae
add qword ptr [rsp + 0x20], 0x2f6c6c2c; add
mov r13, r12
=== 4937
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov rsi, r13
=== 4938
mov rbx, rsi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov r14b, byte ptr [rdx]
mov r8, 0xff
shl r8, 0x20
not r8
and rbx, r8
movzx r8, r14b
shl r8, 0x20
or rbx, r8
=== 4939
mov r13, rbx
push r13
mov rbp, rsp
mov r13, rbx
=== 4940
mov r12, rbp
mov r13, r13
push r12
push 0x50ca6b6f
push 0x38d75060
push 0xc732738
=== 4941
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov r13, r13
movzx rbx, bl
=== 4942
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xfaaf6eb9
add rax, 0x455a0407; sub_carry
mov rax, qword ptr [rax + 0x3f0]
add rax, rbx
mov r8b, byte ptr [rax]
movzx r8, r8b
shl r8, 8
sub r13, r8
movabs r10, 0x13f983777
push r10
push 0x60c608fc
push 0x774800d7
push 0x480e6939
add qword ptr [rsp + 0x18], 0x713349; sub
mov r12, r13
=== 4943
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1008
add rsp, 1008
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rsi
mov r12, r12
=== 4944
mov r13, r12
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbp
mov sil, byte ptr [rbx]
mov r13b, sil
=== 4945
mov rbp, r13
push rbp
mov rbp, rsp
mov r12, r13
=== 4946
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r11
mov r12, r12
movzx rbx, bl
=== 4947
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xeb5131ac
add r10, 0x54b84114; sub_carry
mov r10, qword ptr [r10 + 0x350]
add r10, rbx
mov sil, byte ptr [r10]
movzx rsi, sil
shl rsi, 0x10
sub r12, rsi
movabs r15, 0xea683530
push r15
push 0x582758e4
push 0x6e0464e6
push 0x118b17ca
add qword ptr [rsp + 0x18], 0x55a13590; sub
mov rbp, r12
=== 4948
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 848
add rsp, 848
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov r12, rbp
=== 4949
mov rbx, r12
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov r9b, byte ptr [r9]
mov r12, 0xff
shl r12, 8
not r12
and rbx, r12
movzx r12, r9b
shl r12, 8
or rbx, r12
=== 4950
mov rbp, rbx
push rbp
mov r13, rsp
mov rsi, rbx
=== 4951
mov rbp, r13
mov r13, rsi
push rbp
push 0x603b2900
push 0x6d592aa2
push 0x6ef028e1
push 0x57733da5
=== 4952
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov rbx, r13
movzx rsi, sil
=== 4953
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x10bdb2118
add r11, 0x342e51a8; sub_carry
mov r11, qword ptr [r11 + 0xc8]
add r11, rsi
mov r10b, byte ptr [r11]
movzx r10, r10b
shl r10, 0x18
sub rbx, r10
movabs r15, 0x127490fde
push r15
push 0x7b817814
push 0x69aa0871
push 0x320504d5
push 0x2b977a03
add qword ptr [rsp + 0x20], 0x18c05ae2; sub
mov rbx, rbx
=== 4954
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 200
add rsp, 200
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov rsi, rbx
=== 4955
mov rbx, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rdi
mov dl, byte ptr [r14]
mov r15, 0xff
shl r15, 0x10
not r15
and rbx, r15
movzx r15, dl
shl r15, 0x10
or rbx, r15
=== 4956
mov rbp, rbx
push rbp
mov rbp, rsp
mov r15, rbx
=== 4957
mov rcx, rbp
mov rbx, r15
push rcx
push 0x5273313
push 0x5f731f30
push 0x65067600
=== 4958
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov rsi, rbx
movzx r15, r15b
=== 4959
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xc25c6545
add rsi, 0x7dad0d7b; sub_carry
mov rsi, qword ptr [rsi + 0x100]
add rsi, r15
mov r10b, byte ptr [rsi]
movzx r10, r10b
shl r10, 0x20
sub rsi, r10
mov r13, rsi
movabs rdi, 0xf43cf248
add rdi, 0x4bcc7878; sub
=== 4960
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 256
add rsp, 256
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r14
mov rbx, r13
=== 4961
mov r12, rbx
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov bl, byte ptr [rdx]
mov r9, 0xff
shl r9, 0x18
not r9
and r12, r9
movzx r9, bl
shl r9, 0x18
or r12, r9
=== 4962
mov r11, r12
push r11
mov rbx, rsp
mov r15, r12
=== 4963
mov r8, rbx
mov rdi, r15
push r8
push 0x1a5307a8
push 0x3f241031
push 0x5a37212
=== 4964
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov r14, rdi
movzx r12, r12b
=== 4965
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x134082a74
add r10, 0xc01484c; sub_carry
mov r10, qword ptr [r10]
add r10, r12
mov r14b, byte ptr [r10]
movzx r14, r14b
shl r14, 0x28
sub r14, r14
mov rdi, r14
movabs rsi, 0xcfa42bc0
add rsi, 0x70653f00; sub
=== 4966
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rax
mov r14, rdi
=== 4967
mov r13, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov r10b, byte ptr [r10]
mov rdi, 0xff
shl rdi, 0x20
not rdi
and r13, rdi
movzx rdi, r10b
shl rdi, 0x20
or r13, rdi
=== 4968
mov rdi, r13
push rdi
mov rdi, rsp
mov rbp, r13
=== 4969
mov rbp, rdi
mov r14, rbp
push rbp
push 0x2b6c57ab
push 0x29df281d
push 0x724e5e0e
push 0x37bb4474
=== 4970
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov rsi, r14
movzx r15, r15b
=== 4971
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x1128666a6
add r10, 0x2d830c1a; sub_carry
mov r10, qword ptr [r10]
add r10, r15
mov sil, byte ptr [r10]
movzx rsi, sil
shl rsi, 0x30
sub rsi, rsi
mov r12, rsi
movabs r13, 0xdbfc34b1
add r13, 0x640d360f; sub
=== 4972
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov rdi, r12
=== 4973
mov r14, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov al, byte ptr [r8]
mov rbx, 0xff
shl rbx, 0x28
not rbx
and r14, rbx
movzx rbx, al
shl rbx, 0x28
or r14, rbx
=== 4974
mov r11, r14
push r11
mov r15, rsp
mov r14, r14
=== 4975
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov rdi, r14
movzx r12, r12b
=== 4976
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xf60a0b1b
add r10, 0x49ff67a5; sub_carry
mov r10, qword ptr [r10]
add r10, r12
mov bpl, byte ptr [r10]
movzx rbp, bpl
shl rbp, 0x38
sub rdi, rbp
movabs r11, 0xf020fb08
push r11
push 0xefc2e63
push 0x33a84d84
push 0x131513f5
add qword ptr [rsp + 0x18], 0x4fe86fb8; sub
mov r14, rdi
=== 4977
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rax
mov rdi, r14
=== 4978
mov rsi, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov r12b, byte ptr [rax]
mov r10, 0xff
shl r10, 0x30
not r10
and rsi, r10
movzx r10, r12b
shl r10, 0x30
or rsi, r10
=== 4979
mov rbx, rsi
push rbx
mov r12, rsp
mov rbx, rsi
=== 4980
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbp
mov rsi, rbx
movzx rdi, dil
=== 4981
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xd070f234
push rsi
push 0x7f8445aa
push 0x28060cb7
push 0x43ea73d3
add qword ptr [rsp + 0x18], 0x6f98608c; or
mov r14, rsi
=== 4982
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r15
mov rbp, r14
=== 4983
mov rbx, rbp
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rdi
mov r10b, byte ptr [r14]
mov rcx, 0xff
shl rcx, 8
not rcx
and rbx, rcx
movzx rcx, r10b
shl rcx, 8
or rbx, rcx
=== 4984
mov rbp, rbx
push rbp
mov rsi, rsp
mov r15, rbx
=== 4985
mov rbx, rsi
mov rbp, r15
push rbx
push 0x76b0cc4
push 0x249003a7
push 0x62c2326c
=== 4986
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov r12, rbp
movzx rbp, bpl
=== 4987
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r12
movabs r12, 0xd44144b9
add r12, 0x6bc80e07; or
=== 4988
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r10
mov r14, rsi
=== 4989
mov rdi, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov r15b, byte ptr [r8]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and rdi, rbp
movzx rbp, r15b
shl rbp, 0x10
or rdi, rbp
=== 4990
mov rbp, rdi
push rbp
mov rbx, rsp
mov rdi, rdi
=== 4991
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov rdi, rdi
movzx rbp, bpl
=== 4992
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rdi
movabs rbp, 0x11ccef25d
add rbp, 0x233a6063; or
=== 4993
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbp
mov rdi, r14
=== 4994
mov rbp, rdi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov cl, byte ptr [r9]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and rbp, rdx
movzx rdx, cl
shl rdx, 0x18
or rbp, rdx
=== 4995
mov r12, rbp
push r12
mov rbp, rsp
mov r15, rbp
=== 4996
mov r10, rbp
mov rdi, r15
push r10
push 0x7185009b
push 0x786c35d5
push 0x21674401
=== 4997
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
mov rbx, rdi
movzx r12, r12b
=== 4998
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rbx
movabs rsi, 0xded8d9f2
add rsi, 0x613078ce; or
=== 4999
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r11
mov r14, rbp
=== 5000
mov r12, r14
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rsi
mov r8b, byte ptr [rsi]
mov r11, 0xff
shl r11, 0x28
not r11
and r12, r11
movzx r11, r8b
shl r11, 0x28
or r12, r11
=== 5001
mov rax, r12
push rax
mov r14, rsp
mov rbx, r12
=== 5002
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov rsi, rbx
movzx rbp, bpl
=== 5003
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xefcc178f
push r11
push 0x43d536df
push 0x52f603d1
push 0x28c82d2c
add qword ptr [rsp + 0x18], 0x503d3b31; or
mov rsi, rsi
=== 5004
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r15
mov rdi, rsi
=== 5005
mov r13, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r15
mov r15b, byte ptr [r8]
mov rdx, 0xff
shl rdx, 0x30
not rdx
and r13, rdx
movzx rdx, r15b
shl rdx, 0x30
or r13, rdx
=== 5006
mov r13, r13
push r13
mov r15, rsp
mov rsi, r13
=== 5007
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rbp, rsi
movzx r13, r13b
=== 5008
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rbp
movabs r14, 0xe7b4f223
add r14, 0x5854609d; or
=== 5009
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov rdi, r12
=== 5010
mov r12, rdi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbp
mov r13b, byte ptr [r14]
mov r14, 0xff
shl r14, 0x38
not r14
and r12, r14
movzx r14, r13b
shl r14, 0x38
or r12, r14
=== 5011
mov rdi, r12
movabs rbp, 0xca740725
add rbp, 0x758c0acb
test rdi, rdi
lea r14, [rip - 0x39f4a6]
cmovne r14, rbp
jmp r14
=== 5012
movabs r15, 0xffb07e50
add r15, 0x40d93a98; input
=== 5013
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
movzx rbx, bl
=== 5014
mov rax, rbx
mov r13, 0xffffffffc36b21a3
add r13, 0x3cdf3cf2
push r13
mul qword ptr [rsp]
mov r13, rax
=== 5015
mov rbp, r13
push rbp
mov r14, rsp
mov rbx, r13
=== 5016
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov rbp, rbx
movzx rdi, dil
=== 5017
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xe95bea54
add rdx, 0x56ad786c; add_carry
mov rdx, qword ptr [rdx + 0x788]
add rdx, rdi
mov r13b, byte ptr [rdx]
movzx r13, r13b
shl r13, 8
add rbp, r13
movabs rsi, 0x12352e661
push rsi
push 0x79a7670c
push 0x6a1379eb
push 0x45b53b34
add qword ptr [rsp + 0x18], 0x1cb6745f; add
mov r13, rbp
=== 5018
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1928
add rsp, 1928
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov r12, r13
=== 5019
mov rbx, r12
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov r14b, byte ptr [r9]
mov bl, r14b
=== 5020
mov r8, rbx
push r8
mov rdi, rsp
mov r12, rbx
=== 5021
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov rsi, r12
movzx rdi, dil
=== 5022
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x12b9b2010
add rbx, 0x146e42b0; add_carry
mov rbx, qword ptr [rbx + 0x508]
add rbx, rdi
mov bl, byte ptr [rbx]
movzx rbx, bl
shl rbx, 0x10
add rsi, rbx
mov rdi, rsi
movabs rbx, 0x128dfdb8d
add rbx, 0x17297f33; add
=== 5023
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1288
add rsp, 1288
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rbx, rdi
=== 5024
mov rbp, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r13
mov sil, byte ptr [rcx]
mov r8, 0xff
shl r8, 8
not r8
and rbp, r8
movzx r8, sil
shl r8, 8
or rbp, r8
=== 5025
mov rdx, rbp
push rdx
mov rbx, rsp
mov r12, rbp
=== 5026
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbp
mov rbx, r12
movzx rdi, dil
=== 5027
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x127755f79
add r11, 0x18940347; add_carry
mov r11, qword ptr [r11 + 0x6b8]
add r11, rdi
mov bpl, byte ptr [r11]
movzx rbp, bpl
shl rbp, 0x18
add rbx, rbp
movabs r8, 0x12eb8e40a
push r8
push 0x569e1b74
push 0x6bee220c
push 0x444c60f5
push 0x3dcb3734
add qword ptr [rsp + 0x20], 0x115076b6; add
mov rbx, rbx
=== 5028
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1720
add rsp, 1720
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov r12, rbx
=== 5029
mov r15, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r14
mov r11b, byte ptr [r13]
mov rdx, 0xff
shl rdx, 0x10
not rdx
and r15, rdx
movzx rdx, r11b
shl rdx, 0x10
or r15, rdx
=== 5030
mov rdi, r15
push rdi
mov r15, rsp
mov r14, r15
=== 5031
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov r12, r14
movzx rsi, sil
=== 5032
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x132f2ec88
add rdi, 0xd167638; add_carry
mov rdi, qword ptr [rdi + 0x2f0]
add rdi, rsi
mov r11b, byte ptr [rdi]
movzx r11, r11b
shl r11, 0x20
add r12, r11
mov r13, r12
movabs rdi, 0x10030fee3
add rdi, 0x3fd85bdd; add
=== 5033
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 752
add rsp, 752
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov r15, r13
=== 5034
mov rbx, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r12
mov al, byte ptr [rbp]
mov r14, 0xff
shl r14, 0x18
not r14
and rbx, r14
movzx r14, al
shl r14, 0x18
or rbx, r14
=== 5035
mov rdi, rbx
push rdi
mov rbx, rsp
mov r12, rbx
=== 5036
mov rax, rbx
mov r14, r12
push rax
push 0x7f1e27e5
push 0x5c336fa3
push 0x5bdc3a18
=== 5037
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov r12, r14
movzx rsi, sil
=== 5038
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x11e2d0f8a
add r12, 0x21dc5336; add_carry
mov r12, qword ptr [r12]
add r12, rsi
mov r15b, byte ptr [r12]
movzx r15, r15b
shl r15, 0x28
add r12, r15
movabs r14, 0xe9abe919
push r14
push 0x3fa33a78
push 0x495f231f
push 0x11e52775
push 0x20704391
add qword ptr [rsp + 0x20], 0x565d71a7; add
mov r13, r12
=== 5039
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r14
mov r12, r13
=== 5040
mov rbp, r12
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbp
mov r15b, byte ptr [r14]
mov rbx, 0xff
shl rbx, 0x20
not rbx
and rbp, rbx
movzx rbx, r15b
shl rbx, 0x20
or rbp, rbx
=== 5041
mov rbx, rbp
push rbx
mov rdi, rsp
mov r15, rbp
=== 5042
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov r14, r15
movzx rsi, sil
=== 5043
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r14
movabs r13, 0x13000eb74
add r13, 0x10086f4c; add
=== 5044
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdx
mov r12, r14
=== 5045
mov r14, r12
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov al, byte ptr [r12]
mov r9, 0xff
shl r9, 0x38
not r9
and r14, r9
movzx r9, al
shl r9, 0x38
or r14, r9
=== 5046
mov rdi, r14
movabs r14, 0xc3af8e9b
add r14, 0x7cda2a4d; input
=== 5047
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 22
add rsp, 22
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov r12, rdi
movzx rdi, dil
=== 5048
mov rax, rdi
mov rsi, 0xffffffffe9a63166
add rsi, 0x169449e3
push rsi
mov rbp, r12
mul qword ptr [rsp]
mov r14, rax
=== 5049
mov rbx, rbp
add rbx, r14
=== 5050
mov rdi, rbx
push rdi
mov rbx, rsp
mov r14, rbx
=== 5051
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r12
mov rdi, r14
movzx r13, r13b
=== 5052
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xf86adeb2
push rdx
push 0x123b6e53
push 0x768651e0
push 0x70c46cbf
push 0xb70199e
add qword ptr [rsp + 0x20], 0x479e6c0e; xor
mov rbp, rdi
=== 5053
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 128
add rsp, 128
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov r13, rbp
=== 5054
mov r15, r13
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov r14b, byte ptr [rdx]
mov r15b, r14b
=== 5055
mov r12, r15
push r12
mov r13, rsp
mov r14, r15
=== 5056
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rsi
mov rdi, r14
movzx r15, r15b
=== 5057
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xca500914
push r15
push 0x5f4b0542
push 0x55875438
push 0x1b3335c6
push 0x1fb958ae
add qword ptr [rsp + 0x20], 0x75b941ac; xor
mov r12, rdi
=== 5058
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 152
add rsp, 152
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov rdi, r12
=== 5059
mov r14, rdi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov r13b, byte ptr [r9]
mov rsi, 0xff
shl rsi, 8
not rsi
and r14, rsi
movzx rsi, r13b
shl rsi, 8
or r14, rsi
=== 5060
mov r15, r14
push r15
mov r15, rsp
mov rsi, r14
=== 5061
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov rdi, rsi
movzx rbp, bpl
=== 5062
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rdi
movabs rdi, 0xc4ce0acd
add rdi, 0x7b3b3ff3; xor
=== 5063
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1352
add rsp, 1352
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov rbp, r15
=== 5064
mov r14, rbp
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov r11b, byte ptr [r11]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and r14, rsi
movzx rsi, r11b
shl rsi, 0x10
or r14, rsi
=== 5065
mov rbx, r14
push rbx
mov rsi, rsp
mov r12, r14
=== 5066
mov rax, rsi
mov r13, r12
push rax
push 0x48a1687
push 0x563d625e
push 0xc4a03be
push 0x3ea629ed
=== 5067
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdi
mov rdi, r13
movzx rsi, sil
=== 5068
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rdi
movabs r15, 0x12c8818e8
a
d
d
 
r
1
5
,
 
0
x
1
3
8
1
3
1
d
8
=== 5069
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1080
add rsp, 1080
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbx
mov rdi, rsi
=== 5070
mov r13, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov bl, byte ptr [r8]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and r13, rdi
movzx rdi, bl
shl rdi, 0x18
or r13, rdi
=== 5071
mov rsi, r13
push rsi
mov rbp, rsp
mov rdi, r13
=== 5072
mov r14, rbp
mov rbx, rdi
push r14
push 0x1144078a
push 0x30771802
push 0x6be657be
push 0x61e45931
=== 5073
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov r15, rbx
movzx r13, r13b
=== 5074
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, r15
movabs r15, 0xd283fc8b
add r15, 0x6d854e35; xor
=== 5075
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r11
mov r13, rdi
=== 5076
mov r14, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbp
mov r11b, byte ptr [r15]
mov rax, 0xff
shl rax, 0x30
not rax
and r14, rax
movzx rax, r11b
shl rax, 0x30
or r14, rax
=== 5077
movabs r12, 0xd0829cdd
push r12
push 0x589d07fa
push 0x501960b4
push 0x27f749db
push 0x485453e8
add qword ptr [rsp + 0x20], 0x70071c0b; input
mov rbp, r14
=== 5078
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r11
mov r15, rbp
movzx rbp, bpl
=== 5079
mov rax, rbp
mov r13, 0xffffffff891400f9
add r13, 0x77de6f3f
push r13
mov r15, r15
mul qword ptr [rsp]
mov r12, rax
=== 5080
mov rdi, r15
sub rdi, r12
=== 5081
mov r15, rdi
push r15
mov r15, rsp
mov r14, rdi
=== 5082
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov rbp, r14
movzx rbx, bl
=== 5083
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x13160d766
push r15
push 0x1edf73b3
push 0x18fa50e0
push 0x5dc37c47
push 0x294b65f2
add qword ptr [rsp + 0x20], 0xea8735a; xor
mov rbp, rbp
=== 5084
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 200
add rsp, 200
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r11
mov r12, rbp
=== 5085
mov r14, r12
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rsi
mov r10b, byte ptr [rbp]
mov r14b, r10b
=== 5086
mov rdx, r14
push rdx
mov r14, rsp
mov rbp, r14
=== 5087
mov rdx, r14
mov rdi, rbp
push rdx
push 0x70241ad5
push 0x26bf6d41
push 0x5aa52ff7
push 0x35b36c49
=== 5088
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r12
mov rbp, rdi
movzx rbx, bl
=== 5089
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x107114a31
push r13
push 0x67fb4c1e
push 0x49623522
push 0x10e53fb9
push 0x74ed0962
add qword ptr [rsp + 0x20], 0x38f8008f; xor
mov rbx, rbp
=== 5090
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 120
add rsp, 120
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rcx
mov rbp, rbx
=== 5091
mov rsi, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov dil, byte ptr [rdx]
mov r11, 0xff
shl r11, 8
not r11
and rsi, r11
movzx r11, dil
shl r11, 8
or rsi, r11
=== 5092
mov r11, rsi
push r11
mov rdi, rsp
mov r13, rsi
=== 5093
mov rdi, rdi
mov rbx, r13
push rdi
push 0x1d7708b
push 0x69a2287b
push 0x3d3278e3
push 0x3c453a97
=== 5094
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov rbp, rbx
movzx rbx, bl
=== 5095
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x10a932494
push rsi
push 0x4c974c68
push 0x6b8402a9
push 0x2d4442ea
push 0x77991e08
add qword ptr [rsp + 0x20], 0x3576262c; xor
mov r14, rbp
=== 5096
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 592
add rsp, 592
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rcx
mov rbp, r14
=== 5097
mov rbx, rbp
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov r13b, byte ptr [r15]
mov rcx, 0xff
shl rcx, 0x10
not rcx
and rbx, rcx
movzx rcx, r13b
shl rcx, 0x10
or rbx, rcx
=== 5098
mov rax, rbx
push rax
mov r15, rsp
mov rbp, rbx
=== 5099
mov r12, r15
mov rsi, rbp
push r12
push 0x1b584c0e
push 0xd8b701e
push 0x76de76f4
=== 5100
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rax
mov r13, rsi
movzx rsi, sil
=== 5101
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r13
movabs r13, 0x1319ef2a1
add r13, 0xe6a581f; xor
=== 5102
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1968
add rsp, 1968
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r15
mov rbp, rbp
=== 5103
mov rbp, rbp
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r15
mov al, byte ptr [rcx]
mov r15, 0xff
shl r15, 0x18
not r15
and rbp, r15
movzx r15, al
shl r15, 0x18
or rbp, r15
=== 5104
mov rbx, rbp
push rbx
mov rdi, rsp
mov rbp, rbp
=== 5105
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov rdi, rbp
movzx r12, r12b
=== 5106
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x137523547
push r15
push 0x1a5574fe
push 0x1775773c
push 0x193178f2
push 0x75812dc5
add qword ptr [rsp + 0x20], 0x8b71579; xor
mov r13, rdi
=== 5107
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov rbp, r13
=== 5108
mov rdi, rbp
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov r8b, byte ptr [r15]
mov rbp, 0xff
shl rbp, 0x20
not rbp
and rdi, rbp
movzx rbp, r8b
shl rbp, 0x20
or rdi, rbp
=== 5109
mov rcx, rdi
push rcx
mov r15, rsp
mov r14, rdi
=== 5110
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov r15, r14
movzx r12, r12b
=== 5111
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r15
movabs rbx, 0x11bf910cd
add rbx, 0x241039f3; xor
=== 5112
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov r13, rsi
=== 5113
mov r13, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov r10b, byte ptr [r15]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and r13, rdx
movzx rdx, r10b
shl rdx, 0x28
or r13, rdx
=== 5114
mov rax, r13
push rax
mov r15, rsp
mov rsi, r13
=== 5115
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov rdi, rsi
movzx r12, r12b
=== 5116
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rdi
movabs rsi, 0x1256c0591
add rsi, 0x1a9d452f; xor
=== 5117
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r12
mov rdi, r14
=== 5118
mov r14, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov r12b, byte ptr [rdx]
mov r15, 0xff
shl r15, 0x30
not r15
and r14, r15
movzx r15, r12b
shl r15, 0x30
or r14, r15
=== 5119
mov r13, r14
push r13
mov r14, rsp
mov rdi, r14
=== 5120
mov r8, r14
mov r12, rdi
push r8
push 0x4b9d6b18
push 0x2caa379c
push 0x2b193d50
=== 5121
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov r15, r12
movzx rdi, dil
=== 5122
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x1269b460d
push r13
push 0x156e6e9a
push 0x80c4c9a
push 0x39b74700
push 0x72c2460b
add qword ptr [rsp + 0x20], 0x196e04b3; xor
mov rbp, r15
=== 5123
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r15
mov rbp, rbp
=== 5124
mov r14, rbp
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rdi
mov r9b, byte ptr [rbx]
mov rsi, 0xff
shl rsi, 0x38
not rsi
and r14, rsi
movzx rsi, r9b
shl rsi, 0x38
or r14, rsi
=== 5125
mov rbp, r14
movabs r13, 0x117a240a7
add r13, 0x28e77841; input
=== 5126
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 30
add rsp, 30
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r15
mov rsi, rbp
movzx r12, r12b
=== 5127
mov rax, r12
mov r8, 0xffffffff961a877d
add r8, 0x6a870053
push r8
mov rbp, rsi
mul qword ptr [rsp]
mov r15, rax
=== 5128
mov r15, rbp
add r15, r15
=== 5129
mov r15, r15
push r15
mov r15, rsp
mov rdi, r15
=== 5130
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r13
mov rsi, rdi
movzx r13, r13b
=== 5131
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xe6c91378
add r12, 0x59405f48; sub_carry
mov r12, qword ptr [r12 + 0x2e8]
add r12, r13
mov r8b, byte ptr [r12]
movzx r8, r8b
shl r8, 8
sub rsi, r8
movabs rax, 0xd40cec6c
push rax
push 0x623856d9
push 0xc6465e8
push 0x61015b7b
push 0x13f5769e
add qword ptr [rsp + 0x20], 0x6bfc7e54; sub
mov rbx, rsi
=== 5132
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 744
add rsp, 744
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbp
mov rsi, rbx
=== 5133
mov rsi, rsi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbx
mov r12b, byte ptr [rbx]
mov sil, r12b
=== 5134
mov r13, rsi
push r13
mov r14, rsp
mov r13, rsi
=== 5135
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov rsi, r13
movzx rbp, bpl
=== 5136
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xc42845d7
add rbx, 0x7be12ce9; sub_carry
mov rbx, qword ptr [rbx + 0x398]
add rbx, rbp
mov sil, byte ptr [rbx]
movzx rsi, sil
shl rsi, 0x10
sub rsi, rsi
mov r15, rsi
movabs rsi, 0x1216c5db0
add rsi, 0x1e9d0d10; sub
=== 5137
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 920
add rsp, 920
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbp
mov rbx, r15
=== 5138
mov r12, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rsi
mov r14b, byte ptr [r8]
mov r10, 0xff
shl r10, 8
not r10
and r12, r10
movzx r10, r14b
shl r10, 8
or r12, r10
=== 5139
mov r14, r12
push r14
mov r12, rsp
mov r15, r12
=== 5140
mov r8, r12
mov r15, r15
push r8
push 0x6b971f49
push 0x2c7c423f
push 0x758f0054
=== 5141
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov r13, r15
movzx r12, r12b
=== 5142
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xfa10465c
add r12, 0x45f92c64; sub_carry
mov r12, qword ptr [r12 + 0x660]
add r12, r12
mov r15b, byte ptr [r12]
movzx r15, r15b
shl r15, 0x18
sub r13, r15
movabs r14, 0xd2b02163
push r14
push 0x4e7073d9
push 0x23e46413
push 0x4284f75
push 0x3cce09d4
add qword ptr [rsp + 0x20], 0x6d59495d; sub
mov r12, r13
=== 5143
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1632
add rsp, 1632
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rcx
mov rsi, r12
=== 5144
mov rbp, rsi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rdi
mov al, byte ptr [rdi]
mov r11, 0xff
shl r11, 0x10
not r11
and rbp, r11
movzx r11, al
shl r11, 0x10
or rbp, r11
=== 5145
mov r10, rbp
push r10
mov r13, rsp
mov rdi, rbp
=== 5146
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbx
mov r12, rdi
movzx r15, r15b
=== 5147
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xd8815514
add rbp, 0x67881dac; sub_carry
mov rbp, qword ptr [rbp + 0x5d8]
add rbp, r15
mov r8b, byte ptr [rbp]
movzx r8, r8b
shl r8, 0x20
sub r12, r8
mov r14, r12
movabs rdi, 0x1008507a5
add rdi, 0x3f84631b; sub
=== 5148
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1496
add rsp, 1496
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdx
mov rsi, r14
=== 5149
mov rbx, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov dil, byte ptr [r9]
mov r15, 0xff
shl r15, 0x18
not r15
and rbx, r15
movzx r15, dil
shl r15, 0x18
or rbx, r15
=== 5150
mov r11, rbx
push r11
mov rsi, rsp
mov r13, rbx
=== 5151
mov r14, rsi
mov rbp, r13
push r14
push 0x11227124
push 0x6c4214f6
push 0x562f5379
=== 5152
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r13
mov rdi, rbp
movzx r14, r14b
=== 5153
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x11cbd2191
add rcx, 0x234c512f; sub_carry
mov rcx, qword ptr [rcx]
add rcx, r14
mov sil, byte ptr [rcx]
movzx rsi, sil
shl rsi, 0x28
sub rdi, rsi
mov r15, rdi
movabs rbx, 0x133084212
add rbx, 0xd0128ae; sub
=== 5154
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r10
mov rsi, r15
=== 5155
mov r15, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov sil, byte ptr [r13]
mov r12, 0xff
shl r12, 0x20
not r12
and r15, r12
movzx r12, sil
shl r12, 0x20
or r15, r12
=== 5156
mov rbx, r15
push rbx
mov rbx, rsp
mov rsi, r15
=== 5157
mov rax, rbx
mov rbp, rsi
push rax
push 0x664135df
push 0x2f0c4718
push 0x64d7677
=== 5158
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r8
mov r13, rbp
movzx r12, r12b
=== 5159
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x129e5351f
add r12, 0x16243da1; sub_carry
mov r12, qword ptr [r12]
add r12, r12
mov bpl, byte ptr [r12]
movzx rbp, bpl
shl rbp, 0x38
sub r13, rbp
movabs r8, 0x116661af9
push r8
push 0x724c60a5
push 0x3ad64c01
push 0x15a742a9
add qword ptr [rsp + 0x18], 0x29a34fc7; sub
mov r13, r13
=== 5160
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r10
mov r14, r13
=== 5161
mov rbx, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rdi
mov r14b, byte ptr [r13]
mov r15, 0xff
shl r15, 0x30
not r15
and rbx, r15
movzx r15, r14b
shl r15, 0x30
or rbx, r15
=== 5162
mov rax, rbx
push rax
mov r12, rsp
mov r15, rbx
=== 5163
mov rax, r12
mov rbx, r15
push rax
push 0x218830a6
push 0x1fac0a33
push 0x2b392c80
=== 5164
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov r14, rbx
movzx r13, r13b
=== 5165
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r14
movabs r13, 0xcb956587
add r13, 0x74740539; sub
=== 5166
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov r15, r15
=== 5167
mov rsi, r15
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov r9b, byte ptr [r8]
mov r10, 0xff
shl r10, 0x38
not r10
and rsi, r10
movzx r10, r9b
shl r10, 0x38
or rsi, r10
=== 5168
mov r15, rsi
movabs r12, 0x137fa9b7f
add r12, 0x88f1d69; input
=== 5169
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 18
add rsp, 18
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov r13, r15
movzx r15, r15b
=== 5170
mov rax, r15
mov rsi, 0xffffffff99026658
add rsi, 0x67fa32c2
push rsi
mov r15, r13
mul qword ptr [rsp]
mov rbx, rax
=== 5171
mov rsi, r15
sub rsi, rbx
=== 5172
mov rsi, rsi
push rsi
mov rdi, rsp
mov r13, rsi
=== 5173
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbx
mov rbp, r13
movzx r14, r14b
=== 5174
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rbp
movabs r13, 0xe48837e0
add r13, 0x5b8112e0; xor
=== 5175
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1144
add rsp, 1144
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov r15, rbp
=== 5176
mov r13, r15
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov dil, byte ptr [r10]
mov r13b, dil
=== 5177
mov rbp, r13
push rbp
mov rbp, rsp
mov r12, r13
=== 5178
mov rax, rbp
mov rbx, r12
push rax
push 0x2b621379
push 0x55a761bb
push 0x42404169
push 0x7eba0561
=== 5179
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r9
mov r13, rbx
movzx rdi, dil
=== 5180
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r13
movabs r15, 0x13a244a70
add r15, 0x5e50050; xor
=== 5181
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1664
add rsp, 1664
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r11
mov rbx, r12
=== 5182
mov r13, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov r14b, byte ptr [r9]
mov r11, 0xff
shl r11, 8
not r11
and r13, r11
movzx r11, r14b
shl r11, 8
or r13, r11
=== 5183
mov r11, r13
push r11
mov rdi, rsp
mov r12, r13
=== 5184
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbx
mov r13, r12
movzx rbx, bl
=== 5185
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r13
movabs r12, 0x12e2944f0
add r12, 0x11e005d0; xor
=== 5186
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1768
add rsp, 1768
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov rbp, rbx
=== 5187
mov r14, rbp
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov bl, byte ptr [rcx]
mov rdx, 0xff
shl rdx, 0x10
not rdx
and r14, rdx
movzx rdx, bl
shl rdx, 0x10
or r14, rdx
=== 5188
mov rdi, r14
push rdi
mov r12, rsp
mov rdi, r14
=== 5189
mov r12, r12
mov rbx, rdi
push r12
push 0x6d335ddc
push 0x18257cd7
push 0x21ed1dfa
=== 5190
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov r14, rbx
movzx rbp, bpl
=== 5191
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xec75caf6
push r14
push 0x36c8124e
push 0x62263a8a
push 0x259e7f59
add qword ptr [rsp + 0x18], 0x53937fca; xor
mov r15, r14
=== 5192
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1992
add rsp, 1992
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r10
mov rbx, r15
=== 5193
mov r12, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov r11b, byte ptr [r8]
mov r9, 0xff
shl r9, 0x18
not r9
and r12, r9
movzx r9, r11b
shl r9, 0x18
or r12, r9
=== 5194
mov rax, r12
push rax
mov r14, rsp
mov r15, r12
=== 5195
mov r13, r14
mov rsi, r15
push r13
push 0x46e92368
push 0x46ba6820
push 0x229973db
=== 5196
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbx
mov r12, rsi
movzx r14, r14b
=== 5197
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x122da3194
push r14
push 0x450d042e
push 0x589b740f
push 0x360442ee
add qword ptr [rsp + 0x18], 0x1d2f192c; xor
mov rbp, r12
=== 5198
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov rbp, rbp
=== 5199
mov r15, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov cl, byte ptr [r9]
mov r13, 0xff
shl r13, 0x20
not r13
and r15, r13
movzx r13, cl
shl r13, 0x20
or r15, r13
=== 5200
mov r8, r15
push r8
mov r14, rsp
mov rsi, r15
=== 5201
mov r14, r14
mov rsi, rsi
push r14
push 0x83c5520
push 0x74242d7e
push 0x40d36661
push 0x6c2a595e
=== 5202
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdi
mov r13, rsi
movzx rbp, bpl
=== 5203
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r13
movabs r12, 0xc39ece9b
add r12, 0x7c6a7c25; xor
=== 5204
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdx
mov rsi, r15
=== 5205
mov r12, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov r10b, byte ptr [r14]
mov rbp, 0xff
shl rbp, 0x28
not rbp
and r12, rbp
movzx rbp, r10b
shl rbp, 0x28
or r12, rbp
=== 5206
mov r8, r12
push r8
mov rbp, rsp
mov r13, r12
=== 5207
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rsi
mov r13, r13
movzx r15, r15b
=== 5208
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r13
movabs r13, 0x123a5cd3c
add r13, 0x1c637d84; xor
=== 5209
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov r15, rsi
=== 5210
mov r14, r15
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov r11b, byte ptr [r13]
mov r12, 0xff
shl r12, 0x30
not r12
and r14, r12
movzx r12, r11b
shl r12, 0x30
or r14, r12
=== 5211
mov r14, r14
push r14
mov rsi, rsp
mov rbp, r14
=== 5212
mov rdx, rsi
mov rbp, rbp
push rdx
push 0x6496350
push 0x2e9a340f
push 0x46431b95
push 0x38a46128
=== 5213
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r14
mov rsi, rbp
movzx r15, r15b
=== 5214
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rsi
movabs r12, 0xc2c43a3e
add r12, 0x7d451082; xor
=== 5215
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rcx
mov rdi, r14
=== 5216
mov r12, rdi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov sil, byte ptr [r10]
mov r14, 0xff
shl r14, 0x38
not r14
and r12, r14
movzx r14, sil
shl r14, 0x38
or r12, r14
=== 5217
mov rsi, r12
movabs r14, 0xd01554a1
add r14, 0x70746447; input
=== 5218
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 26
add rsp, 26
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov rbp, rsi
movzx rbx, bl
=== 5219
mov rax, rbx
mov r10, 0xfffffffff3d04b44
add r10, 0xc7e4936
push r10
mov rbp, rbp
mul qword ptr [rsp]
mov rbx, rax
=== 5220
mov r15, rbp
sub r15, rbx
=== 5221
mov rcx, r15
push rcx
mov rbx, rsp
mov r13, r15
=== 5222
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r14
mov rbx, r13
movzx rdi, dil
=== 5223
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xdf956dc4
add r14, 0x607404fc; sub_carry
mov r14, qword ptr [r14 + 0x170]
add r14, rdi
mov r15b, byte ptr [r14]
movzx r15, r15b
shl r15, 8
sub rbx, r15
movabs r11, 0x1172816bd
push r11
push 0x2bf06525
push 0x771b2037
push 0x10c56e36
add qword ptr [rsp + 0x18], 0x28e15403; sub
mov rbp, rbx
=== 5224
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 368
add rsp, 368
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r14
mov r15, rbp
=== 5225
mov r12, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbx
mov sil, byte ptr [rbp]
mov r12b, sil
=== 5226
mov rsi, r12
push rsi
mov rdi, rsp
mov rbx, r12
=== 5227
mov r11, rdi
mov r13, rbx
push r11
push 0x23690f18
push 0x117174a
push 0xbf92b90
=== 5228
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov r14, r13
movzx rsi, sil
=== 5229
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x123d84729
add r13, 0x1c312b97; sub_carry
mov r13, qword ptr [r13 + 0xb8]
add r13, rsi
mov dil, byte ptr [r13]
movzx rdi, dil
shl rdi, 0x10
sub r14, rdi
mov rdi, r14
movabs rsi, 0xc620fff4
add rsi, 0x79e86acc; sub
=== 5230
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 184
add rsp, 184
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rsi
mov rsi, rdi
=== 5231
mov r12, rsi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rdi
mov r14b, byte ptr [rbp]
mov rbx, 0xff
shl rbx, 8
not rbx
and r12, rbx
movzx rbx, r14b
shl rbx, 8
or r12, rbx
=== 5232
mov rbx, r12
push rbx
mov rbx, rsp
mov rdi, r12
=== 5233
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov rdi, rdi
movzx rsi, sil
=== 5234
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x115ff5609
add r13, 0x2a0a1cb7; sub_carry
mov r13, qword ptr [r13 + 0x548]
add r13, rsi
mov cl, byte ptr [r13]
movzx rcx, cl
shl rcx, 0x18
sub rdi, rcx
mov r14, rdi
movabs rbp, 0xe60d0172
add rbp, 0x59fc694e; sub
=== 5235
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1352
add rsp, 1352
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r11
mov rbx, r14
=== 5236
mov rbp, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r15
mov al, byte ptr [rcx]
mov r12, 0xff
shl r12, 0x10
not r12
and rbp, r12
movzx r12, al
shl r12, 0x10
or rbp, r12
=== 5237
mov r10, rbp
push r10
mov r12, rsp
mov r13, rbp
=== 5238
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
mov r15, r13
movzx rsi, sil
=== 5239
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x13d210702
add r8, 0x2e86bbe; sub_carry
mov r8, qword ptr [r8 + 0x2c8]
add r8, rsi
mov r14b, byte ptr [r8]
movzx r14, r14b
shl r14, 0x20
sub r15, r14
mov rdi, r15
movabs r12, 0xf1bcfa88
add r12, 0x4e4c7038; sub
=== 5240
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 712
add rsp, 712
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rcx
mov r12, rdi
=== 5241
mov r12, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r15
mov dil, byte ptr [r11]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and r12, rbp
movzx rbp, dil
shl rbp, 0x18
or r12, rbp
=== 5242
mov rbp, r12
push rbp
mov r14, rsp
mov rdi, r12
=== 5243
mov rax, r14
mov r12, rdi
push rax
push 0x15ec1b02
push 0x71e40f78
push 0x70d773a2
=== 5244
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rsi
mov r14, r12
movzx r15, r15b
=== 5245
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xd24c04a0
add r10, 0x6dbd6e20; sub_carry
mov r10, qword ptr [r10]
add r10, r15
mov r15b, byte ptr [r10]
movzx r15, r15b
shl r15, 0x28
sub r14, r15
mov rdi, r14
movabs r15, 0xf3dd6328
add r15, 0x4c2c0798; sub
=== 5246
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rax
mov r15, rdi
=== 5247
mov r15, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r12
mov r10b, byte ptr [rbp]
mov r13, 0xff
shl r13, 0x20
not r13
and r15, r13
movzx r13, r10b
shl r13, 0x20
or r15, r13
=== 5248
mov r10, r15
push r10
mov rdi, rsp
mov rsi, r15
=== 5249
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r12, rsi
movzx rbx, bl
=== 5250
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xc3f2f5c1
add r12, 0x7c167cff; sub_carry
mov r12, qword ptr [r12]
add r12, rbx
mov r13b, byte ptr [r12]
movzx r13, r13b
shl r13, 0x30
sub r12, r13
mov r14, r12
movabs r15, 0x1276cf2a7
add r15, 0x189c7819; sub
=== 5251
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbx
mov r15, r14
=== 5252
mov r14, r15
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r13
mov bpl, byte ptr [r13]
mov rax, 0xff
shl rax, 0x28
not rax
and r14, rax
movzx rax, bpl
shl rax, 0x28
or r14, rax
=== 5253
mov r15, r14
push r15
mov rbp, rsp
mov r15, r14
=== 5254
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov r13, r15
movzx r14, r14b
=== 5255
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r13
movabs rsi, 0xd1e9056f
add rsi, 0x6e206551; sub
=== 5256
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rax
mov rsi, r15
=== 5257
mov r13, rsi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r15
mov dl, byte ptr [rbx]
mov r9, 0xff
shl r9, 0x38
not r9
and r13, r9
movzx r9, dl
shl r9, 0x38
or r13, r9
=== 5258
mov rbp, r13
movabs rdi, 0xe17f5743
add rdi, 0x5f0a61a5; input
=== 5259
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 14
add rsp, 14
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov r12, rbp
movzx rdi, dil
=== 5260
mov rax, rdi
mov rsi, 0xffffffff884c4b50
add rsi, 0x77e6035d
push rsi
mov rbp, r12
mul qword ptr [rsp]
mov r12, rax
=== 5261
mov rsi, rbp
xor rsi, r12
=== 5262
mov rdi, rsi
push rdi
mov r15, rsp
mov rbp, rsi
=== 5263
mov rsi, r15
mov rbp, rbp
push rsi
push 0x44a940db
push 0x7e7010d
push 0x47d544f9
push 0x5866699
=== 5264
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r14
mov rbx, rbp
movzx rsi, sil
=== 5265
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x11f153cfb
add rcx, 0x20f435c5; sub_carry
mov rcx, qword ptr [rcx + 0x320]
add rcx, rsi
mov cl, byte ptr [rcx]
movzx rcx, cl
shl rcx, 8
sub rbx, rcx
movabs rdi, 0x130e3550a
push rdi
push 0x26ab187e
push 0x41521bf5
push 0x20805378
add qword ptr [rsp + 0x18], 0xf2615b6; sub
mov r12, rbx
=== 5266
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 800
add rsp, 800
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rax
mov r14, r12
=== 5267
mov r13, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r13
mov r12b, byte ptr [r8]
mov r13b, r12b
=== 5268
mov rbx, r13
push rbx
mov rbp, rsp
mov rdi, r13
=== 5269
mov r15, rbp
mov rbx, rdi
push r15
push 0x25d40ab5
push 0x1f9e6f24
push 0x673c13a0
push 0xc3565e7
=== 5270
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov r12, rbx
movzx rdi, dil
=== 5271
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xd56b6fde
add r14, 0x6a9e02e2; sub_carry
mov r14, qword ptr [r14 + 0x3d0]
add r14, rdi
mov r12b, byte ptr [r14]
movzx r12, r12b
shl r12, 0x10
sub r12, r12
mov r13, r12
movabs r14, 0x122e04f2a
add r14, 0x1d291b96; sub
=== 5272
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 976
add rsp, 976
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r15
mov r13, r13
=== 5273
mov r15, r13
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r14
mov r11b, byte ptr [rdi]
mov rsi, 0xff
shl rsi, 8
not rsi
and r15, rsi
movzx rsi, r11b
shl rsi, 8
or r15, rsi
=== 5274
mov rdi, r15
push rdi
mov r15, rsp
mov rbx, r15
=== 5275
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r13
mov rbp, rbx
movzx r14, r14b
=== 5276
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x1048df60d
add rbx, 0x3b7b7cb3; sub_carry
mov rbx, qword ptr [rbx + 0x4d0]
add rbx, r14
mov r15b, byte ptr [rbx]
movzx r15, r15b
shl r15, 0x18
sub rbp, r15
movabs rdi, 0xc13e2ef5
push rdi
push 0x26db6585
push 0x421b343c
push 0x73eb37ea
push 0x47c6dea
add qword ptr [rsp + 0x20], 0x7ecb3bcb; sub
mov rbx, rbp
=== 5277
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1232
add rsp, 1232
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdx
mov rbp, rbx
=== 5278
mov rsi, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov r12b, byte ptr [r10]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and rsi, rbx
movzx rbx, r12b
shl rbx, 0x10
or rsi, rbx
=== 5279
mov r15, rsi
push r15
mov r14, rsp
mov r13, rsi
=== 5280
mov r8, r14
mov rsi, r13
push r8
push 0x53324df
push 0x18a7034f
push 0x7a5622c8
=== 5281
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov r14, rsi
movzx r13, r13b
=== 5282
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x111be22b5
add rbp, 0x2e4b500b; sub_carry
mov rbp, qword ptr [rbp + 0x4b0]
add rbp, r13
mov r14b, byte ptr [rbp]
movzx r14, r14b
shl r14, 0x20
sub r14, r14
movabs r15, 0x118772290
push r15
push 0x4002516d
push 0x52382342
push 0x67334a22
add qword ptr [rsp + 0x18], 0x27924830; sub
mov rbx, r14
=== 5283
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1200
add rsp, 1200
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rax
mov rbp, rbx
=== 5284
mov r12, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov r8b, byte ptr [rdx]
mov r9, 0xff
shl r9, 0x18
not r9
and r12, r9
movzx r9, r8b
shl r9, 0x18
or r12, r9
=== 5285
mov r13, r12
push r13
mov r15, rsp
mov rbp, r12
=== 5286
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov rbx, rbp
movzx rdi, dil
=== 5287
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x10adcff9d
add rsi, 0x352c7323; sub_carry
mov rsi, qword ptr [rsi]
add rsi, rdi
mov r15b, byte ptr [rsi]
movzx r15, r15b
shl r15, 0x28
sub rbx, r15
mov r12, rbx
movabs rsi, 0x11fc4f6df
add rsi, 0x204473e1; sub
=== 5288
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov rsi, r12
=== 5289
mov r12, rsi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov r13b, byte ptr [r10]
mov rbx, 0xff
shl rbx, 0x20
not rbx
and r12, rbx
movzx rbx, r13b
shl rbx, 0x20
or r12, rbx
=== 5290
mov r14, r12
push r14
mov r14, rsp
mov r13, r12
=== 5291
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov r12, r13
movzx r14, r14b
=== 5292
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x1252900d5
add rdx, 0x1ae071eb; sub_carry
mov rdx, qword ptr [rdx]
add rdx, r14
mov dl, byte ptr [rdx]
movzx rdx, dl
shl rdx, 0x38
sub r12, rdx
movabs r10, 0x1070a249e
push r10
push 0xcae7e58
push 0x6ec35dff
push 0x42a00140
add qword ptr [rsp + 0x18], 0x38ff4622; sub
mov r14, r12
=== 5293
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r8
mov rbp, r14
=== 5294
mov rbx, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r13
mov dil, byte ptr [r8]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and rbx, rsi
movzx rsi, dil
shl rsi, 0x30
or rbx, rsi
=== 5295
mov r12, rbx
push r12
mov r14, rsp
mov rbx, rbx
=== 5296
mov r11, r14
mov r12, rbx
push r11
push 0x5a491017
push 0x4f0d0377
push 0x5a033b98
push 0x24885bc8
=== 5297
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r10
mov r13, r12
movzx rsi, sil
=== 5298
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xecc23ca9
push rdx
push 0x1b91126b
push 0x757b745b
push 0x2cf15719
add qword ptr [rsp + 0x18], 0x53472e17; sub
mov rbp, r13
=== 5299
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov rbp, rbp
=== 5300
mov rbx, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov r11b, byte ptr [r10]
mov r13, 0xff
shl r13, 0x38
not r13
and rbx, r13
movzx r13, r11b
shl r13, 0x38
or rbx, r13
=== 5301
movabs rax, 0xccbd7c00
push rax
push 0x2fa000b
push 0x222c13d9
push 0x54a94a94
push 0x4861453e
add qword ptr [rsp + 0x20], 0x73cc3ce8; input
mov rsi, rbx
=== 5302
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 10
add rsp, 10
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbx
mov rbx, rsi
movzx rsi, sil
=== 5303
mov rax, rsi
mov rdi, 0xffffffffb6b3027a
add rdi, 0x49b268a1
push rdi
mov r12, rbx
mul qword ptr [rsp]
mov r15, rax
=== 5304
mov r12, r12
sub r12, r15
=== 5305
mov rdi, r12
push rdi
mov r15, rsp
mov rsi, r12
=== 5306
mov rax, r15
mov r14, rsi
push rax
push 0x14380e51
push 0x479f22e7
push 0x4df71159
=== 5307
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov rsi, r14
movzx r12, r12b
=== 5308
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x1387f1560
add rbx, 0x78a4d60; add_carry
mov rbx, qword ptr [rbx + 0x218]
add rbx, r12
mov r15b, byte ptr [rbx]
movzx r15, r15b
shl r15, 8
add rsi, r15
mov r14, rsi
movabs rbx, 0xc6305044
add rbx, 0x79d90a7c; add
=== 5309
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 536
add rsp, 536
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r12, r14
=== 5310
mov rdi, r12
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov r14b, byte ptr [rax]
mov dil, r14b
=== 5311
mov r10, rdi
push r10
mov rsi, rsp
mov rbp, rdi
=== 5312
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov rbx, rbp
movzx r12, r12b
=== 5313
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x1102a23cd
add r8, 0x2fdf3ef3; add_carry
mov r8, qword ptr [r8 + 0x128]
add r8, r12
mov r13b, byte ptr [r8]
movzx r13, r13b
shl r13, 0x10
add rbx, r13
movabs rbx, 0x1210c532e
push rbx
push 0x3ad25129
push 0x59f000fe
push 0x32096de8
push 0x42d35f0
add qword ptr [rsp + 0x20], 0x1efd0792; add
mov r15, rbx
=== 5314
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 296
add rsp, 296
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r14
mov rdi, r15
=== 5315
mov r12, rdi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r12
mov cl, byte ptr [r11]
mov r10, 0xff
shl r10, 8
not r10
and r12, r10
movzx r10, cl
shl r10, 8
or r12, r10
=== 5316
mov r11, r12
push r11
mov r15, rsp
mov rbx, r12
=== 5317
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov rsi, rbx
movzx rdi, dil
=== 5318
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xc8fa5f45
add rbp, 0x770f037b; add_carry
mov rbp, qword ptr [rbp + 0x88]
add rbp, rdi
mov r8b, byte ptr [rbp]
movzx r8, r8b
shl r8, 0x18
add rsi, r8
mov r13, rsi
movabs r14, 0x1294dfb97
add r14, 0x16bb5f29; add
=== 5319
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 136
add rsp, 136
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rax
mov r13, r13
=== 5320
mov rbp, r13
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbx
mov r10b, byte ptr [rdi]
mov r15, 0xff
shl r15, 0x10
not r15
and rbp, r15
movzx r15, r10b
shl r15, 0x10
or rbp, r15
=== 5321
mov r11, rbp
push r11
mov r12, rsp
mov r15, rbp
=== 5322
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov rsi, r15
movzx rbp, bpl
=== 5323
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xea335c28
add rax, 0x55d60698; add_carry
mov rax, qword ptr [rax + 0x460]
add rax, rbp
mov dl, byte ptr [rax]
movzx rdx, dl
shl rdx, 0x20
add rsi, rdx
movabs r8, 0xc02847a0
push r8
push 0x71285402
push 0x2f8e530c
push 0xfd648eb
push 0x2ce0f0b
add qword ptr [rsp + 0x20], 0x7fe11320; add
mov r14, rsi
=== 5324
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1120
add rsp, 1120
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov r14, r14
=== 5325
mov rbp, r14
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rsi
mov sil, byte ptr [r14]
mov r12, 0xff
shl r12, 0x18
not r12
and rbp, r12
movzx r12, sil
shl r12, 0x18
or rbp, r12
=== 5326
mov r14, rbp
push r14
mov rbx, rsp
mov r12, rbp
=== 5327
mov rdx, rbx
mov rsi, r12
push rdx
push 0x15ba6ada
push 0x4bfa4131
push 0x34f60fc1
=== 5328
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbx
mov rbp, rsi
movzx rdi, dil
=== 5329
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xdd160b77
add r15, 0x62f35749; add_carry
mov r15, qword ptr [r15]
add r15, rdi
mov dil, byte ptr [r15]
movzx rdi, dil
shl rdi, 0x28
add rbp, rdi
mov r14, rbp
movabs rbx, 0xcd5039bd
add rbx, 0x72b92103; add
=== 5330
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdi
mov rdi, r14
=== 5331
mov r12, rdi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbx
mov r11b, byte ptr [r13]
mov rcx, 0xff
shl rcx, 0x20
not rcx
and r12, rcx
movzx rcx, r11b
shl rcx, 0x20
or r12, rcx
=== 5332
mov rbx, r12
push rbx
mov r13, rsp
mov rsi, r12
=== 5333
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov r12, rsi
movzx rbp, bpl
=== 5334
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x1321ee6a2
add rbp, 0xdea7c1e; add_carry
mov rbp, qword ptr [rbp]
add rbp, rbp
mov bl, byte ptr [rbp]
movzx rbx, bl
shl rbx, 0x38
add r12, rbx
mov rdi, r12
movabs r13, 0xe329ea36
add r13, 0x5cdf708a; add
=== 5335
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdx
mov rbp, rdi
=== 5336
mov rdi, rbp
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r14
mov r10b, byte ptr [rcx]
mov rbx, 0xff
shl rbx, 0x30
not rbx
and rdi, rbx
movzx rbx, r10b
shl rbx, 0x30
or rdi, rbx
=== 5337
mov rdx, rdi
push rdx
mov r14, rsp
mov r13, rdi
=== 5338
mov r9, r14
mov rsi, r13
push r9
push 0x22d6735c
push 0x18e07ee9
push 0x72053759
=== 5339
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov rbx, rsi
movzx r15, r15b
=== 5340
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xf376de25
push r15
push 0x75d94d6a
push 0x696f4417
push 0x1b115520
add qword ptr [rsp + 0x18], 0x4c927c9b; add
mov rsi, rbx
=== 5341
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov rbp, rsi
=== 5342
mov r13, rbp
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov r14b, byte ptr [rbp]
mov rcx, 0xff
shl rcx, 0x38
not rcx
and r13, rcx
movzx rcx, r14b
shl rcx, 0x38
or r13, rcx
=== 5343
mov r15, r13
push r15
mov rsi, rsp
mov r12, r13
=== 5344
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov rbp, r12
movzx r14, r14b
=== 5345
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x10644315c
add rbp, 0x39c54164; sub_carry
mov rbp, qword ptr [rbp + 0x638]
add rbp, r14
mov r10b, byte ptr [rbp]
movzx r10, r10b
shl r10, 8
sub rbp, r10
movabs rdi, 0xe2e7045d
push rdi
push 0x5c03285a
push 0x6a325606
push 0x60c92382
add qword ptr [rsp + 0x18], 0x5d226663; sub
mov r15, rbp
=== 5346
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1592
add rsp, 1592
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rsi
mov rsi, r15
=== 5347
mov rdi, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbx
mov r11b, byte ptr [r13]
mov dil, r11b
=== 5348
mov r11, rdi
push r11
mov r14, rsp
mov rdi, rdi
=== 5349
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov rbp, rdi
movzx r14, r14b
=== 5350
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xc92d51eb
add r8, 0x76dc20d5; sub_carry
mov r8, qword ptr [r8 + 0x228]
add r8, r14
mov r12b, byte ptr [r8]
movzx r12, r12b
shl r12, 0x10
sub rbp, r12
movabs rdx, 0x131111e2e
push rdx
push 0x15604bb5
push 0x262655a8
push 0x29a6051a
push 0x3a2b5a98
add qword ptr [rsp + 0x20], 0xef84c92; sub
mov r14, rbp
=== 5351
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 552
add rsp, 552
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbx
mov r12, r14
=== 5352
mov r12, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r15
mov dil, byte ptr [r13]
mov rbx, 0xff
shl rbx, 8
not rbx
and r12, rbx
movzx rbx, dil
shl rbx, 8
or r12, rbx
=== 5353
mov rcx, r12
push rcx
mov rdi, rsp
mov r13, r12
=== 5354
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r12
mov rsi, r13
movzx r14, r14b
=== 5355
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xd27d0786
add rax, 0x6d8c6b3a; sub_carry
mov rax, qword ptr [rax + 0x6d8]
add rax, r14
mov al, byte ptr [rax]
movzx rax, al
shl rax, 0x18
sub rsi, rax
mov r15, rsi
movabs rbx, 0x12e0f110f
add rbx, 0x11fa59b1; sub
=== 5356
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1752
add rsp, 1752
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rax
mov rbx, r15
=== 5357
mov rdi, rbx
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbp
mov r10b, byte ptr [r14]
mov r13, 0xff
shl r13, 0x10
not r13
and rdi, r13
movzx r13, r10b
shl r13, 0x10
or rdi, r13
=== 5358
mov rbp, rdi
push rbp
mov r12, rsp
mov r15, rdi
=== 5359
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov r13, r15
movzx r14, r14b
=== 5360
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xff0b0da0
add r13, 0x40fe6520; sub_carry
mov r13, qword ptr [r13 + 0x608]
add r13, r14
mov cl, byte ptr [r13]
movzx rcx, cl
shl rcx, 0x20
sub r13, rcx
movabs r11, 0xf1f8f37d
push r11
push 0x217837ad
push 0x303f5e20
push 0x6aea7f09
push 0x2cc11648
add qword ptr [rsp + 0x20], 0x4e107743; sub
mov rdi, r13
=== 5361
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1544
add rsp, 1544
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rsi
mov rbp, rdi
=== 5362
mov rbp, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbx
mov al, byte ptr [r12]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and rbp, rdi
movzx rdi, al
shl rdi, 0x18
or rbp, rdi
=== 5363
mov rsi, rbp
push rsi
mov rsi, rsp
mov r13, rbp
=== 5364
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbp
mov r14, r13
movzx r12, r12b
=== 5365
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xf430051e
add rax, 0x4bd96da2; sub_carry
mov rax, qword ptr [rax + 0x7e8]
add rax, r12
mov al, byte ptr [rax]
movzx rax, al
shl rax, 0x28
sub r14, rax
movabs rdx, 0xcb710a85
push rdx
push 0x77523888
push 0x17883217
push 0xaf97463
push 0x25916850
add qword ptr [rsp + 0x20], 0x7498603b; sub
mov rbx, r14
=== 5366
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2024
add rsp, 2024
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov r13, rbx
=== 5367
mov rsi, r13
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov r13b, byte ptr [r14]
mov r8, 0xff
shl r8, 0x20
not r8
and rsi, r8
movzx r8, r13b
shl r8, 0x20
or rsi, r8
=== 5368
mov rax, rsi
push rax
mov rbx, rsp
mov rsi, rsi
=== 5369
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r15
mov r14, rsi
movzx r13, r13b
=== 5370
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xfe6644ff
add rdi, 0x41a32dc1; sub_carry
mov rdi, qword ptr [rdi + 0x7f8]
add rdi, r13
mov r14b, byte ptr [rdi]
movzx r14, r14b
shl r14, 0x30
sub r14, r14
mov rdi, r14
movabs rbp, 0xdd236042
add rbp, 0x62e60a7e; sub
=== 5371
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r14
mov r13, rdi
=== 5372
mov r12, r13
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r12
mov r8b, byte ptr [rbx]
mov r14, 0xff
shl r14, 0x28
not r14
and r12, r14
movzx r14, r8b
shl r14, 0x28
or r12, r14
=== 5373
mov rcx, r12
push rcx
mov rbx, rsp
mov r12, r12
=== 5374
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov rbp, r12
movzx r13, r13b
=== 5375
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xca834ac1
add r8, 0x758627ff; sub_carry
mov r8, qword ptr [r8 + 0x7f8]
add r8, r13
mov r11b, byte ptr [r8]
movzx r11, r11b
shl r11, 0x38
sub rbp, r11
movabs r12, 0xdec14d51
push r12
push 0x11fb1b73
push 0x59285cbb
push 0x2a6456c7
add qword ptr [rsp + 0x18], 0x61481d6f; sub
mov r13, rbp
=== 5376
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbx
mov rbx, r13
=== 5377
mov rsi, rbx
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r13
mov r8b, byte ptr [r12]
mov rax, 0xff
shl rax, 0x30
not rax
and rsi, rax
movzx rax, r8b
shl rax, 0x30
or rsi, rax
=== 5378
mov rsi, rsi
push rsi
mov r14, rsp
mov rbx, rsi
=== 5379
mov r12, r14
mov rsi, rbx
push r12
push 0x3a65689f
push 0x7dc52291
push 0x2d486c70
push 0x6ac27b8e
=== 5380
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
mov r12, rsi
movzx rsi, sil
=== 5381
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x112341334
push rbp
push 0x34664abe
push 0x2ca51735
push 0x49db1b28
push 0x174a6bf6
add qword ptr [rsp + 0x20], 0x2dd5578c; sub
mov r12, r12
=== 5382
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdi
mov r13, r12
=== 5383
mov rbp, r13
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r12
mov r9b, byte ptr [r14]
mov rsi, 0xff
shl rsi, 0x38
not rsi
and rbp, rsi
movzx rsi, r9b
shl rsi, 0x38
or rbp, rsi
=== 5384
mov rax, rbp
push rax
mov r15, rsp
mov rsi, rbp
=== 5385
mov r15, r15
mov rbx, rsi
push r15
push 0x257d313e
push 0x9426295
push 0x45143911
push 0x38460f49
=== 5386
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r8
mov r13, rbx
movzx rbp, bpl
=== 5387
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x12e92453f
push rsi
push 0x17140f73
push 0x9215de0
push 0x17d17e5f
add qword ptr [rsp + 0x18], 0x11770d81; or
mov r12, r13
=== 5388
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov r12, r12
=== 5389
mov r14, r12
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r14
mov r10b, byte ptr [rsi]
mov rbp, 0xff
shl rbp, 8
not rbp
and r14, rbp
movzx rbp, r10b
shl rbp, 8
or r14, rbp
=== 5390
mov rbp, r14
push rbp
mov r13, rsp
mov rdi, r14
=== 5391
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r8
mov r13, rdi
movzx rbp, bpl
=== 5392
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xcbc4d3ee
push rsi
push 0x231918e2
push 0x4fe64770
push 0x7f4a5ac7
add qword ptr [rsp + 0x18], 0x74447ed2; or
mov rdi, r13
=== 5393
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r13
mov r14, rdi
=== 5394
mov r14, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbp
mov dl, byte ptr [r11]
mov r12, 0xff
shl r12, 0x10
not r12
and r14, r12
movzx r12, dl
shl r12, 0x10
or r14, r12
=== 5395
mov r13, r14
push r13
mov r14, rsp
mov r13, r14
=== 5396
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov r14, r13
movzx r12, r12b
=== 5397
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xc572e89b
push r11
push 0x5d652105
push 0x7948346e
push 0x643418b
add qword ptr [rsp + 0x18], 0x7a966a25; or
mov r15, r14
=== 5398
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov rsi, r15
=== 5399
mov rbp, rsi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbx
mov dil, byte ptr [rbx]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and rbp, rcx
movzx rcx, dil
shl rcx, 0x18
or rbp, rcx
=== 5400
mov rdi, rbp
push rdi
mov r13, rsp
mov r14, rbp
=== 5401
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov rbp, r14
movzx rdi, dil
=== 5402
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rbp
movabs r14, 0x1301c2ea2
add r14, 0xfed241e; or
=== 5403
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov rbx, r12
=== 5404
mov r13, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov sil, byte ptr [rbp]
mov rdi, 0xff
shl rdi, 0x28
not rdi
and r13, rdi
movzx rdi, sil
shl rdi, 0x28
or r13, rdi
=== 5405
mov rbx, r13
push rbx
mov rbp, rsp
mov rdi, r13
=== 5406
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov r14, rdi
movzx r13, r13b
=== 5407
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r14
movabs r14, 0xc58b501d
add r14, 0x7a7e02a3; or
=== 5408
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rcx
mov rsi, rsi
=== 5409
mov r12, rsi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbx
mov r13b, byte ptr [rsi]
mov rdi, 0xff
shl rdi, 0x30
not rdi
and r12, rdi
movzx rdi, r13b
shl rdi, 0x30
or r12, rdi
=== 5410
mov r8, r12
push r8
mov r12, rsp
mov rbx, r12
=== 5411
mov rdi, r12
mov rbx, rbx
push rdi
push 0x8b56e6b
push 0x644921f5
push 0x1fe65fc2
push 0x58be459e
=== 5412
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov rbx, rbx
movzx rdi, dil
=== 5413
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x10d440153
push r13
push 0x40ce3eaf
push 0x4ddb67d0
push 0x14b920f1
add qword ptr [rsp + 0x18], 0x32c5516d; or
mov r12, rbx
=== 5414
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov rbx, r12
=== 5415
mov rbx, rbx
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbp
mov cl, byte ptr [r11]
mov rax, 0xff
shl rax, 0x38
not rax
and rbx, rax
movzx rax, cl
shl rax, 0x38
or rbx, rax
=== 5416
mov r14, rbx
movabs rdi, 0x13023d114
add rdi, 0xfdc40dc
test r14, r14
lea r13, [rip - 0x3ae3a3]
cmovne r13, rdi
jmp r13
=== 5417
movabs rbp, 0x113016d17
add rbp, 0x2d884bd1; input
=== 5418
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 11
add rsp, 11
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdi
movzx rbp, bpl
=== 5419
mov rax, rbp
mov rcx, 0xffffffffc240ba6d
add rcx, 0x3de46119
push rcx
mul qword ptr [rsp]
mov r14, rax
=== 5420
mov r12, r14
push r12
mov r15, rsp
mov r13, r14
=== 5421
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
mov rdi, r13
movzx r15, r15b
=== 5422
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x11f590922
add r14, 0x20b0599e; add_carry
mov r14, qword ptr [r14 + 0x160]
add r14, r15
mov r13b, byte ptr [r14]
movzx r13, r13b
shl r13, 8
add rdi, r13
mov r15, rdi
movabs r14, 0x13098349d
add r14, 0xf712623; add
=== 5423
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 352
add rsp, 352
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov r13, r15
=== 5424
mov rbx, r13
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov cl, byte ptr [r11]
mov bl, cl
=== 5425
mov r14, rbx
push r14
mov r15, rsp
mov r14, rbx
=== 5426
mov rdx, r15
mov rdi, r14
push rdx
push 0x2c244a72
push 0x6b0a4d7f
push 0x6b164ebe
=== 5427
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov r15, rdi
movzx r14, r14b
=== 5428
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x11e0c0e3b
add r13, 0x21fd5485; add_carry
mov r13, qword ptr [r13 + 0xc8]
add r13, r14
mov bpl, byte ptr [r13]
movzx rbp, bpl
shl rbp, 0x10
add r15, rbp
movabs rbp, 0xe6cfdfe5
push rbp
push 0x43f555ce
push 0x79de0cfc
push 0x391a1405
push 0x51772b2c
add qword ptr [rsp + 0x20], 0x59397adb; add
mov rbx, r15
=== 5429
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 200
add rsp, 200
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdx
mov r14, rbx
=== 5430
mov r15, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov dil, byte ptr [rax]
mov rdx, 0xff
shl rdx, 8
not rdx
and r15, rdx
movzx rdx, dil
shl rdx, 8
or r15, rdx
=== 5431
mov rsi, r15
push rsi
mov r14, rsp
mov rbp, r15
=== 5432
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov rbx, rbp
movzx rdi, dil
=== 5433
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x11ae4e993
add rbx, 0x2524792d; add_carry
mov rbx, qword ptr [rbx + 0x288]
add rbx, rdi
mov al, byte ptr [rbx]
movzx rax, al
shl rax, 0x18
add rbx, rax
movabs r14, 0xd02c1c20
push r14
push 0x24e83bd0
push 0x7c1c7efc
push 0x67ba4059
push 0xe907fa
add qword ptr [rsp + 0x20], 0x6fdd3ea0; add
mov rbx, rbx
=== 5434
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 648
add rsp, 648
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r10
mov r15, rbx
=== 5435
mov r14, r15
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rsi
mov bl, byte ptr [rbx]
mov r9, 0xff
shl r9, 0x10
not r9
and r14, r9
movzx r9, bl
shl r9, 0x10
or r14, r9
=== 5436
mov r8, r14
push r8
mov r12, rsp
mov rdi, r14
=== 5437
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbx
mov r12, rdi
movzx r15, r15b
=== 5438
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xfc4bfe44
add r8, 0x43bd647c; add_carry
mov r8, qword ptr [r8 + 0x538]
add r8, r15
mov sil, byte ptr [r8]
movzx rsi, sil
shl rsi, 0x20
add r12, rsi
movabs r8, 0x12c4ae91e
push r8
push 0x2fcb1260
push 0x60ad7300
push 0x58ae14b3
add qword ptr [rsp + 0x18], 0x13be71a2; add
mov r15, r12
=== 5439
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1336
add rsp, 1336
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r8
mov r12, r15
=== 5440
mov r14, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov bpl, byte ptr [r10]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and r14, rdx
movzx rdx, bpl
shl rdx, 0x18
or r14, rdx
=== 5441
mov rdx, r14
push rdx
mov rbp, rsp
mov r13, r14
=== 5442
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov r12, r13
movzx rbx, bl
=== 5443
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x13cd602d3
add r11, 0x3335fed; add_carry
mov r11, qword ptr [r11]
add r11, rbx
mov sil, byte ptr [r11]
movzx rsi, sil
shl rsi, 0x28
add r12, rsi
mov r13, r12
movabs r15, 0x13c434a5a
add r15, 0x3c61066; add
=== 5444
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov rbx, r13
=== 5445
mov r13, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbp
mov dl, byte ptr [rbp]
mov rcx, 0xff
shl rcx, 0x20
not rcx
and r13, rcx
movzx rcx, dl
shl rcx, 0x20
or r13, rcx
=== 5446
mov r11, r13
push r11
mov rbx, rsp
mov rbp, r13
=== 5447
mov rsi, rbx
mov r15, rbp
push rsi
push 0xcfd2e37
push 0xd7e267c
push 0x32747f2c
push 0x3c84d81
=== 5448
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov rbx, r15
movzx rsi, sil
=== 5449
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x13a3dfaf3
add rdi, 0x5cb67cd; add_carry
mov rdi, qword ptr [rdi]
add rdi, rsi
mov bpl, byte ptr [rdi]
movzx rbp, bpl
shl rbp, 0x30
add rbx, rbp
mov rdi, rbx
movabs rbx, 0x11321e981
add rbx, 0x2ce7713f; add
=== 5450
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r11
mov rbx, rdi
=== 5451
mov r14, rbx
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov sil, byte ptr [rdx]
mov rdi, 0xff
shl rdi, 0x28
not rdi
and r14, rdi
movzx rdi, sil
shl rdi, 0x28
or r14, rdi
=== 5452
mov rdi, r14
movabs rbx, 0x11f56b7ba
add rbx, 0x2133012e; input
=== 5453
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov r12, rdi
movzx rsi, sil
=== 5454
mov rax, rsi
mov r8, 0xffffffffea671f5f
add r8, 0x160d19c8
push r8
mov rdi, r12
mul qword ptr [rsp]
mov r12, rax
=== 5455
mov r15, rdi
sub r15, r12
=== 5456
mov r13, r15
push r13
mov rbp, rsp
mov r13, r15
=== 5457
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov r13, r13
movzx r14, r14b
=== 5458
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r13
movabs rdi, 0xd080df34
add rdi, 0x6f886b8c; xor
=== 5459
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 536
add rsp, 536
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r15
mov r14, rsi
=== 5460
mov r14, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov sil, byte ptr [r15]
mov r14b, sil
=== 5461
mov r10, r14
push r10
mov r15, rsp
mov rbp, r14
=== 5462
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rax
mov r12, rbp
movzx rsi, sil
=== 5463
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r12
movabs r12, 0xd00bd64e
add r12, 0x6ffd7472; xor
=== 5464
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1744
add rsp, 1744
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov rbx, r14
=== 5465
mov r12, rbx
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov r13b, byte ptr [r10]
mov rcx, 0xff
shl rcx, 8
not rcx
and r12, rcx
movzx rcx, r13b
shl rcx, 8
or r12, rcx
=== 5466
mov r15, r12
push r15
mov r14, rsp
mov rbp, r12
=== 5467
mov rax, r14
mov rbp, rbp
push rax
push 0x4dd4610e
push 0x4d3320cd
push 0x63c84481
=== 5468
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov r12, rbp
movzx r15, r15b
=== 5469
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xfe7c41aa
push rsi
push 0x29643515
push 0x4b422eb4
push 0x1e8b3689
add qword ptr [rsp + 0x18], 0x418d0916; xor
mov rsi, r12
=== 5470
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 648
add rsp, 648
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov r12, rsi
=== 5471
mov r12, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov r10b, byte ptr [r10]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r12, rdi
movzx rdi, r10b
shl rdi, 0x10
or r12, rdi
=== 5472
mov rdi, r12
push rdi
mov r14, rsp
mov r13, r12
=== 5473
mov r13, r14
mov rsi, r13
push r13
push 0x2de248f8
push 0x5b221593
push 0x87b14c0
=== 5474
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r15
mov r15, rsi
movzx rsi, sil
=== 5475
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r15
movabs r12, 0xf931090e
add r12, 0x46d841b2; xor
=== 5476
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1984
add rsp, 1984
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r9
mov r14, rsi
=== 5477
mov r14, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rdi
mov dil, byte ptr [r15]
mov r13, 0xff
shl r13, 0x18
not r13
and r14, r13
movzx r13, dil
shl r13, 0x18
or r14, r13
=== 5478
mov r12, r14
push r12
mov rsi, rsp
mov rdi, r14
=== 5479
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov r12, rdi
movzx r15, r15b
=== 5480
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xc708299f
push rdx
push 0x6f7a45ec
push 0x6bf95811
push 0x731e0ee6
add qword ptr [rsp + 0x18], 0x79012121; xor
mov rbp, r12
=== 5481
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov rbx, rbp
=== 5482
mov rsi, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov r8b, byte ptr [r9]
mov r13, 0xff
shl r13, 0x38
not r13
and rsi, r13
movzx r13, r8b
shl r13, 0x38
or rsi, r13
=== 5483
mov r12, rsi
movabs r14, 0x13259af13
add r14, 0xe3009d5; input
=== 5484
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 31
add rsp, 31
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbx
mov rbx, r12
movzx rsi, sil
=== 5485
mov rax, rsi
mov r11, 0xffffffffde07eb4c
add r11, 0x2292492d
push r11
mov rbp, rbx
mul qword ptr [rsp]
mov r12, rax
=== 5486
mov rbx, rbp
xor rbx, r12
=== 5487
mov rdx, rbx
push rdx
mov r15, rsp
mov r14, rbx
=== 5488
mov r13, r15
mov rdi, r14
push r13
push 0x56286f7b
push 0x7b390937
push 0x19930253
push 0x54ff5ffa
=== 5489
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r11
mov rbx, rdi
movzx rbp, bpl
=== 5490
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rbx
movabs rbx, 0xd6493ad1
add rbx, 0x69c00fef; xor
=== 5491
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1320
add rsp, 1320
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rsi
mov rbp, rbp
=== 5492
mov rbp, rbp
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r14
mov dil, byte ptr [r15]
mov bpl, dil
=== 5493
mov r10, rbp
push r10
mov rbx, rsp
mov r15, rbp
=== 5494
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov rbx, r15
movzx rdi, dil
=== 5495
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rbx
movabs rbx, 0x13165d86f
add rbx, 0xea37251; xor
=== 5496
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1080
add rsp, 1080
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r11
mov rbx, r12
=== 5497
mov rbp, rbx
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rsi
mov r12b, byte ptr [r10]
mov rdx, 0xff
shl rdx, 8
not rdx
and rbp, rdx
movzx rdx, r12b
shl rdx, 8
or rbp, rdx
=== 5498
mov rcx, rbp
push rcx
mov rbx, rsp
mov r15, rbp
=== 5499
mov r11, rbx
mov r15, r15
push r11
push 0xd853c19
push 0x10a32cad
push 0x165f6d65
push 0x16e45d9e
=== 5500
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov r12, r15
movzx rsi, sil
=== 5501
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x106d2d610
push r13
push 0x2c0b03e4
push 0x6e586833
push 0xcf662bf
add qword ptr [rsp + 0x18], 0x393674b0; xor
mov rsi, r12
=== 5502
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 640
add rsp, 640
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbx
mov r13, rsi
=== 5503
mov rbx, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov r13b, byte ptr [r15]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and rbx, rdi
movzx rdi, r13b
shl rdi, 0x10
or rbx, rdi
=== 5504
mov r10, rbx
push r10
mov r14, rsp
mov r13, rbx
=== 5505
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov r13, r13
movzx rbp, bpl
=== 5506
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xdcf3d5eb
push r13
push 0x4f4341ef
push 0x73f97591
push 0x72d75035
push 0x56b80921
add qword ptr [rsp + 0x20], 0x631574d5; xor
mov rbx, r13
=== 5507
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 408
add rsp, 408
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov r12, rbx
=== 5508
mov rbx, r12
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r13
mov r10b, byte ptr [rsi]
mov rax, 0xff
shl rax, 0x18
not rax
and rbx, rax
movzx rax, r10b
shl rax, 0x18
or rbx, rax
=== 5509
mov rax, rbx
push rax
mov r13, rsp
mov rsi, rbx
=== 5510
mov r14, r13
mov rbx, rsi
push r14
push 0x42ce7afb
push 0x396d6f2f
push 0x641e1bbe
=== 5511
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov r15, rbx
movzx r13, r13b
=== 5512
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xd140282b
push rax
push 0x525b5c57
push 0x7f1d54b6
push 0x4110f70
add qword ptr [rsp + 0x18], 0x6ec92295; xor
mov rbp, r15
=== 5513
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdi
mov r14, rbp
=== 5514
mov rbp, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov cl, byte ptr [r13]
mov rbx, 0xff
shl rbx, 0x20
not rbx
and rbp, rbx
movzx rbx, cl
shl rbx, 0x20
or rbp, rbx
=== 5515
mov rbx, rbp
push rbx
mov r14, rsp
mov rsi, rbp
=== 5516
mov r13, r14
mov rbp, rsi
push r13
push 0x5e016170
push 0x32f74047
push 0x44486a0d
push 0x5ee5078
=== 5517
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov rbp, rbp
movzx r13, r13b
=== 5518
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rbp
movabs rbx, 0x11fd43a57
add rbx, 0x20351069; xor
=== 5519
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r8
mov r12, r12
=== 5520
mov r15, r12
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rdi
mov r12b, byte ptr [r8]
mov r13, 0xff
shl r13, 0x28
not r13
and r15, r13
movzx r13, r12b
shl r13, 0x28
or r15, r13
=== 5521
movabs r10, 0xfe3988ee
push r10
push 0x78f30a9e
push 0x784648a0
push 0x2bf0141
add qword ptr [rsp + 0x18], 0x42502ffa; input
mov r12, r15
=== 5522
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov r13, r12
movzx rsi, sil
=== 5523
mov rax, rsi
mov r8, 0xffffffffa32a72a9
add r8, 0x5d4d1764
push r8
mov r15, r13
mul qword ptr [rsp]
mov rbp, rax
=== 5524
mov rsi, r15
xor rsi, rbp
=== 5525
mov rsi, rsi
push rsi
mov r13, rsp
mov r14, rsi
=== 5526
mov rdx, r13
mov r15, r14
push rdx
push 0x7f667639
push 0x48630605
push 0x547c088b
push 0x39164ab7
=== 5527
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov r13, r15
movzx rbp, bpl
=== 5528
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x13b082f0e
push rbp
push 0x5a5f1103
push 0x37bb2697
push 0x260816db
push 0x28ca41ed
add qword ptr [rsp + 0x20], 0x5011bb2; xor
mov r13, r13
=== 5529
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1688
add rsp, 1688
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rax
mov rdi, r13
=== 5530
mov r12, rdi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r14
mov r10b, byte ptr [r10]
mov r12b, r10b
=== 5531
mov rax, r12
push rax
mov rdi, rsp
mov r14, r12
=== 5532
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r10
mov rbx, r14
movzx rbp, bpl
=== 5533
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rbx
movabs r13, 0xde24e779
add r13, 0x61e46347; xor
=== 5534
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 384
add rsp, 384
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov r12, rsi
=== 5535
mov r12, r12
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbp
mov r13b, byte ptr [r14]
mov r11, 0xff
shl r11, 8
not r11
and r12, r11
movzx r11, r13b
shl r11, 8
or r12, r11
=== 5536
mov rsi, r12
push rsi
mov rbx, rsp
mov rsi, r12
=== 5537
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov rbx, rsi
movzx rsi, sil
=== 5538
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xc4dae4cb
push rdx
push 0x446e605d
push 0x37a916ce
push 0x7d161213
add qword ptr [rsp + 0x18], 0x7b2e65f5; xor
mov r13, rbx
=== 5539
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2024
add rsp, 2024
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov rdi, r13
=== 5540
mov rbp, rdi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov dl, byte ptr [r15]
mov r13, 0xff
shl r13, 0x10
not r13
and rbp, r13
movzx r13, dl
shl r13, 0x10
or rbp, r13
=== 5541
mov rdi, rbp
push rdi
mov rbx, rsp
mov r14, rbp
=== 5542
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rsi
mov rsi, r14
movzx rbp, bpl
=== 5543
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rsi
movabs r14, 0x123bb3774
add r14, 0x1c4e134c; xor
=== 5544
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 600
add rsp, 600
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbx
mov rdi, rsi
=== 5545
mov r12, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov dl, byte ptr [rcx]
mov rbx, 0xff
shl rbx, 0x18
not rbx
and r12, rbx
movzx rbx, dl
shl rbx, 0x18
or r12, rbx
=== 5546
mov rax, r12
push rax
mov rbp, rsp
mov r15, r12
=== 5547
mov r13, rbp
mov r14, r15
push r13
push 0xe7442df
push 0x46a416a7
push 0x49cc009f
=== 5548
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov rbx, r14
movzx rdi, dil
=== 5549
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rbx
movabs r15, 0xf742e5ea
add r15, 0x48c664d6; xor
=== 5550
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r9
mov r14, rdi
=== 5551
mov r14, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov sil, byte ptr [r9]
mov rbp, 0xff
shl rbp, 0x30
not rbp
and r14, rbp
movzx rbp, sil
shl rbp, 0x30
or r14, rbp
=== 5552
mov rdx, r14
push rdx
mov r13, rsp
mov r14, r14
=== 5553
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov r14, r14
movzx r12, r12b
=== 5554
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r14
movabs rdi, 0x1169348ec
add rdi, 0x297601d4; xor
=== 5555
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbp
mov rsi, r12
=== 5556
mov r14, rsi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov dl, byte ptr [r10]
mov r11, 0xff
shl r11, 0x38
not r11
and r14, r11
movzx r11, dl
shl r11, 0x38
or r14, r11
=== 5557
mov r12, r14
movabs r15, 0xdd3c4640
add r15, 0x634d72a8; input
=== 5558
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 27
add rsp, 27
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov rdi, r12
movzx r13, r13b
=== 5559
mov rax, r13
mov rcx, 0xffffffff87af8896
add rcx, 0x78ce7c1f
push rcx
mov r15, rdi
mul qword ptr [rsp]
mov r13, rax
=== 5560
mov r15, r15
sub r15, r13
=== 5561
mov rdi, r15
push rdi
mov rdi, rsp
mov rbp, r15
=== 5562
mov rdi, rdi
mov r13, rbp
push rdi
push 0x1ded74a8
push 0x5a287b62
push 0x146c0f98
=== 5563
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov rbx, r13
movzx r14, r14b
=== 5564
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x115310830
add r15, 0x2ad86a90; sub_carry
mov r15, qword ptr [r15 + 0x4a8]
add r15, r14
mov bl, byte ptr [r15]
movzx rbx, bl
shl rbx, 8
sub rbx, rbx
mov r12, rbx
movabs r14, 0x11e241aad
add r14, 0x21e55013; sub
=== 5565
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1192
add rsp, 1192
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdi
mov rsi, r12
=== 5566
mov r12, rsi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbp
mov r8b, byte ptr [rsi]
mov r12b, r8b
=== 5567
mov r13, r12
push r13
mov rdi, rsp
mov rbx, r12
=== 5568
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov rdi, rbx
movzx r14, r14b
=== 5569
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xe4fb67c2
add r13, 0x5b0e0afe; sub_carry
mov r13, qword ptr [r13 + 0x20]
add r13, r14
mov r11b, byte ptr [r13]
movzx r11, r11b
shl r11, 0x10
sub rdi, r11
movabs rbp, 0x10382687b
push rbp
push 0x77604fef
push 0x218a237d
push 0x62352327
push 0x356c4364
add qword ptr [rsp + 0x20], 0x3c870245; sub
mov r12, rdi
=== 5570
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 32
add rsp, 32
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r13
mov rbp, r12
=== 5571
mov r13, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov bl, byte ptr [r8]
mov r10, 0xff
shl r10, 8
not r10
and r13, r10
movzx r10, bl
shl r10, 8
or r13, r10
=== 5572
mov r10, r13
push r10
mov r13, rsp
mov r15, r13
=== 5573
mov rcx, r13
mov rbp, r15
push rcx
push 0x662d6ff7
push 0x1e748bd
push 0x50436287
=== 5574
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r11
mov rsi, rbp
movzx r13, r13b
=== 5575
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x10d15f2f1
add r12, 0x32f37fcf; sub_carry
mov r12, qword ptr [r12 + 0x2a0]
add r12, r13
mov al, byte ptr [r12]
movzx rax, al
shl rax, 0x18
sub rsi, rax
movabs rdx, 0x134976222
push rdx
push 0x6afd1fbd
push 0x42f71587
push 0x65db7daf
add qword ptr [rsp + 0x18], 0xb72089e; sub
mov rbx, rsi
=== 5576
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 672
add rsp, 672
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov r13, rbx
=== 5577
mov rdi, r13
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov bpl, byte ptr [r12]
mov r12, 0xff
shl r12, 0x10
not r12
and rdi, r12
movzx r12, bpl
shl r12, 0x10
or rdi, r12
=== 5578
mov r11, rdi
push r11
mov r14, rsp
mov r12, rdi
=== 5579
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbx
mov r13, r12
movzx rdi, dil
=== 5580
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xc32a3634
add r13, 0x7cdf3c8c; sub_carry
mov r13, qword ptr [r13 + 0x2e8]
add r13, rdi
mov bl, byte ptr [r13]
movzx rbx, bl
shl rbx, 0x20
sub r13, rbx
movabs rdx, 0xc7e83bbd
push rdx
push 0x769c41a8
push 0x7fd96296
push 0x49d93f6a
push 0x24197df3
add qword ptr [rsp + 0x20], 0x78212f03; sub
mov r12, r13
=== 5581
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 744
add rsp, 744
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r9
mov rbx, r12
=== 5582
mov r14, rbx
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov r9b, byte ptr [rdx]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and r14, rcx
movzx rcx, r9b
shl rcx, 0x18
or r14, rcx
=== 5583
mov r10, r14
push r10
mov rsi, rsp
mov r15, r14
=== 5584
mov r15, rsi
mov r12, r15
push r15
push 0x3792180a
push 0x82362bd
push 0x547e16b0
push 0x1083dcc
=== 5585
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov r15, r12
movzx rdi, dil
=== 5586
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xdc2c2a60
add rcx, 0x63dd4860; sub_carry
mov rcx, qword ptr [rcx]
add rcx, rdi
mov bpl, byte ptr [rcx]
movzx rbp, bpl
shl rbp, 0x28
sub r15, rbp
mov r15, r15
movabs rbx, 0x13fc047d2
add rbx, 0x4922ee; sub
=== 5587
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdx
mov r14, r15
=== 5588
mov rdi, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov r15b, byte ptr [r10]
mov r9, 0xff
shl r9, 0x20
not r9
and rdi, r9
movzx r9, r15b
shl r9, 0x20
or rdi, r9
=== 5589
mov rdx, rdi
push rdx
mov r13, rsp
mov rsi, rdi
=== 5590
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbp
mov rbx, rsi
movzx rdi, dil
=== 5591
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x118a6f69b
add r8, 0x27627c25; sub_carry
mov r8, qword ptr [r8]
add r8, rdi
mov dl, byte ptr [r8]
movzx rdx, dl
shl rdx, 0x30
sub rbx, rdx
movabs r13, 0xe4963b15
push r13
push 0x14101275
push 0x29b95a48
push 0x12710b86
add qword ptr [rsp + 0x18], 0x5b732fab; sub
mov rbp, rbx
=== 5592
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov r14, rbp
=== 5593
mov r14, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rsi
mov r13b, byte ptr [r13]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and r14, rdx
movzx rdx, r13b
shl rdx, 0x28
or r14, rdx
=== 5594
mov rbx, r14
push rbx
mov r13, rsp
mov rsi, r14
=== 5595
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r15
mov rbx, rsi
movzx r15, r15b
=== 5596
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x1012137af
add r13, 0x3ee83b11; sub_carry
mov r13, qword ptr [r13]
add r13, r15
mov cl, byte ptr [r13]
movzx rcx, cl
shl rcx, 0x38
sub rbx, rcx
mov r14, rbx
movabs rdi, 0x112600bf9
add rdi, 0x2da95ec7; sub
=== 5597
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdi
mov rsi, r14
=== 5598
mov rbx, rsi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rdi
mov r14b, byte ptr [r15]
mov r12, 0xff
shl r12, 0x30
not r12
and rbx, r12
movzx r12, r14b
shl r12, 0x30
or rbx, r12
=== 5599
mov rbp, rbx
push rbp
mov r14, rsp
mov rbp, rbx
=== 5600
mov rsi, r14
mov rdi, rbp
push rsi
push 0x4f5a3484
push 0x716116ba
push 0x776125cb
=== 5601
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbx
mov r12, rdi
movzx r14, r14b
=== 5602
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xc6f4ebfd
push rdi
push 0x7c0a7282
push 0x43173129
push 0x6c96461b
push 0x48524ae2
add qword ptr [rsp + 0x20], 0x79147ec3; sub
mov rdi, r12
=== 5603
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov r13, rdi
=== 5604
mov rsi, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov dl, byte ptr [rax]
mov r13, 0xff
shl r13, 0x38
not r13
and rsi, r13
movzx r13, dl
shl r13, 0x38
or rsi, r13
=== 5605
mov r12, rsi
movabs r14, 0x12ea77663
add r14, 0x11e24285; input
=== 5606
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 19
add rsp, 19
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rax
mov rsi, r12
movzx r15, r15b
=== 5607
mov rax, r15
mov r14, 0xffffffff94965029
add r14, 0x6c5b73c5
push r14
mov rsi, rsi
mul qword ptr [rsp]
mov r14, rax
=== 5608
mov r15, rsi
xor r15, r14
=== 5609
mov r13, r15
push r13
mov r15, rsp
mov rdi, r15
=== 5610
mov rdi, r15
mov r12, rdi
push rdi
push 0x5dd70ec2
push 0x3c0c543d
push 0x5e7f01ca
push 0x7d637e4d
=== 5611
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r13
mov rsi, r12
movzx r12, r12b
=== 5612
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x1117ae31f
add rdi, 0x2e8e7fa1; add_carry
mov rdi, qword ptr [rdi + 0x530]
add rdi, r12
mov al, byte ptr [rdi]
movzx rax, al
shl rax, 8
add rsi, rax
movabs r11, 0xfc9a1137
push r11
push 0x67a06010
push 0x793b0348
push 0x41285cd3
push 0x6e6b3053
add qword ptr [rsp + 0x20], 0x436f4989; add
mov r12, rsi
=== 5613
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1328
add rsp, 1328
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov rdi, r12
=== 5614
mov r12, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r14
mov dil, byte ptr [rdx]
mov r12b, dil
=== 5615
mov r11, r12
push r11
mov rdi, rsp
mov r15, r12
=== 5616
mov rcx, rdi
mov r12, r15
push rcx
push 0x758e25dc
push 0x176b7685
push 0x143a2d87
=== 5617
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov rdi, r12
movzx rbp, bpl
=== 5618
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xec3103b3
add rsi, 0x53d85f0d; add_carry
mov rsi, qword ptr [rsi + 0x240]
add rsi, rbp
mov r11b, byte ptr [rsi]
movzx r11, r11b
shl r11, 0x10
add rdi, r11
mov rbp, rdi
movabs r15, 0x12b0ff442
add r15, 0x14f9667e; add
=== 5619
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 576
add rsp, 576
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r11
mov rbp, rbp
=== 5620
mov r13, rbp
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rdi
mov r14b, byte ptr [rsi]
mov r12, 0xff
shl r12, 8
not r12
and r13, r12
movzx r12, r14b
shl r12, 8
or r13, r12
=== 5621
mov r13, r13
push r13
mov rbx, rsp
mov r13, r13
=== 5622
mov rcx, rbx
mov rbx, r13
push rcx
push 0x63c27dbb
push 0x62c74698
push 0x24c975d5
push 0x56e7ed0
=== 5623
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov r15, rbx
movzx r13, r13b
=== 5624
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xea2c5813
add r15, 0x55dd0aad; add_carry
mov r15, qword ptr [r15 + 0x60]
add r15, r13
mov r8b, byte ptr [r15]
movzx r8, r8b
shl r8, 0x18
add r15, r8
mov rdi, r15
movabs rsi, 0x138f0324e
add rsi, 0x7192872; add
=== 5625
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 96
add rsp, 96
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov rsi, rdi
=== 5626
mov r15, rsi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov al, byte ptr [r10]
mov r12, 0xff
shl r12, 0x10
not r12
and r15, r12
movzx r12, al
shl r12, 0x10
or r15, r12
=== 5627
mov r14, r15
push r14
mov rdi, rsp
mov rbp, r15
=== 5628
mov r10, rdi
mov r14, rbp
push r10
push 0x5aeb2b2f
push 0x4969463c
push 0x19d31273
=== 5629
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov rbp, r14
movzx rbx, bl
=== 5630
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xe271e341
add r14, 0x5d977f7f; add_carry
mov r14, qword ptr [r14 + 0x230]
add r14, rbx
mov cl, byte ptr [r14]
movzx rcx, cl
shl rcx, 0x20
add rbp, rcx
mov rdi, rbp
movabs rsi, 0x110c30761
add rsi, 0x2f46535f; add
=== 5631
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 560
add rsp, 560
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rsi
mov rbx, rdi
=== 5632
mov r14, rbx
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r12
mov r12b, byte ptr [rsi]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and r14, rdi
movzx rdi, r12b
shl rdi, 0x18
or r14, rdi
=== 5633
mov rcx, r14
push rcx
mov r14, rsp
mov r13, r14
=== 5634
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov r12, r13
movzx r15, r15b
=== 5635
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x10440ebf5
add r10, 0x3bc876cb; add_carry
mov r10, qword ptr [r10]
add r10, r15
mov r8b, byte ptr [r10]
movzx r8, r8b
shl r8, 0x28
add r12, r8
movabs r11, 0xe1104e6e
push r11
push 0x46f5019
push 0x387e4781
push 0x2026799
add qword ptr [rsp + 0x18], 0x5ef90c52; add
mov r15, r12
=== 5636
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rcx
mov r12, r15
=== 5637
mov r14, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov sil, byte ptr [r10]
mov r9, 0xff
shl r9, 0x20
not r9
and r14, r9
movzx r9, sil
shl r9, 0x20
or r14, r9
=== 5638
mov rdi, r14
push rdi
mov r14, rsp
mov r13, r14
=== 5639
mov rdx, r14
mov rsi, r13
push rdx
push 0x60fb17d6
push 0x6667fa
push 0x6c8670d9
push 0x4e060a67
=== 5640
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r11
mov rbx, rsi
movzx rdi, dil
=== 5641
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xd7d52634
add r14, 0x68343c8c; add_carry
mov r14, qword ptr [r14]
add r14, rdi
mov bpl, byte ptr [r14]
movzx rbp, bpl
shl rbp, 0x30
add rbx, rbp
mov r15, rbx
movabs rsi, 0xd2e441e2
add rsi, 0x6d2518de; add
=== 5642
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov r15, r15
=== 5643
mov r13, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov r8b, byte ptr [rax]
mov r12, 0xff
shl r12, 0x28
not r12
and r13, r12
movzx r12, r8b
shl r12, 0x28
or r13, r12
=== 5644
mov rax, r13
push rax
mov rbx, rsp
mov r14, r13
=== 5645
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rax
mov rbx, r14
movzx rsi, sil
=== 5646
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xda1159f3
add r15, 0x65f808cd; add_carry
mov r15, qword ptr [r15]
add r15, rsi
mov r14b, byte ptr [r15]
movzx r14, r14b
shl r14, 0x38
add rbx, r14
mov r15, rbx
movabs r12, 0xc8bffedf
add r12, 0x77495be1; add
=== 5647
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov rbx, r15
=== 5648
mov r14, rbx
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rdi
mov bl, byte ptr [r12]
mov r11, 0xff
shl r11, 0x30
not r11
and r14, r11
movzx r11, bl
shl r11, 0x30
or r14, r11
=== 5649
mov rbx, r14
push rbx
mov r12, rsp
mov rbp, r14
=== 5650
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r8
mov r14, rbp
movzx rbx, bl
=== 5651
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xee67dc6b
push r10
push 0x5de71f47
push 0x3bbf70bf
push 0x6b2e4119
push 0x5e764c3f
add qword ptr [rsp + 0x20], 0x51a17e55; add
mov rbx, r14
=== 5652
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r11
mov rbx, rbx
=== 5653
mov r15, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbp
mov r10b, byte ptr [rcx]
mov rbx, 0xff
shl rbx, 0x38
not rbx
and r15, rbx
movzx rbx, r10b
shl rbx, 0x38
or r15, rbx
=== 5654
movabs rcx, 0xfce8b581
push rcx
push 0x1e0c4f61
push 0xf5d16b8
push 0x7bb70b60
push 0x2dc153ed
add qword ptr [rsp + 0x20], 0x43a10367; input
mov rbx, r15
=== 5655
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 15
add rsp, 15
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov rsi, rbx
movzx r15, r15b
=== 5656
mov rax, r15
mov r12, 0xffffffff928ec5a4
add r12, 0x6df975e6
push r12
mov rdi, rsi
mul qword ptr [rsp]
mov r13, rax
=== 5657
mov r14, rdi
add r14, r13
=== 5658
mov rbx, r14
push rbx
mov rdi, rsp
mov rbp, r14
=== 5659
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov r13, rbp
movzx rbx, bl
=== 5660
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xc415ec7b
add rdx, 0x7bf37645; add_carry
mov rdx, qword ptr [rdx + 0x6e0]
add rdx, rbx
mov r13b, byte ptr [rdx]
movzx r13, r13b
shl r13, 8
add r13, r13
movabs rsi, 0xcf9c1687
push rsi
push 0x3a2b1fd9
push 0x693f6369
push 0x584a5479
add qword ptr [rsp + 0x18], 0x706d4439; add
mov rbp, r13
=== 5661
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1760
add rsp, 1760
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r13
mov rbp, rbp
=== 5662
mov rbx, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov al, byte ptr [r8]
mov bl, al
=== 5663
mov rdi, rbx
push rdi
mov rbp, rsp
mov r13, rbx
=== 5664
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r15
mov rbp, r13
movzx rdi, dil
=== 5665
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xca0d0de4
add rcx, 0x75fc54dc; add_carry
mov rcx, qword ptr [rcx + 0x7d8]
add rcx, rdi
mov r11b, byte ptr [rcx]
movzx r11, r11b
shl r11, 0x10
add rbp, r11
mov rbp, rbp
movabs r14, 0xe0b24701
add r14, 0x5f5713bf; add
=== 5666
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2008
add rsp, 2008
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov r13, rbp
=== 5667
mov rdi, r13
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r15
mov r14b, byte ptr [r10]
mov r8, 0xff
shl r8, 8
not r8
and rdi, r8
movzx r8, r14b
shl r8, 8
or rdi, r8
=== 5668
mov r12, rdi
push r12
mov r13, rsp
mov rbp, rdi
=== 5669
mov rdi, r13
mov rbp, rbp
push rdi
push 0x2fef0f48
push 0x1d4d5194
push 0xff735da
=== 5670
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov rbp, rbp
movzx rbx, bl
=== 5671
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x133a9481d
add r13, 0xc601aa3; add_carry
mov r13, qword ptr [r13 + 0x178]
add r13, rbx
mov dl, byte ptr [r13]
movzx rdx, dl
shl rdx, 0x18
add rbp, rdx
mov r14, rbp
movabs rbx, 0xe51cf9fe
add rbx, 0x5aec60c2; add
=== 5672
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 376
add rsp, 376
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov r12, r14
=== 5673
mov rsi, r12
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov r15b, byte ptr [rax]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and rsi, rdi
movzx rdi, r15b
shl rdi, 0x10
or rsi, rdi
=== 5674
mov rax, rsi
push rax
mov rbx, rsp
mov rbp, rsi
=== 5675
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov r13, rbp
movzx r12, r12b
=== 5676
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xf6b55867
add r10, 0x49540a59; add_carry
mov r10, qword ptr [r10 + 0x3d8]
add r10, r12
mov r8b, byte ptr [r10]
movzx r8, r8b
shl r8, 0x20
add r13, r8
mov rbx, r13
movabs rsi, 0x108f8e951
add rsi, 0x3710716f; add
=== 5677
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 984
add rsp, 984
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov r12, rbx
=== 5678
mov r15, r12
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbp
mov dl, byte ptr [rax]
mov r12, 0xff
shl r12, 0x18
not r12
and r15, r12
movzx r12, dl
shl r12, 0x18
or r15, r12
=== 5679
mov r11, r15
push r11
mov r15, rsp
mov rdi, r15
=== 5680
mov rsi, r15
mov r14, rdi
push rsi
push 0xd2c02ad
push 0x55ee2eb8
push 0x19890fea
=== 5681
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov r15, r14
movzx r12, r12b
=== 5682
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x10adbe4bf
add rdx, 0x352d7e01; add_carry
mov rdx, qword ptr [rdx]
add rdx, r12
mov r11b, byte ptr [rdx]
movzx r11, r11b
shl r11, 0x30
add r15, r11
movabs rdx, 0x1000b2769
push rdx
push 0x2c027ab4
push 0x1c012973
push 0x34e966e9
push 0x6b30202d
add qword ptr [rsp + 0x20], 0x3ffe3357; add
mov rsi, r15
=== 5683
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbx
mov r13, rsi
=== 5684
mov r15, r13
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r12
mov al, byte ptr [rbp]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and r15, rdx
movzx rdx, al
shl rdx, 0x28
or r15, rdx
=== 5685
mov rdx, r15
push rdx
mov r12, rsp
mov rsi, r15
=== 5686
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r10
mov rsi, rsi
movzx r14, r14b
=== 5687
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xe75d0fc1
add rcx, 0x58ac52ff; add_carry
mov rcx, qword ptr [rcx]
add rcx, r14
mov r13b, byte ptr [rcx]
movzx r13, r13b
shl r13, 0x38
add rsi, r13
mov rsi, rsi
movabs r12, 0xf2751ad8
add r12, 0x4d943fe8; add
=== 5688
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov rsi, rsi
=== 5689
mov rdi, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov cl, byte ptr [r8]
mov r11, 0xff
shl r11, 0x30
not r11
and rdi, r11
movzx r11, cl
shl r11, 0x30
or rdi, r11
=== 5690
mov r8, rdi
push r8
mov rdi, rsp
mov rbp, rdi
=== 5691
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r14
mov rbx, rbp
movzx rbp, bpl
=== 5692
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rbx
movabs rbx, 0xf5be426b
add rbx, 0x4a4b1855; add
=== 5693
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov r14, r13
=== 5694
mov r14, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov dl, byte ptr [r15]
mov rbx, 0xff
shl rbx, 0x38
not rbx
and r14, rbx
movzx rbx, dl
shl rbx, 0x38
or r14, rbx
=== 5695
mov rbx, r14
movabs r14, 0xd9287ff1
add r14, 0x676138f7; input
=== 5696
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 23
add rsp, 23
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov rdi, rbx
movzx rbx, bl
=== 5697
mov rax, rbx
mov rbp, 0xffffffffb27a21f9
add rbp, 0x4e1f1bb8
push rbp
mov r13, rdi
mul qword ptr [rsp]
mov rbx, rax
=== 5698
mov rdi, r13
add rdi, rbx
=== 5699
mov r13, rdi
push r13
mov rbp, rsp
mov rbx, rdi
=== 5700
mov r12, rbp
mov r15, rbx
push r12
push 0x4a6557a
push 0x4ac06676
push 0x2edb39a5
push 0x686c070f
=== 5701
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov r13, r15
movzx rbx, bl
=== 5702
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x13e6b0390
add r14, 0x19e5f30; add_carry
mov r14, qword ptr [r14 + 0x7d0]
add r14, rbx
mov r14b, byte ptr [r14]
movzx r14, r14b
shl r14, 8
add r13, r14
movabs r12, 0xf2cef9ea
push r12
push 0xc4a5526
push 0x4b471793
push 0x7d463874
add qword ptr [rsp + 0x18], 0x4d3a60d6; add
mov r14, r13
=== 5703
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2000
add rsp, 2000
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r15
mov r14, r14
=== 5704
mov r15, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov dl, byte ptr [rax]
mov r15b, dl
=== 5705
mov rcx, r15
push rcx
mov r15, rsp
mov r14, r15
=== 5706
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdi
mov r13, r14
movzx r12, r12b
=== 5707
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x134b000a7
add r10, 0xb596219; add_carry
mov r10, qword ptr [r10 + 0x140]
add r10, r12
mov cl, byte ptr [r10]
movzx rcx, cl
shl rcx, 0x10
add r13, rcx
mov r15, r13
movabs r13, 0xf75e4987
add r13, 0x48ab1139; add
=== 5708
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 320
add rsp, 320
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbp
mov rbp, r15
=== 5709
mov r14, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov al, byte ptr [r12]
mov r9, 0xff
shl r9, 8
not r9
and r14, r9
movzx r9, al
shl r9, 8
or r14, r9
=== 5710
mov rbx, r14
push rbx
mov rbp, rsp
mov rbx, r14
=== 5711
mov rdi, rbp
mov rbx, rbx
push rdi
push 0xee46e4
push 0x634068e2
push 0x5d4c402a
push 0x724914be
=== 5712
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov r14, rbx
movzx r15, r15b
=== 5713
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xefa00832
add r12, 0x50695a8e; add_carry
mov r12, qword ptr [r12 + 0x458]
add r12, r15
mov al, byte ptr [r12]
movzx rax, al
shl rax, 0x18
add r14, rax
mov r15, r14
movabs rbp, 0x1192df529
add rbp, 0x26db6597; add
=== 5714
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1112
add rsp, 1112
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rsi
mov rbx, r15
=== 5715
mov r15, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rsi
mov bpl, byte ptr [rbp]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and r15, rbx
movzx rbx, bpl
shl rbx, 0x10
or r15, rbx
=== 5716
mov rcx, r15
push rcx
mov rsi, rsp
mov r13, r15
=== 5717
mov rax, rsi
mov rdi, r13
push rax
push 0x42942ec6
push 0x1353e4b
push 0x102043f7
push 0x2f4071fb
=== 5718
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r14
mov rsi, rdi
movzx rdi, dil
=== 5719
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xc8ad39dc
add r11, 0x775c28e4; add_carry
mov r11, qword ptr [r11 + 0x548]
add r11, rdi
mov al, byte ptr [r11]
movzx rax, al
shl rax, 0x20
add rsi, rax
mov rsi, rsi
movabs rbp, 0x10803f72a
add rbp, 0x38056396; add
=== 5720
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1352
add rsp, 1352
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov r13, rsi
=== 5721
mov r15, r13
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov cl, byte ptr [r8]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r15, rsi
movzx rsi, cl
shl rsi, 0x18
or r15, rsi
=== 5722
mov rcx, r15
push rcx
mov r13, rsp
mov r15, r15
=== 5723
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r11
mov rsi, r15
movzx rbx, bl
=== 5724
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xd5435513
add r12, 0x6ac60dad; add_carry
mov r12, qword ptr [r12]
add r12, rbx
mov r11b, byte ptr [r12]
movzx r11, r11b
shl r11, 0x30
add rsi, r11
movabs rbx, 0x12281f4a4
push rbx
push 0x338948f6
push 0x2a6475e
push 0x3e865827
add qword ptr [rsp + 0x18], 0x1d87661c; add
mov rbx, rsi
=== 5725
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov rdi, rbx
=== 5726
mov r14, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov r10b, byte ptr [rcx]
mov r12, 0xff
shl r12, 0x28
not r12
and r14, r12
movzx r12, r10b
shl r12, 0x28
or r14, r12
=== 5727
mov rax, r14
push rax
mov r14, rsp
mov r12, r14
=== 5728
mov r14, r14
mov rsi, r12
push r14
push 0x727878ec
push 0x78b9511f
push 0x1e4706eb
=== 5729
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdi
mov rdi, rsi
movzx r14, r14b
=== 5730
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rdi
movabs rdi, 0x121f3df60
add rdi, 0x1e157b60; add
=== 5731
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rsi
mov r15, r12
=== 5732
mov r13, r15
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r14
mov r8b, byte ptr [rsi]
mov r14, 0xff
shl r14, 0x38
not r14
and r13, r14
movzx r14, r8b
shl r14, 0x38
or r13, r14
=== 5733
mov rbx, r13
push rbx
mov r12, rsp
mov rdi, r13
=== 5734
mov r11, r12
mov r15, rdi
push r11
push 0x5e12131e
push 0x77d946ef
push 0x7a5d088a
=== 5735
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbx
mov rdi, r15
movzx rsi, sil
=== 5736
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xf5bbf3e7
add r15, 0x4a4d7ed9; sub_carry
mov r15, qword ptr [r15 + 0x6a0]
add r15, rsi
mov r10b, byte ptr [r15]
movzx r10, r10b
shl r10, 8
sub rdi, r10
mov rdi, rdi
movabs r13, 0xe88223ca
add r13, 0x578746f6; sub
=== 5737
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1696
add rsp, 1696
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r11
mov rbp, rdi
=== 5738
mov rbx, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov r10b, byte ptr [r9]
mov bl, r10b
=== 5739
mov r15, rbx
push r15
mov rsi, rsp
mov rdi, rbx
=== 5740
mov rbp, rsi
mov r12, rdi
push rbp
push 0x50b85cff
push 0x7e3c57c1
push 0x57837173
push 0x6ed80ff2
=== 5741
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbx
mov rbx, r12
movzx r14, r14b
=== 5742
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xd62c64ac
add rsi, 0x69dd0e14; sub_carry
mov rsi, qword ptr [rsi + 0x3e0]
add rsi, r14
mov al, byte ptr [rsi]
movzx rax, al
shl rax, 0x10
sub rbx, rax
mov r12, rbx
movabs r13, 0x10e2afaf8
add r13, 0x31de6fc8; sub
=== 5743
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 992
add rsp, 992
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rax
mov rsi, r12
=== 5744
mov rsi, rsi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r12
mov r14b, byte ptr [rbx]
mov r10, 0xff
shl r10, 8
not r10
and rsi, r10
movzx r10, r14b
shl r10, 8
or rsi, r10
=== 5745
mov r12, rsi
push r12
mov rsi, rsp
mov rbp, rsi
=== 5746
mov rax, rsi
mov r14, rbp
push rax
push 0x75e61c65
push 0x66b601f7
push 0x49d36595
push 0x2e5754a1
=== 5747
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdi
mov r14, r14
movzx rdi, dil
=== 5748
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xc75a013d
add rbp, 0x78af7183; sub_carry
mov rbp, qword ptr [rbp + 0x40]
add rbp, rdi
mov r12b, byte ptr [rbp]
movzx r12, r12b
shl r12, 0x18
sub r14, r12
movabs rbx, 0xe8532f02
push rbx
push 0x57d21c95
push 0x73874bfd
push 0x65e44fb9
push 0x564778cf
add qword ptr [rsp + 0x20], 0x57b63bbe; sub
mov rdi, r14
=== 5749
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 64
add rsp, 64
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov rsi, rdi
=== 5750
mov rbx, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r15
mov r10b, byte ptr [r13]
mov r8, 0xff
shl r8, 0x10
not r8
and rbx, r8
movzx r8, r10b
shl r8, 0x10
or rbx, r8
=== 5751
mov r8, rbx
push r8
mov rbp, rsp
mov rdi, rbx
=== 5752
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov r13, rdi
movzx r12, r12b
=== 5753
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x12f176e7c
add rsi, 0x10f20444; sub_carry
mov rsi, qword ptr [rsi + 0x110]
add rsi, r12
mov cl, byte ptr [rsi]
movzx rcx, cl
shl rcx, 0x20
sub r13, rcx
mov r12, r13
movabs rbx, 0xc8352a03
add rbx, 0x77d440bd; sub
=== 5754
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 272
add rsp, 272
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rsi
mov rbp, r12
=== 5755
mov rsi, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov r8b, byte ptr [r8]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and rsi, rbp
movzx rbp, r8b
shl rbp, 0x18
or rsi, rbp
=== 5756
mov r12, rsi
push r12
mov r12, rsp
mov rdi, rsi
=== 5757
mov r8, r12
mov rsi, rdi
push r8
push 0x11ab7a41
push 0x773e133e
push 0x36921084
push 0x124d2fa3
=== 5758
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov r12, rsi
movzx rbp, bpl
=== 5759
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x13c4c7114
add rax, 0x3bd01ac; sub_carry
mov rax, qword ptr [rax + 0x10]
add rax, rbp
mov r13b, byte ptr [rax]
movzx r13, r13b
shl r13, 0x28
sub r12, r13
movabs rdx, 0xffee3703
push rdx
push 0x161609d6
push 0x5bc25330
push 0xfcc121d
push 0x6d1d43c2
add qword ptr [rsp + 0x20], 0x401b33bd; sub
mov rbp, r12
=== 5760
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 16
add rsp, 16
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov rsi, rbp
=== 5761
mov rsi, rsi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbp
mov r15b, byte ptr [rax]
mov rdx, 0xff
shl rdx, 0x20
not rdx
and rsi, rdx
movzx rdx, r15b
shl rdx, 0x20
or rsi, rdx
=== 5762
mov r11, rsi
push r11
mov r14, rsp
mov rbp, rsi
=== 5763
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov rbx, rbp
movzx r14, r14b
=== 5764
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xe3b4212d
push rax
push 0x5a293330
push 0x67ae17cb
push 0x15333c5f
push 0x44cd6038
add qword ptr [rsp + 0x20], 0x5c554993; sub
mov rbx, rbx
=== 5765
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r12
mov rsi, rbx
=== 5766
mov r13, rsi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r15
mov r14b, byte ptr [r11]
mov rbx, 0xff
shl rbx, 0x38
not rbx
and r13, rbx
movzx rbx, r14b
shl rbx, 0x38
or r13, rbx
=== 5767
mov r15, r13
push r15
mov rsi, rsp
mov r14, r13
=== 5768
mov r13, rsi
mov rdi, r14
push r13
push 0x560b2710
push 0x1f06425f
push 0x45ef3bdb
=== 5769
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbp
mov rdi, rdi
movzx rsi, sil
=== 5770
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rdi
movabs r12, 0x1061c31f5
a
d
d
 
r
1
2
,
 
0
x
3
9
e
d
1
0
c
b
=== 5771
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r10
mov r14, r14
=== 5772
mov rbx, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r15
mov cl, byte ptr [r8]
mov bl, cl
=== 5773
mov rbx, rbx
push rbx
mov r14, rsp
mov rbx, rbx
=== 5774
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov r15, rbx
movzx rbx, bl
=== 5775
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r15
movabs r12, 0xd81ee0ae
add r12, 0x67ea6212
=== 5776
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov rbp, rbp
=== 5777
mov rbp, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov bl, byte ptr [r9]
mov r12, 0xff
shl r12, 0x10
not r12
and rbp, r12
movzx r12, bl
shl r12, 0x10
or rbp, r12
=== 5778
mov rbx, rbp
push rbx
mov rbx, rsp
mov r12, rbp
=== 5779
mov r10, rbx
mov r14, r12
push r10
push 0x17ca200d
push 0x4d4c5426
push 0x70304c57
=== 5780
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov rdi, r14
movzx r15, r15b
=== 5781
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x10475d709
push r10
push 0x5a0820d3
push 0x4a3a7d36
push 0x510916b9
add qword ptr [rsp + 0x18], 0x3b936bb7
mov r13, rdi
=== 5782
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbp
mov r15, r13
=== 5783
mov rdi, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov al, byte ptr [r9]
mov rdx, 0xff
shl rdx, 0x20
not rdx
and rdi, rdx
movzx rdx, al
shl rdx, 0x20
or rdi, rdx
=== 5784
mov rsi, rdi
push rsi
mov rsi, rsp
mov r15, rdi
=== 5785
mov rsi, rsi
mov rbx, r15
push rsi
push 0x7b9c0092
push 0x3f4010f
push 0x1c651cbe
push 0x45e60b22
=== 5786
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rax
mov r13, rbx
movzx r15, r15b
=== 5787
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r13
movabs rdi, 0xf28a321a
add rdi, 0x4d7f10a6
=== 5788
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r10
mov r15, r15
=== 5789
mov r13, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov cl, byte ptr [rax]
mov rdx, 0xff
shl rdx, 0x38
not rdx
and r13, rdx
movzx rdx, cl
shl rdx, 0x38
or r13, rdx
=== 5790
mov r15, r13
movabs r12, 0xea81beeb
add r12, 0x557e5305
test r15, r15
lea rbx, [rip - 0x3bc180]
cmovne rbx, r12
jmp rbx
=== 5791
movabs r8, 0xdb8e85a7
push r8
push 0x18cf153e
push 0x101662f9
push 0x1450762
push 0x239f51b7
add qword ptr [rsp + 0x20], 0x64fb3341; input
=== 5792
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 16
add rsp, 16
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbp
movzx rsi, sil
=== 5793
mov rax, rsi
mov r11, 0xffffffffadecc9e4
add r11, 0x52ce169d
push r11
mul qword ptr [rsp]
mov r15, rax
=== 5794
mov rbx, r15
push rbx
mov r14, rsp
mov r13, r15
=== 5795
mov r9, r14
mov rbp, r13
push r9
push 0x73865fcc
push 0x9a26cc7
push 0x6806769
=== 5796
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov r12, rbp
movzx r14, r14b
=== 5797
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x10919fddd
add r13, 0x36ef64e3; add_carry
mov r13, qword ptr [r13 + 0x378]
add r13, r14
mov r13b, byte ptr [r13]
movzx r13, r13b
shl r13, 8
add r12, r13
movabs rsi, 0xf5602e27
push rsi
push 0x45e9087d
push 0x547c2c1f
push 0x76246716
push 0x1a2f25cc
add qword ptr [rsp + 0x20], 0x4aa92c99; add
mov rbx, r12
=== 5798
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 888
add rsp, 888
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdx
mov r15, rbx
=== 5799
mov rbx, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov cl, byte ptr [rcx]
mov bl, cl
=== 5800
mov r14, rbx
push r14
mov rbx, rsp
mov r15, rbx
=== 5801
mov rbx, rbx
mov r12, r15
push rbx
push 0x3bd0fd8
push 0x722b1947
push 0x2b61365
push 0xaa5c00
=== 5802
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdi
mov r13, r12
movzx r14, r14b
=== 5803
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x12dff58a6
add rdx, 0x120a0a1a; add_carry
mov rdx, qword ptr [rdx + 0x3b0]
add rdx, r14
mov r13b, byte ptr [rdx]
movzx r13, r13b
shl r13, 0x10
add r13, r13
mov r12, r13
movabs r13, 0xc6f83b14
add r13, 0x79111fac; add
=== 5804
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 944
add rsp, 944
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov r15, r12
=== 5805
mov rsi, r15
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbx
mov r9b, byte ptr [r14]
mov r13, 0xff
shl r13, 8
not r13
and rsi, r13
movzx r13, r9b
shl r13, 8
or rsi, r13
=== 5806
mov rax, rsi
push rax
mov r12, rsp
mov rdi, rsi
=== 5807
mov r11, r12
mov r15, rdi
push r11
push 0x44fd3278
push 0x41553313
push 0x693370ae
push 0x4c20552e
=== 5808
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rax
mov r14, r15
movzx rsi, sil
=== 5809
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x113180246
add r11, 0x2cf1607a; add_carry
mov r11, qword ptr [r11 + 0x2c8]
add r11, rsi
mov sil, byte ptr [r11]
movzx rsi, sil
shl rsi, 0x18
add r14, rsi
mov rsi, r14
movabs rdi, 0x11487e146
add rdi, 0x2b81797a; add
=== 5810
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 712
add rsp, 712
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov rsi, rsi
=== 5811
mov r13, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov cl, byte ptr [r14]
mov r14, 0xff
shl r14, 0x10
not r14
and r13, r14
movzx r14, cl
shl r14, 0x10
or r13, r14
=== 5812
mov r11, r13
push r11
mov rbx, rsp
mov r14, r13
=== 5813
mov r8, rbx
mov rdi, r14
push r8
push 0x57306c31
push 0x642067e4
push 0x17493a0f
push 0x445c7e8d
=== 5814
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov rbx, rdi
movzx r13, r13b
=== 5815
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xe1450598
add rbp, 0x5ec45d28; add_carry
mov rbp, qword ptr [rbp + 0x118]
add rbp, r13
mov sil, byte ptr [rbp]
movzx rsi, sil
shl rsi, 0x20
add rbx, rsi
mov r12, rbx
movabs r15, 0xc49b3af1
add r15, 0x7b6e1fcf; add
=== 5816
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 280
add rsp, 280
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbx
mov rbp, r12
=== 5817
mov r13, rbp
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r13
mov dil, byte ptr [rsi]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and r13, rbp
movzx rbp, dil
shl rbp, 0x18
or r13, rbp
=== 5818
mov rcx, r13
push rcx
mov r13, rsp
mov rsi, r13
=== 5819
mov rcx, r13
mov rbp, rsi
push rcx
push 0x5852004
push 0x639f0894
push 0xb9b6909
=== 5820
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov r15, rbp
movzx rdi, dil
=== 5821
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xd1a241c1
add r12, 0x6e6720ff; add_carry
mov r12, qword ptr [r12]
add r12, rdi
mov r8b, byte ptr [r12]
movzx r8, r8b
shl r8, 0x28
add r15, r8
movabs rcx, 0xff0d5582
push rcx
push 0x1d135904
push 0x7a3f22a0
push 0x26946240
push 0x6bc0202c
add qword ptr [rsp + 0x20], 0x40fc053e; add
mov r14, r15
=== 5822
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdi
mov r15, r14
=== 5823
mov rbx, r15
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r13
mov al, byte ptr [r11]
mov r10, 0xff
shl r10, 0x20
not r10
and rbx, r10
movzx r10, al
shl r10, 0x20
or rbx, r10
=== 5824
mov rdx, rbx
push rdx
mov rbp, rsp
mov r15, rbx
=== 5825
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
mov r15, r15
movzx rsi, sil
=== 5826
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x111921a04
add rsi, 0x2e7748bc; add_carry
mov rsi, qword ptr [rsi]
add rsi, rsi
mov r15b, byte ptr [rsi]
movzx r15, r15b
shl r15, 0x38
add r15, r15
movabs r13, 0x12f4bf47f
push r13
push 0x5493396f
push 0x3e425a6c
push 0x4276010c
add qword ptr [rsp + 0x18], 0x10bd6641; add
mov rbp, r15
=== 5827
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r9
mov rdi, rbp
=== 5828
mov r15, rdi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r13
mov r14b, byte ptr [r13]
mov rbx, 0xff
shl rbx, 0x30
not rbx
and r15, rbx
movzx rbx, r14b
shl rbx, 0x30
or r15, rbx
=== 5829
mov rcx, r15
push rcx
mov rdi, rsp
mov r14, r15
=== 5830
mov rsi, rdi
mov rdi, r14
push rsi
push 0x351d2e1f
push 0x13e74302
push 0x346347ee
=== 5831
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov rbx, rdi
movzx rbp, bpl
=== 5832
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rbx
movabs rdi, 0x137d50f54
add rdi, 0x8344b6c; add
=== 5833
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbx
mov rbx, r15
=== 5834
mov rbp, rbx
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r14
mov dl, byte ptr [rdi]
mov rax, 0xff
shl rax, 0x38
not rax
and rbp, rax
movzx rax, dl
shl rax, 0x38
or rbp, rax
=== 5835
movabs r14, 0x12d4c6df5
push r14
push 0x366a4e51
push 0x5f7e7290
push 0x2377883
add qword ptr [rsp + 0x18], 0x133d4af3; input
mov r15, rbp
=== 5836
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 24
add rsp, 24
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r13
mov rsi, r15
movzx rbp, bpl
=== 5837
mov rax, rbp
mov r13, 0xffffffffa3d5415b
add r13, 0x5ced06e0
push r13
mov rbp, rsi
mul qword ptr [rsp]
mov r14, rax
=== 5838
mov rsi, rbp
xor rsi, r14
=== 5839
mov rdx, rsi
push rdx
mov rbp, rsp
mov rsi, rsi
=== 5840
mov rdi, rbp
mov rbp, rsi
push rdi
push 0x4fe65413
push 0x626a69da
push 0x76a61963
=== 5841
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdi
mov rsi, rbp
movzx r12, r12b
=== 5842
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x11ed42ec4
add rdx, 0x213533fc; add_carry
mov rdx, qword ptr [rdx + 0x2b8]
add rdx, r12
mov r15b, byte ptr [rdx]
movzx r15, r15b
shl r15, 8
add rsi, r15
movabs rax, 0x1279cf72e
push rax
push 0x148838a8
push 0x5ee8205f
push 0x5f8f7bcd
add qword ptr [rsp + 0x18], 0x186c6392; add
mov r15, rsi
=== 5843
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 696
add rsp, 696
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov r12, r15
=== 5844
mov r15, r12
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov r14b, byte ptr [r14]
mov r15b, r14b
=== 5845
mov rsi, r15
push rsi
mov r14, rsp
mov rsi, r15
=== 5846
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rax
mov r15, rsi
movzx rbx, bl
=== 5847
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xf9d839e9
add r15, 0x463128d7; add_carry
mov r15, qword ptr [r15 + 0x350]
add r15, rbx
mov r10b, byte ptr [r15]
movzx r10, r10b
shl r10, 0x10
add r15, r10
movabs r15, 0x10b38df62
push r15
push 0x449064ff
push 0x5c4b046f
push 0x57e834c3
add qword ptr [rsp + 0x18], 0x34d07b5e; add
mov rsi, r15
=== 5848
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 848
add rsp, 848
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r11
mov r12, rsi
=== 5849
mov r15, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov al, byte ptr [r11]
mov rdx, 0xff
shl rdx, 8
not rdx
and r15, rdx
movzx rdx, al
shl rdx, 8
or r15, rdx
=== 5850
mov r12, r15
push r12
mov rsi, rsp
mov r13, r15
=== 5851
mov r14, rsi
mov r15, r13
push r14
push 0x31c50ca1
push 0x1d04540f
push 0x569843dd
push 0x789f1e9f
=== 5852
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov rbx, r15
movzx r14, r14b
=== 5853
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xd104f357
add r8, 0x6f046f69; add_carry
mov r8, qword ptr [r8 + 0x4c0]
add r8, r14
mov r14b, byte ptr [r8]
movzx r14, r14b
shl r14, 0x18
add rbx, r14
movabs rcx, 0x1145f44a2
push rcx
push 0x7bde22ee
push 0x18fa418b
push 0x330b0b78
push 0x1c3d34c1
add qword ptr [rsp + 0x20], 0x2baa161e; add
mov rsi, rbx
=== 5854
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1216
add rsp, 1216
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdi
mov r13, rsi
=== 5855
mov r14, r13
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rdi
mov r12b, byte ptr [rsi]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r14, rdi
movzx rdi, r12b
shl rdi, 0x10
or r14, rdi
=== 5856
mov r12, r14
push r12
mov rdi, rsp
mov r12, r14
=== 5857
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rsi
mov r12, r12
movzx r15, r15b
=== 5858
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xc2f95913
add r15, 0x7d1009ad; add_carry
mov r15, qword ptr [r15 + 0x750]
add r15, r15
mov cl, byte ptr [r15]
movzx rcx, cl
shl rcx, 0x20
add r12, rcx
movabs r15, 0x13ee533f7
push r15
push 0x496f6efc
push 0x445c3e13
push 0xdb17451
push 0x4e03790f
add qword ptr [rsp + 0x20], 0x12426c9; add
mov r13, r12
=== 5859
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1872
add rsp, 1872
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r11
mov r14, r13
=== 5860
mov rdi, r14
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov r8b, byte ptr [r12]
mov r10, 0xff
shl r10, 0x18
not r10
and rdi, r10
movzx r10, r8b
shl r10, 0x18
or rdi, r10
=== 5861
mov rax, rdi
push rax
mov rsi, rsp
mov r14, rdi
=== 5862
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov r14, r14
movzx r13, r13b
=== 5863
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xc1870556
add rsi, 0x7e825d6a; add_carry
mov rsi, qword ptr [rsi]
add rsi, r13
mov r14b, byte ptr [rsi]
movzx r14, r14b
shl r14, 0x30
add r14, r14
movabs rax, 0xd53655bc
push rax
push 0x51385661
push 0x77552ade
push 0x7dbc1de7
push 0x75341455
add qword ptr [rsp + 0x20], 0x6ad30504; add
mov rdi, r14
=== 5864
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov r15, rdi
=== 5865
mov rbp, r15
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov cl, byte ptr [rdx]
mov rbx, 0xff
shl rbx, 0x28
not rbx
and rbp, rbx
movzx rbx, cl
shl rbx, 0x28
or rbp, rbx
=== 5866
mov rax, rbp
push rax
mov r13, rsp
mov rdi, rbp
=== 5867
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov rbp, rdi
movzx rsi, sil
=== 5868
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xeb776274
add rdx, 0x5492004c; add_carry
mov rdx, qword ptr [rdx]
add rdx, rsi
mov dil, byte ptr [rdx]
movzx rdi, dil
shl rdi, 0x38
add rbp, rdi
movabs r15, 0x11983fb07
push r15
push 0x51986876
push 0x77407382
push 0x1e686b46
push 0x47b92bc6
add qword ptr [rsp + 0x20], 0x26855fb9; add
mov rbx, rbp
=== 5869
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r15
mov r12, rbx
=== 5870
mov rsi, r12
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov r13b, byte ptr [r9]
mov rbp, 0xff
shl rbp, 0x30
not rbp
and rsi, rbp
movzx rbp, r13b
shl rbp, 0x30
or rsi, rbp
=== 5871
mov r14, rsi
push r14
mov rsi, rsp
mov rbx, rsi
=== 5872
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov r13, rbx
movzx rsi, sil
=== 5873
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xc0d83cfa
push r14
push 0x738f75db
push 0x19bd7e0b
push 0x59d0367
add qword ptr [rsp + 0x18], 0x7f311dc6; add
mov rsi, r13
=== 5874
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov rbp, rsi
=== 5875
mov rdi, rbp
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rsi
mov r9b, byte ptr [r14]
mov rcx, 0xff
shl rcx, 0x38
not rcx
and rdi, rcx
movzx rcx, r9b
shl rcx, 0x38
or rdi, rcx
=== 5876
mov r13, rdi
movabs rbp, 0xd4cf7a4a
add rbp, 0x6bba3e9e; input
=== 5877
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 28
add rsp, 28
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r12
mov r14, r13
movzx rbx, bl
=== 5878
mov rax, rbx
mov r14, 0xffffffffd1e2c275
add r14, 0x2e6f4c6d
push r14
mov r15, r14
mul qword ptr [rsp]
mov r13, rax
=== 5879
mov rbx, r15
sub rbx, r13
=== 5880
mov rax, rbx
push rax
mov r15, rsp
mov rsi, rbx
=== 5881
mov rbx, r15
mov rdi, rsi
push rbx
push 0x17827a2a
push 0x3c982c10
push 0x53482497
=== 5882
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r10
mov r14, rdi
movzx rsi, sil
=== 5883
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r14
movabs rdi, 0xf26cfd65
add rdi, 0x4d9c4d5b; xor
=== 5884
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 160
add rsp, 160
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rsi
mov rsi, r14
=== 5885
mov rdi, rsi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov r13b, byte ptr [rdx]
mov dil, r13b
=== 5886
mov rcx, rdi
push rcx
mov rbp, rsp
mov rsi, rdi
=== 5887
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r14
mov rdi, rsi
movzx rbp, bpl
=== 5888
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rdi
movabs r13, 0x108071d97
add r13, 0x38022d29; xor
=== 5889
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1032
add rsp, 1032
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rcx
mov rbx, r14
=== 5890
mov rsi, rbx
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov r15b, byte ptr [r10]
mov r8, 0xff
shl r8, 8
not r8
and rsi, r8
movzx r8, r15b
shl r8, 8
or rsi, r8
=== 5891
mov rbp, rsi
push rbp
mov r15, rsp
mov r12, rsi
=== 5892
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov r14, r12
movzx rdi, dil
=== 5893
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xc17be509
push rdi
push 0x510a63ca
push 0x77956dd1
push 0x5c2750ed
push 0x49d548cd
add qword ptr [rsp + 0x20], 0x7e8d65b7; xor
mov r15, r14
=== 5894
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov rbp, r15
=== 5895
mov r13, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r15
mov r9b, byte ptr [r9]
mov r12, 0xff
shl r12, 0x10
not r12
and r13, r12
movzx r12, r9b
shl r12, 0x10
or r13, r12
=== 5896
mov rsi, r13
push rsi
mov rbp, rsp
mov rbx, r13
=== 5897
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov r13, rbx
movzx r12, r12b
=== 5898
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xced319db
push r8
push 0x50893fa9
push 0x379469f1
push 0x1bc64748
add qword ptr [rsp + 0x18], 0x713630e5; xor
mov r15, r13
=== 5899
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1328
add rsp, 1328
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov r14, r15
=== 5900
mov rbx, r14
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rsi
mov dl, byte ptr [rdx]
mov r10, 0xff
shl r10, 0x18
not r10
and rbx, r10
movzx r10, dl
shl r10, 0x18
or rbx, r10
=== 5901
mov r13, rbx
push r13
mov r12, rsp
mov rdi, rbx
=== 5902
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov rsi, rdi
movzx r13, r13b
=== 5903
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xda9ede03
push rbp
push 0x6b2f41e2
push 0x4043c9d
push 0x48454fad
add qword ptr [rsp + 0x18], 0x656a6cbd; xor
mov rbx, rsi
=== 5904
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdi
mov rsi, rbx
=== 5905
mov rbx, rsi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r13
mov dl, byte ptr [rcx]
mov rbp, 0xff
shl rbp, 0x20
not rbp
and rbx, rbp
movzx rbp, dl
shl rbp, 0x20
or rbx, rbp
=== 5906
mov rdx, rbx
push rdx
mov rbx, rsp
mov r14, rbx
=== 5907
mov rdi, rbx
mov r14, r14
push rdi
push 0x11266d48
push 0x55f37f6a
push 0x7788218e
push 0x4d2d29d2
=== 5908
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rsi
mov r15, r14
movzx rbp, bpl
=== 5909
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r15
movabs r12, 0xc5e0d0f6
add r12, 0x7a2879ca; xor
=== 5910
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov rdi, rbx
=== 5911
mov r12, rdi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov dil, byte ptr [r15]
mov rax, 0xff
shl rax, 0x30
not rax
and r12, rax
movzx rax, dil
shl rax, 0x30
or r12, rax
=== 5912
mov rax, r12
push rax
mov r15, rsp
mov rbp, r12
=== 5913
mov r15, r15
mov r13, rbp
push r15
push 0x39b66f72
push 0x10ec5520
push 0x3ac27d5c
push 0x50384865
=== 5914
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov r13, r13
movzx r15, r15b
=== 5915
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xc8bde779
push r13
push 0x72a93607
push 0xf8456b0
push 0x4ea25e3e
push 0xea56217
add qword ptr [rsp + 0x20], 0x774b6347; xor
mov rbx, r13
=== 5916
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov rbx, rbx
=== 5917
mov rbx, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov bpl, byte ptr [rax]
mov r15, 0xff
shl r15, 0x38
not r15
and rbx, r15
movzx r15, bpl
shl r15, 0x38
or rbx, r15
=== 5918
mov rdi, rbx
movabs rsi, 0x108025f10
add rsi, 0x388759d8; input
=== 5919
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 8
add rsp, 8
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rax
mov rbx, rdi
movzx rsi, sil
=== 5920
mov rax, rsi
mov r10, 0xffffffff9f9dfc45
add r10, 0x60fa6875
push r10
mov rsi, rbx
mul qword ptr [rsp]
mov rbp, rax
=== 5921
mov r15, rsi
add r15, rbp
=== 5922
mov r8, r15
push r8
mov r15, rsp
mov rsi, r15
=== 5923
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rcx
mov rbp, rsi
movzx rdi, dil
=== 5924
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x11cef5d55
add rbp, 0x231a056b; add_carry
mov rbp, qword ptr [rbp + 0x38]
add rbp, rdi
mov bpl, byte ptr [rbp]
movzx rbp, bpl
shl rbp, 8
add rbp, rbp
mov rbp, rbp
movabs rsi, 0xc722f6a8
add rsi, 0x78e66418; add
=== 5925
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 56
add rsp, 56
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov r15, rbp
=== 5926
mov r15, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov dl, byte ptr [rcx]
mov r15b, dl
=== 5927
mov r8, r15
push r8
mov r15, rsp
mov r13, r15
=== 5928
mov rbp, r15
mov r14, r13
push rbp
push 0x76a30448
push 0x5f2d2560
push 0x46a6196d
=== 5929
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov r13, r14
movzx r14, r14b
=== 5930
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x1002102e8
add rbp, 0x3fe85fd8; add_carry
mov rbp, qword ptr [rbp + 0x1a8]
add rbp, r14
mov al, byte ptr [rbp]
movzx rax, al
shl rax, 0x10
add r13, rax
movabs r13, 0xe9902d8a
push r13
push 0x6caf7b5a
push 0x22c272f5
push 0xb67172c
add qword ptr [rsp + 0x18], 0x56792d36; add
mov rbx, r13
=== 5931
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 424
add rsp, 424
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbp
mov rdi, rbx
=== 5932
mov rsi, rdi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov r12b, byte ptr [r10]
mov r8, 0xff
shl r8, 8
not r8
and rsi, r8
movzx r8, r12b
shl r8, 8
or rsi, r8
=== 5933
mov r11, rsi
push r11
mov r12, rsp
mov r14, rsi
=== 5934
mov r13, r12
mov r12, r14
push r13
push 0xbd71a20
push 0x6b813f4e
push 0x621831d1
=== 5935
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov rdi, r12
movzx rbx, bl
=== 5936
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xe84b36c7
add r15, 0x57be2bf9; add_carry
mov r15, qword ptr [r15 + 0x418]
add r15, rbx
mov al, byte ptr [r15]
movzx rax, al
shl rax, 0x18
add rdi, rax
movabs rax, 0xc0a5e082
push rax
push 0x15667fa9
push 0x32b57f72
push 0x17cb2b28
push 0x6c201dfc
add qword ptr [rsp + 0x20], 0x7f637a3e; add
mov r14, rdi
=== 5937
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1048
add rsp, 1048
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r10
mov r12, r14
=== 5938
mov r15, r12
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbx
mov bl, byte ptr [rbp]
mov r8, 0xff
shl r8, 0x10
not r8
and r15, r8
movzx r8, bl
shl r8, 0x10
or r15, r8
=== 5939
mov r15, r15
push r15
mov rdi, rsp
mov rbp, r15
=== 5940
mov rbx, rdi
mov rbp, rbp
push rbx
push 0x7e9f42a8
push 0x2dd4e53
push 0x6f472f00
=== 5941
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov r14, rbp
movzx rsi, sil
=== 5942
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xf1171688
add r14, 0x4ef24c38; add_carry
mov r14, qword ptr [r14 + 0x210]
add r14, rsi
mov dil, byte ptr [r14]
movzx rdi, dil
shl rdi, 0x20
add r14, rdi
mov r12, r14
movabs r15, 0x1226e182c
add r15, 0x1d9b4294; add
=== 5943
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 528
add rsp, 528
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov r13, r12
=== 5944
mov rdi, r13
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r15
mov r12b, byte ptr [r9]
mov r13, 0xff
shl r13, 0x18
not r13
and rdi, r13
movzx r13, r12b
shl r13, 0x18
or rdi, r13
=== 5945
mov r13, rdi
push r13
mov rbp, rsp
mov rbx, rdi
=== 5946
mov rsi, rbp
mov r15, rbx
push rsi
push 0x5416369a
push 0x121613f4
push 0x54d0a71
push 0x7c7225cf
=== 5947
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r8
mov r15, r15
movzx rbx, bl
=== 5948
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x12b51eea2
add r14, 0x14b7741e; add_carry
mov r14, qword ptr [r14]
add r14, rbx
mov sil, byte ptr [r14]
movzx rsi, sil
shl rsi, 0x28
add r15, rsi
movabs r8, 0x1253639a6
push r8
push 0x21f20597
push 0x644049a1
push 0xb94078e
push 0x1d270736
add qword ptr [rsp + 0x20], 0x1ad3211a; add
mov r15, r15
=== 5949
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r13
mov r14, r15
=== 5950
mov r15, r14
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov r13b, byte ptr [rdx]
mov rsi, 0xff
shl rsi, 0x20
not rsi
and r15, rsi
movzx rsi, r13b
shl rsi, 0x20
or r15, rsi
=== 5951
mov r15, r15
push r15
mov rbp, rsp
mov rsi, r15
=== 5952
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov rbp, rsi
movzx rsi, sil
=== 5953
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xdcd353e8
add rbx, 0x63360ed8; add_carry
mov rbx, qword ptr [rbx]
add rbx, rsi
mov al, byte ptr [rbx]
movzx rax, al
shl rax, 0x30
add rbp, rax
mov r12, rbp
movabs rbx, 0xffd73854
add rbx, 0x4032226c; add
=== 5954
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdi
mov r13, r12
=== 5955
mov r13, r13
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r15
mov dl, byte ptr [r9]
mov r8, 0xff
shl r8, 0x28
not r8
and r13, r8
movzx r8, dl
shl r8, 0x28
or r13, r8
=== 5956
mov rcx, r13
push rcx
mov r15, rsp
mov r14, r13
=== 5957
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r15, r14
movzx rbx, bl
=== 5958
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r15
movabs rsi, 0xdd7734c7
add rsi, 0x629225f9; add
=== 5959
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov rbx, r13
=== 5960
mov rbp, rbx
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r14
mov dl, byte ptr [r11]
mov r12, 0xff
shl r12, 0x38
not r12
and rbp, r12
movzx r12, dl
shl r12, 0x38
or rbp, r12
=== 5961
movabs rax, 0x1323287ce
push rax
push 0x52cf2e82
push 0x5f3f122a
push 0x137c66be
add qword ptr [rsp + 0x18], 0xe57311a; input
mov rsi, rbp
=== 5962
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rcx
mov r15, rsi
movzx rdi, dil
=== 5963
mov rax, rdi
mov rdx, 0xffffffff9b64c3ed
add rdx, 0x65180e8b
push rdx
mov rbx, r15
mul qword ptr [rsp]
mov rbp, rax
=== 5964
mov rbx, rbx
sub rbx, rbp
=== 5965
mov r13, rbx
push r13
mov r15, rsp
mov rdi, rbx
=== 5966
mov rdi, r15
mov rbp, rdi
push rdi
push 0x22a632a1
push 0x25c31cad
push 0x1a5964ae
push 0x71c46741
=== 5967
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdi
mov r15, rbp
movzx rdi, dil
=== 5968
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x126e846ba
push r15
push 0x6e5d196e
push 0x24186ffa
push 0x67b16e4d
push 0x34f640af
add qword ptr [rsp + 0x20], 0x19210406; xor
mov r14, r15
=== 5969
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 136
add rsp, 136
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov rbp, r14
=== 5970
mov rbx, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov r9b, byte ptr [r12]
mov bl, r9b
=== 5971
mov r13, rbx
push r13
mov r15, rsp
mov rbx, rbx
=== 5972
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov r13, rbx
movzx rbx, bl
=== 5973
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x1121b27af
push rdx
push 0x4ccc6c4a
push 0x381c6f36
push 0x1e321929
push 0x4dd569b0
add qword ptr [rsp + 0x20], 0x2dee2311; xor
mov rdi, r13
=== 5974
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1856
add rsp, 1856
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r10
mov rsi, rdi
=== 5975
mov r15, rsi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r12
mov r8b, byte ptr [rax]
mov rbp, 0xff
shl rbp, 8
not rbp
and r15, rbp
movzx rbp, r8b
shl rbp, 8
or r15, rbp
=== 5976
mov r11, r15
push r11
mov r12, rsp
mov r15, r15
=== 5977
mov r11, r12
mov rbx, r15
push r11
push 0x4b60252
push 0x7d5d1304
push 0x2dd3d7a
=== 5978
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov rdi, rbx
movzx rbp, bpl
=== 5979
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rdi
movabs r12, 0xf9270686
add r12, 0x46e2443a; xor
=== 5980
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 88
add rsp, 88
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rax
mov r14, r14
=== 5981
mov rbx, r14
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rdi
mov r8b, byte ptr [rsi]
mov r15, 0xff
shl r15, 0x10
not r15
and rbx, r15
movzx r15, r8b
shl r15, 0x10
or rbx, r15
=== 5982
mov rbp, rbx
push rbp
mov rdi, rsp
mov r12, rbx
=== 5983
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov r15, r12
movzx rdi, dil
=== 5984
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x106fd3f12
push rbx
push 0x64a03202
push 0x1f435239
push 0x9754417
add qword ptr [rsp + 0x18], 0x390c0bae; xor
mov r12, r15
=== 5985
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 432
add rsp, 432
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdi
mov r13, r12
=== 5986
mov rbx, r13
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov r8b, byte ptr [r12]
mov r13, 0xff
shl r13, 0x18
not r13
and rbx, r13
movzx r13, r8b
shl r13, 0x18
or rbx, r13
=== 5987
mov rbp, rbx
push rbp
mov rbp, rsp
mov r15, rbx
=== 5988
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r12
mov r13, r15
movzx rbx, bl
=== 5989
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r13
movabs rbx, 0x11c6412a4
add rbx, 0x23a5381c; xor
=== 5990
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r13
mov rbp, r12
=== 5991
mov r12, rbp
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r14
mov dil, byte ptr [r15]
mov r8, 0xff
shl r8, 0x20
not r8
and r12, r8
movzx r8, dil
shl r8, 0x20
or r12, r8
=== 5992
mov r10, r12
push r10
mov rbp, rsp
mov rdi, r12
=== 5993
mov r9, rbp
mov rbx, rdi
push r9
push 0x1aa85ac1
push 0x65196e22
push 0x1a616b30
=== 5994
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov r14, rbx
movzx rbp, bpl
=== 5995
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r14
movabs rdi, 0xed6e3c7a
add rdi, 0x529b0e46; xor
=== 5996
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r15
mov rdi, r14
=== 5997
mov r13, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r14
mov r12b, byte ptr [rcx]
mov rdi, 0xff
shl rdi, 0x38
not rdi
and r13, rdi
movzx rdi, r12b
shl rdi, 0x38
or r13, rdi
=== 5998
movabs rdi, 0x11c0ca59c
push rdi
push 0x5e1a20a9
push 0x18900c5a
push 0x7acf0ef9
push 0x25f46855
add qword ptr [rsp + 0x20], 0x247d134c; input
mov r14, r13
=== 5999
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov rdi, r14
movzx r14, r14b
=== 6000
mov rax, r14
mov rbx, 0xffffffffcd631c1d
add rbx, 0x335b49e8
push rbx
mov r12, rdi
mul qword ptr [rsp]
mov rdi, rax
=== 6001
mov r12, r12
xor r12, rdi
=== 6002
mov rbx, r12
push rbx
mov rbx, rsp
mov r12, r12
=== 6003
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbx
mov r15, r12
movzx r14, r14b
=== 6004
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x131f24c38
add r11, 0xe172688; sub_carry
mov r11, qword ptr [r11 + 0x468]
add r11, r14
mov r12b, byte ptr [r11]
movzx r12, r12b
shl r12, 8
sub r15, r12
movabs r8, 0x135cb3f32
push r8
push 0x3cc17171
push 0x4eb1780a
push 0x1aae50a8
push 0x4f96e09
add qword ptr [rsp + 0x20], 0xa3e2b8e; sub
mov rbp, r15
=== 6005
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1128
add rsp, 1128
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbx
mov r15, rbp
=== 6006
mov rdi, r15
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rsi
mov sil, byte ptr [rsi]
mov dil, sil
=== 6007
mov rdx, rdi
push rdx
mov r12, rsp
mov rbp, rdi
=== 6008
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdi
mov rbx, rbp
movzx rsi, sil
=== 6009
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xdedc28c7
add r8, 0x612d49f9; sub_carry
mov r8, qword ptr [r8 + 0x3d0]
add r8, rsi
mov r13b, byte ptr [r8]
movzx r13, r13b
shl r13, 0x10
sub rbx, r13
movabs r8, 0x102242d9b
push r8
push 0x5ff6015f
push 0x335a1a8e
push 0x61346c30
add qword ptr [rsp + 0x18], 0x3de53d25; sub
mov rsi, rbx
=== 6010
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 976
add rsp, 976
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r13
mov rsi, rsi
=== 6011
mov r13, rsi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r13
mov r14b, byte ptr [rbx]
mov rdi, 0xff
shl rdi, 8
not rdi
and r13, rdi
movzx rdi, r14b
shl rdi, 8
or r13, rdi
=== 6012
mov r8, r13
push r8
mov r13, rsp
mov rdi, r13
=== 6013
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r12
mov rbp, rdi
movzx rbx, bl
=== 6014
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xd507fe05
add r15, 0x6b0174bb; sub_carry
mov r15, qword ptr [r15 + 0x490]
add r15, rbx
mov r11b, byte ptr [r15]
movzx r11, r11b
shl r11, 0x18
sub rbp, r11
mov rsi, rbp
movabs rbx, 0x12378412b
add rbx, 0x1c912995; sub
=== 6015
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1168
add rsp, 1168
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r15
mov rbx, rsi
=== 6016
mov r14, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov r12b, byte ptr [r9]
mov r11, 0xff
shl r11, 0x10
not r11
and r14, r11
movzx r11, r12b
shl r11, 0x10
or r14, r11
=== 6017
mov r10, r14
push r10
mov r13, rsp
mov rbp, r14
=== 6018
mov rdx, r13
mov r14, rbp
push rdx
push 0x53531cae
push 0x11a07965
push 0x4a303049
=== 6019
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdi
mov rdi, r14
movzx r12, r12b
=== 6020
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x116270b46
add r13, 0x29e2677a; sub_carry
mov r13, qword ptr [r13 + 0x260]
add r13, r12
mov r12b, byte ptr [r13]
movzx r12, r12b
shl r12, 0x20
sub rdi, r12
mov rdi, rdi
movabs rbx, 0x11c9907ab
add rbx, 0x23706315; sub
=== 6021
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 608
add rsp, 608
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov rbx, rdi
=== 6022
mov rdi, rbx
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov r12b, byte ptr [rdx]
mov r10, 0xff
shl r10, 0x18
not r10
and rdi, r10
movzx r10, r12b
shl r10, 0x18
or rdi, r10
=== 6023
mov rbp, rdi
push rbp
mov rbx, rsp
mov rdi, rdi
=== 6024
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r14
mov rdi, rdi
movzx rbp, bpl
=== 6025
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xe3102ce0
add r13, 0x5cf945e0; sub_carry
mov r13, qword ptr [r13]
add r13, rbp
mov bl, byte ptr [r13]
movzx rbx, bl
shl rbx, 0x30
sub rdi, rbx
mov r13, rdi
movabs rsi, 0xf466f0ea
add rsi, 0x4ba279d6; sub
=== 6026
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rsi
mov rbp, r13
=== 6027
mov r14, rbp
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r14
mov al, byte ptr [r13]
mov rsi, 0xff
shl rsi, 0x28
not rsi
and r14, rsi
movzx rsi, al
shl rsi, 0x28
or r14, rsi
=== 6028
mov rbx, r14
push rbx
mov rbp, rsp
mov rsi, r14
=== 6029
mov rbx, rbp
mov rsi, rsi
push rbx
push 0x48541600
push 0x2c106461
push 0x323f22ae
push 0x15743d66
=== 6030
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov r12, rsi
movzx r13, r13b
=== 6031
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xf61743d4
add rbx, 0x49f22eec; sub_carry
mov rbx, qword ptr [rbx]
add rbx, r13
mov r14b, byte ptr [rbx]
movzx r14, r14b
shl r14, 0x38
sub r12, r14
mov rdi, r12
movabs r13, 0x10332405d
add r13, 0x3cd72a63; sub
=== 6032
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov rbp, rdi
=== 6033
mov r15, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbx
mov bl, byte ptr [r12]
mov r12, 0xff
shl r12, 0x30
not r12
and r15, r12
movzx r12, bl
shl r12, 0x30
or r15, r12
=== 6034
mov rbx, r15
movabs rbp, 0xe38b5e9c
add rbp, 0x5cfe5a4c; input
=== 6035
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 20
add rsp, 20
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov rdi, rbx
movzx rbp, bpl
=== 6036
mov rax, rbp
mov r8, 0xffffffffb0c88cb3
add r8, 0x4f734635
push r8
mov rdi, rdi
mul qword ptr [rsp]
mov r15, rax
=== 6037
mov rsi, rdi
add rsi, r15
=== 6038
mov rsi, rsi
push rsi
mov rdi, rsp
mov r12, rsi
=== 6039
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov r13, r12
movzx r15, r15b
=== 6040
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xf4374312
add r8, 0x4bd21fae; add_carry
mov r8, qword ptr [r8 + 0x698]
add r8, r15
mov al, byte ptr [r8]
movzx rax, al
shl rax, 8
add r13, rax
mov r14, r13
movabs r12, 0x12fb82b7e
add r12, 0x10512f42; add
=== 6041
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1688
add rsp, 1688
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdi
mov rbx, r14
=== 6042
mov rbx, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov r12b, byte ptr [rax]
mov bl, r12b
=== 6043
mov rcx, rbx
push rcx
mov rsi, rsp
mov r14, rbx
=== 6044
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov r13, r14
movzx rsi, sil
=== 6045
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xf5963203
add r8, 0x4a7330bd; add_carry
mov r8, qword ptr [r8 + 0x678]
add r8, rsi
mov sil, byte ptr [r8]
movzx rsi, sil
shl rsi, 0x10
add r13, rsi
movabs rdx, 0xc83d2c71
push rdx
push 0x6baa45fb
push 0x5da5956
push 0x5c4c2aac
add qword ptr [rsp + 0x18], 0x77cc2e4f; add
mov rbp, r13
=== 6046
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1656
add rsp, 1656
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdx
mov r13, rbp
=== 6047
mov r12, r13
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r12
mov al, byte ptr [rsi]
mov rbx, 0xff
shl rbx, 8
not rbx
and r12, rbx
movzx rbx, al
shl rbx, 8
or r12, rbx
=== 6048
mov r13, r12
push r13
mov r13, rsp
mov r14, r12
=== 6049
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r15
mov r15, r14
movzx r12, r12b
=== 6050
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xcf9310d7
add rsi, 0x707651e9; add_carry
mov rsi, qword ptr [rsi + 0x480]
add rsi, r12
mov bpl, byte ptr [rsi]
movzx rbp, bpl
shl rbp, 0x18
add r15, rbp
movabs rcx, 0x1198b1e4d
push rcx
push 0x38f71c36
push 0x68a45ca9
push 0x611970ad
add qword ptr [rsp + 0x18], 0x267e3c73; add
mov r14, r15
=== 6051
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1152
add rsp, 1152
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rcx
mov r15, r14
=== 6052
mov r15, r15
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r14
mov dl, byte ptr [rdi]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and r15, rbx
movzx rbx, dl
shl rbx, 0x10
or r15, rbx
=== 6053
mov rcx, r15
push rcx
mov rbx, rsp
mov r13, r15
=== 6054
mov r15, rbx
mov r12, r13
push r15
push 0x40b4060a
push 0x39c677d4
push 0x43be27ea
=== 6055
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rcx
mov r14, r12
movzx rbp, bpl
=== 6056
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xc97f1b96
add r10, 0x768a472a; add_carry
mov r10, qword ptr [r10 + 0x5b8]
add r10, rbp
mov bpl, byte ptr [r10]
movzx rbp, bpl
shl rbp, 0x20
add r14, rbp
movabs rdx, 0xffc9e864
push rdx
push 0x5a0345fc
push 0x134813e6
push 0x59be212f
add qword ptr [rsp + 0x18], 0x403f725c; add
mov r14, r14
=== 6057
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1464
add rsp, 1464
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rax
mov rbx, r14
=== 6058
mov rsi, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov al, byte ptr [rax]
mov r14, 0xff
shl r14, 0x18
not r14
and rsi, r14
movzx r14, al
shl r14, 0x18
or rsi, r14
=== 6059
mov rax, rsi
push rax
mov r15, rsp
mov r13, rsi
=== 6060
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov r15, r13
movzx r14, r14b
=== 6061
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x1181510b0
add rdx, 0x27f45210; add_carry
mov rdx, qword ptr [rdx]
add rdx, r14
mov r15b, byte ptr [rdx]
movzx r15, r15b
shl r15, 0x28
add r15, r15
mov rbx, r15
movabs rdi, 0xf00d1cc7
add rdi, 0x4ffc3df9; add
=== 6062
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov rbx, rbx
=== 6063
mov r14, rbx
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov cl, byte ptr [r12]
mov rdx, 0xff
shl rdx, 0x20
not rdx
and r14, rdx
movzx rdx, cl
shl rdx, 0x20
or r14, rdx
=== 6064
mov rsi, r14
push rsi
mov r12, rsp
mov rdi, r14
=== 6065
mov r8, r12
mov rbp, rdi
push r8
push 0x9261197
push 0x7a202d96
push 0x75921566
=== 6066
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rcx
mov r14, rbp
movzx r13, r13b
=== 6067
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xfed201d9
add rbx, 0x413760e7; add_carry
mov rbx, qword ptr [rbx]
add rbx, r13
mov sil, byte ptr [rbx]
movzx rsi, sil
shl rsi, 0x30
add r14, rsi
mov r13, r14
movabs r14, 0x120ad2fcc
add r14, 0x1f5c2af4; add
=== 6068
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov rbx, r13
=== 6069
mov r13, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov dl, byte ptr [r9]
mov r12, 0xff
shl r12, 0x28
not r12
and r13, r12
movzx r12, dl
shl r12, 0x28
or r13, r12
=== 6070
mov rdi, r13
push rdi
mov r13, rsp
mov r14, r13
=== 6071
mov r13, r13
mov rbx, r14
push r13
push 0x75551ea1
push 0x6f5d7c00
push 0xa84481e
push 0x8955356
=== 6072
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov rdi, rbx
movzx r15, r15b
=== 6073
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rdi
movabs r13, 0xea862193
add r13, 0x5583392d; add
=== 6074
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rsi
mov rdi, rbp
=== 6075
mov r13, rdi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbp
mov r15b, byte ptr [rsi]
mov rax, 0xff
shl rax, 0x38
not rax
and r13, rax
movzx rax, r15b
shl rax, 0x38
or r13, rax
=== 6076
movabs r14, 0x10569805a
push r14
push 0x159e1897
push 0x7b894f78
push 0x2ebc652a
push 0x23f20791
add qword ptr [rsp + 0x20], 0x3b20388e; input
mov rsi, r13
=== 6077
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 12
add rsp, 12
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov r13, rsi
movzx r12, r12b
=== 6078
mov rax, r12
mov rbx, 0xffffffffa45857f5
add rbx, 0x5bfc3436
push rbx
mov rdi, r13
mul qword ptr [rsp]
mov r14, rax
=== 6079
mov rbp, rdi
sub rbp, r14
=== 6080
mov r11, rbp
push r11
mov r13, rsp
mov rbp, rbp
=== 6081
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov rbp, rbp
movzx r15, r15b
=== 6082
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xc321fed0
add rdx, 0x7ce763f0; add_carry
mov rdx, qword ptr [rdx + 0x660]
add rdx, r15
mov bl, byte ptr [rdx]
movzx rbx, bl
shl rbx, 8
add rbp, rbx
mov r12, rbp
movabs rsi, 0x12dc441b7
add rsi, 0x12451909; add
=== 6083
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1632
add rsp, 1632
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rcx
mov r14, r12
=== 6084
mov r15, r14
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r12
mov dil, byte ptr [r14]
mov r15b, dil
=== 6085
mov rcx, r15
push rcx
mov rdi, rsp
mov rbp, r15
=== 6086
mov r15, rdi
mov rbx, rbp
push r15
push 0x27c52543
push 0x544d303d
push 0x49532760
push 0x4dcb4312
=== 6087
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r9
mov rbx, rbx
movzx r13, r13b
=== 6088
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x12179f55d
add r8, 0x1e8f6d63; add_carry
mov r8, qword ptr [r8 + 0x20]
add r8, r13
mov r10b, byte ptr [r8]
movzx r10, r10b
shl r10, 0x10
add rbx, r10
mov rsi, rbx
movabs rbx, 0x11c56fa58
add rbx, 0x23b26068; add
=== 6089
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 32
add rsp, 32
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdi
mov rsi, rsi
=== 6090
mov r14, rsi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r13
mov r13b, byte ptr [r11]
mov rdx, 0xff
shl rdx, 8
not rdx
and r14, rdx
movzx rdx, r13b
shl rdx, 8
or r14, rdx
=== 6091
mov rbx, r14
push rbx
mov rdi, rsp
mov rbp, r14
=== 6092
mov r10, rdi
mov rbp, rbp
push r10
push 0x2a5c1383
push 0x19113286
push 0x2e6078c4
=== 6093
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov r12, rbp
movzx r13, r13b
=== 6094
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x102e560fd
add r15, 0x3d2401c3; add_carry
mov r15, qword ptr [r15 + 0x70]
add r15, r13
mov r11b, byte ptr [r15]
movzx r11, r11b
shl r11, 0x18
add r12, r11
mov r13, r12
movabs r14, 0x12eb6e3d9
add r14, 0x115276e7; add
=== 6095
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 112
add rsp, 112
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rax
mov rsi, r13
=== 6096
mov r14, rsi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r14
mov r11b, byte ptr [r15]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and r14, rbx
movzx rbx, r11b
shl rbx, 0x10
or r14, rbx
=== 6097
mov r8, r14
push r8
mov r14, rsp
mov rbx, r14
=== 6098
mov rdx, r14
mov r13, rbx
push rdx
push 0x575b7c6b
push 0x7af4f31
push 0x69131067
push 0x31a85a17
=== 6099
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbp
mov rdi, r13
movzx rsi, sil
=== 6100
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xf398fc6c
add r8, 0x4c706654; add_carry
mov r8, qword ptr [r8 + 0x150]
add r8, rsi
mov r13b, byte ptr [r8]
movzx r13, r13b
shl r13, 0x20
add rdi, r13
mov rbp, rdi
movabs rbx, 0x13f330250
add rbx, 0xd65870; add
=== 6101
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 336
add rsp, 336
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov r13, rbp
=== 6102
mov r12, r13
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rsi
mov r13b, byte ptr [rdi]
mov r8, 0xff
shl r8, 0x18
not r8
and r12, r8
movzx r8, r13b
shl r8, 0x18
or r12, r8
=== 6103
mov r14, r12
push r14
mov r13, rsp
mov rsi, r12
=== 6104
mov r8, r13
mov r15, rsi
push r8
push 0xfb200f3
push 0x388d215f
push 0x94b3c91
push 0x4d084baa
=== 6105
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdi
mov rbp, r15
movzx rdi, dil
=== 6106
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x113ef585c
add rbp, 0x2c1a0a64; add_carry
mov rbp, qword ptr [rbp]
add rbp, rdi
mov cl, byte ptr [rbp]
movzx rcx, cl
shl rcx, 0x38
add rbp, rcx
movabs r14, 0xd2f848b7
push r14
push 0x15640baf
push 0x738d2986
push 0x44a4739f
push 0x614045b2
add qword ptr [rsp + 0x20], 0x6d111209; add
mov r12, rbp
=== 6107
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov rbx, r12
=== 6108
mov r12, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov sil, byte ptr [rax]
mov rax, 0xff
shl rax, 0x30
not rax
and r12, rax
movzx rax, sil
shl rax, 0x30
or r12, rax
=== 6109
mov r13, r12
push r13
mov rdi, rsp
mov r12, r12
=== 6110
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov rsi, r12
movzx r12, r12b
=== 6111
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rsi
movabs rbp, 0x13be701ae
add rbp, 0x4225912; add
=== 6112
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov r12, r15
=== 6113
mov r13, r12
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov r12b, byte ptr [r14]
mov rax, 0xff
shl rax, 0x38
not rax
and r13, rax
movzx rax, r12b
shl rax, 0x38
or r13, rax
=== 6114
mov r10, r13
push r10
mov r14, rsp
mov rbp, r13
=== 6115
mov rax, r14
mov r14, rbp
push rax
push 0x1d780f46
push 0xa4b1956
push 0x12fe41eb
push 0x1d8e7323
=== 6116
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r13
mov r15, r14
movzx r13, r13b
=== 6117
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x1148cf8f1
add r14, 0x2b7c79cf; sub_carry
mov r14, qword ptr [r14 + 0x490]
add r14, r13
mov dil, byte ptr [r14]
movzx rdi, dil
shl rdi, 8
sub r15, rdi
mov rdi, r15
movabs rsi, 0xef6b205e
add rsi, 0x509e4a62; sub
=== 6118
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1168
add rsp, 1168
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov rbx, rdi
=== 6119
mov r14, rbx
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbp
mov al, byte ptr [r12]
mov r14b, al
=== 6120
mov r13, r14
push r13
mov r13, rsp
mov rsi, r14
=== 6121
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov rbx, rsi
movzx r12, r12b
=== 6122
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x1109e728b
add r12, 0x2f6b0035; sub_carry
mov r12, qword ptr [r12 + 0x438]
add r12, r12
mov dil, byte ptr [r12]
movzx rdi, dil
shl rdi, 0x10
sub rbx, rdi
movabs r15, 0x100bc3a1f
push r15
push 0x787351bf
push 0x5b55dec
push 0x55e216f2
add qword ptr [rsp + 0x18], 0x3f4d30a1; sub
mov r12, rbx
=== 6123
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1080
add rsp, 1080
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdi
mov rsi, r12
=== 6124
mov rbx, rsi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov al, byte ptr [r11]
mov rdi, 0xff
shl rdi, 8
not rdi
and rbx, rdi
movzx rdi, al
shl rdi, 8
or rbx, rdi
=== 6125
mov rax, rbx
push rax
mov rbp, rsp
mov rdi, rbx
=== 6126
mov r9, rbp
mov rbx, rdi
push r9
push 0x9c81aa6
push 0x329066ad
push 0x230342dd
=== 6127
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov r12, rbx
movzx r14, r14b
=== 6128
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xc1825d19
add r14, 0x7e8715a7; sub_carry
mov r14, qword ptr [r14 + 0x190]
add r14, r14
mov r11b, byte ptr [r14]
movzx r11, r11b
shl r11, 0x18
sub r12, r11
movabs rcx, 0xec564211
push rcx
push 0x7c936bef
push 0x59280f0b
push 0x4d164a34
push 0x61230d3a
add qword ptr [rsp + 0x20], 0x53b328af; sub
mov rsi, r12
=== 6129
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 400
add rsp, 400
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov rsi, rsi
=== 6130
mov r13, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov r15b, byte ptr [r9]
mov r10, 0xff
shl r10, 0x10
not r10
and r13, r10
movzx r10, r15b
shl r10, 0x10
or r13, r10
=== 6131
mov r11, r13
push r11
mov r15, rsp
mov rsi, r13
=== 6132
mov r14, r15
mov rbp, rsi
push r14
push 0x39d14f75
push 0x49041936
push 0x1c2c1354
=== 6133
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov r14, rbp
movzx r13, r13b
=== 6134
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x123403a9b
add rax, 0x1cc93825; sub_carry
mov rax, qword ptr [rax + 0x108]
add rax, r13
mov sil, byte ptr [rax]
movzx rsi, sil
shl rsi, 0x20
sub r14, rsi
movabs r15, 0xee6e6549
push r15
push 0x61344277
push 0x19d31d7e
push 0x26566129
push 0x7e202189
add qword ptr [rsp + 0x20], 0x519b0577; sub
mov rdi, r14
=== 6135
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 264
add rsp, 264
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov rbp, rdi
=== 6136
mov r14, rbp
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r14
mov sil, byte ptr [r15]
mov r9, 0xff
shl r9, 0x18
not r9
and r14, r9
movzx r9, sil
shl r9, 0x18
or r14, r9
=== 6137
mov rdi, r14
push rdi
mov rsi, rsp
mov r13, r14
=== 6138
mov r8, rsi
mov rbx, r13
push r8
push 0x471b7dd1
push 0x36017698
push 0xfe7e5b
push 0x53b822a8
=== 6139
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r11
mov rdi, rbx
movzx r12, r12b
=== 6140
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xebb80c1a
add rbx, 0x545166a6; sub_carry
mov rbx, qword ptr [rbx + 0x10]
add rbx, r12
mov r11b, byte ptr [rbx]
movzx r11, r11b
shl r11, 0x28
sub rdi, r11
mov rdi, rdi
movabs r15, 0xd6a0f771
add r15, 0x6968734f; sub
=== 6141
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 16
add rsp, 16
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov r12, rdi
=== 6142
mov r13, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov sil, byte ptr [rdx]
mov rcx, 0xff
shl rcx, 0x20
not rcx
and r13, rcx
movzx rcx, sil
shl rcx, 0x20
or r13, rcx
=== 6143
mov rdx, r13
push rdx
mov rbx, rsp
mov r15, r13
=== 6144
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov rbp, r15
movzx r15, r15b
=== 6145
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x1172e6f9f
add r15, 0x28db0321; sub_carry
mov r15, qword ptr [r15]
add r15, r15
mov r13b, byte ptr [r15]
movzx r13, r13b
shl r13, 0x38
sub rbp, r13
mov r13, rbp
movabs r12, 0x1167e0741
add r12, 0x298b637f; sub
=== 6146
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov rdi, r13
=== 6147
mov r13, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov r15b, byte ptr [rdx]
mov r10, 0xff
shl r10, 0x30
not r10
and r13, r10
movzx r10, r15b
shl r10, 0x30
or r13, r10
=== 6148
mov r15, r13
push r15
mov r12, rsp
mov rbx, r13
=== 6149
mov r14, r12
mov r13, rbx
push r14
push 0x68f11156
push 0x5f7b1908
push 0x6d6d55ac
push 0x535a0d6a
=== 6150
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov r13, r13
movzx r15, r15b
=== 6151
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x11e3516bc
push r14
push 0x47a570fe
push 0x1c44656f
push 0x1ad326d8
push 0x10b50d9
add qword ptr [rsp + 0x20], 0x21d43c04; or
mov rbx, r13
=== 6152
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rcx
mov rsi, rbx
=== 6153
mov r13, rsi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov r8b, byte ptr [r15]
mov r14, 0xff
shl r14, 0x10
not r14
and r13, r14
movzx r14, r8b
shl r14, 0x10
or r13, r14
=== 6154
mov r14, r13
push r14
mov r13, rsp
mov rbp, r13
=== 6155
mov r8, r13
mov rsi, rbp
push r8
push 0x33ee0e43
push 0x7d4968a5
push 0x114c7b38
push 0xf20167b
=== 6156
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov r15, rsi
movzx r14, r14b
=== 6157
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r15
movabs r13, 0x12a282822
add r13, 0x15e12a9e; or
=== 6158
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov r14, rbx
=== 6159
mov r14, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov r15b, byte ptr [r9]
mov rax, 0xff
shl rax, 0x18
not rax
and r14, rax
movzx rax, r15b
shl rax, 0x18
or r14, rax
=== 6160
mov rax, r14
push rax
mov r12, rsp
mov rbx, r14
=== 6161
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov rdi, rbx
movzx r14, r14b
=== 6162
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x1245ff164
push rsi
push 0xd012116
push 0x77f3491a
push 0x60b259ea
add qword ptr [rsp + 0x18], 0x1ba9615c; or
mov rsi, rdi
=== 6163
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov r12, rsi
=== 6164
mov rsi, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov dil, byte ptr [r10]
mov rcx, 0xff
shl rcx, 0x20
not rcx
and rsi, rcx
movzx rcx, dil
shl rcx, 0x20
or rsi, rcx
=== 6165
mov r14, rsi
push r14
mov rbx, rsp
mov rsi, rsi
=== 6166
mov r9, rbx
mov rbx, rsi
push r9
push 0x373e2c96
push 0x76ff4472
push 0x57466bc9
push 0x4bf85c79
=== 6167
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov r13, rbx
movzx r14, r14b
=== 6168
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x101704074
push r12
push 0x5b3e55aa
push 0x7ef54e18
push 0x55da5390
push 0x6df02dac
add qword ptr [rsp + 0x20], 0x3e99124c; or
mov rsi, r13
=== 6169
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdx
mov rbx, rsi
=== 6170
mov r14, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov cl, byte ptr [rcx]
mov r9, 0xff
shl r9, 0x28
not r9
and r14, r9
movzx r9, cl
shl r9, 0x28
or r14, r9
=== 6171
mov rdi, r14
push rdi
mov r12, rsp
mov rbx, r14
=== 6172
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov r12, rbx
movzx r14, r14b
=== 6173
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x12bcf09e3
push r13
push 0x3eb33b5d
push 0x10884d1d
push 0x1f601281
push 0x166678ff
add qword ptr [rsp + 0x20], 0x143a48dd; or
mov r12, r12
=== 6174
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov rdi, r12
=== 6175
mov r13, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r14
mov r9b, byte ptr [rcx]
mov r15, 0xff
shl r15, 0x30
not r15
and r13, r15
movzx r15, r9b
shl r15, 0x30
or r13, r15
=== 6176
mov rcx, r13
push rcx
mov rbx, rsp
mov rdi, r13
=== 6177
mov r11, rbx
mov rdi, rdi
push r11
push 0x5002d82
push 0x4aeb2b85
push 0x52402606
push 0x3cbd1961
=== 6178
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov r15, rdi
movzx r13, r13b
=== 6179
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r15
movabs rbp, 0xe6114a71
add rbp, 0x59f8084f; or
=== 6180
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov rsi, r12
=== 6181
mov rdi, rsi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r15
mov r12b, byte ptr [rcx]
mov r15, 0xff
shl r15, 0x38
not r15
and rdi, r15
movzx r15, r12b
shl r15, 0x38
or rdi, r15
=== 6182
mov r13, rdi
movabs rdi, 0xefc40402
add rdi, 0x503c0dee
test r13, r13
lea r14, [rip - 0x3cad59]
cmovne r14, rdi
jmp r14
=== 6183
movabs r13, 0xcf90aef2
push r13
push 0x71951c2b
push 0x3a84543
push 0x13ef3ca0
push 0xd116196
add qword ptr [rsp + 0x20], 0x70f909f6; input
=== 6184
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 17
add rsp, 17
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
movzx rbp, bpl
=== 6185
mov rax, rbp
mov rdi, 0xffffffffc64aeb1a
add rdi, 0x3ab03621
push rdi
mul qword ptr [rsp]
mov rsi, rax
=== 6186
mov rax, rsi
push rax
mov r12, rsp
mov rsi, rsi
=== 6187
mov r9, r12
mov r12, rsi
push r9
push 0x2614332b
push 0x11e06f6b
push 0x7a5e40fe
push 0x4bbf2c00
=== 6188
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rax
mov r12, r12
movzx r15, r15b
=== 6189
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x12449412b
add r14, 0x1bc03195; sub_carry
mov r14, qword ptr [r14 + 0x218]
add r14, r15
mov r8b, byte ptr [r14]
movzx r8, r8b
shl r8, 8
sub r12, r8
movabs rsi, 0xdb2d418a
push rsi
push 0x7a443df
push 0x2ad815da
push 0x47b2086c
push 0x5d673e4
add qword ptr [rsp + 0x20], 0x64dc2936; sub
mov rbp, r12
=== 6190
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 536
add rsp, 536
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov r14, rbp
=== 6191
mov r13, r14
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbp
mov r11b, byte ptr [rcx]
mov r13b, r11b
=== 6192
mov rax, r13
push rax
mov r15, rsp
mov rsi, r13
=== 6193
mov rdx, r15
mov r12, rsi
push rdx
push 0x316a444c
push 0x75e6643e
push 0x687a3871
=== 6194
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r11
mov r15, r12
movzx r13, r13b
=== 6195
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xe9cd59c3
add r10, 0x563c18fd; sub_carry
mov r10, qword ptr [r10 + 0x6b0]
add r10, r13
mov r14b, byte ptr [r10]
movzx r14, r14b
shl r14, 0x10
sub r15, r14
movabs r10, 0x1360748cc
push r10
push 0x5ec61965
push 0x789f1575
push 0x1049266f
add qword ptr [rsp + 0x18], 0xa0221f4; sub
mov rbp, r15
=== 6196
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1712
add rsp, 1712
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r15, rbp
=== 6197
mov rbx, r15
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov r8b, byte ptr [r11]
mov rsi, 0xff
shl rsi, 8
not rsi
and rbx, rsi
movzx rsi, r8b
shl rsi, 8
or rbx, rsi
=== 6198
mov r10, rbx
push r10
mov rbp, rsp
mov r15, rbx
=== 6199
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov rbx, r15
movzx r13, r13b
=== 6200
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xdc2b4c3e
add r10, 0x63de2682; sub_carry
mov r10, qword ptr [r10 + 0x398]
add r10, r13
mov cl, byte ptr [r10]
movzx rcx, cl
shl rcx, 0x18
sub rbx, rcx
mov r13, rbx
movabs rbp, 0x115a722c5
add rbp, 0x2a6247fb; sub
=== 6201
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 920
add rsp, 920
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r12
mov r15, r13
=== 6202
mov rbx, r15
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbp
mov r12b, byte ptr [rsi]
mov r13, 0xff
shl r13, 0x10
not r13
and rbx, r13
movzx r13, r12b
shl r13, 0x10
or rbx, r13
=== 6203
mov r12, rbx
push r12
mov rbp, rsp
mov r13, rbx
=== 6204
mov r12, rbp
mov rbp, r13
push r12
push 0x50fc34d6
push 0x5d4e0bfd
push 0x388c1053
push 0x214251a4
=== 6205
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov r14, rbp
movzx rdi, dil
=== 6206
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x108652612
add r11, 0x37a44cae; sub_carry
mov r11, qword ptr [r11 + 0x338]
add r11, rdi
mov cl, byte ptr [r11]
movzx rcx, cl
shl rcx, 0x20
sub r14, rcx
mov r13, r14
movabs r12, 0x11b585b66
add r12, 0x24b10f5a; sub
=== 6207
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 824
add rsp, 824
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbx
mov rbx, r13
=== 6208
mov rbx, rbx
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov sil, byte ptr [r15]
mov rax, 0xff
shl rax, 0x18
not rax
and rbx, rax
movzx rax, sil
shl rax, 0x18
or rbx, rax
=== 6209
mov rsi, rbx
movabs rbx, 0xd2b94e67
add rbx, 0x6dd06a81; input
=== 6210
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 9
add rsp, 9
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov r14, rsi
movzx rbp, bpl
=== 6211
mov rax, rbp
mov r12, 0xfffffffff2bdf446
add r12, 0xe207430
push r12
mov rbp, r14
mul qword ptr [rsp]
mov r12, rax
=== 6212
mov rbp, rbp
xor rbp, r12
=== 6213
mov rdx, rbp
push rdx
mov r14, rsp
mov rbp, rbp
=== 6214
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov rdi, rbp
movzx r12, r12b
=== 6215
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x137da446d
push r15
push 0x6715f20
push 0x70d50707
push 0x65b54326
add qword ptr [rsp + 0x18], 0x82f0653; xor
mov rbp, rdi
=== 6216
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1816
add rsp, 1816
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r13, rbp
=== 6217
mov r14, r13
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbx
mov dl, byte ptr [r13]
mov r14b, dl
=== 6218
mov r13, r14
push r13
mov rdi, rsp
mov rbx, r14
=== 6219
mov rsi, rdi
mov r13, rbx
push rsi
push 0x542c575f
push 0x53881be6
push 0x1bef64a5
push 0x427e2798
=== 6220
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov r15, r13
movzx rdi, dil
=== 6221
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xd801ccae
push rsi
push 0x14703a5c
push 0x59734def
push 0x132d214f
add qword ptr [rsp + 0x18], 0x68077e12; xor
mov r12, r15
=== 6222
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2024
add rsp, 2024
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r11
mov r13, r12
=== 6223
mov rdi, r13
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov r15b, byte ptr [r9]
mov r9, 0xff
shl r9, 8
not r9
and rdi, r9
movzx r9, r15b
shl r9, 8
or rdi, r9
=== 6224
mov r8, rdi
push r8
mov rbx, rsp
mov r13, rdi
=== 6225
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov r13, r13
movzx rbp, bpl
=== 6226
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r13
movabs r15, 0xefac1115
add r15, 0x505d39ab; xor
=== 6227
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 584
add rsp, 584
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov rbx, rsi
=== 6228
mov r15, rbx
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r12
mov r8b, byte ptr [r14]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and r15, rbp
movzx rbp, r8b
shl rbp, 0x10
or r15, rbp
=== 6229
mov r12, r15
push r12
mov r15, rsp
mov rbx, r15
=== 6230
mov rax, r15
mov r13, rbx
push rax
push 0x674d27fb
push 0x796d5009
push 0x403e0b67
push 0x37c97b5e
=== 6231
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov r12, r13
movzx rsi, sil
=== 6232
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r12
movabs rbx, 0x110a7ff10
add rbx, 0x2f614bb0; xor
=== 6233
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1072
add rsp, 1072
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov r13, r15
=== 6234
mov rsi, r13
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov r13b, byte ptr [r13]
mov r10, 0xff
shl r10, 0x18
not r10
and rsi, r10
movzx r10, r13b
shl r10, 0x18
or rsi, r10
=== 6235
mov r8, rsi
push r8
mov rbx, rsp
mov r13, rsi
=== 6236
mov rdi, rbx
mov r14, r13
push rdi
push 0x6cb706e2
push 0x12460afe
push 0x604921c1
=== 6237
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbp
mov rsi, r14
movzx r15, r15b
=== 6238
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xf2f629ed
push rdi
push 0x57cc5b79
push 0x69110972
push 0x5d9732e
push 0x6c21336d
add qword ptr [rsp + 0x20], 0x4d1320d3; xor
mov r13, rsi
=== 6239
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov rbx, r13
=== 6240
mov rbx, rbx
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r14
mov sil, byte ptr [rdi]
mov r10, 0xff
shl r10, 0x20
not r10
and rbx, r10
movzx r10, sil
shl r10, 0x20
or rbx, r10
=== 6241
mov r13, rbx
movabs rbp, 0xdca99f5c
add rbp, 0x63e0198c; input
=== 6242
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 29
add rsp, 29
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov r12, r13
movzx r13, r13b
=== 6243
mov rax, r13
mov r12, 0xffffffffc66a20f6
add r12, 0x39f87f01
push r12
mov r12, r12
mul qword ptr [rsp]
mov rsi, rax
=== 6244
mov rbp, r12
xor rbp, rsi
=== 6245
mov rdi, rbp
push rdi
mov rsi, rsp
mov r13, rbp
=== 6246
mov r11, rsi
mov r12, r13
push r11
push 0x264748ed
push 0x590d176d
push 0x6f6502e5
=== 6247
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov rdi, r12
movzx r13, r13b
=== 6248
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rdi
movabs rsi, 0xec061f6f
add rsi, 0x54032b51; xor
=== 6249
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 24
add rsp, 24
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rcx
mov r14, r13
=== 6250
mov rbx, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov sil, byte ptr [r9]
mov bl, sil
=== 6251
mov rbx, rbx
push rbx
mov r14, rsp
mov rbp, rbx
=== 6252
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r15
mov r14, rbp
movzx r12, r12b
=== 6253
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x1075f1175
push rbp
push 0x4a1903
push 0x12b0673
push 0x40865d8
add qword ptr [rsp + 0x18], 0x38aa394b; xor
mov rbp, r14
=== 6254
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1424
add rsp, 1424
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r8
mov rbx, rbp
=== 6255
mov r15, rbx
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r13
mov r14b, byte ptr [r12]
mov r8, 0xff
shl r8, 8
not r8
and r15, r8
movzx r8, r14b
shl r8, 8
or r15, r8
=== 6256
mov r10, r15
push r10
mov rsi, rsp
mov r13, r15
=== 6257
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rcx
mov r12, r13
movzx rdi, dil
=== 6258
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r12
movabs r14, 0x134e1f4be
add r14, 0xb275602; xor
=== 6259
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1904
add rsp, 1904
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov r13, r13
=== 6260
mov r13, r13
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r15
mov dil, byte ptr [r9]
mov r11, 0xff
shl r11, 0x10
not r11
and r13, r11
movzx r11, dil
shl r11, 0x10
or r13, r11
=== 6261
mov r8, r13
push r8
mov r15, rsp
mov rbp, r13
=== 6262
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdi
mov r13, rbp
movzx r12, r12b
=== 6263
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r13
movabs rsi, 0xf7553010
add rsi, 0x48b41ab0; xor
=== 6264
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1280
add rsp, 1280
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov r13, r12
=== 6265
mov r12, r13
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov r15b, byte ptr [rcx]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r12, rsi
movzx rsi, r15b
shl rsi, 0x18
or r12, rsi
=== 6266
mov rax, r12
push rax
mov rdi, rsp
mov r15, r12
=== 6267
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r9
mov rbp, r15
movzx r13, r13b
=== 6268
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x132fb3242
push r11
push 0x673a4825
push 0x178f08da
push 0x7a050023
add qword ptr [rsp + 0x18], 0xd0e187e; xor
mov r14, rbp
=== 6269
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbp
mov r13, r14
=== 6270
mov r12, r13
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov r8b, byte ptr [r9]
mov rsi, 0xff
shl rsi, 0x38
not rsi
and r12, rsi
movzx rsi, r8b
shl rsi, 0x38
or r12, rsi
=== 6271
movabs r15, 0xff57504b
push r15
push 0x88877aa
push 0x345a1a4c
push 0x618062d0
add qword ptr [rsp + 0x18], 0x4132689d; input
mov r13, r12
=== 6272
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 25
add rsp, 25
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov r12, r13
movzx r14, r14b
=== 6273
mov rax, r14
mov rcx, 0xffffffff8afea99e
add rcx, 0x75dd0769
push rcx
mov r13, r12
mul qword ptr [rsp]
mov r12, rax
=== 6274
mov rsi, r13
sub rsi, r12
=== 6275
mov r10, rsi
push r10
mov r12, rsp
mov r13, rsi
=== 6276
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov rdi, r13
movzx rbx, bl
=== 6277
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xd50e2c14
push rbx
push 0x5a3d4f0f
push 0x570e1b24
push 0x784975a6
add qword ptr [rsp + 0x18], 0x6afb1eac; xor
mov rdi, rdi
=== 6278
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 784
add rsp, 784
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov rsi, rdi
=== 6279
mov r14, rsi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r14
mov sil, byte ptr [r10]
mov r14b, sil
=== 6280
mov rbx, r14
push rbx
mov r15, rsp
mov r12, r14
=== 6281
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r13
mov r15, r12
movzx r12, r12b
=== 6282
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x121953c27
push rdx
push 0x6b3354c0
push 0x14757b06
push 0x6d136624
add qword ptr [rsp + 0x18], 0x1e740e99; xor
mov r15, r15
=== 6283
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 856
add rsp, 856
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r8
mov rsi, r15
=== 6284
mov r12, rsi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov r11b, byte ptr [r11]
mov r14, 0xff
shl r14, 8
not r14
and r12, r14
movzx r14, r11b
shl r14, 8
or r12, r14
=== 6285
mov r15, r12
push r15
mov r15, rsp
mov r13, r12
=== 6286
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rsi, r13
movzx r13, r13b
=== 6287
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rsi
movabs rsi, 0x1230c2438
add rsi, 0x1cfd2688; xor
=== 6288
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1360
add rsp, 1360
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov rdi, rdi
=== 6289
mov r14, rdi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov dil, byte ptr [r11]
mov r9, 0xff
shl r9, 0x10
not r9
and r14, r9
movzx r9, dil
shl r9, 0x10
or r14, r9
=== 6290
mov rsi, r14
push rsi
mov rsi, rsp
mov r12, r14
=== 6291
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r11
mov r12, r12
movzx r13, r13b
=== 6292
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xe8fce1f6
push r13
push 0x5e0f416b
push 0x36b54350
push 0x2ae934fe
push 0x4dcf3e7f
add qword ptr [rsp + 0x20], 0x570c68ca; xor
mov r15, r12
=== 6293
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1184
add rsp, 1184
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rax
mov r13, r15
=== 6294
mov rdi, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov r8b, byte ptr [r15]
mov r9, 0xff
shl r9, 0x18
not r9
and rdi, r9
movzx r9, r8b
shl r9, 0x18
or rdi, r9
=== 6295
mov r8, rdi
push r8
mov rbx, rsp
mov rsi, rdi
=== 6296
mov rbp, rbx
mov r13, rsi
push rbp
push 0x663e530a
push 0x33890475
push 0x3c4b1595
push 0x1c0665e3
=== 6297
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov r15, r13
movzx rsi, sil
=== 6298
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xc541ec42
push rbp
push 0x51012f74
push 0x3878590f
push 0x7f2b3a6d
push 0x17424751
add qword ptr [rsp + 0x20], 0x7ac75e7e; xor
mov rbp, r15
=== 6299
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdi
mov rsi, rbp
=== 6300
mov r12, rsi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov r8b, byte ptr [rcx]
mov r9, 0xff
shl r9, 0x30
not r9
and r12, r9
movzx r9, r8b
shl r9, 0x30
or r12, r9
=== 6301
mov rsi, r12
push rsi
mov rbx, rsp
mov r15, r12
=== 6302
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov rdi, r15
movzx rbp, bpl
=== 6303
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rdi
movabs rbx, 0xcd5a0d2e
add rbx, 0x72af3d92; xor
=== 6304
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rax
mov rbp, rsi
=== 6305
mov rdi, rbp
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r15
mov r11b, byte ptr [rbx]
mov r13, 0xff
shl r13, 0x38
not r13
and rdi, r13
movzx r13, r11b
shl r13, 0x38
or rdi, r13
=== 6306
movabs r11, 0x12cceb732
push r11
push 0x6aec380c
push 0x200c2602
push 0x60377cbb
add qword ptr [rsp + 0x18], 0x13bb01b6; input
mov rbx, rdi
=== 6307
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r14
mov r15, rbx
movzx rdi, dil
=== 6308
mov rax, rdi
mov r15, 0xffffffffadb1ec13
add r15, 0x52743a62
push r15
mov rsi, r15
mul qword ptr [rsp]
mov rbx, rax
=== 6309
mov r14, rsi
sub r14, rbx
=== 6310
mov r14, r14
push r14
mov rbp, rsp
mov r13, r14
=== 6311
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov r13, r13
movzx r15, r15b
=== 6312
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xf35304f8
add rax, 0x4cb66dc8; sub_carry
mov rax, qword ptr [rax + 0x440]
add rax, r15
mov r13b, byte ptr [rax]
movzx r13, r13b
shl r13, 8
sub r13, r13
mov rdi, r13
movabs r14, 0x133734744
add r14, 0xc96237c; sub
=== 6313
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1088
add rsp, 1088
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov rbx, rdi
=== 6314
mov r15, rbx
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov bl, byte ptr [r10]
mov r15b, bl
=== 6315
mov rdx, r15
push rdx
mov r14, rsp
mov rbp, r15
=== 6316
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r15
mov rdi, rbp
movzx r13, r13b
=== 6317
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xf29f145e
add rcx, 0x4d6a5e62; sub_carry
mov rcx, qword ptr [rcx + 0x2a0]
add rcx, r13
mov dil, byte ptr [rcx]
movzx rdi, dil
shl rdi, 0x10
sub rdi, rdi
movabs rdi, 0x1082c0f44
push rdi
push 0x2a305adb
push 0x234b3135
push 0xf73450b
push 0x265b1151
add qword ptr [rsp + 0x20], 0x37dd5b7c; sub
mov rsi, rdi
=== 6318
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 672
add rsp, 672
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r12
mov rsi, rsi
=== 6319
mov r13, rsi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov r8b, byte ptr [r10]
mov rbp, 0xff
shl rbp, 8
not rbp
and r13, rbp
movzx rbp, r8b
shl rbp, 8
or r13, rbp
=== 6320
mov r13, r13
push r13
mov r15, rsp
mov r14, r13
=== 6321
mov r11, r15
mov r14, r14
push r11
push 0x33cc34d3
push 0x6beb3e68
push 0x239d0f8b
=== 6322
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rbp, r14
movzx r13, r13b
=== 6323
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x122a8581c
add r15, 0x1d611aa4; sub_carry
mov r15, qword ptr [r15 + 0x678]
add r15, r13
mov r10b, byte ptr [r15]
movzx r10, r10b
shl r10, 0x18
sub rbp, r10
movabs rax, 0x11b8c5284
push rax
push 0x1b5633a
push 0x457946a1
push 0x6b34140b
push 0x45a905b1
add qword ptr [rsp + 0x20], 0x247d183c; sub
mov rsi, rbp
=== 6324
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1656
add rsp, 1656
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov rbp, rsi
=== 6325
mov rsi, rbp
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r14
mov cl, byte ptr [rbx]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and rsi, rdi
movzx rdi, cl
shl rdi, 0x10
or rsi, rdi
=== 6326
mov rsi, rsi
push rsi
mov r15, rsp
mov rbp, rsi
=== 6327
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rcx
mov r14, rbp
movzx r12, r12b
=== 6328
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xc21a1556
add rbx, 0x7def5d6a; sub_carry
mov rbx, qword ptr [rbx + 0x6f8]
add rbx, r12
mov r14b, byte ptr [rbx]
movzx r14, r14b
shl r14, 0x20
sub r14, r14
movabs rax, 0xea51eb9d
push rax
push 0x2e1c2422
push 0x20e82d6e
push 0x17bb569e
push 0x18ab60bb
add qword ptr [rsp + 0x20], 0x55b77f23; sub
mov r13, r14
=== 6329
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1784
add rsp, 1784
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov rdi, r13
=== 6330
mov r13, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov al, byte ptr [r8]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and r13, rdx
movzx rdx, al
shl rdx, 0x18
or r13, rdx
=== 6331
mov rbx, r13
push rbx
mov r14, rsp
mov r12, r13
=== 6332
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rbx, r12
movzx r13, r13b
=== 6333
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xf6f52af1
add rdi, 0x491447cf; sub_carry
mov rdi, qword ptr [rdi]
add rdi, r13
mov dil, byte ptr [rdi]
movzx rdi, dil
shl rdi, 0x30
sub rbx, rdi
movabs r10, 0x10cb60460
push r10
push 0x499d3618
push 0x70b5717f
push 0x774c73f2
add qword ptr [rsp + 0x18], 0x33536660; sub
mov r13, rbx
=== 6334
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov r13, r13
=== 6335
mov rsi, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbp
mov bl, byte ptr [rax]
mov rdi, 0xff
shl rdi, 0x28
not rdi
and rsi, rdi
movzx rdi, bl
shl rdi, 0x28
or rsi, rdi
=== 6336
mov rax, rsi
push rax
mov rbx, rsp
mov rdi, rsi
=== 6337
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov r15, rdi
movzx r12, r12b
=== 6338
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x10a7c6c00
add rdx, 0x358d06c0; sub_carry
mov rdx, qword ptr [rdx]
add rdx, r12
mov cl, byte ptr [rdx]
movzx rcx, cl
shl rcx, 0x38
sub r15, rcx
mov rbx, r15
movabs rsi, 0x1337c1537
add rsi, 0xc8d5589; sub
=== 6339
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov r13, rbx
=== 6340
mov r15, r13
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r12
mov r9b, byte ptr [rbp]
mov rdx, 0xff
shl rdx, 0x30
not rdx
and r15, rdx
movzx rdx, r9b
shl rdx, 0x30
or r15, rdx
=== 6341
mov rbp, r15
movabs rsi, 0xe8913a05
add rsi, 0x57f87ee3; input
=== 6342
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rax
mov r12, rbp
movzx rbx, bl
=== 6343
mov rax, rbx
mov rdx, 0xffffffff971c1d41
add rdx, 0x69ba7484
push rdx
mov rdi, r12
mul qword ptr [rsp]
mov rsi, rax
=== 6344
mov rdi, rdi
add rdi, rsi
=== 6345
mov rdx, rdi
push rdx
mov rbx, rsp
mov rdi, rdi
=== 6346
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r15
mov r14, rdi
movzx rdi, dil
=== 6347
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xc0cc0078
add rbp, 0x7f3d7248; sub_carry
mov rbp, qword ptr [rbp + 0x230]
add rbp, rdi
mov bl, byte ptr [rbp]
movzx rbx, bl
shl rbx, 8
sub r14, rbx
mov r15, r14
movabs rbx, 0x10e8632dd
add rbx, 0x318337e3; sub
=== 6348
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 560
add rsp, 560
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rsi
mov r14, r15
=== 6349
mov rsi, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r15
mov al, byte ptr [r13]
mov sil, al
=== 6350
mov r12, rsi
push r12
mov rsi, rsp
mov r15, rsi
=== 6351
mov rcx, rsi
mov r13, r15
push rcx
push 0x6dd20963
push 0x17d514e0
push 0x6fce070d
push 0x63334f1
=== 6352
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
mov rbx, r13
movzx r12, r12b
=== 6353
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x10ec21db1
add rbx, 0x3147550f; sub_carry
mov rbx, qword ptr [rbx + 0x738]
add rbx, r12
mov r8b, byte ptr [rbx]
movzx r8, r8b
shl r8, 0x10
sub rbx, r8
movabs r15, 0x12b8519c6
push r15
push 0x72574711
push 0x1c503872
push 0x2ed06457
push 0x4bdd767a
add qword ptr [rsp + 0x20], 0x148450fa; sub
mov r13, rbx
=== 6354
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1848
add rsp, 1848
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdi
mov rsi, r13
=== 6355
mov r15, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov r13b, byte ptr [r8]
mov r14, 0xff
shl r14, 8
not r14
and r15, r14
movzx r14, r13b
shl r14, 8
or r15, r14
=== 6356
mov rcx, r15
push rcx
mov rsi, rsp
mov rbx, r15
=== 6357
mov r12, rsi
mov rsi, rbx
push r12
push 0x28a65084
push 0x161b164e
push 0x1f017b93
push 0x95c57a2
=== 6358
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov r14, rsi
movzx r13, r13b
=== 6359
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xceb011fd
add r8, 0x715960c3; sub_carry
mov r8, qword ptr [r8 + 0x1f0]
add r8, r13
mov cl, byte ptr [r8]
movzx rcx, cl
shl rcx, 0x18
sub r14, rcx
mov r15, r14
movabs r12, 0xe88a0b95
add r12, 0x577f5f2b; sub
=== 6360
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 496
add rsp, 496
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov rdi, r15
=== 6361
mov r13, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbp
mov cl, byte ptr [r8]
mov r12, 0xff
shl r12, 0x10
not r12
and r13, r12
movzx r12, cl
shl r12, 0x10
or r13, r12
=== 6362
mov r8, r13
push r8
mov r12, rsp
mov r13, r13
=== 6363
mov rax, r12
mov rbx, r13
push rax
push 0x5a453118
push 0x62031e64
push 0xdf03a65
push 0x14eb4c34
=== 6364
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbp
mov r12, rbx
movzx r15, r15b
=== 6365
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xe869186b
add r14, 0x57a05a55; sub_carry
mov r14, qword ptr [r14 + 0x2d8]
add r14, r15
mov bl, byte ptr [r14]
movzx rbx, bl
shl rbx, 0x20
sub r12, rbx
mov r14, r12
movabs rbp, 0x136ef6821
add rbp, 0x91a029f; sub
=== 6366
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 728
add rsp, 728
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdi
mov rsi, r14
=== 6367
mov r12, rsi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov r13b, byte ptr [r15]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and r12, rdx
movzx rdx, r13b
shl rdx, 0x18
or r12, rdx
=== 6368
mov rsi, r12
push rsi
mov r15, rsp
mov rsi, r12
=== 6369
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r11
mov rbp, rsi
movzx rdi, dil
=== 6370
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x10908217b
push rcx
push 0x702b4530
push 0x4d711b95
push 0x22a42fff
push 0x404e5d89
add qword ptr [rsp + 0x20], 0x37014945; sub
mov r15, rbp
=== 6371
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov r14, r15
=== 6372
mov rsi, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov dil, byte ptr [r15]
mov rbp, 0xff
shl rbp, 0x38
not rbp
and rsi, rbp
movzx rbp, dil
shl rbp, 0x38
or rsi, rbp
=== 6373
mov rbp, rsi
movabs r15, 0x117f2b4d7
add r15, 0x28970411; input
=== 6374
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 13
add rsp, 13
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov r13, rbp
movzx rbx, bl
=== 6375
mov rax, rbx
mov rsi, 0x6a394
add rsi, 0xc458ff
push rsi
mov r13, r13
mul qword ptr [rsp]
mov rdi, rax
=== 6376
mov rdi, r13
sub rdi, rdi
=== 6377
mov rcx, rdi
push rcx
mov rdi, rsp
mov rbx, rdi
=== 6378
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov rsi, rbx
movzx rbp, bpl
=== 6379
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x130594a9e
add r15, 0xfb02822; sub_carry
mov r15, qword ptr [r15 + 0x110]
add r15, rbp
mov r8b, byte ptr [r15]
movzx r8, r8b
shl r8, 8
sub rsi, r8
mov r15, rsi
movabs r13, 0xf64628b2
add r13, 0x49c3420e; sub
=== 6380
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 272
add rsp, 272
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov rbx, r15
=== 6381
mov r14, rbx
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rsi
mov cl, byte ptr [rbx]
mov r14b, cl
=== 6382
mov r15, r14
push r15
mov r12, rsp
mov rdi, r14
=== 6383
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r8
mov r14, rdi
movzx r12, r12b
=== 6384
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xd8a64e91
add rcx, 0x6763242f; sub_carry
mov rcx, qword ptr [rcx + 0x6f0]
add rcx, r12
mov al, byte ptr [rcx]
movzx rax, al
shl rax, 0x10
sub r14, rax
mov rbp, r14
movabs rbx, 0xe6925001
add rbx, 0x59771abf; sub
=== 6385
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1776
add rsp, 1776
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov r15, rbp
=== 6386
mov r15, r15
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbp
mov bl, byte ptr [rbx]
mov r11, 0xff
shl r11, 8
not r11
and r15, r11
movzx r11, bl
shl r11, 8
or r15, r11
=== 6387
mov r15, r15
push r15
mov r15, rsp
mov rbx, r15
=== 6388
mov r14, r15
mov r15, rbx
push r14
push 0x35b669a2
push 0x2be8131e
push 0x6e412cb4
=== 6389
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r10
mov rbx, r15
movzx rsi, sil
=== 6390
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x1063d0d00
add rdx, 0x39cc65c0; sub_carry
mov rdx, qword ptr [rdx + 0xd8]
add rdx, rsi
mov r12b, byte ptr [rdx]
movzx r12, r12b
shl r12, 0x18
sub rbx, r12
movabs r13, 0xd2213c72
push r13
push 0x25543294
push 0x6ddc6936
push 0x6eb340f6
add qword ptr [rsp + 0x18], 0x6de82e4e; sub
mov r13, rbx
=== 6391
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 216
add rsp, 216
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov rdi, r13
=== 6392
mov rsi, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov r10b, byte ptr [rcx]
mov rdx, 0xff
shl rdx, 0x10
not rdx
and rsi, rdx
movzx rdx, r10b
shl rdx, 0x10
or rsi, rdx
=== 6393
mov rcx, rsi
push rcx
mov r15, rsp
mov r13, rsi
=== 6394
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov rbp, r13
movzx rdi, dil
=== 6395
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x1241a3ead
add r15, 0x1bef3413; sub_carry
mov r15, qword ptr [r15 + 0x88]
add r15, rdi
mov dl, byte ptr [r15]
movzx rdx, dl
shl rdx, 0x20
sub rbp, rdx
mov rdi, rbp
movabs rbp, 0x109ec0acd
add rbp, 0x361d5ff3; sub
=== 6396
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 136
add rsp, 136
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r14
mov r15, rdi
=== 6397
mov r15, r15
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov dl, byte ptr [r10]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and r15, rcx
movzx rcx, dl
shl rcx, 0x18
or r15, rcx
=== 6398
mov r12, r15
push r12
mov r14, rsp
mov rsi, r15
=== 6399
mov r12, r14
mov rbp, rsi
push r12
push 0x39eb5cc4
push 0x2c701ed4
push 0x69b57a46
=== 6400
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov r15, rbp
movzx rbx, bl
=== 6401
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xdd6949cc
add r15, 0x62a028f4; sub_carry
mov r15, qword ptr [r15]
add r15, rbx
mov dil, byte ptr [r15]
movzx rdi, dil
shl rdi, 0x28
sub r15, rdi
movabs r14, 0xd66a18a1
push r14
push 0x34744417
push 0x53ab7bff
push 0x1cd6192a
push 0x448549b8
add qword ptr [rsp + 0x20], 0x699f521f; sub
mov r15, r15
=== 6402
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdx
mov r12, r15
=== 6403
mov rdi, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov al, byte ptr [r11]
mov r15, 0xff
shl r15, 0x20
not r15
and rdi, r15
movzx r15, al
shl r15, 0x20
or rdi, r15
=== 6404
mov r8, rdi
push r8
mov rsi, rsp
mov rdi, rdi
=== 6405
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov r12, rdi
movzx r14, r14b
=== 6406
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r12
movabs r14, 0xd53841f2
add r14, 0x6ad128ce; sub
=== 6407
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r10
mov rbp, rsi
=== 6408
mov r12, rbp
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov dl, byte ptr [rcx]
mov rsi, 0xff
shl rsi, 0x38
not rsi
and r12, rsi
movzx rsi, dl
shl rsi, 0x38
or r12, rsi
=== 6409
movabs r8, 0x137b37b0f
push r8
push 0x6a7c645e
push 0x1665636e
push 0x3f98250e
push 0x27877d41
add qword ptr [rsp + 0x20], 0x8d63dd9; input
mov r12, r12
=== 6410
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 21
add rsp, 21
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov r12, r12
movzx rdi, dil
=== 6411
mov rax, rdi
mov r10, 0xffffffff9498c0e3
add r10, 0x6be93862
push r10
mov rsi, r12
mul qword ptr [rsp]
mov r15, rax
=== 6412
mov rbp, rsi
sub rbp, r15
=== 6413
mov r14, rbp
push r14
mov rsi, rsp
mov r15, rbp
=== 6414
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdi
mov r15, r15
movzx rbp, bpl
=== 6415
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x10f65f80f
add rbp, 0x30a37ab1; sub_carry
mov rbp, qword ptr [rbp + 0x40]
add rbp, rbp
mov r10b, byte ptr [rbp]
movzx r10, r10b
shl r10, 8
sub r15, r10
mov r14, r15
movabs rbx, 0x126ac0e84
add rbx, 0x195d5c3c; sub
=== 6416
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_SMALL 64
add rsp, 64
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdx
mov r15, r14
=== 6417
mov r15, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov r12b, byte ptr [rax]
mov r15b, r12b
=== 6418
mov rbx, r15
push rbx
mov rdi, rsp
mov rbp, r15
=== 6419
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov rbp, rbp
movzx rbx, bl
=== 6420
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xc7d660eb
add rdi, 0x783311d5; sub_carry
mov rdi, qword ptr [rdi + 0x1d8]
add rdi, rbx
mov r8b, byte ptr [rdi]
movzx r8, r8b
shl r8, 0x10
sub rbp, r8
movabs rdi, 0xec2cf71b
push rdi
push 0x200346a1
push 0x2f7afa
push 0x3d8b0bee
push 0xe454676
add qword ptr [rsp + 0x20], 0x53dc73a5; sub
mov r13, rbp
=== 6421
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 472
add rsp, 472
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rcx
mov r12, r13
=== 6422
mov r15, r12
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbp
mov dl, byte ptr [rdi]
mov rax, 0xff
shl rax, 8
not rax
and r15, rax
movzx rax, dl
shl rax, 8
or r15, rax
=== 6423
mov rdx, r15
push rdx
mov rbp, rsp
mov rsi, r15
=== 6424
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov r14, rsi
movzx rbx, bl
=== 6425
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x1357b2b70
add r15, 0xa8e4750; sub_carry
mov r15, qword ptr [r15 + 0x18]
add r15, rbx
mov bpl, byte ptr [r15]
movzx rbp, bpl
shl rbp, 0x18
sub r14, rbp
mov rsi, r14
movabs rbx, 0xd6925b61
add rbx, 0x69770f5f; sub
=== 6426
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_SMALL 24
add rsp, 24
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov rsi, rsi
=== 6427
mov rbp, rsi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbp
mov r14b, byte ptr [rcx]
mov r12, 0xff
shl r12, 0x10
not r12
and rbp, r12
movzx r12, r14b
shl r12, 0x10
or rbp, r12
=== 6428
mov r14, rbp
push r14
mov r12, rsp
mov r15, rbp
=== 6429
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov rbx, r15
movzx r14, r14b
=== 6430
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x10cbe58d5
add rcx, 0x334b19eb; sub_carry
mov rcx, qword ptr [rcx + 0x480]
add rcx, r14
mov r13b, byte ptr [rcx]
movzx r13, r13b
shl r13, 0x20
sub rbx, r13
mov r12, rbx
movabs rdi, 0x10d1e41a6
add rdi, 0x32eb291a; sub
=== 6431
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1152
add rsp, 1152
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov rdi, r12
=== 6432
mov rbx, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r15
mov bpl, byte ptr [rcx]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and rbx, rsi
movzx rsi, bpl
shl rsi, 0x18
or rbx, rsi
=== 6433
mov r14, rbx
push r14
mov rbp, rsp
mov rdi, rbx
=== 6434
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov r13, rdi
movzx rbp, bpl
=== 6435
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xcfe36e03
add rdi, 0x702604bd; sub_carry
mov rdi, qword ptr [rdi]
add rdi, rbp
mov r15b, byte ptr [rdi]
movzx r15, r15b
shl r15, 0x30
sub r13, r15
movabs r14, 0xd0d5f3ba
push r14
push 0x29ff4cea
push 0x5c3e1549
push 0x54e47b94
push 0x3e704929
add qword ptr [rsp + 0x20], 0x6f337706; sub
mov r15, r13
=== 6436
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov r12, r15
=== 6437
mov rsi, r12
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov r8b, byte ptr [rax]
mov r13, 0xff
shl r13, 0x28
not r13
and rsi, r13
movzx r13, r8b
shl r13, 0x28
or rsi, r13
=== 6438
mov rdx, rsi
push rdx
mov r14, rsp
mov r15, rsi
=== 6439
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov rsi, r15
movzx r15, r15b
=== 6440
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x12be82062
add r12, 0x1421525e; sub_carry
mov r12, qword ptr [r12 + 0x678]
add r12, r15
mov r13b, byte ptr [r12]
movzx r13, r13b
shl r13, 8
sub rsi, r13
movabs r14, 0x127af0433
push r14
push 0x34a61e24
push 0x34654d2c
push 0x321c5d8a
add qword ptr [rsp + 0x18], 0x185a668d; sub
mov r12, rsi
=== 6441
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1656
add rsp, 1656
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r10
mov r15, r12
=== 6442
mov r13, r15
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rdi
mov dl, byte ptr [rdi]
mov r13b, dl
=== 6443
mov rsi, r13
push rsi
mov r15, rsp
mov rsi, r13
=== 6444
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbx
mov r13, rsi
movzx rsi, sil
=== 6445
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xc6336a4f
add rbp, 0x79d60871; sub_carry
mov rbp, qword ptr [rbp + 0x6b8]
add rbp, rsi
mov dil, byte ptr [rbp]
movzx rdi, dil
shl rdi, 0x10
sub r13, rdi
movabs rbp, 0xd2def988
push rbp
push 0x2eca2b06
push 0x582e341f
push 0xbd25e0a
add qword ptr [rsp + 0x18], 0x6d2a7138; sub
mov r15, r13
=== 6446
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1720
add rsp, 1720
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rcx
mov r13, r15
=== 6447
mov r13, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r14
mov r14b, byte ptr [r15]
mov r15, 0xff
shl r15, 8
not r15
and r13, r15
movzx r15, r14b
shl r15, 8
or r13, r15
=== 6448
mov rax, r13
push rax
mov rbx, rsp
mov rdi, r13
=== 6449
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov r15, rdi
movzx r13, r13b
=== 6450
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xc4cb67a1
add r13, 0x7b3e0b1f; sub_carry
mov r13, qword ptr [r13 + 0x248]
add r13, r13
mov r14b, byte ptr [r13]
movzx r14, r14b
shl r14, 0x18
sub r15, r14
mov rbx, r15
movabs rdi, 0xd15a04c3
add rdi, 0x6eaf65fd; sub
=== 6451
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 584
add rsp, 584
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov rbp, rbx
=== 6452
mov r14, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov r15b, byte ptr [r9]
mov r9, 0xff
shl r9, 0x10
not r9
and r14, r9
movzx r9, r15b
shl r9, 0x10
or r14, r9
=== 6453
mov r14, r14
push r14
mov rsi, rsp
mov r12, r14
=== 6454
mov r12, rsi
mov rbp, r12
push r12
push 0x7cf23453
push 0x3b98147c
push 0x294774a
push 0x5a9f5061
=== 6455
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbx
mov rdi, rbp
movzx rbx, bl
=== 6456
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xc05b5d7f
add r8, 0x7fae1541; sub_carry
mov r8, qword ptr [r8 + 0x318]
add r8, rbx
mov dil, byte ptr [r8]
movzx rdi, dil
shl rdi, 0x20
sub rdi, rdi
mov r14, rdi
movabs r13, 0x110c441f7
add r13, 0x2f4528c9; sub
=== 6457
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 792
add rsp, 792
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r11
mov r12, r14
=== 6458
mov rsi, r12
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov dl, byte ptr [rbp]
mov r12, 0xff
shl r12, 0x18
not r12
and rsi, r12
movzx r12, dl
shl r12, 0x18
or rsi, r12
=== 6459
mov r11, rsi
push r11
mov r12, rsp
mov r14, rsi
=== 6460
mov r8, r12
mov r12, r14
push r8
push 0x4a542219
push 0x674e1e28
push 0x58257f69
=== 6461
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rax
mov r14, r12
movzx rbx, bl
=== 6462
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x112ba3729
add r13, 0x2d4f3b97; sub_carry
mov r13, qword ptr [r13 + 0x7e8]
add r13, rbx
mov dil, byte ptr [r13]
movzx rdi, dil
shl rdi, 0x28
sub r14, rdi
movabs r11, 0x12c583e87
push r11
push 0x363d7046
push 0x6a495322
push 0x19376cc3
add qword ptr [rsp + 0x18], 0x13b12c39; sub
mov r12, r14
=== 6463
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2024
add rsp, 2024
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov r14, r12
=== 6464
mov r14, r14
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r12
mov r13b, byte ptr [rsi]
mov rbp, 0xff
shl rbp, 0x20
not rbp
and r14, rbp
movzx rbp, r13b
shl rbp, 0x20
or r14, rbp
=== 6465
mov rcx, r14
push rcx
mov rbp, rsp
mov rdi, r14
=== 6466
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov r13, rdi
movzx r12, r12b
=== 6467
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x13ba45a99
add r14, 0x4651827; sub_carry
mov r14, qword ptr [r14 + 0x7f8]
add r14, r12
mov r13b, byte ptr [r14]
movzx r13, r13b
shl r13, 0x30
sub r13, r13
movabs rbp, 0xda8c2a60
push rbp
push 0x66ac557c
push 0x2bfb5203
push 0x7c18200d
add qword ptr [rsp + 0x18], 0x657d4060; sub
mov rbx, r13
=== 6468
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov rbx, rbx
=== 6469
mov r12, rbx
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r14
mov sil, byte ptr [rdi]
mov rbx, 0xff
shl rbx, 0x28
not rbx
and r12, rbx
movzx rbx, sil
shl rbx, 0x28
or r12, rbx
=== 6470
mov r14, r12
push r14
mov r12, rsp
mov rsi, r12
=== 6471
mov r8, r12
mov rsi, rsi
push r8
push 0x41a4218f
push 0x27b040eb
push 0x1e17c01
=== 6472
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov r13, rsi
movzx rdi, dil
=== 6473
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x12e9f3c30
add r10, 0x116a3690; sub_carry
mov r10, qword ptr [r10 + 0x7f8]
add r10, rdi
mov dl, byte ptr [r10]
movzx rdx, dl
shl rdx, 0x38
sub r13, rdx
mov r12, r13
movabs r15, 0xe5bb45ed
add r15, 0x5a4e24d3; sub
=== 6474
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov r14, r12
=== 6475
mov r13, r14
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rsi
mov r10b, byte ptr [rsi]
mov r8, 0xff
shl r8, 0x30
not r8
and r13, r8
movzx r8, r10b
shl r8, 0x30
or r13, r8
=== 6476
mov r14, r13
push r14
mov r13, rsp
mov rsi, r13
=== 6477
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbp
mov rsi, rsi
movzx r15, r15b
=== 6478
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rsi
movabs rbp, 0x132a90553
add rbp, 0xd60656d; sub
=== 6479
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r12
mov r12, rbx
=== 6480
mov r15, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov r13b, byte ptr [r11]
mov r9, 0xff
shl r9, 0x38
not r9
and r15, r9
movzx r9, r13b
shl r9, 0x38
or r15, r9
=== 6481
mov r12, r15
push r12
mov r13, rsp
mov rbx, r15
=== 6482
mov rbx, r13
mov rsi, rbx
push rbx
push 0x4a18783f
push 0x406e7d31
push 0x1a4c1dd0
=== 6483
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov r12, rsi
movzx r15, r15b
=== 6484
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xf10d1da8
push rdi
push 0x31c830b5
push 0x204b2e89
push 0x61981b28
push 0x684d341d
add qword ptr [rsp + 0x20], 0x4efc2518
mov rbp, r12
=== 6485
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rdi, rbp
=== 6486
mov rbp, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov r8b, byte ptr [rdx]
mov rdx, 0xff
shl rdx, 8
not rdx
and rbp, rdx
movzx rdx, r8b
shl rdx, 8
or rbp, rdx
=== 6487
mov rsi, rbp
push rsi
mov r15, rsp
mov r13, rbp
=== 6488
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov rbp, r13
movzx rbx, bl
=== 6489
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rbp
movabs r14, 0xf22ef9a2
add r14, 0x4dda491e
=== 6490
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov r13, rbp
=== 6491
mov rbx, r13
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rsi
mov bpl, byte ptr [rdi]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and rbx, rdi
movzx rdi, bpl
shl rdi, 0x18
or rbx, rdi
=== 6492
mov rsi, rbx
push rsi
mov rsi, rsp
mov r14, rbx
=== 6493
mov r13, rsi
mov rdi, r14
push r13
push 0x19405c4e
push 0x39f83998
push 0x57e11fcd
push 0x5e60725e
=== 6494
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbp
mov rsi, rdi
movzx rdi, dil
=== 6495
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rsi
movabs r13, 0xd816253a
add r13, 0x67f31d86
=== 6496
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbx
mov rbx, rdi
=== 6497
mov r12, rbx
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r15
mov bl, byte ptr [rbx]
mov r8, 0xff
shl r8, 0x28
not r8
and r12, r8
movzx r8, bl
shl r8, 0x28
or r12, r8
=== 6498
mov r15, r12
push r15
mov rbp, rsp
mov r15, r12
=== 6499
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov r12, r15
movzx rdi, dil
=== 6500
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xc070280a
push r12
push 0xc2d5786
push 0x16fd0860
push 0x7552c74
push 0x7b006e32
add qword ptr [rsp + 0x20], 0x7f991ab6
mov rbx, r12
=== 6501
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov rdi, rbx
=== 6502
mov rbp, rdi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov r13b, byte ptr [r13]
mov rbx, 0xff
shl rbx, 0x30
not rbx
and rbp, rbx
movzx rbx, r13b
shl rbx, 0x30
or rbp, rbx
=== 6503
mov rbx, rbp
push rbx
mov rsi, rsp
mov r12, rbp
=== 6504
mov r15, rsi
mov rbx, r12
push r15
push 0xc687c75
push 0x687001a1
push 0x3b047f80
=== 6505
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov r14, rbx
movzx r13, r13b
=== 6506
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, r14
movabs r12, 0xfbec27ad
add r12, 0x441d1b13
=== 6507
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov rdi, rdi
=== 6508
mov r15, rdi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov r13b, byte ptr [r10]
mov r14, 0xff
shl r14, 0x38
not r14
and r15, r14
movzx r14, r13b
shl r14, 0x38
or r15, r14
=== 6509
mov r12, r15
movabs r13, 0x10164c9cd
add r13, 0x3e9b4823
test r12, r12
lea rsi, [rip - 0x3d728e]
cmovne rsi, r13
jmp rsi
=== 6510
movabs r13, 0xf74e7c1a
add r13, 0x493b3cce; input
=== 6511
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 10
add rsp, 10
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r13
movzx rbp, bpl
=== 6512
mov rax, rbp
mov r8, 0xfffffffff9789ade
add r8, 0x6da596f
push r8
mul qword ptr [rsp]
mov rsi, rax
=== 6513
mov rax, rsi
push rax
mov r12, rsp
mov r14, rsi
=== 6514
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov rsi, r14
movzx r14, r14b
=== 6515
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rsi
movabs r14, 0x1011f0a65
add r14, 0x3eea405b; xor
=== 6516
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1824
add rsp, 1824
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbp
mov r15, r12
=== 6517
mov rbp, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov r15b, byte ptr [r9]
mov bpl, r15b
=== 6518
mov rbx, rbp
push rbx
mov r13, rsp
mov r15, rbp
=== 6519
mov r10, r13
mov rbp, r15
push r10
push 0x71af2312
push 0x306607ba
push 0x30e364ad
push 0x1c39404c
=== 6520
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov rbx, rbp
movzx rsi, sil
=== 6521
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x107e14115
push r12
push 0x240901e3
push 0xd8802c2
push 0x70b85516
add qword ptr [rsp + 0x18], 0x382809ab; xor
mov r14, rbx
=== 6522
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1664
add rsp, 1664
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov rsi, r14
=== 6523
mov r15, rsi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov cl, byte ptr [rcx]
mov rdi, 0xff
shl rdi, 8
not rdi
and r15, rdi
movzx rdi, cl
shl rdi, 8
or r15, rdi
=== 6524
mov rax, r15
push rax
mov r14, rsp
mov rsi, r15
=== 6525
mov rdx, r14
mov r14, rsi
push rdx
push 0x188d720c
push 0x22b6609b
push 0x2fdd66c7
=== 6526
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov r13, r14
movzx rbx, bl
=== 6527
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r13
movabs rbp, 0x1028bf933
add rbp, 0x3d7d518d; xor
=== 6528
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1432
add rsp, 1432
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rcx
mov r13, rsi
=== 6529
mov r12, r13
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r12
mov al, byte ptr [rbx]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r12, rdi
movzx rdi, al
shl rdi, 0x10
or r12, rdi
=== 6530
mov rdi, r12
push rdi
mov rdi, rsp
mov rbx, r12
=== 6531
mov r12, rdi
mov r15, rbx
push r12
push 0x32bc1f65
push 0x42a354af
push 0x37e4064f
=== 6532
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r9
mov r13, r15
movzx rdi, dil
=== 6533
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r13
movabs r12, 0x11a68d092
add r12, 0x25a07a2e; xor
=== 6534
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 408
add rsp, 408
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdx
mov rbp, r14
=== 6535
mov r12, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov r13b, byte ptr [r8]
mov r8, 0xff
shl r8, 0x18
not r8
and r12, r8
movzx r8, r13b
shl r8, 0x18
or r12, r8
=== 6536
mov r11, r12
push r11
mov r14, rsp
mov rdi, r12
=== 6537
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov r12, rdi
movzx rdi, dil
=== 6538
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r12
movabs r14, 0x13e3efe72
add r14, 0x1ca4c4e; xor
=== 6539
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rsi
mov rsi, r15
=== 6540
mov rbp, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov r15b, byte ptr [r8]
mov r10, 0xff
shl r10, 0x38
not r10
and rbp, r10
movzx r10, r15b
shl r10, 0x38
or rbp, r10
=== 6541
movabs rbx, 0xc52699a6
push rbx
push 0x2fc14b78
push 0x6bff3f7a
push 0x38dd5f14
add qword ptr [rsp + 0x18], 0x7b631f42; input
mov r12, rbp
=== 6542
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 30
add rsp, 30
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r13
mov r14, r12
movzx rbp, bpl
=== 6543
mov rax, rbp
mov rsi, 0xffffffff9d65b0ed
add rsi, 0x63813581
push rsi
mov r13, r14
mul qword ptr [rsp]
mov rdi, rax
=== 6544
mov rbx, r13
xor rbx, rdi
=== 6545
mov r15, rbx
push r15
mov r14, rsp
mov rbp, rbx
=== 6546
mov rbx, r14
mov r14, rbp
push rbx
push 0xf043397
push 0x600a38e2
push 0xedc30bb
push 0x359f773b
=== 6547
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov rdi, r14
movzx rbx, bl
=== 6548
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xea5b2c58
add rdx, 0x55ae4668; sub_carry
mov rdx, qword ptr [rdx + 0x580]
add rdx, rbx
mov bpl, byte ptr [rdx]
movzx rbp, bpl
shl rbp, 8
sub rdi, rbp
mov rdi, rdi
movabs rsi, 0x109d62bd9
add rsi, 0x36333ee7; sub
=== 6549
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1408
add rsp, 1408
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov r14, rdi
=== 6550
mov rsi, r14
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r15
mov cl, byte ptr [rcx]
mov sil, cl
=== 6551
mov rdi, rsi
push rdi
mov r12, rsp
mov rbx, rsi
=== 6552
mov r9, r12
mov r13, rbx
push r9
push 0x3f301237
push 0x2cc003f7
push 0x50b87e7a
push 0x5b4e45e9
=== 6553
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r8
mov r12, r13
movzx rbp, bpl
=== 6554
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xcd6f3745
add rcx, 0x729a3b7b; sub_carry
mov rcx, qword ptr [rcx + 0x3c8]
add rcx, rbp
mov bl, byte ptr [rcx]
movzx rbx, bl
shl rbx, 0x10
sub r12, rbx
mov rdi, r12
movabs rbp, 0xf8d7f2fa
add rbp, 0x473177c6; sub
=== 6555
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 968
add rsp, 968
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov rbp, rdi
=== 6556
mov r14, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov bl, byte ptr [r10]
mov rsi, 0xff
shl rsi, 8
not rsi
and r14, rsi
movzx rsi, bl
shl rsi, 8
or r14, rsi
=== 6557
mov rdi, r14
push rdi
mov rsi, rsp
mov rbx, r14
=== 6558
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r14
mov r12, rbx
movzx rsi, sil
=== 6559
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xed8654c2
add r12, 0x52831dfe; sub_carry
mov r12, qword ptr [r12 + 0x2e8]
add r12, rsi
mov r10b, byte ptr [r12]
movzx r10, r10b
shl r10, 0x18
sub r12, r10
movabs r14, 0x102e5fb5c
push r14
push 0x13d92723
push 0x4b3b2047
push 0x7efc41da
add qword ptr [rsp + 0x18], 0x3d236f64; sub
mov r14, r12
=== 6560
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 744
add rsp, 744
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rsi
mov rdi, r14
=== 6561
mov rbx, rdi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov dil, byte ptr [r9]
mov r11, 0xff
shl r11, 0x10
not r11
and rbx, r11
movzx r11, dil
shl r11, 0x10
or rbx, r11
=== 6562
mov rdx, rbx
push rdx
mov rbp, rsp
mov rbx, rbx
=== 6563
mov r15, rbp
mov r12, rbx
push r15
push 0x8246c2b
push 0xa6e429e
push 0x307925f2
push 0x172322d
=== 6564
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r12, r12
movzx rbx, bl
=== 6565
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xef51442b
add rsi, 0x50b82e95; sub_carry
mov rsi, qword ptr [rsi + 0x138]
add rsi, rbx
mov bpl, byte ptr [rsi]
movzx rbp, bpl
shl rbp, 0x20
sub r12, rbp
mov rbx, r12
movabs r15, 0xfe5c28c2
add r15, 0x41ad41fe; sub
=== 6566
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 312
add rsp, 312
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov r13, rbx
=== 6567
mov rbx, r13
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rdi
mov r14b, byte ptr [r8]
mov r8, 0xff
shl r8, 0x18
not r8
and rbx, r8
movzx r8, r14b
shl r8, 0x18
or rbx, r8
=== 6568
mov r13, rbx
movabs r14, 0x11107a939
add r14, 0x2f820faf; input
=== 6569
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rcx
mov rbx, r13
movzx r13, r13b
=== 6570
mov rax, r13
mov r9, 0xffffffff8fbf25dd
add r9, 0x713a5a3a
push r9
mov r13, rbx
mul qword ptr [rsp]
mov rbx, rax
=== 6571
mov rdi, r13
sub rdi, rbx
=== 6572
mov r13, rdi
push r13
mov r13, rsp
mov r14, rdi
=== 6573
mov r11, r13
mov rsi, r14
push r11
push 0x2a6b6619
push 0x29d62a7f
push 0x7fee390b
push 0x3362617e
=== 6574
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r8
mov rbp, rsi
movzx r13, r13b
=== 6575
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rbp
movabs r13, 0xe7cd491d
add r13, 0x583c01a3; xor
=== 6576
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 232
add rsp, 232
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rsi
mov r13, r12
=== 6577
mov r14, r13
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov r11b, byte ptr [rcx]
mov r14b, r11b
=== 6578
mov r13, r14
push r13
mov r14, rsp
mov r15, r14
=== 6579
mov rax, r14
mov rbp, r15
push rax
push 0x52d04ba6
push 0xc4a6068
push 0x182410d2
push 0x5ba6004a
=== 6580
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov r14, rbp
movzx rbp, bpl
=== 6581
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x1155bdb57
push rdx
push 0x236b0049
push 0x461a5f94
push 0x1ae35e71
add qword ptr [rsp + 0x18], 0x2aad6f69; xor
mov r15, r14
=== 6582
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 864
add rsp, 864
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r13
mov r13, r15
=== 6583
mov rsi, r13
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r14
mov bl, byte ptr [rcx]
mov r13, 0xff
shl r13, 8
not r13
and rsi, r13
movzx r13, bl
shl r13, 8
or rsi, r13
=== 6584
mov rbp, rsi
push rbp
mov r12, rsp
mov r13, rsi
=== 6585
mov r15, r12
mov rsi, r13
push r15
push 0x71e72a46
push 0x252fb6
push 0x75235975
=== 6586
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov r12, rsi
movzx rbp, bpl
=== 6587
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r12
movabs rdi, 0xfbe22f0f
add rdi, 0x44271bb1; xor
=== 6588
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 880
add rsp, 880
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbp
mov r12, r15
=== 6589
mov r13, r12
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r13
mov bpl, byte ptr [rdi]
mov r14, 0xff
shl r14, 0x10
not r14
and r13, r14
movzx r14, bpl
shl r14, 0x10
or r13, r14
=== 6590
mov r15, r13
push r15
mov r14, rsp
mov rsi, r13
=== 6591
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rbx, rsi
movzx r13, r13b
=== 6592
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rbx
movabs r12, 0x1092630e6
add r12, 0x36e319da; xor
=== 6593
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 552
add rsp, 552
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov r14, rsi
=== 6594
mov r13, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbp
mov r11b, byte ptr [r11]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and r13, rcx
movzx rcx, r11b
shl rcx, 0x18
or r13, rcx
=== 6595
mov r13, r13
push r13
mov r12, rsp
mov rbp, r13
=== 6596
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r11
mov r14, rbp
movzx rdi, dil
=== 6597
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r14
movabs r13, 0x1231cfb36
add r13, 0x1cec4f8a; xor
=== 6598
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov rbp, r12
=== 6599
mov rbp, rbp
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov cl, byte ptr [r11]
mov r12, 0xff
shl r12, 0x20
not r12
and rbp, r12
movzx r12, cl
shl r12, 0x20
or rbp, r12
=== 6600
mov rbx, rbp
push rbx
mov r13, rsp
mov r14, rbp
=== 6601
mov rdi, r13
mov rbp, r14
push rdi
push 0xce81530
push 0x727f0a23
push 0x1d131b8
push 0x27d21182
=== 6602
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r15
mov rsi, rbp
movzx rdi, dil
=== 6603
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x1368c097c
push r15
push 0x41504769
push 0x163e1249
push 0x2b984cf1
add qword ptr [rsp + 0x18], 0x97d4144; xor
mov rbx, rsi
=== 6604
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rax
mov r15, rbx
=== 6605
mov r12, r15
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov bpl, byte ptr [r8]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and r12, rdx
movzx rdx, bpl
shl rdx, 0x28
or r12, rdx
=== 6606
mov r13, r12
movabs rdi, 0xfc19479c
add rdi, 0x4470714c; input
=== 6607
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 14
add rsp, 14
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov rbp, r13
movzx rbx, bl
=== 6608
mov rax, rbx
mov r8, 0xffffffff8f738b61
add r8, 0x70c1714f
push r8
mov rsi, rbp
mul qword ptr [rsp]
mov rdi, rax
=== 6609
mov r15, rsi
sub r15, rdi
=== 6610
mov r14, r15
push r14
mov rbx, rsp
mov rsi, r15
=== 6611
mov r12, rbx
mov rdi, rsi
push r12
push 0x1dda70c8
push 0x71e412ce
push 0x481d437b
=== 6612
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r14, rdi
movzx rbx, bl
=== 6613
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x109af48c2
push r13
push 0x62aa1e7b
push 0x2cb73bdc
push 0x24f65bc3
push 0x790137dc
add qword ptr [rsp + 0x20], 0x365a01fe; xor
mov rbx, r14
=== 6614
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1728
add rsp, 1728
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rsi
mov rbx, rbx
=== 6615
mov rbx, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov r12b, byte ptr [rbp]
mov bl, r12b
=== 6616
mov rbx, rbx
push rbx
mov rbp, rsp
mov r13, rbx
=== 6617
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov r14, r13
movzx rbx, bl
=== 6618
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x12334f9bb
push rcx
push 0x282a0b97
push 0x2b08398c
push 0x4eee14de
add qword ptr [rsp + 0x18], 0x1cd45105; xor
mov rbp, r14
=== 6619
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1248
add rsp, 1248
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov r14, rbp
=== 6620
mov rbx, r14
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov r11b, byte ptr [r12]
mov rsi, 0xff
shl rsi, 8
not rsi
and rbx, rsi
movzx rsi, r11b
shl rsi, 8
or rbx, rsi
=== 6621
mov r13, rbx
push r13
mov r12, rsp
mov r14, rbx
=== 6622
mov rdi, r12
mov rsi, r14
push rdi
push 0x688605a8
push 0x4acf46bd
push 0x3c6e08e6
push 0x1c5c512c
=== 6623
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov r12, rsi
movzx rsi, sil
=== 6624
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r12
movabs rdi, 0xcc2841f6
add rdi, 0x73e108ca; xor
=== 6625
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 896
add rsp, 896
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov rsi, rbx
=== 6626
mov rdi, rsi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov dl, byte ptr [r10]
mov rcx, 0xff
shl rcx, 0x10
not rcx
and rdi, rcx
movzx rcx, dl
shl rcx, 0x10
or rdi, rcx
=== 6627
mov rsi, rdi
push rsi
mov r14, rsp
mov rsi, rdi
=== 6628
mov r15, r14
mov rsi, rsi
push r15
push 0x12f823ed
push 0x140032ad
push 0x91659e2
push 0x95d4b8e
=== 6629
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov rbp, rsi
movzx r15, r15b
=== 6630
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x101f4093d
push r14
push 0x413133f
push 0x14502dd3
push 0x5de26c4e
push 0x66e30526
add qword ptr [rsp + 0x20], 0x3e154183; xor
mov r15, rbp
=== 6631
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 320
add rsp, 320
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r14
mov rbp, r15
=== 6632
mov r15, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rdi
mov r9b, byte ptr [r8]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and r15, rdi
movzx rdi, r9b
shl rdi, 0x18
or r15, rdi
=== 6633
mov rbp, r15
push rbp
mov rdi, rsp
mov r13, r15
=== 6634
mov r13, rdi
mov r12, r13
push r13
push 0x6bbb6eb7
push 0x53560f37
push 0x3b2640b2
=== 6635
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov r13, r12
movzx rbx, bl
=== 6636
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x118d31059
push rsi
push 0x44471eef
push 0x466919eb
push 0x150f7d61
push 0x5a0f1e5a
add qword ptr [rsp + 0x20], 0x27363a67; xor
mov rdi, r13
=== 6637
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov rbx, rdi
=== 6638
mov rdi, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r12
mov r9b, byte ptr [rax]
mov rsi, 0xff
shl rsi, 0x20
not rsi
and rdi, rsi
movzx rsi, r9b
shl rsi, 0x20
or rdi, rsi
=== 6639
mov r12, rdi
push r12
mov r14, rsp
mov r12, rdi
=== 6640
mov r14, r14
mov rdi, r12
push r14
push 0x24a162ad
push 0x5f06391f
push 0xfaf2bdc
=== 6641
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov rbp, rdi
movzx r12, r12b
=== 6642
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rbp
movabs rbx, 0xf81a252a
add rbx, 0x47ef2596; xor
=== 6643
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r15
mov rbp, rdi
=== 6644
mov rsi, rbp
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov r10b, byte ptr [r11]
mov rbx, 0xff
shl rbx, 0x30
not rbx
and rsi, rbx
movzx rbx, r10b
shl rbx, 0x30
or rsi, rbx
=== 6645
mov r13, rsi
movabs rbx, 0xeb1b44e4
add rbx, 0x556e7404; input
=== 6646
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov r12, r13
movzx r15, r15b
=== 6647
mov rax, r15
mov r12, 0xffffffffbcd854fa
add r12, 0x437536af
push r12
mov r15, r12
mul qword ptr [rsp]
mov rsi, rax
=== 6648
mov rdi, r15
xor rdi, rsi
=== 6649
mov rdx, rdi
push rdx
mov rdi, rsp
mov r14, rdi
=== 6650
mov r10, rdi
mov rsi, r14
push r10
push 0x7c325f4
push 0x74983c60
push 0x753e5d35
push 0x101f1a07
=== 6651
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov rsi, rsi
movzx r14, r14b
=== 6652
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xc25828d8
add r13, 0x7db139e8; add_carry
mov r13, qword ptr [r13 + 0x298]
add r13, r14
mov r10b, byte ptr [r13]
movzx r10, r10b
shl r10, 8
add rsi, r10
mov r12, rsi
movabs rsi, 0xd4983cf6
add rsi, 0x6b711dca; add
=== 6653
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 664
add rsp, 664
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov r14, r12
=== 6654
mov rbp, r14
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbp
mov dil, byte ptr [rbx]
mov bpl, dil
=== 6655
mov r12, rbp
push r12
mov r15, rsp
mov rbp, rbp
=== 6656
mov r14, r15
mov rbp, rbp
push r14
push 0x47f465a6
push 0x773a6717
push 0x7bbd7f1d
=== 6657
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rax
mov r12, rbp
movzx rsi, sil
=== 6658
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xf42b4a44
add rbp, 0x4bde187c; add_carry
mov rbp, qword ptr [rbp + 0x178]
add rbp, rsi
mov dl, byte ptr [rbp]
movzx rdx, dl
shl rdx, 0x10
add r12, rdx
mov r14, r12
movabs r12, 0xf0104bce
add r12, 0x4ff90ef2; add
=== 6659
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 376
add rsp, 376
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rsi
mov r12, r14
=== 6660
mov rbp, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov r14b, byte ptr [rcx]
mov r9, 0xff
shl r9, 8
not r9
and rbp, r9
movzx r9, r14b
shl r9, 8
or rbp, r9
=== 6661
mov rbx, rbp
push rbx
mov r15, rsp
mov rbp, rbp
=== 6662
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r12
mov rbx, rbp
movzx r14, r14b
=== 6663
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xf2cf4ab0
add rbp, 0x4d3a1810; add_carry
mov rbp, qword ptr [rbp + 0x240]
add rbp, r14
mov bpl, byte ptr [rbp]
movzx rbp, bpl
shl rbp, 0x18
add rbx, rbp
mov rsi, rbx
movabs r15, 0xe639dcd6
add r15, 0x59cf7dea; add
=== 6664
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 576
add rsp, 576
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov r15, rsi
=== 6665
mov rbx, r15
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r12
mov r10b, byte ptr [rdi]
mov rax, 0xff
shl rax, 0x10
not rax
and rbx, rax
movzx rax, r10b
shl rax, 0x10
or rbx, rax
=== 6666
mov r10, rbx
push r10
mov r14, rsp
mov rdi, rbx
=== 6667
mov r15, r14
mov r12, rdi
push r15
push 0x77ed2e89
push 0x30837625
push 0x4e9555c6
push 0x5dda0cc3
=== 6668
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov rbx, r12
movzx rdi, dil
=== 6669
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xdcfb4b1f
add rdx, 0x630e17a1; add_carry
mov rdx, qword ptr [rdx + 0x5a8]
add rdx, rdi
mov r11b, byte ptr [rdx]
movzx r11, r11b
shl r11, 0x20
add rbx, r11
mov rbp, rbx
movabs rbx, 0xecf31d5c
add rbx, 0x53163d64; add
=== 6670
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1448
add rsp, 1448
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r15
mov rbx, rbp
=== 6671
mov r12, rbx
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rdi
mov r14b, byte ptr [r14]
mov r8, 0xff
shl r8, 0x18
not r8
and r12, r8
movzx r8, r14b
shl r8, 0x18
or r12, r8
=== 6672
mov r11, r12
push r11
mov rbx, rsp
mov r15, r12
=== 6673
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r11
mov rbp, r15
movzx r12, r12b
=== 6674
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x103163a9d
add rcx, 0x3cf32823; add_carry
mov rcx, qword ptr [rcx]
add rcx, r12
mov r11b, byte ptr [rcx]
movzx r11, r11b
shl r11, 0x28
add rbp, r11
mov rbp, rbp
movabs r13, 0x13c68197f
add r13, 0x3a14141; add
=== 6675
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov r12, rbp
=== 6676
mov rdi, r12
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rsi
mov r10b, byte ptr [r14]
mov r13, 0xff
shl r13, 0x20
not r13
and rdi, r13
movzx r13, r10b
shl r13, 0x20
or rdi, r13
=== 6677
mov rdx, rdi
push rdx
mov r15, rsp
mov r13, rdi
=== 6678
mov r15, r15
mov rdi, r13
push r15
push 0x339b334e
push 0x10ee6a17
push 0x1ee92c36
push 0x4af671c2
=== 6679
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov r14, rdi
movzx rsi, sil
=== 6680
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xfe065e74
add rax, 0x4203044c; add_carry
mov rax, qword ptr [rax]
add rax, rsi
mov r12b, byte ptr [rax]
movzx r12, r12b
shl r12, 0x38
add r14, r12
movabs rdi, 0x110290cc5
push rdi
push 0x53226501
push 0x411e4665
push 0x17956b1c
add qword ptr [rsp + 0x18], 0x2fe04dfb; add
mov r14, r14
=== 6681
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov rbp, r14
=== 6682
mov r15, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbx
mov r12b, byte ptr [r12]
mov rdx, 0xff
shl rdx, 0x30
not rdx
and r15, rdx
movzx rdx, r12b
shl rdx, 0x30
or r15, rdx
=== 6683
mov rbp, r15
movabs r13, 0xdeb3416e
add r13, 0x61d6777a; input
=== 6684
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 18
add rsp, 18
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r9
mov r15, rbp
movzx r13, r13b
=== 6685
mov rax, r13
mov r12, 0xffffffffe2fe0d9e
add r12, 0x1d6e70f4
push r12
mov r14, r15
mul qword ptr [rsp]
mov r12, rax
=== 6686
mov rdi, r14
xor rdi, r12
=== 6687
mov r11, rdi
push r11
mov r12, rsp
mov rdi, rdi
=== 6688
mov r9, r12
mov rbp, rdi
push r9
push 0x122b0911
push 0x2e07581a
push 0x581512bd
push 0x254122bf
=== 6689
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov rbx, rbp
movzx rsi, sil
=== 6690
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x106424729
add rdi, 0x39c71b97; add_carry
mov rdi, qword ptr [rdi + 0x208]
add rdi, rsi
mov cl, byte ptr [rdi]
movzx rcx, cl
shl rcx, 8
add rbx, rcx
mov rbx, rbx
movabs rbp, 0x110be3f91
add rbp, 0x2f4b1b2f; add
=== 6691
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 520
add rsp, 520
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdx
mov r12, rbx
=== 6692
mov r15, r12
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov sil, byte ptr [r9]
mov r15b, sil
=== 6693
mov rdi, r15
push rdi
mov r13, rsp
mov r15, r15
=== 6694
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov rbx, r15
movzx rbp, bpl
=== 6695
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xf63d2bc0
add r11, 0x49cc3700; add_carry
mov r11, qword ptr [r11 + 0x6b8]
add r11, rbp
mov sil, byte ptr [r11]
movzx rsi, sil
shl rsi, 0x10
add rbx, rsi
mov r13, rbx
movabs rbp, 0x1109a46f3
add rbp, 0x2f6f13cd; add
=== 6696
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1720
add rsp, 1720
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r11
mov r14, r13
=== 6697
mov rbx, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rdi
mov bpl, byte ptr [r13]
mov rdx, 0xff
shl rdx, 8
not rdx
and rbx, rdx
movzx rdx, bpl
shl rdx, 8
or rbx, rdx
=== 6698
mov r10, rbx
push r10
mov rsi, rsp
mov r13, rbx
=== 6699
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r15
mov rbx, r13
movzx rdi, dil
=== 6700
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x113ea576e
add rdi, 0x2c1f0b52; add_carry
mov rdi, qword ptr [rdi + 0x788]
add rdi, rdi
mov dil, byte ptr [rdi]
movzx rdi, dil
shl rdi, 0x18
add rbx, rdi
movabs r8, 0xc4d2df88
push r8
push 0x38a13720
push 0x76dd1990
push 0x72cf0d53
add qword ptr [rsp + 0x18], 0x7b367b38; add
mov r12, rbx
=== 6701
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1928
add rsp, 1928
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r12, r12
=== 6702
mov rsi, r12
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbx
mov r12b, byte ptr [rbx]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and rsi, rbp
movzx rbp, r12b
shl rbp, 0x10
or rsi, rbp
=== 6703
mov r10, rsi
push r10
mov r15, rsp
mov r14, rsi
=== 6704
mov r10, r15
mov r12, r14
push r10
push 0x5cdf7927
push 0x2c17529e
push 0x381b5739
push 0x5dc65616
=== 6705
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rcx
mov rdi, r12
movzx r12, r12b
=== 6706
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x126702001
add rbp, 0x199942bf; add_carry
mov rbp, qword ptr [rbp + 0x150]
add rbp, r12
mov r13b, byte ptr [rbp]
movzx r13, r13b
shl r13, 0x20
add rdi, r13
movabs r12, 0x13f1f1cb7
push r12
push 0x22e358e0
push 0x43d8741c
push 0x71d956dc
add qword ptr [rsp + 0x18], 0xea3e09; add
mov rbx, rdi
=== 6707
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 336
add rsp, 336
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov r12, rbx
=== 6708
mov r14, r12
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov r9b, byte ptr [rax]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r14, rsi
movzx rsi, r9b
shl rsi, 0x18
or r14, rsi
=== 6709
mov rcx, r14
push rcx
mov rdi, rsp
mov r12, r14
=== 6710
mov rbp, rdi
mov rdi, r12
push rbp
push 0x714c6e27
push 0x157831bd
push 0x181b3311
=== 6711
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r15
mov rdi, rdi
movzx r13, r13b
=== 6712
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x13ae3e5d8
add r10, 0x5257ce8; add_carry
mov r10, qword ptr [r10]
add r10, r13
mov dl, byte ptr [r10]
movzx rdx, dl
shl rdx, 0x38
add rdi, rdx
movabs rax, 0x115fa29cc
push rax
push 0xf701c2e
push 0x1eb72f7
push 0x1d0c142a
add qword ptr [rsp + 0x18], 0x2a0f30f4; add
mov rdi, rdi
=== 6713
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov rbp, rdi
=== 6714
mov r14, rbp
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov dl, byte ptr [rbp]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and r14, rsi
movzx rsi, dl
shl rsi, 0x30
or r14, rsi
=== 6715
mov rsi, r14
push rsi
mov r13, rsp
mov r15, r14
=== 6716
mov rcx, r13
mov rbx, r15
push rcx
push 0xb5c41ed
push 0x60f17c4c
push 0x29376f11
=== 6717
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov rdi, rbx
movzx r15, r15b
=== 6718
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xdff247f7
push rbx
push 0x1d6a04d0
push 0x71f793a
push 0x42e102e6
push 0x4bb05cf8
add qword ptr [rsp + 0x20], 0x601712c9; add
mov rbp, rdi
=== 6719
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rsi
mov rsi, rbp
=== 6720
mov rdi, rsi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rdi
mov bl, byte ptr [rdx]
mov r8, 0xff
shl r8, 0x38
not r8
and rdi, r8
movzx r8, bl
shl r8, 0x38
or rdi, r8
=== 6721
movabs rsi, 0x1067576d3
push rsi
push 0x2c63a22
push 0x51290ba1
push 0x1e5a06f5
push 0x5fcf5d02
add qword ptr [rsp + 0x20], 0x3a144215; input
mov rbp, rdi
=== 6722
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 22
add rsp, 22
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov r12, rbp
movzx r13, r13b
=== 6723
mov rax, r13
mov r12, 0xffffffff8e27f75b
add r12, 0x727c79c3
push r12
mov rbx, r12
mul qword ptr [rsp]
mov r14, rax
=== 6724
mov rsi, rbx
add rsi, r14
=== 6725
mov r8, rsi
push r8
mov rsi, rsp
mov r13, rsi
=== 6726
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r8
mov rsi, r13
movzx rbx, bl
=== 6727
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rsi
movabs r13, 0x1155f0e9f
add r13, 0x2aaa3c21; xor
=== 6728
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1968
add rsp, 1968
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov r12, rdi
=== 6729
mov rdi, r12
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov r11b, byte ptr [r8]
mov dil, r11b
=== 6730
mov rbp, rdi
push rbp
mov rsi, rsp
mov r13, rdi
=== 6731
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov rdi, r13
movzx r14, r14b
=== 6732
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x12e42ee76
push r13
push 0x44ac398f
push 0x78f14a5a
push 0x7b57503c
push 0x72de1155
add qword ptr [rsp + 0x20], 0x11c65c4a; xor
mov r13, rdi
=== 6733
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1232
add rsp, 1232
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rax
mov rbp, r13
=== 6734
mov r14, rbp
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r12
mov dil, byte ptr [rdi]
mov r12, 0xff
shl r12, 8
not r12
and r14, r12
movzx r12, dil
shl r12, 8
or r14, r12
=== 6735
mov rdx, r14
push rdx
mov rsi, rsp
mov r13, r14
=== 6736
mov r9, rsi
mov r13, r13
push r9
push 0x920570e
push 0x76eb0847
push 0x48b02226
push 0x1fd013c1
=== 6737
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rsi
mov r12, r13
movzx rbp, bpl
=== 6738
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x1127335f6
push rsi
push 0x29e814ed
push 0x515e2963
push 0x69f7011e
add qword ptr [rsp + 0x18], 0x2d9614ca; xor
mov r13, r12
=== 6739
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1848
add rsp, 1848
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rsi
mov rbx, r13
=== 6740
mov rbp, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov r14b, byte ptr [rcx]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and rbp, rsi
movzx rsi, r14b
shl rsi, 0x10
or rbp, rsi
=== 6741
mov r8, rbp
push r8
mov rbx, rsp
mov rsi, rbp
=== 6742
mov r11, rbx
mov rdi, rsi
push r11
push 0x54e61112
push 0x5c9c5d67
push 0x7b1d16c6
=== 6743
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov rdi, rdi
movzx r14, r14b
=== 6744
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rdi
movabs r14, 0x126654337
add r14, 0x19a40789; xor
=== 6745
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 272
add rsp, 272
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r10
mov r14, rbp
=== 6746
mov rsi, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r15
mov bpl, byte ptr [rdi]
mov rax, 0xff
shl rax, 0x18
not rax
and rsi, rax
movzx rax, bpl
shl rax, 0x18
or rsi, rax
=== 6747
mov rbp, rsi
push rbp
mov rbp, rsp
mov rsi, rsi
=== 6748
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r13
mov r12, rsi
movzx r13, r13b
=== 6749
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r12
movabs r14, 0xfa5ad781
add r14, 0x45ae733f; xor
=== 6750
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov r12, r15
=== 6751
mov r15, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov dil, byte ptr [r10]
mov rsi, 0xff
shl rsi, 0x20
not rsi
and r15, rsi
movzx rsi, dil
shl rsi, 0x20
or r15, rsi
=== 6752
mov rax, r15
push rax
mov rbx, rsp
mov r14, r15
=== 6753
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov r14, r14
movzx r12, r12b
=== 6754
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x11e8d2375
push r12
push 0x36fa4761
push 0x28502845
push 0x37c92fe0
push 0x7cd27ad6
add qword ptr [rsp + 0x20], 0x217c274b; xor
mov rsi, r14
=== 6755
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r11
mov r12, rsi
=== 6756
mov rbx, r12
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r13
mov sil, byte ptr [r12]
mov r11, 0xff
shl r11, 0x28
not r11
and rbx, r11
movzx r11, sil
shl r11, 0x28
or rbx, r11
=== 6757
mov r15, rbx
push r15
mov r14, rsp
mov rbp, rbx
=== 6758
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbx
mov r15, rbp
movzx rbx, bl
=== 6759
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x13172e08b
push r14
push 0x4c293c15
push 0x27af58e7
push 0x39f11883
add qword ptr [rsp + 0x18], 0xe966a35; xor
mov rbx, r15
=== 6760
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov rdi, rbx
=== 6761
mov rbx, rdi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r12
mov bpl, byte ptr [rbp]
mov r15, 0xff
shl r15, 0x30
not r15
and rbx, r15
movzx r15, bpl
shl r15, 0x30
or rbx, r15
=== 6762
mov rdi, rbx
push rdi
mov r12, rsp
mov rdi, rbx
=== 6763
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r13
mov r12, rdi
movzx r14, r14b
=== 6764
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r12
movabs rbp, 0x108b7e004
add rbp, 0x37516abc; xor
=== 6765
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov rsi, r14
=== 6766
mov r13, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov r11b, byte ptr [r14]
mov rbp, 0xff
shl rbp, 0x38
not rbp
and r13, rbp
movzx rbp, r11b
shl rbp, 0x38
or r13, rbp
=== 6767
mov rdi, r13
movabs rbp, 0x111089c20
add rbp, 0x2f811cc8; input
=== 6768
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 26
add rsp, 26
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov rbx, rdi
movzx rbp, bpl
=== 6769
mov rax, rbp
mov r14, 0xffffffffc1976a14
add r14, 0x3e9c6960
push r14
mov rbx, rbx
mul qword ptr [rsp]
mov rsi, rax
=== 6770
mov r14, rbx
add r14, rsi
=== 6771
mov r14, r14
push r14
mov rsi, rsp
mov rbx, r14
=== 6772
mov r11, rsi
mov rdi, rbx
push r11
push 0x7b7c7bb4
push 0x25555a8c
push 0xa3d437a
=== 6773
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov r12, rdi
movzx r14, r14b
=== 6774
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xf9560efb
add rsi, 0x46b363c5; sub_carry
mov rsi, qword ptr [rsi + 0x70]
add rsi, r14
mov dil, byte ptr [rsi]
movzx rdi, dil
shl rdi, 8
sub r12, rdi
movabs r11, 0xc91aed92
push r11
push 0x37df0547
push 0x2e8955dc
push 0x58a750c8
push 0x34661599
add qword ptr [rsp + 0x20], 0x76ee7d2e; sub
mov r13, r12
=== 6775
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_SMALL 112
add rsp, 112
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbx
mov rdi, r13
=== 6776
mov rdi, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov r10b, byte ptr [rdx]
mov dil, r10b
=== 6777
mov rbx, rdi
push rbx
mov r13, rsp
mov r14, rdi
=== 6778
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r12
mov rdi, r14
movzx r14, r14b
=== 6779
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x12c1900bb
add r13, 0x13f07205; sub_carry
mov r13, qword ptr [r13 + 0x7e0]
add r13, r14
mov r10b, byte ptr [r13]
movzx r10, r10b
shl r10, 0x10
sub rdi, r10
movabs rbp, 0x11e380324
push rbp
push 0x60204f12
push 0x25161d38
push 0x46086039
push 0x5d1237b4
add qword ptr [rsp + 0x20], 0x21d1679c; sub
mov r15, rdi
=== 6780
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2016
add rsp, 2016
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdi
mov rbp, r15
=== 6781
mov r14, rbp
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbx
mov r11b, byte ptr [rbp]
mov r8, 0xff
shl r8, 8
not r8
and r14, r8
movzx r8, r11b
shl r8, 8
or r14, r8
=== 6782
mov r12, r14
push r12
mov rsi, rsp
mov r14, r14
=== 6783
mov r12, rsi
mov r13, r14
push r12
push 0x3c2a39d3
push 0x6a87011e
push 0x137b70ef
=== 6784
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov rsi, r13
movzx rbx, bl
=== 6785
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xd5d17032
add rsi, 0x6a38028e; sub_carry
mov rsi, qword ptr [rsi + 0x3f0]
add rsi, rbx
mov dil, byte ptr [rsi]
movzx rdi, dil
shl rdi, 0x18
sub rsi, rdi
movabs rbp, 0xc2973922
push rbp
push 0x315d635c
push 0x5ffc7451
push 0x4c700d14
add qword ptr [rsp + 0x18], 0x7d72319e; sub
mov r12, rsi
=== 6786
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1008
add rsp, 1008
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbx
mov r13, r12
=== 6787
mov r14, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov bpl, byte ptr [r15]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and r14, rbx
movzx rbx, bpl
shl rbx, 0x10
or r14, rbx
=== 6788
mov r14, r14
push r14
mov r14, rsp
mov r12, r14
=== 6789
mov rdx, r14
mov rsi, r12
push rdx
push 0x13d85c28
push 0x144d3201
push 0x5c4051c3
push 0x2b4944b6
=== 6790
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdi
mov rsi, rsi
movzx rbp, bpl
=== 6791
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xeeef5e10
add rcx, 0x511a14b0; sub_carry
mov rcx, qword ptr [rcx + 0x88]
add rcx, rbp
mov r8b, byte ptr [rcx]
movzx r8, r8b
shl r8, 0x20
sub rsi, r8
mov rdi, rsi
movabs rsi, 0xde9c5774
add rsi, 0x616d134c; sub
=== 6792
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 136
add rsp, 136
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov r14, rdi
=== 6793
mov rbx, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r15
mov dil, byte ptr [rdi]
mov r14, 0xff
shl r14, 0x18
not r14
and rbx, r14
movzx r14, dil
shl r14, 0x18
or rbx, r14
=== 6794
mov r14, rbx
push r14
mov rsi, rsp
mov rdi, rbx
=== 6795
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov r12, rdi
movzx r13, r13b
=== 6796
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x1066c073c
add r10, 0x399d6b84; sub_carry
mov r10, qword ptr [r10]
add r10, r13
mov dil, byte ptr [r10]
movzx rdi, dil
shl rdi, 0x28
sub r12, rdi
movabs rdi, 0x1230758f7
push rdi
push 0x4d0704a5
push 0x411a6475
push 0x2987244b
add qword ptr [rsp + 0x18], 0x1d0211c9; sub
mov r13, r12
=== 6797
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rax
mov rbp, r13
=== 6798
mov r13, rbp
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbx
mov r9b, byte ptr [rbp]
mov r10, 0xff
shl r10, 0x20
not r10
and r13, r10
movzx r10, r9b
shl r10, 0x20
or r13, r10
=== 6799
mov rdx, r13
push rdx
mov r12, rsp
mov r15, r13
=== 6800
mov r13, r12
mov rsi, r15
push r13
push 0x7d0b0135
push 0x31296799
push 0x76c0e7c
push 0x12bb011b
=== 6801
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbp
mov r13, rsi
movzx rsi, sil
=== 6802
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xf5744efb
add r8, 0x4a9523c5; sub_carry
mov r8, qword ptr [r8]
add r8, rsi
mov dl, byte ptr [r8]
movzx rdx, dl
shl rdx, 0x30
sub r13, rdx
movabs r10, 0x1273a503d
push r10
push 0x7a893204
push 0x2641333e
push 0x2be439ff
push 0x380e0e81
add qword ptr [rsp + 0x20], 0x18cf1a83; sub
mov rdi, r13
=== 6803
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rax
mov rdi, rdi
=== 6804
mov rbp, rdi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbx
mov r15b, byte ptr [rsi]
mov rsi, 0xff
shl rsi, 0x28
not rsi
and rbp, rsi
movzx rsi, r15b
shl rsi, 0x28
or rbp, rsi
=== 6805
mov r14, rbp
push r14
mov rsi, rsp
mov r12, rbp
=== 6806
mov r13, rsi
mov rbp, r12
push r13
push 0x58bd791d
push 0x48c83f7f
push 0x364b48f3
=== 6807
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov rbp, rbp
movzx rbx, bl
=== 6808
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x139c11cd2
add rbx, 0x64855ee; sub_carry
mov rbx, qword ptr [rbx]
add rbx, rbx
mov bl, byte ptr [rbx]
movzx rbx, bl
shl rbx, 0x38
sub rbp, rbx
mov rdi, rbp
movabs rbx, 0xf38e19d1
add rbx, 0x4c7b50ef; sub
=== 6809
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdx
mov rdi, rdi
=== 6810
mov rbx, rdi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r15
mov r15b, byte ptr [r10]
mov r13, 0xff
shl r13, 0x30
not r13
and rbx, r13
movzx r13, r15b
shl r13, 0x30
or rbx, r13
=== 6811
mov rax, rbx
push rax
mov r15, rsp
mov r13, rbx
=== 6812
mov r9, r15
mov r13, r13
push r9
push 0x44b834b8
push 0x7dcd1831
push 0x3a6f2d91
=== 6813
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov r12, r13
movzx r13, r13b
=== 6814
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x11b631fe6
push r15
push 0x78f712fc
push 0x6039077d
push 0x7dc03809
push 0x9dc31d0
add qword ptr [rsp + 0x20], 0x24a64ada; sub
mov r13, r12
=== 6815
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbp
mov r15, r13
=== 6816
mov r15, r15
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov bpl, byte ptr [r13]
mov rcx, 0xff
shl rcx, 0x38
not rcx
and r15, rcx
movzx rcx, bpl
shl rcx, 0x38
or r15, rcx
=== 6817
mov rsi, r15
push rsi
mov r14, rsp
mov rdi, r15
=== 6818
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov r13, rdi
movzx rsi, sil
=== 6819
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xfe131c65
add rbp, 0x41f6565b; sub_carry
mov rbp, qword ptr [rbp + 0x470]
add rbp, rsi
mov dl, byte ptr [rbp]
movzx rdx, dl
shl rdx, 8
sub r13, rdx
movabs rsi, 0x11a5b1e2a
push rsi
push 0x5d277f8e
push 0x17b6729b
push 0x2cb76775
push 0x6cf34824
add qword ptr [rsp + 0x20], 0x25ae4c96; sub
mov r14, r13
=== 6820
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1136
add rsp, 1136
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov r13, r14
=== 6821
mov r12, r13
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov sil, byte ptr [r8]
mov r12b, sil
=== 6822
mov rax, r12
push rax
mov r15, rsp
mov r12, r12
=== 6823
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbx
mov r12, r12
movzx rbx, bl
=== 6824
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xcf704fbd
add rbp, 0x70992303; sub_carry
mov rbp, qword ptr [rbp + 0x218]
add rbp, rbx
mov sil, byte ptr [rbp]
movzx rsi, sil
shl rsi, 0x10
sub r12, rsi
mov rdi, r12
movabs r13, 0x1379bf4ad
a
d
d
 
r
1
3
,
 
0
x
8
6
d
7
6
1
3
=== 6825
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 536
add rsp, 536
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r11
mov rdi, rdi
=== 6826
mov rbp, rdi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov al, byte ptr [r9]
mov r9, 0xff
shl r9, 8
not r9
and rbp, r9
movzx r9, al
shl r9, 8
or rbp, r9
=== 6827
mov r8, rbp
push r8
mov r12, rsp
mov rsi, rbp
=== 6828
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbx
mov rbx, rsi
movzx r14, r14b
=== 6829
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xc76633d5
add rcx, 0x78a33eeb; sub_carry
mov rcx, qword ptr [rcx + 0x3c8]
add rcx, r14
mov bpl, byte ptr [rcx]
movzx rbp, bpl
shl rbp, 0x18
sub rbx, rbp
mov rdi, rbx
movabs rbx, 0x10e795863
add rbx, 0x3190125d; sub
=== 6830
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 968
add rsp, 968
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov rsi, rdi
=== 6831
mov r12, rsi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov bpl, byte ptr [r15]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and r12, rsi
movzx rsi, bpl
shl rsi, 0x10
or r12, rsi
=== 6832
mov rdx, r12
push rdx
mov r13, rsp
mov rbp, r12
=== 6833
mov rsi, r13
mov rbx, rbp
push rsi
push 0x68a033b2
push 0x30527826
push 0x6ef73e86
=== 6834
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov rdi, rbx
movzx r15, r15b
=== 6835
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xd940333a
add rbp, 0x66c93f86; sub_carry
mov rbp, qword ptr [rbp + 0x498]
add rbp, r15
mov cl, byte ptr [rbp]
movzx rcx, cl
shl rcx, 0x20
sub rdi, rcx
mov rbx, rdi
movabs rbp, 0xdf9318a1
add rbp, 0x6076521f; sub
=== 6836
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1176
add rsp, 1176
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r10
mov r12, rbx
=== 6837
mov r15, r12
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov sil, byte ptr [rax]
mov rbx, 0xff
shl rbx, 0x18
not rbx
and r15, rbx
movzx rbx, sil
shl rbx, 0x18
or r15, rbx
=== 6838
mov rbp, r15
push rbp
mov r13, rsp
mov r15, r15
=== 6839
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r12
mov r15, r15
movzx r14, r14b
=== 6840
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x1190d0beb
push rbp
push 0x65615152
push 0xe4125b0
push 0x16983b41
add qword ptr [rsp + 0x18], 0x26fc36d5
mov rbp, r15
=== 6841
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov rsi, rbp
=== 6842
mov rbx, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbx
mov cl, byte ptr [r14]
mov bl, cl
=== 6843
mov rdi, rbx
push rdi
mov r12, rsp
mov r15, rbx
=== 6844
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r14
mov r12, r15
movzx rdi, dil
=== 6845
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xcafb2a9e
push r10
push 0x6ee7143
push 0x2fd91d7a
push 0x18aa20a8
push 0x21dc39bf
add qword ptr [rsp + 0x20], 0x750e1822
mov rsi, r12
=== 6846
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov r14, rsi
=== 6847
mov rsi, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r13
mov al, byte ptr [r8]
mov r13, 0xff
shl r13, 8
not r13
and rsi, r13
movzx r13, al
shl r13, 8
or rsi, r13
=== 6848
mov rdx, rsi
push rdx
mov r12, rsp
mov rbp, rsi
=== 6849
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov r12, rbp
movzx r14, r14b
=== 6850
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xc44f1964
push rax
push 0x7de371ac
push 0x76772f86
push 0x224b320a
push 0x469174fc
add qword ptr [rsp + 0x20], 0x7bba295c
mov rbp, r12
=== 6851
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r15
mov rbp, rbp
=== 6852
mov r13, rbp
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r12
mov bpl, byte ptr [rdi]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r13, rdi
movzx rdi, bpl
shl rdi, 0x10
or r13, rdi
=== 6853
mov r8, r13
push r8
mov rbx, rsp
mov rdi, r13
=== 6854
mov r13, rbx
mov rsi, rdi
push r13
push 0x69560bf0
push 0x29aa7524
push 0x2a54787a
=== 6855
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov r13, rsi
movzx rbp, bpl
=== 6856
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xefa1d8a6
push r8
push 0x65e07b35
push 0x50b1180b
push 0x1058083c
push 0x40f30ab1
add qword ptr [rsp + 0x20], 0x50676a1a
mov r12, r13
=== 6857
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdi
mov rdi, r12
=== 6858
mov rbp, rdi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov dl, byte ptr [r15]
mov rbx, 0xff
shl rbx, 0x30
not rbx
and rbp, rbx
movzx rbx, dl
shl rbx, 0x30
or rbp, rbx
=== 6859
mov rax, rbp
push rax
mov r13, rsp
mov rdi, rbp
=== 6860
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r11
mov rdi, rdi
movzx rbx, bl
=== 6861
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rdi
movabs rbp, 0x1243dcd48
add rbp, 0x1bcb7578
=== 6862
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r15
mov r12, r13
=== 6863
mov r13, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov dil, byte ptr [r15]
mov rcx, 0xff
shl rcx, 0x38
not rcx
and r13, rcx
movzx rcx, dil
shl rcx, 0x38
or r13, rcx
=== 6864
mov r12, r13
movabs rsi, 0xdbfbcd05
add rsi, 0x640444eb
test r12, r12
lea rdi, [rip - 0x3e39ec]
cmovne rdi, rsi
jmp rdi
=== 6865
movabs r8, 0x1018e9bea
push r8
push 0x3ec85b22
push 0x78a9703a
push 0x494a333d
add qword ptr [rsp + 0x18], 0x3efb1cfe; input
=== 6866
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 27
add rsp, 27
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
movzx rbx, bl
=== 6867
mov rax, rbx
mov r8, 0xffffffff944975e1
add r8, 0x6c1c3656
push r8
mul qword ptr [rsp]
mov r14, rax
=== 6868
mov r11, r14
push r11
mov r15, rsp
mov r14, r14
=== 6869
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r15
mov r12, r14
movzx rbp, bpl
=== 6870
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x12cca4b99
add r8, 0x133f1727; add_carry
mov r8, qword ptr [r8 + 0x580]
add r8, rbp
mov bl, byte ptr [r8]
movzx rbx, bl
shl rbx, 8
add r12, rbx
movabs r12, 0x130ed4fde
push r12
push 0x10772638
push 0x1dfe3235
push 0x5e5b504a
push 0x3c392ba8
add qword ptr [rsp + 0x20], 0xf1c0ae2; add
mov rbx, r12
=== 6871
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1408
add rsp, 1408
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdi
mov r12, rbx
=== 6872
mov rbx, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov r10b, byte ptr [r15]
mov bl, r10b
=== 6873
mov rdx, rbx
push rdx
mov r12, rsp
mov r13, rbx
=== 6874
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdi
mov r12, r13
movzx rdi, dil
=== 6875
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x13bbdf3c1
add r14, 0x44b6eff; add_carry
mov r14, qword ptr [r14 + 0x430]
add r14, rdi
mov dil, byte ptr [r14]
movzx rdi, dil
shl rdi, 0x10
add r12, rdi
mov rsi, r12
movabs rbp, 0x10879495b
add rbp, 0x37901165; add
=== 6876
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1072
add rsp, 1072
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r14
mov r14, rsi
=== 6877
mov rbp, r14
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov r11b, byte ptr [r12]
mov r9, 0xff
shl r9, 8
not r9
and rbp, r9
movzx r9, r11b
shl r9, 8
or rbp, r9
=== 6878
mov rdi, rbp
push rdi
mov rdi, rsp
mov rsi, rbp
=== 6879
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov r14, rsi
movzx rbx, bl
=== 6880
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x128081f34
add r8, 0x1801438c; add_carry
mov r8, qword ptr [r8 + 0x728]
add r8, rbx
mov al, byte ptr [r8]
movzx rax, al
shl rax, 0x18
add r14, rax
movabs r14, 0x12c9d11cd
push r14
push 0x1fdc72b8
push 0xa861c9
push 0x70297406
add qword ptr [rsp + 0x18], 0x136c48f3; add
mov r14, r14
=== 6881
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1832
add rsp, 1832
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r8
mov rbp, r14
=== 6882
mov r15, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov dl, byte ptr [rdx]
mov r11, 0xff
shl r11, 0x10
not r11
and r15, r11
movzx r11, dl
shl r11, 0x10
or r15, r11
=== 6883
mov r12, r15
push r12
mov rdi, rsp
mov r13, r15
=== 6884
mov r8, rdi
mov r14, r13
push r8
push 0x2b504bfb
push 0x30926733
push 0x7cb87d4f
=== 6885
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov rdi, r14
movzx r13, r13b
=== 6886
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x12e2d4273
add r8, 0x11dc204d; add_carry
mov r8, qword ptr [r8 + 0xa8]
add r8, r13
mov r14b, byte ptr [r8]
movzx r14, r14b
shl r14, 0x20
add rdi, r14
mov r13, rdi
movabs rbp, 0x11cea0d95
add rbp, 0x231f4d2b; add
=== 6887
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 168
add rsp, 168
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov r15, r13
=== 6888
mov r13, r15
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov dil, byte ptr [r10]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and r13, rcx
movzx rcx, dil
shl rcx, 0x18
or r13, rcx
=== 6889
mov rcx, r13
push rcx
mov r15, rsp
mov rdi, r13
=== 6890
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov r15, rdi
movzx r13, r13b
=== 6891
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x1074d1232
add rbx, 0x38bc508e; add_carry
mov rbx, qword ptr [rbx]
add rbx, r13
mov bl, byte ptr [rbx]
movzx rbx, bl
shl rbx, 0x30
add r15, rbx
movabs rbp, 0xcd12241c
push rbp
push 0x31dd3ac9
push 0x4cf45232
push 0x78324420
add qword ptr [rsp + 0x18], 0x72f736a4; add
mov rbp, r15
=== 6892
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdi
mov r15, rbp
=== 6893
mov r13, r15
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r14
mov r8b, byte ptr [r11]
mov rax, 0xff
shl rax, 0x28
not rax
and r13, rax
movzx rax, r8b
shl rax, 0x28
or r13, rax
=== 6894
mov rax, r13
push rax
mov r15, rsp
mov rsi, r13
=== 6895
mov r14, r15
mov rbp, rsi
push r14
push 0x183844e4
push 0x79190a24
push 0x243f04bb
push 0x3ff823fc
=== 6896
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r8
mov r14, rbp
movzx rbx, bl
=== 6897
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xdacce85e
push r8
push 0x21d94ef8
push 0x6ada3427
push 0x39c71298
push 0x608f5b83
add qword ptr [rsp + 0x20], 0x653c7262; add
mov r14, r14
=== 6898
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov r12, r14
=== 6899
mov r12, r12
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbp
mov r14b, byte ptr [rdi]
mov r11, 0xff
shl r11, 0x38
not r11
and r12, r11
movzx r11, r14b
shl r11, 0x38
or r12, r11
=== 6900
movabs rax, 0x12c21a73a
push rax
push 0x7de4523c
push 0x5d7065f0
push 0x457755f9
add qword ptr [rsp + 0x18], 0x146811ae; input
mov r14, r12
=== 6901
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 31
add rsp, 31
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r13
mov r15, r14
movzx r14, r14b
=== 6902
mov rax, r14
mov r13, 0xffffffffdfd9a3dc
add r13, 0x20ed3a04
push r13
mov r14, r15
mul qword ptr [rsp]
mov rbp, rax
=== 6903
mov r14, r14
xor r14, rbp
=== 6904
mov rdx, r14
push rdx
mov r13, rsp
mov r12, r14
=== 6905
mov r8, r13
mov rbx, r12
push r8
push 0x7d936499
push 0x15a76271
push 0x60a04304
=== 6906
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov r13, rbx
movzx rbx, bl
=== 6907
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r13
movabs r13, 0x103f91f43
add r13, 0x3c102b7d; xor
=== 6908
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1696
add rsp, 1696
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r11
mov rbp, r12
=== 6909
mov rdi, rbp
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov r13b, byte ptr [rcx]
mov dil, r13b
=== 6910
mov r10, rdi
push r10
mov rbp, rsp
mov r15, rdi
=== 6911
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r11
mov r13, r15
movzx r12, r12b
=== 6912
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r13
movabs r13, 0x109024983
add r13, 0x3707013d; xor
=== 6913
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1616
add rsp, 1616
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov r15, rbx
=== 6914
mov r15, r15
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov r14b, byte ptr [r8]
mov r11, 0xff
shl r11, 8
not r11
and r15, r11
movzx r11, r14b
shl r11, 8
or r15, r11
=== 6915
mov rbp, r15
push rbp
mov r12, rsp
mov r14, r15
=== 6916
mov r14, r12
mov rsi, r14
push r14
push 0x6f65794d
push 0xeec6c0f
push 0x1d6c7ab5
push 0x3bae7551
=== 6917
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov r12, rsi
movzx r15, r15b
=== 6918
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r12
movabs r15, 0x122602e19
add r15, 0x1da91ca7; xor
=== 6919
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 672
add rsp, 672
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r13
mov rbx, rsi
=== 6920
mov rsi, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r13
mov r13b, byte ptr [r8]
mov r14, 0xff
shl r14, 0x10
not r14
and rsi, r14
movzx r14, r13b
shl r14, 0x10
or rsi, r14
=== 6921
mov r8, rsi
push r8
mov rbx, rsp
mov rdi, rsi
=== 6922
mov r15, rbx
mov rsi, rdi
push r15
push 0x4c62f74
push 0x4511353a
push 0x108d5aa6
push 0x1a7d162d
=== 6923
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbp
mov r15, rsi
movzx rsi, sil
=== 6924
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r15
movabs r14, 0xec65f596
add r14, 0x53a3552a; xor
=== 6925
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 280
add rsp, 280
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov r14, rbp
=== 6926
mov rsi, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov al, byte ptr [r8]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and rsi, rbp
movzx rbp, al
shl rbp, 0x18
or rsi, rbp
=== 6927
mov rbp, rsi
push rbp
mov r14, rsp
mov rdi, rsi
=== 6928
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov rbx, rdi
movzx rbp, bpl
=== 6929
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rbx
movabs rbp, 0xd06fde25
add rbp, 0x6f996c9b; xor
=== 6930
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdx
mov r15, rbx
=== 6931
mov r15, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r13
mov r8b, byte ptr [rcx]
mov r9, 0xff
shl r9, 0x28
not r9
and r15, r9
movzx r9, r8b
shl r9, 0x28
or r15, r9
=== 6932
mov r10, r15
push r10
mov r14, rsp
mov r13, r15
=== 6933
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r8
mov r14, r13
movzx rbp, bpl
=== 6934
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r14
movabs r13, 0xff5d3109
add r13, 0x40ac19b7; xor
=== 6935
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rbp, rbp
=== 6936
mov r14, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r13
mov r13b, byte ptr [r8]
mov rax, 0xff
shl rax, 0x30
not rax
and r14, rax
movzx rax, r13b
shl rax, 0x30
or r14, rax
=== 6937
mov rax, r14
push rax
mov r14, rsp
mov rdi, r14
=== 6938
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov r12, rdi
movzx r14, r14b
=== 6939
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xf4f1230a
push rbx
push 0x6257763e
push 0x58870d1d
push 0x23820846
push 0x38440e73
add qword ptr [rsp + 0x20], 0x4b1827b6; xor
mov r13, r12
=== 6940
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdi
mov rsi, r13
=== 6941
mov r13, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov dl, byte ptr [r14]
mov r11, 0xff
shl r11, 0x38
not r11
and r13, r11
movzx r11, dl
shl r11, 0x38
or r13, r11
=== 6942
mov r14, r13
movabs r13, 0x121fc405c
add r13, 0x1e8d788c; input
=== 6943
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 15
add rsp, 15
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov r12, r14
movzx rbp, bpl
=== 6944
mov rax, rbp
mov r15, 0xffffffffe1bed205
add r15, 0x1e5678b8
push r15
mov r12, r12
mul qword ptr [rsp]
mov r13, rax
=== 6945
mov r13, r12
xor r13, r13
=== 6946
mov rbx, r13
push rbx
mov rbx, rsp
mov r12, r13
=== 6947
mov r9, rbx
mov r14, r12
push r9
push 0x74465754
push 0x595332
push 0x30a7198d
=== 6948
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov rsi, r14
movzx r13, r13b
=== 6949
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xce86d06d
push rdx
push 0x407a6445
push 0x7fa1160f
push 0x4a3a492b
add qword ptr [rsp + 0x18], 0x71827a53; xor
mov r12, rsi
=== 6950
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1704
add rsp, 1704
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov r14, r12
=== 6951
mov r12, r14
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r12
mov al, byte ptr [r14]
mov r12b, al
=== 6952
mov r12, r12
push r12
mov r15, rsp
mov rsi, r12
=== 6953
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov r15, rsi
movzx rsi, sil
=== 6954
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r15
movabs rbx, 0xe7d82b0f
add rbx, 0x58311fb1; xor
=== 6955
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1016
add rsp, 1016
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r11
mov rdi, rbp
=== 6956
mov rsi, rdi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov r8b, byte ptr [r9]
mov rdi, 0xff
shl rdi, 8
not rdi
and rsi, rdi
movzx rdi, r8b
shl rdi, 8
or rsi, rdi
=== 6957
mov r12, rsi
push r12
mov rbp, rsp
mov rsi, rsi
=== 6958
mov rbx, rbp
mov r12, rsi
push rbx
push 0x2aa87c84
push 0x30424244
push 0x23043703
push 0x456e296e
=== 6959
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov r12, r12
movzx r14, r14b
=== 6960
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r12
movabs r12, 0x1117bdfb8
add r12, 0x2e8d6b08; xor
=== 6961
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1832
add rsp, 1832
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r10
mov r12, rbp
=== 6962
mov r12, r12
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rsi
mov r14b, byte ptr [r14]
mov r8, 0xff
shl r8, 0x10
not r8
and r12, r8
movzx r8, r14b
shl r8, 0x10
or r12, r8
=== 6963
mov r8, r12
push r8
mov r12, rsp
mov r13, r12
=== 6964
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov r12, r13
movzx rbx, bl
=== 6965
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r12
movabs rbx, 0x134f8e769
add rbx, 0xb106357; xor
=== 6966
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2032
add rsp, 2032
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov r13, r15
=== 6967
mov rdi, r13
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov r9b, byte ptr [rdx]
mov r15, 0xff
shl r15, 0x18
not r15
and rdi, r15
movzx r15, r9b
shl r15, 0x18
or rdi, r15
=== 6968
mov r8, rdi
push r8
mov r15, rsp
mov r13, rdi
=== 6969
mov r12, r15
mov rsi, r13
push r12
push 0x52d449cf
push 0x6b8805f1
push 0x5f7a41ab
=== 6970
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov rdi, rsi
movzx r15, r15b
=== 6971
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x11dc712e1
push r10
push 0x2f924d09
push 0x1a543d4b
push 0x7a1b3e0d
add qword ptr [rsp + 0x18], 0x224237df; xor
mov rsi, rdi
=== 6972
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdx
mov r13, rsi
=== 6973
mov r12, r13
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r15
mov cl, byte ptr [r9]
mov r14, 0xff
shl r14, 0x38
not r14
and r12, r14
movzx r14, cl
shl r14, 0x38
or r12, r14
=== 6974
mov rsi, r12
movabs rdi, 0x11a30ad3d
add rdi, 0x26590bab; input
=== 6975
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 19
add rsp, 19
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rcx
mov rbp, rsi
movzx r13, r13b
=== 6976
mov rax, r13
mov r13, 0xffffffffd6a2773c
add r13, 0x2a036d2b
push r13
mov r12, rbp
mul qword ptr [rsp]
mov rdi, rax
=== 6977
mov rdi, r12
xor rdi, rdi
=== 6978
mov rdi, rdi
push rdi
mov rsi, rsp
mov r13, rdi
=== 6979
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r12
mov rbp, r13
movzx r13, r13b
=== 6980
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x1384b3578
add r11, 0x7be2d48; add_carry
mov r11, qword ptr [r11 + 0x778]
add r11, r13
mov r10b, byte ptr [r11]
movzx r10, r10b
shl r10, 8
add rbp, r10
mov r15, rbp
movabs rsi, 0xc0b74975
add rsi, 0x7f52114b; add
=== 6981
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1912
add rsp, 1912
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov rdi, r15
=== 6982
mov r13, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov r15b, byte ptr [rdx]
mov r13b, r15b
=== 6983
mov r14, r13
push r14
mov r13, rsp
mov r12, r13
=== 6984
mov rbp, r13
mov r13, r12
push rbp
push 0x48a63013
push 0x641e4ef6
push 0x40ec23cf
push 0x4a7eeb
=== 6985
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov r15, r13
movzx r14, r14b
=== 6986
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xf7630105
add rbx, 0x48a661bb; add_carry
mov rbx, qword ptr [rbx + 0x120]
add rbx, r14
mov r14b, byte ptr [rbx]
movzx r14, r14b
shl r14, 0x10
add r15, r14
movabs rbx, 0x107563c44
push rbx
push 0x33285575
push 0x45685b97
push 0x788278c
add qword ptr [rsp + 0x18], 0x38b31e7c; add
mov rsi, r15
=== 6987
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 288
add rsp, 288
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r13
mov r15, rsi
=== 6988
mov rbx, r15
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r14
mov sil, byte ptr [r15]
mov r9, 0xff
shl r9, 8
not r9
and rbx, r9
movzx r9, sil
shl r9, 8
or rbx, r9
=== 6989
mov r15, rbx
push r15
mov rsi, rsp
mov rbp, rbx
=== 6990
mov rsi, rsi
mov r14, rbp
push rsi
push 0x644365c1
push 0x1bd246ac
push 0x38dc24af
=== 6991
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rdi, r14
movzx r13, r13b
=== 6992
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x12c5847af
add r13, 0x13b11b11; add_carry
mov r13, qword ptr [r13 + 0x2b0]
add r13, r13
mov r11b, byte ptr [r13]
movzx r11, r11b
shl r11, 0x18
add rdi, r11
movabs r15, 0xd951452f
push r15
push 0x50cf62dd
push 0x49c0c4a
push 0x187a2b4b
push 0x180b1ea5
add qword ptr [rsp + 0x20], 0x66b81591; add
mov rdi, rdi
=== 6993
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 688
add rsp, 688
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov rsi, rdi
=== 6994
mov rbp, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov dil, byte ptr [r13]
mov r11, 0xff
shl r11, 0x10
not r11
and rbp, r11
movzx r11, dil
shl r11, 0x10
or rbp, r11
=== 6995
mov rsi, rbp
push rsi
mov r14, rsp
mov r12, rbp
=== 6996
mov rbx, r14
mov r15, r12
push rbx
push 0x47e6608f
push 0x1faa0e79
push 0x31196d46
=== 6997
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov r15, r15
movzx rdi, dil
=== 6998
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x127b20ae0
add r15, 0x185757e0; add_carry
mov r15, qword ptr [r15 + 0x188]
add r15, rdi
mov bpl, byte ptr [r15]
movzx rbp, bpl
shl rbp, 0x20
add r15, rbp
movabs r11, 0xe253e5d8
push r11
push 0x7b45540b
push 0x6a965196
push 0x62460bf0
push 0x4cdc06b2
add qword ptr [rsp + 0x20], 0x5db574e8; add
mov rbx, r15
=== 6999
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 392
add rsp, 392
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov r12, rbx
=== 7000
mov r14, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov sil, byte ptr [r15]
mov r10, 0xff
shl r10, 0x18
not r10
and r14, r10
movzx r10, sil
shl r10, 0x18
or r14, r10
=== 7001
mov r10, r14
push r10
mov rdi, rsp
mov r12, r14
=== 7002
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r8
mov r15, r12
movzx r13, r13b
=== 7003
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xc353e4ab
add r13, 0x7cb57e15; add_carry
mov r13, qword ptr [r13]
add r13, r13
mov r8b, byte ptr [r13]
movzx r8, r8b
shl r8, 0x28
add r15, r8
movabs rdi, 0xcbf3f440
push rdi
push 0x18b9238b
push 0x71be49ef
push 0x64ba3eed
push 0x72135c41
add qword ptr [rsp + 0x20], 0x74156680; add
mov r13, r15
=== 7004
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rcx
mov rdi, r13
=== 7005
mov rbp, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r15
mov r13b, byte ptr [r12]
mov r12, 0xff
shl r12, 0x20
not r12
and rbp, r12
movzx r12, r13b
shl r12, 0x20
or rbp, r12
=== 7006
mov r14, rbp
push r14
mov r13, rsp
mov r12, rbp
=== 7007
mov r8, r13
mov r13, r12
push r8
push 0x64256954
push 0x68de6585
push 0x638a7197
push 0x46c86f6d
=== 7008
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov rbx, r13
movzx rdi, dil
=== 7009
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x103b03dd5
add r8, 0x3c5924eb; add_carry
mov r8, qword ptr [r8]
add r8, rdi
mov bl, byte ptr [r8]
movzx rbx, bl
shl rbx, 0x30
add rbx, rbx
movabs rbx, 0x116ea2e1b
push rbx
push 0x70de6834
push 0x500b1ad3
push 0x34375a4d
add qword ptr [rsp + 0x18], 0x291f2ca5; add
mov rdi, rbx
=== 7010
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rbp, rdi
=== 7011
mov r13, rbp
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r13
mov r11b, byte ptr [rdi]
mov rbx, 0xff
shl rbx, 0x28
not rbx
and r13, rbx
movzx rbx, r11b
shl rbx, 0x28
or r13, rbx
=== 7012
mov rsi, r13
push rsi
mov rsi, rsp
mov r14, r13
=== 7013
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov r13, r14
movzx r14, r14b
=== 7014
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xdaed1da7
add r12, 0x651c4519; add_carry
mov r12, qword ptr [r12]
add r12, r14
mov r11b, byte ptr [r12]
movzx r11, r11b
shl r11, 0x38
add r13, r11
movabs rsi, 0x11ed2fb89
push rsi
push 0x108c3a0a
push 0x8fe31ba
push 0x1d4117f3
push 0x62377823
add qword ptr [rsp + 0x20], 0x21365f37; add
mov rsi, r13
=== 7015
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov r14, rsi
=== 7016
mov rbp, r14
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r12
mov r8b, byte ptr [r14]
mov r9, 0xff
shl r9, 0x30
not r9
and rbp, r9
movzx r9, r8b
shl r9, 0x30
or rbp, r9
=== 7017
mov rdi, rbp
movabs rbx, 0x12200a3a1
add rbx, 0x1e891547; input
=== 7018
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 23
add rsp, 23
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov rbx, rdi
movzx r12, r12b
=== 7019
mov rax, r12
mov rsi, 0xffffffffb3fc974c
add rsi, 0x4cba278a
push rsi
mov rdi, rbx
mul qword ptr [rsp]
mov rbp, rax
=== 7020
mov r13, rdi
xor r13, rbp
=== 7021
mov rdi, r13
push rdi
mov r14, rsp
mov r13, r13
=== 7022
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r12
mov rsi, r13
movzx r14, r14b
=== 7023
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x10f2360ec
add r8, 0x30e611d4; sub_carry
mov r8, qword ptr [r8 + 0x528]
add r8, r14
mov cl, byte ptr [r8]
movzx rcx, cl
shl rcx, 8
sub rsi, rcx
mov r12, rsi
movabs rdi, 0xfdbe50a6
add rdi, 0x424b1a1a; sub
=== 7024
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1320
add rsp, 1320
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rcx
mov rbx, r12
=== 7025
mov r12, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov bl, byte ptr [r9]
mov r12b, bl
=== 7026
mov r15, r12
push r15
mov r13, rsp
mov rbp, r12
=== 7027
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov r12, rbp
movzx r13, r13b
=== 7028
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x12b5341d7
add rdx, 0x14b630e9; sub_carry
mov rdx, qword ptr [rdx + 0x580]
add rdx, r13
mov r15b, byte ptr [rdx]
movzx r15, r15b
shl r15, 0x10
sub r12, r15
mov rsi, r12
movabs rbp, 0x118a45144
add rbp, 0x2765197c; sub
=== 7029
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1408
add rsp, 1408
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r10
mov r13, rsi
=== 7030
mov rdi, r13
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov r15b, byte ptr [r12]
mov rdx, 0xff
shl rdx, 8
not rdx
and rdi, rdx
movzx rdx, r15b
shl rdx, 8
or rdi, rdx
=== 7031
mov r14, rdi
push r14
mov r12, rsp
mov rsi, rdi
=== 7032
mov r10, r12
mov r14, rsi
push r10
push 0x3e777726
push 0x1ce2758c
push 0x1e1a2612
=== 7033
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov r15, r14
movzx r13, r13b
=== 7034
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x12c981180
add rbp, 0x13716140; sub_carry
mov rbp, qword ptr [rbp + 0x428]
add rbp, r13
mov r13b, byte ptr [rbp]
movzx r13, r13b
shl r13, 0x18
sub r15, r13
movabs rbp, 0x119d1faf2
push rbp
push 0x1200074f
push 0x4a4f772e
push 0x5f8f519e
add qword ptr [rsp + 0x18], 0x26376fce; sub
mov rbp, r15
=== 7035
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1064
add rsp, 1064
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov rsi, rbp
=== 7036
mov rdi, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov r12b, byte ptr [r13]
mov r11, 0xff
shl r11, 0x10
not r11
and rdi, r11
movzx r11, r12b
shl r11, 0x10
or rdi, r11
=== 7037
mov rdi, rdi
push rdi
mov r12, rsp
mov rsi, rdi
=== 7038
mov r14, r12
mov rbx, rsi
push r14
push 0x5f657f72
push 0x7b352844
push 0x10a802a8
push 0x3fc24263
=== 7039
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rcx
mov rbp, rbx
movzx r13, r13b
=== 7040
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x104e05ba6
add r10, 0x3b29171a; sub_carry
mov r10, qword ptr [r10 + 0x290]
add r10, r13
mov al, byte ptr [r10]
movzx rax, al
shl rax, 0x20
sub rbp, rax
mov rdi, rbp
movabs r14, 0x13b7c3b31
add r14, 0x48d2f8f; sub
=== 7041
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 656
add rsp, 656
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov r13, rdi
=== 7042
mov r12, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov r15b, byte ptr [rax]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and r12, rdi
movzx rdi, r15b
shl rdi, 0x18
or r12, rdi
=== 7043
mov r15, r12
push r15
mov r13, rsp
mov rsi, r12
=== 7044
mov rbx, r13
mov rdi, rsi
push rbx
push 0x48c0317c
push 0x6afe6d37
push 0x53af7257
=== 7045
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r12
mov rsi, rdi
movzx rbx, bl
=== 7046
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xdd8408cf
add r15, 0x628569f1; sub_carry
mov r15, qword ptr [r15]
add r15, rbx
mov r14b, byte ptr [r15]
movzx r14, r14b
shl r14, 0x28
sub rsi, r14
mov rsi, rsi
movabs rdi, 0x1163f38b7
add rdi, 0x29ca3209; sub
=== 7047
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov r14, rsi
=== 7048
mov rbx, r14
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r15
mov cl, byte ptr [r12]
mov r8, 0xff
shl r8, 0x20
not r8
and rbx, r8
movzx r8, cl
shl r8, 0x20
or rbx, r8
=== 7049
mov rdx, rbx
push rdx
mov rbp, rsp
mov r12, rbx
=== 7050
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov r13, r12
movzx rsi, sil
=== 7051
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xfe667120
add rdx, 0x41a301a0; sub_carry
mov rdx, qword ptr [rdx]
add rdx, rsi
mov r11b, byte ptr [rdx]
movzx r11, r11b
shl r11, 0x30
sub r13, r11
mov rdi, r13
movabs r13, 0xf0922c31
add r13, 0x4f773e8f; sub
=== 7052
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov r15, rdi
=== 7053
mov r12, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov r10b, byte ptr [rcx]
mov rbx, 0xff
shl rbx, 0x28
not rbx
and r12, rbx
movzx rbx, r10b
shl rbx, 0x28
or r12, rbx
=== 7054
mov rbp, r12
push rbp
mov r15, rsp
mov rdi, r12
=== 7055
mov r10, r15
mov r15, rdi
push r10
push 0x64914463
push 0x39f23bda
push 0x3c4a717f
=== 7056
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov r15, r15
movzx rbx, bl
=== 7057
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x137eb50c3
push r8
push 0x2a880afd
push 0x8a63a4
push 0x1bc162dd
push 0x1471559b
add qword ptr [rsp + 0x20], 0x81e19fd; sub
mov rsi, r15
=== 7058
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r11
mov rsi, rsi
=== 7059
mov r13, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rdi
mov r15b, byte ptr [r14]
mov r8, 0xff
shl r8, 0x38
not r8
and r13, r8
movzx r8, r15b
shl r8, 0x38
or r13, r8
=== 7060
movabs rbp, 0xe734831f
push rbp
push 0x8b16d8
push 0x3cba4cae
push 0x14605ea7
add qword ptr [rsp + 0x18], 0x595535c9; input
mov r14, r13
=== 7061
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov rdi, r14
movzx rbx, bl
=== 7062
mov rax, rbx
mov r14, 0xfffffffff6d71088
add r14, 0x9ac1a5f
push r14
mov rbx, rdi
mul qword ptr [rsp]
mov rbp, rax
=== 7063
mov r13, rbx
sub r13, rbp
=== 7064
mov rbx, r13
push rbx
mov rdi, rsp
mov r12, r13
=== 7065
mov r13, rdi
mov rsi, r12
push r13
push 0x16195a56
push 0x3b584fea
push 0x799a4ddc
=== 7066
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r15
mov rbp, rsi
movzx r13, r13b
=== 7067
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x11eed37e4
add rbx, 0x211c2adc; add_carry
mov rbx, qword ptr [rbx + 0x6e8]
add rbx, r13
mov cl, byte ptr [rbx]
movzx rcx, cl
shl rcx, 8
add rbp, rcx
mov rsi, rbp
movabs r13, 0x1359b12ed
add r13, 0xa6e47d3; add
=== 7068
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1768
add rsp, 1768
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov rsi, rsi
=== 7069
mov rsi, rsi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov r9b, byte ptr [r11]
mov sil, r9b
=== 7070
mov r13, rsi
push r13
mov rsi, rsp
mov r14, rsi
=== 7071
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rsi, r14
movzx r13, r13b
=== 7072
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xe55de6b8
add rcx, 0x5aab7c08; add_carry
mov rcx, qword ptr [rcx + 0x5f0]
add rcx, r13
mov bpl, byte ptr [rcx]
movzx rbp, bpl
shl rbp, 0x10
add rsi, rbp
movabs r8, 0x12f314fce
push r8
push 0x5d422687
push 0x38db47e9
push 0x3e827b03
add qword ptr [rsp + 0x18], 0x10d80af2; add
mov rsi, rsi
=== 7073
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1520
add rsp, 1520
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov rsi, rsi
=== 7074
mov rbp, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r13
mov r10b, byte ptr [r13]
mov rsi, 0xff
shl rsi, 8
not rsi
and rbp, rsi
movzx rsi, r10b
shl rsi, 8
or rbp, rsi
=== 7075
mov rax, rbp
push rax
mov r14, rsp
mov r12, rbp
=== 7076
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
mov rsi, r12
movzx r12, r12b
=== 7077
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xe53c1132
add r11, 0x5acd518e; add_carry
mov r11, qword ptr [r11 + 0x308]
add r11, r12
mov r15b, byte ptr [r11]
movzx r15, r15b
shl r15, 0x18
add rsi, r15
mov r15, rsi
movabs r13, 0xde2d230e
add r13, 0x61dc37b2; add
=== 7078
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 776
add rsp, 776
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov r12, r15
=== 7079
mov rdi, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov r14b, byte ptr [r11]
mov r11, 0xff
shl r11, 0x10
not r11
and rdi, r11
movzx r11, r14b
shl r11, 0x10
or rdi, r11
=== 7080
mov r15, rdi
push r15
mov r15, rsp
mov r12, rdi
=== 7081
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r8
mov rbp, r12
movzx r13, r13b
=== 7082
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xd3f94780
add rcx, 0x6c101b40; add_carry
mov rcx, qword ptr [rcx + 0x748]
add rcx, r13
mov r8b, byte ptr [rcx]
movzx r8, r8b
shl r8, 0x20
add rbp, r8
mov r13, rbp
movabs rdi, 0x12ea7402a
add rdi, 0x11621a96; add
=== 7083
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1864
add rsp, 1864
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov rdi, r13
=== 7084
mov rdi, rdi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r15
mov r9b, byte ptr [rsi]
mov r14, 0xff
shl r14, 0x18
not r14
and rdi, r14
movzx r14, r9b
shl r14, 0x18
or rdi, r14
=== 7085
mov rdx, rdi
push rdx
mov r15, rsp
mov r12, rdi
=== 7086
mov rdi, r15
mov rbx, r12
push rdi
push 0x3e964208
push 0x208f5b3b
push 0x4df9483a
=== 7087
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rcx
mov rsi, rbx
movzx rdi, dil
=== 7088
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x12d021d30
add r8, 0x13074590; add_carry
mov r8, qword ptr [r8]
add r8, rdi
mov al, byte ptr [r8]
movzx rax, al
shl rax, 0x28
add rsi, rax
movabs r13, 0xfabf3df1
push r13
push 0x232a4bd6
push 0x3a0d5b7b
push 0x5cda0074
push 0x6f781fc0
add qword ptr [rsp + 0x20], 0x454a1ccf; add
mov r15, rsi
=== 7089
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r12
mov r14, r15
=== 7090
mov r13, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov r8b, byte ptr [rax]
mov rdx, 0xff
shl rdx, 0x20
not rdx
and r13, rdx
movzx rdx, r8b
shl rdx, 0x20
or r13, rdx
=== 7091
mov r14, r13
push r14
mov rbx, rsp
mov rdi, r13
=== 7092
mov rsi, rbx
mov rbp, rdi
push rsi
push 0x3e52140c
push 0x7af15bf0
push 0x37510ecc
push 0x5bd6683a
=== 7093
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov r13, rbp
movzx rbp, bpl
=== 7094
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xf740f34f
add r8, 0x48c86f71; add_carry
mov r8, qword ptr [r8]
add r8, rbp
mov r14b, byte ptr [r8]
movzx r14, r14b
shl r14, 0x38
add r13, r14
movabs r10, 0x130d41e76
push r10
push 0x6520484e
push 0x543e5d44
push 0x1862f90
push 0x7ec27895
add qword ptr [rsp + 0x20], 0xf353c4a; add
mov r13, r13
=== 7095
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdi
mov rbp, r13
=== 7096
mov r14, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r12
mov r9b, byte ptr [rax]
mov rbx, 0xff
shl rbx, 0x30
not rbx
and r14, rbx
movzx rbx, r9b
shl rbx, 0x30
or r14, rbx
=== 7097
mov r12, r14
push r12
mov rbx, rsp
mov r14, r14
=== 7098
mov r13, rbx
mov r14, r14
push r13
push 0x118c0f5e
push 0x5e30337c
push 0x48e4ebd
push 0x36c85a0f
=== 7099
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov r14, r14
movzx rdi, dil
=== 7100
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r14
movabs rbx, 0x13981db2b
add rbx, 0x6877f95; add
=== 7101
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov rsi, r13
=== 7102
mov r13, rsi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r14
mov bpl, byte ptr [rbx]
mov rax, 0xff
shl rax, 0x38
not rax
and r13, rax
movzx rax, bpl
shl rax, 0x38
or r13, rax
=== 7103
mov r15, r13
movabs rdi, 0xea71b72d
add rdi, 0x561801bb; input
=== 7104
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 11
add rsp, 11
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r8
mov r12, r15
movzx rbp, bpl
=== 7105
mov rax, rbp
mov rsi, 0xffffffffa6413f55
add rsi, 0x5a8323db
push rsi
mov rdi, r12
mul qword ptr [rsp]
mov r12, rax
=== 7106
mov rsi, rdi
add rsi, r12
=== 7107
mov rcx, rsi
push rcx
mov rbp, rsp
mov r12, rsi
=== 7108
mov rbx, rbp
mov r13, r12
push rbx
push 0x66e514d3
push 0x70b16f3f
push 0x5b691a48
=== 7109
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rax
mov r12, r13
movzx rbx, bl
=== 7110
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xe30c35f3
add rdi, 0x5cfd3ccd; sub_carry
mov rdi, qword ptr [rdi + 0x328]
add rdi, rbx
mov bpl, byte ptr [rdi]
movzx rbp, bpl
shl rbp, 8
sub r12, rbp
mov rsi, r12
movabs r14, 0x12fca11ec
add r14, 0x103f58d4; sub
=== 7111
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 808
add rsp, 808
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov r14, rsi
=== 7112
mov rbx, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbp
mov dil, byte ptr [rdi]
mov bl, dil
=== 7113
mov r13, rbx
push r13
mov rbp, rsp
mov r13, rbx
=== 7114
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov rdi, r13
movzx r14, r14b
=== 7115
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x1108918af
add rdi, 0x2f805a11; sub_carry
mov rdi, qword ptr [rdi + 0xe8]
add rdi, r14
mov r12b, byte ptr [rdi]
movzx r12, r12b
shl r12, 0x10
sub rdi, r12
mov r13, rdi
movabs rdi, 0x121f93bc3
add rdi, 0x1e102efd; sub
=== 7116
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 232
add rsp, 232
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rsi
mov rsi, r13
=== 7117
mov r12, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov r15b, byte ptr [r14]
mov r14, 0xff
shl r14, 8
not r14
and r12, r14
movzx r14, r15b
shl r14, 8
or r12, r14
=== 7118
mov rax, r12
push rax
mov rbp, rsp
mov rbx, r12
=== 7119
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov r15, rbx
movzx r12, r12b
=== 7120
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xf2b56da4
add r15, 0x4d54051c; sub_carry
mov r15, qword ptr [r15 + 0x4f0]
add r15, r12
mov r12b, byte ptr [r15]
movzx r12, r12b
shl r12, 0x18
sub r15, r12
movabs r13, 0xeaf1edf9
push r13
push 0x21a97cb3
push 0x22c21719
push 0x52f63105
push 0x65867e7
add qword ptr [rsp + 0x20], 0x55177cc7; sub
mov r14, r15
=== 7121
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1264
add rsp, 1264
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rax
mov r12, r14
=== 7122
mov r14, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rdi
mov dil, byte ptr [r13]
mov rax, 0xff
shl rax, 0x10
not rax
and r14, rax
movzx rax, dil
shl rax, 0x10
or r14, rax
=== 7123
mov rax, r14
push rax
mov r13, rsp
mov rsi, r14
=== 7124
mov r11, r13
mov rbx, rsi
push r11
push 0xeb07223
push 0x44f764c8
push 0x138d0bf4
=== 7125
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r14
mov rsi, rbx
movzx rdi, dil
=== 7126
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x136e2f6c3
add r10, 0x9267bfd; sub_carry
mov r10, qword ptr [r10 + 0x250]
add r10, rdi
mov sil, byte ptr [r10]
movzx rsi, sil
shl rsi, 0x20
sub rsi, rsi
movabs r13, 0xef223436
push r13
push 0x42c202f6
push 0x6da63522
push 0x61c36663
add qword ptr [rsp + 0x18], 0x50e7368a; sub
mov r12, rsi
=== 7127
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 592
add rsp, 592
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov rdi, r12
=== 7128
mov rbx, rdi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov r14b, byte ptr [r9]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and rbx, rbp
movzx rbp, r14b
shl rbp, 0x18
or rbx, rbp
=== 7129
mov rdx, rbx
push rdx
mov r15, rsp
mov rbp, rbx
=== 7130
mov r10, r15
mov r13, rbp
push r10
push 0x196664e1
push 0x43a15e5b
push 0xa06244c
push 0x1fcb7cd2
=== 7131
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r15
mov rdi, r13
movzx r15, r15b
=== 7132
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xee457101
add r14, 0x51c401bf; sub_carry
mov r14, qword ptr [r14]
add r14, r15
mov sil, byte ptr [r14]
movzx rsi, sil
shl rsi, 0x28
sub rdi, rsi
mov rsi, rdi
movabs rbp, 0x136c11909
add rbp, 0x94851b7; sub
=== 7133
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r11
mov rbp, rsi
=== 7134
mov r12, rbp
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r15
mov r14b, byte ptr [r13]
mov r13, 0xff
shl r13, 0x20
not r13
and r12, r13
movzx r13, r14b
shl r13, 0x20
or r12, r13
=== 7135
mov r8, r12
push r8
mov rbp, rsp
mov rdi, r12
=== 7136
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
mov r15, rdi
movzx r12, r12b
=== 7137
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x12e8c459e
add rbx, 0x117d2d22; sub_carry
mov rbx, qword ptr [rbx]
add rbx, r12
mov al, byte ptr [rbx]
movzx rax, al
shl rax, 0x30
sub r15, rax
movabs r11, 0xd71b3b7d
push r11
push 0x1e4b6a18
push 0xf465413
push 0x77360cf7
add qword ptr [rsp + 0x18], 0x68ee2f43; sub
mov r14, r15
=== 7138
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov r14, r14
=== 7139
mov r12, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov r13b, byte ptr [r10]
mov r15, 0xff
shl r15, 0x28
not r15
and r12, r15
movzx r15, r13b
shl r15, 0x28
or r12, r15
=== 7140
mov rdi, r12
movabs r15, 0xe323a663
add r15, 0x5d661285; input
=== 7141
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbp
mov rbx, rdi
movzx rsi, sil
=== 7142
mov rax, rsi
mov rsi, 0xffffffffc5fc52bc
add rsi, 0x3a4331ab
push rsi
mov rbx, rbx
mul qword ptr [rsp]
mov r15, rax
=== 7143
mov rbp, rbx
xor rbp, r15
=== 7144
mov r15, rbp
push r15
mov r13, rsp
mov r14, rbp
=== 7145
mov rbp, r13
mov r12, r14
push rbp
push 0x359877af
push 0x18c0161d
push 0x4de30b76
=== 7146
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbx
mov r13, r12
movzx rbx, bl
=== 7147
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x10931d081
push r15
push 0x2de20859
push 0x546f1f4c
push 0x52704a92
push 0x61d7023b
add qword ptr [rsp + 0x20], 0x36d77a3f; xor
mov rbp, r13
=== 7148
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1568
add rsp, 1568
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdi
mov rsi, rbp
=== 7149
mov rbp, rsi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r15
mov r9b, byte ptr [r10]
mov bpl, r9b
=== 7150
mov r14, rbp
push r14
mov r14, rsp
mov rbp, rbp
=== 7151
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbx
mov rsi, rbp
movzx r14, r14b
=== 7152
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rsi
movabs r14, 0xeded1c6d
add r14, 0x521c2e53; xor
=== 7153
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1288
add rsp, 1288
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbp
mov rbp, r13
=== 7154
mov r15, rbp
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r13
mov bpl, byte ptr [rdi]
mov r13, 0xff
shl r13, 8
not r13
and r15, r13
movzx r13, bpl
shl r13, 8
or r15, r13
=== 7155
mov rdi, r15
push rdi
mov rbx, rsp
mov r15, r15
=== 7156
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
mov rsi, r15
movzx r12, r12b
=== 7157
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x139c6cbbe
push rcx
push 0x2a6736de
push 0x3aa37660
push 0xd5e6182
push 0x4b154e0a
add qword ptr [rsp + 0x20], 0x6427f02; xor
mov rbp, rsi
=== 7158
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1328
add rsp, 1328
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov rbx, rbp
=== 7159
mov rdi, rbx
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r14
mov bpl, byte ptr [rsi]
mov rdx, 0xff
shl rdx, 0x10
not rdx
and rdi, rdx
movzx rdx, bpl
shl rdx, 0x10
or rdi, rdx
=== 7160
mov r10, rdi
push r10
mov r13, rsp
mov r12, rdi
=== 7161
mov r9, r13
mov rbx, r12
push r9
push 0x6c9f4dc3
push 0x4fb228b2
push 0x4e891978
=== 7162
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbp
mov rbx, rbx
movzx r14, r14b
=== 7163
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rbx
movabs r14, 0x1232cf83c
add r14, 0x1cdc5284; xor
=== 7164
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1192
add rsp, 1192
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rsi
mov rdi, rdi
=== 7165
mov r12, rdi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rsi
mov r9b, byte ptr [r13]
mov r13, 0xff
shl r13, 0x18
not r13
and r12, r13
movzx r13, r9b
shl r13, 0x18
or r12, r13
=== 7166
mov rsi, r12
push rsi
mov r14, rsp
mov rsi, r12
=== 7167
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbp
mov r14, rsi
movzx rdi, dil
=== 7168
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r14
movabs r15, 0xf3b41af8
add r15, 0x4c552fc8; xor
=== 7169
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rax
mov rsi, r14
=== 7170
mov rdi, rsi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov r10b, byte ptr [r12]
mov r15, 0xff
shl r15, 0x20
not r15
and rdi, r15
movzx r15, r10b
shl r15, 0x20
or rdi, r15
=== 7171
mov r11, rdi
push r11
mov r13, rsp
mov r12, rdi
=== 7172
mov rax, r13
mov rdi, r12
push rax
push 0x5e3d0618
push 0xdfb7944
push 0x45c86de0
push 0x72303f83
=== 7173
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov rbx, rdi
movzx r15, r15b
=== 7174
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xd1b30e15
push rdi
push 0xe482c54
push 0x337a15d1
push 0x5fdf4865
add qword ptr [rsp + 0x18], 0x6e563cab; xor
mov r13, rbx
=== 7175
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdx
mov rdi, r13
=== 7176
mov r14, rdi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r15
mov r10b, byte ptr [rsi]
mov rdi, 0xff
shl rdi, 0x30
not rdi
and r14, rdi
movzx rdi, r10b
shl rdi, 0x30
or r14, rdi
=== 7177
mov r11, r14
push r11
mov rbp, rsp
mov r15, r14
=== 7178
mov r15, rbp
mov rbx, r15
push r15
push 0x1eea4a1a
push 0x69bc6106
push 0x101d706b
=== 7179
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov r15, rbx
movzx rbx, bl
=== 7180
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x137cb1aae
push rdi
push 0x4b9804b3
push 0x4981208a
push 0x44b92929
add qword ptr [rsp + 0x18], 0x83e3012; xor
mov r12, r15
=== 7181
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbx
mov r13, r12
=== 7182
mov r12, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov cl, byte ptr [rax]
mov rbp, 0xff
shl rbp, 0x38
not rbp
and r12, rbp
movzx rbp, cl
shl rbp, 0x38
or r12, rbp
=== 7183
mov rdx, r12
push rdx
mov r13, rsp
mov rdi, r12
=== 7184
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov rdi, rdi
movzx rsi, sil
=== 7185
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x132f563fc
add rcx, 0xd140ec4; sub_carry
mov rcx, qword ptr [rcx + 0xc8]
add rcx, rsi
mov cl, byte ptr [rcx]
movzx rcx, cl
shl rcx, 8
sub rdi, rcx
movabs rsi, 0xcacc1c94
push rsi
push 0x139370bd
push 0x172c74bd
push 0x51d354a
push 0x59001727
add qword ptr [rsp + 0x20], 0x753d4e2c; sub
mov r13, rdi
=== 7186
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 200
add rsp, 200
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r14
mov rbx, r13
=== 7187
mov r13, rbx
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbp
mov al, byte ptr [rdi]
mov r13b, al
=== 7188
mov rdx, r13
push rdx
mov rbx, rsp
mov rsi, r13
=== 7189
mov r13, rbx
mov rsi, rsi
push r13
push 0x1fea2354
push 0x32550a44
push 0x20052e77
=== 7190
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov rbx, rsi
movzx r15, r15b
=== 7191
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xf3bf6460
add r13, 0x4c4a0e60; sub_carry
mov r13, qword ptr [r13 + 0x1a8]
add r13, r15
mov r14b, byte ptr [r13]
movzx r14, r14b
shl r14, 0x10
sub rbx, r14
movabs rbx, 0x11ab25785
push rbx
push 0x12143c16
push 0x1ff7d19
push 0x2f343aa0
push 0x3f7f5e43
add qword ptr [rsp + 0x20], 0x2557133b; sub
mov r14, rbx
=== 7192
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 424
add rsp, 424
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov r12, r14
=== 7193
mov rsi, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbp
mov dil, byte ptr [r15]
mov r12, 0xff
shl r12, 8
not r12
and rsi, r12
movzx r12, dil
shl r12, 8
or rsi, r12
=== 7194
mov r14, rsi
push r14
mov rbx, rsp
mov r13, rsi
=== 7195
mov r10, rbx
mov rdi, r13
push r10
push 0x51ef1d8b
push 0x15d3cc8
push 0x66340caf
=== 7196
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r13
mov r12, rdi
movzx r13, r13b
=== 7197
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x10a472c4b
add rsi, 0x35c24675; sub_carry
mov rsi, qword ptr [rsi + 0x70]
add rsi, r13
mov r11b, byte ptr [rsi]
movzx r11, r11b
shl r11, 0x18
sub r12, r11
movabs rbp, 0xdec64265
push rbp
push 0x22644e3e
push 0x26296e1c
push 0x27081155
add qword ptr [rsp + 0x18], 0x6143285b; sub
mov rdi, r12
=== 7198
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 112
add rsp, 112
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbp
mov rbp, rdi
=== 7199
mov rbp, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov al, byte ptr [r8]
mov r11, 0xff
shl r11, 0x10
not r11
and rbp, r11
movzx r11, al
shl r11, 0x10
or rbp, r11
=== 7200
mov rdi, rbp
push rdi
mov r12, rsp
mov rbp, rbp
=== 7201
mov r8, r12
mov rdi, rbp
push r8
push 0x448a7c96
push 0x67b66721
push 0xf065db
=== 7202
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rax
mov r12, rdi
movzx r15, r15b
=== 7203
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x1277e2e61
add r13, 0x188b445f; sub_carry
mov r13, qword ptr [r13 + 0x88]
add r13, r15
mov r14b, byte ptr [r13]
movzx r14, r14b
shl r14, 0x20
sub r12, r14
movabs rax, 0x11a842298
push rax
push 0x3fe45094
push 0x21b232a8
push 0xc6e2244
push 0x7e3611f6
add qword ptr [rsp + 0x20], 0x25854828; sub
mov rbx, r12
=== 7204
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 136
add rsp, 136
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r15
mov r14, rbx
=== 7205
mov rsi, r14
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbx
mov r10b, byte ptr [r14]
mov r14, 0xff
shl r14, 0x18
not r14
and rsi, r14
movzx r14, r10b
shl r14, 0x18
or rsi, r14
=== 7206
mov rbx, rsi
push rbx
mov rbx, rsp
mov rsi, rsi
=== 7207
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r14
mov r12, rsi
movzx rdi, dil
=== 7208
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xde4eff7e
add r10, 0x61ba7342; sub_carry
mov r10, qword ptr [r10 + 8]
add r10, rdi
mov dl, byte ptr [r10]
movzx rdx, dl
shl rdx, 0x28
sub r12, rdx
movabs r12, 0x1242225bd
push r12
push 0x5a1d73f2
push 0x601e0f66
push 0x5b9b646b
push 0x471568f
add qword ptr [rsp + 0x20], 0x1be74503; sub
mov r12, r12
=== 7209
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 8
add rsp, 8
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rdi, r12
=== 7210
mov rbp, rdi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r13
mov bl, byte ptr [rbx]
mov r10, 0xff
shl r10, 0x20
not r10
and rbp, r10
movzx r10, bl
shl r10, 0x20
or rbp, r10
=== 7211
mov rbx, rbp
push rbx
mov r14, rsp
mov rdi, rbp
=== 7212
mov r10, r14
mov r13, rdi
push r10
push 0x4ebf321c
push 0x990242d
push 0x578c314f
=== 7213
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov rbp, r13
movzx rsi, sil
=== 7214
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xd4262c3f
add rdi, 0x6be34681; sub_carry
mov rdi, qword ptr [rdi]
add rdi, rsi
mov bl, byte ptr [rdi]
movzx rbx, bl
shl rbx, 0x30
sub rbp, rbx
movabs rbp, 0xee19f704
push rbp
push 0x53f8465b
push 0x674b62b0
push 0x50d100e4
add qword ptr [rsp + 0x18], 0x51ef73bc; sub
mov rsi, rbp
=== 7215
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov r15, rsi
=== 7216
mov rdi, r15
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov bpl, byte ptr [r8]
mov rcx, 0xff
shl rcx, 0x28
not rcx
and rdi, rcx
movzx rcx, bpl
shl rcx, 0x28
or rdi, rcx
=== 7217
mov r10, rdi
push r10
mov rdi, rsp
mov r14, rdi
=== 7218
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov r13, r14
movzx r14, r14b
=== 7219
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xd926eea6
push rbx
push 0xc0d282f
push 0x28552313
push 0x17464304
push 0x543d4a09
add qword ptr [rsp + 0x20], 0x66e27c1a; sub
mov r15, r13
=== 7220
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r13
mov r15, r15
=== 7221
mov rbx, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov r13b, byte ptr [r9]
mov rdi, 0xff
shl rdi, 0x38
not rdi
and rbx, rdi
movzx rdi, r13b
shl rdi, 0x38
or rbx, rdi
=== 7222
mov rdx, rbx
push rdx
mov r14, rsp
mov rsi, rbx
=== 7223
mov r8, r14
mov rsi, rsi
push r8
push 0x77ab4020
push 0x27be34ea
push 0x2bb00cff
push 0x8127533
=== 7224
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov r12, rsi
movzx r14, r14b
=== 7225
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r12
movabs r13, 0xfbf00ca5
add r13, 0x4419461b; or
=== 7226
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdx
mov rbp, rbp
=== 7227
mov r13, rbp
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r12
mov al, byte ptr [r14]
mov rbp, 0xff
shl rbp, 8
not rbp
and r13, rbp
movzx rbp, al
shl rbp, 8
or r13, rbp
=== 7228
mov rdx, r13
push rdx
mov r13, rsp
mov r12, r13
=== 7229
mov rcx, r13
mov rbx, r12
push rcx
push 0x24fc6efb
push 0x781133e6
push 0x47340dc7
push 0x55332a7b
=== 7230
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r15
mov rbx, rbx
movzx rdi, dil
=== 7231
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rbx
movabs rbp, 0xefc22bb8
add rbp, 0x50472708; or
=== 7232
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdx
mov r15, r13
=== 7233
mov rbp, r15
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov r13b, byte ptr [r11]
mov rbx, 0xff
shl rbx, 0x20
not rbx
and rbp, rbx
movzx rbx, r13b
shl rbx, 0x20
or rbp, rbx
=== 7234
mov r12, rbp
push r12
mov rbx, rsp
mov rbp, rbp
=== 7235
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov r15, rbp
movzx r14, r14b
=== 7236
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x131012eea
push r10
push 0x1b539b0
push 0x5a356b9b
push 0x7ebc72f5
add qword ptr [rsp + 0x18], 0xf0823d6; or
mov rbp, r15
=== 7237
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov rbp, rbp
=== 7238
mov r13, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov r15b, byte ptr [rax]
mov rdi, 0xff
shl rdi, 0x28
not rdi
and r13, rdi
movzx rdi, r15b
shl rdi, 0x28
or r13, rdi
=== 7239
mov r8, r13
push r8
mov r15, rsp
mov rsi, r13
=== 7240
mov r11, r15
mov r12, rsi
push r11
push 0x3e6e61b9
push 0x4cd91b43
push 0x6233d06
=== 7241
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbp
mov rsi, r12
movzx r12, r12b
=== 7242
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xe5584b0a
push rbp
push 0x4c083826
push 0xd9e3d50
push 0x54306f71
push 0x5e18445c
add qword ptr [rsp + 0x20], 0x5ab107b6; or
mov r13, rsi
=== 7243
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov r15, r13
=== 7244
mov r14, r15
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbx
mov bl, byte ptr [rsi]
mov r12, 0xff
shl r12, 0x30
not r12
and r14, r12
movzx r12, bl
shl r12, 0x30
or r14, r12
=== 7245
mov r13, r14
push r13
mov r13, rsp
mov rbx, r14
=== 7246
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov r15, rbx
movzx r13, r13b
=== 7247
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, r15
movabs r14, 0xd44d0950
add r14, 0x6bbc4970; or
=== 7248
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov r12, rdi
=== 7249
mov r15, r12
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r13
mov cl, byte ptr [rax]
mov rax, 0xff
shl rax, 0x38
not rax
and r15, rax
movzx rax, cl
shl rax, 0x38
or r15, rax
=== 7250
mov r12, r15
movabs rbp, 0x10a27e411
add rbp, 0x35d82ddf
test r12, r12
lea r15, [rip - 0x3f214b]
cmovne r15, rbp
jmp r15
=== 7251
movabs rbx, 0x1164b4464
add rbx, 0x2a3e7484; input
=== 7252
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 24
add rsp, 24
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
movzx r12, r12b
=== 7253
mov rax, r12
mov r15, 0xffffffffc980223a
add r15, 0x37372818
push r15
mul qword ptr [rsp]
mov rdi, rax
=== 7254
mov rcx, rdi
push rcx
mov r15, rsp
mov rbp, rdi
=== 7255
mov r8, r15
mov rdi, rbp
push r8
push 0x52ff3348
push 0x3dbf4700
push 0x44003cb0
=== 7256
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov r15, rdi
movzx r14, r14b
=== 7257
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r15
movabs rdi, 0x131cb4565
add rdi, 0xe3e055b; xor
=== 7258
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1856
add rsp, 1856
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r12
mov r13, r13
=== 7259
mov rsi, r13
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov r9b, byte ptr [r10]
mov sil, r9b
=== 7260
mov rcx, rsi
push rcx
mov rsi, rsp
mov rdi, rsi
=== 7261
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
mov r14, rdi
movzx rsi, sil
=== 7262
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r14
movabs r12, 0x11d4dd6c7
add r12, 0x22bb73f9; xor
=== 7263
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1696
add rsp, 1696
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov rdi, r13
=== 7264
mov rdi, rdi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov r10b, byte ptr [r13]
mov rdx, 0xff
shl rdx, 8
not rdx
and rdi, rdx
movzx rdx, r10b
shl rdx, 8
or rdi, rdx
=== 7265
mov rsi, rdi
push rsi
mov rbp, rsp
mov rdi, rdi
=== 7266
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r13
mov rdi, rdi
movzx r13, r13b
=== 7267
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xd8dc3201
push rax
push 0x11236d3f
push 0x4876249c
push 0x7e336f05
add qword ptr [rsp + 0x18], 0x672d18bf; xor
mov r13, rdi
=== 7268
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 672
add rsp, 672
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbx
mov r14, r13
=== 7269
mov rdi, r14
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rsi
mov r10b, byte ptr [rbp]
mov r14, 0xff
shl r14, 0x10
not r14
and rdi, r14
movzx r14, r10b
shl r14, 0x10
or rdi, r14
=== 7270
mov rbx, rdi
push rbx
mov rbx, rsp
mov rbp, rdi
=== 7271
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdi
mov r13, rbp
movzx r14, r14b
=== 7272
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r13
movabs rsi, 0x11415d4cd
add rsi, 0x2bf375f3; xor
=== 7273
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1048
add rsp, 1048
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov rdi, r14
=== 7274
mov r15, rdi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbx
mov bpl, byte ptr [rbx]
mov r11, 0xff
shl r11, 0x18
not r11
and r15, r11
movzx r11, bpl
shl r11, 0x18
or r15, r11
=== 7275
mov r13, r15
push r13
mov r13, rsp
mov r14, r15
=== 7276
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rax
mov r13, r14
movzx r15, r15b
=== 7277
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xc21548a5
push r15
push 0x439d2021
push 0x7b4e198b
push 0x4b907d52
push 0x67a345d3
add qword ptr [rsp + 0x20], 0x7df4021b; xor
mov rsi, r13
=== 7278
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov r15, rsi
=== 7279
mov r15, r15
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rsi
mov sil, byte ptr [rsi]
mov r13, 0xff
shl r13, 0x38
not r13
and r15, r13
movzx r13, sil
shl r13, 0x38
or r15, r13
=== 7280
movabs r13, 0x114f17947
push r13
push 0xcc83a0f
push 0x1d567ab5
push 0x67b6542a
push 0x38ca4a12
add qword ptr [rsp + 0x20], 0x2b983fa1; input
mov r14, r15
=== 7281
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov r12, r14
movzx rbx, bl
=== 7282
mov rax, rbx
mov r9, 0xffffffffa4552156
add r9, 0x5c9d0d77
push r9
mov r13, r12
mul qword ptr [rsp]
mov rbx, rax
=== 7283
mov r13, r13
xor r13, rbx
=== 7284
mov r11, r13
push r11
mov rbp, rsp
mov rbx, r13
=== 7285
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov rbp, rbx
movzx r13, r13b
=== 7286
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xcad1fd19
add r15, 0x753775a7; sub_carry
mov r15, qword ptr [r15 + 0x1d8]
add r15, r13
mov r15b, byte ptr [r15]
movzx r15, r15b
shl r15, 8
sub rbp, r15
mov r12, rbp
movabs rdi, 0x126fdfdda
add rdi, 0x190b6ce6; sub
=== 7287
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 472
add rsp, 472
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rcx
mov rbx, r12
=== 7288
mov r12, rbx
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov dl, byte ptr [rdx]
mov r12b, dl
=== 7289
mov r12, r12
push r12
mov rbx, rsp
mov r14, r12
=== 7290
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov rbp, r14
movzx rsi, sil
=== 7291
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x135a5503c
add r14, 0xa642284; sub_carry
mov r14, qword ptr [r14 + 0x790]
add r14, rsi
mov r14b, byte ptr [r14]
movzx r14, r14b
shl r14, 0x10
sub rbp, r14
movabs r14, 0x12e654cb7
push r14
push 0x6ef35aad
push 0x35d4132c
push 0x66154896
add qword ptr [rsp + 0x18], 0x11a41e09; sub
mov rsi, rbp
=== 7292
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1936
add rsp, 1936
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov r13, rsi
=== 7293
mov r12, r13
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov r10b, byte ptr [rdx]
mov rbp, 0xff
shl rbp, 8
not rbp
and r12, rbp
movzx rbp, r10b
shl rbp, 8
or r12, rbp
=== 7294
mov rdi, r12
push rdi
mov r14, rsp
mov rbp, r12
=== 7295
mov rdi, r14
mov rsi, rbp
push rdi
push 0x474b548b
push 0x63297b0f
push 0x79456a59
=== 7296
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rax
mov r13, rsi
movzx r15, r15b
=== 7297
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x124e143b2
add r11, 0x1b282f0e; sub_carry
mov r11, qword ptr [r11 + 0x658]
add r11, r15
mov dil, byte ptr [r11]
movzx rdi, dil
shl rdi, 0x18
sub r13, rdi
mov rsi, r13
movabs r15, 0xe4600dbc
add r15, 0x5ba95d04; sub
=== 7298
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1624
add rsp, 1624
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rax
mov r15, rsi
=== 7299
mov r14, r15
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov bpl, byte ptr [r12]
mov r13, 0xff
shl r13, 0x10
not r13
and r14, r13
movzx r13, bpl
shl r13, 0x10
or r14, r13
=== 7300
mov r15, r14
push r15
mov r13, rsp
mov rsi, r14
=== 7301
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
mov rbx, rsi
movzx r15, r15b
=== 7302
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xe083164c
add r11, 0x5f865c74; sub_carry
mov r11, qword ptr [r11 + 0x1a0]
add r11, r15
mov bl, byte ptr [r11]
movzx rbx, bl
shl rbx, 0x20
sub rbx, rbx
mov rsi, rbx
movabs rbp, 0x12682f857
add rbp, 0x19867269; sub
=== 7303
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 416
add rsp, 416
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov rbp, rsi
=== 7304
mov r12, rbp
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r14
mov r15b, byte ptr [rdi]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and r12, rcx
movzx rcx, r15b
shl rcx, 0x18
or r12, rcx
=== 7305
mov rdx, r12
push rdx
mov rbx, rsp
mov r14, r12
=== 7306
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov rsi, r14
movzx rbp, bpl
=== 7307
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xea610ab6
add r12, 0x55a8680a; sub_carry
mov r12, qword ptr [r12]
add r12, rbp
mov al, byte ptr [r12]
movzx rax, al
shl rax, 0x28
sub rsi, rax
movabs rax, 0x119f02705
push rax
push 0x3c3e63a5
push 0x7ef70128
push 0x7e9135d4
add qword ptr [rsp + 0x18], 0x261943bb; sub
mov rbp, rsi
=== 7308
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rbx, rbp
=== 7309
mov rbp, rbx
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov dil, byte ptr [r10]
mov rdx, 0xff
shl rdx, 0x20
not rdx
and rbp, rdx
movzx rdx, dil
shl rdx, 0x20
or rbp, rdx
=== 7310
mov rcx, rbp
push rcx
mov r13, rsp
mov rsi, rbp
=== 7311
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r12
mov rdi, rsi
movzx r13, r13b
=== 7312
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xc44f5be9
add rcx, 0x7bba16d7; sub_carry
mov rcx, qword ptr [rcx]
add rcx, r13
mov r13b, byte ptr [rcx]
movzx r13, r13b
shl r13, 0x30
sub rdi, r13
movabs rax, 0x13df0397d
push rax
push 0x35bd00a7
push 0x6df8386c
push 0x5dbe6a38
add qword ptr [rsp + 0x18], 0x2193143; sub
mov r12, rdi
=== 7313
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdx
mov r12, r12
=== 7314
mov rdi, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov r10b, byte ptr [r11]
mov rbp, 0xff
shl rbp, 0x28
not rbp
and rdi, rbp
movzx rbp, r10b
shl rbp, 0x28
or rdi, rbp
=== 7315
movabs r8, 0x12be0470e
push r8
push 0x71a4408b
push 0x17da2b0f
push 0x48e848c1
push 0x19eb7542
add qword ptr [rsp + 0x20], 0x14a971da; input
mov r14, rdi
=== 7316
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 20
add rsp, 20
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov r12, r14
movzx r14, r14b
=== 7317
mov rax, r14
mov r15, 0xffffffffddec9338
add r15, 0x22d26186
push r15
mov rbp, r12
mul qword ptr [rsp]
mov rsi, rax
=== 7318
mov rbp, rbp
add rbp, rsi
=== 7319
mov r13, rbp
push r13
mov r14, rsp
mov rbx, rbp
=== 7320
mov rbp, r14
mov r13, rbx
push rbp
push 0x54654b93
push 0x3aa94f9a
push 0x33a04a67
=== 7321
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdi
mov r15, r13
movzx rdi, dil
=== 7322
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xfc14ddd2
push r11
push 0x5b933cc6
push 0x25da1a91
push 0x60111be2
add qword ptr [rsp + 0x18], 0x43f46cee; xor
mov rbx, r15
=== 7323
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1232
add rsp, 1232
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r9
mov r14, rbx
=== 7324
mov rbx, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov dl, byte ptr [rax]
mov bl, dl
=== 7325
mov rdx, rbx
push rdx
mov r13, rsp
mov rdi, rbx
=== 7326
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov r12, rdi
movzx rsi, sil
=== 7327
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x12ded26ec
push rsi
push 0x797f232a
push 0xa714273
push 0x25ae75d8
push 0x202857e6
add qword ptr [rsp + 0x20], 0x121c23d4; xor
mov r15, r12
=== 7328
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1560
add rsp, 1560
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdx
mov r13, r15
=== 7329
mov r13, r13
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov al, byte ptr [r12]
mov r11, 0xff
shl r11, 8
not r11
and r13, r11
movzx r11, al
shl r11, 8
or r13, r11
=== 7330
mov r12, r13
push r12
mov r15, rsp
mov rbx, r13
=== 7331
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r14
mov r13, rbx
movzx rsi, sil
=== 7332
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x11639cef5
push rbx
push 0x7f995a9c
push 0x1ae872a5
push 0x13fd679b
add qword ptr [rsp + 0x18], 0x29cf7bcb; xor
mov r15, r13
=== 7333
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1328
add rsp, 1328
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rcx
mov r14, r15
=== 7334
mov rbx, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov bpl, byte ptr [r13]
mov r14, 0xff
shl r14, 0x10
not r14
and rbx, r14
movzx r14, bpl
shl r14, 0x10
or rbx, r14
=== 7335
mov rdx, rbx
push rdx
mov r12, rsp
mov rbp, rbx
=== 7336
mov rsi, r12
mov rbx, rbp
push rsi
push 0x3003120e
push 0x56002647
push 0x108f467a
=== 7337
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov r13, rbx
movzx r12, r12b
=== 7338
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, r13
movabs rbx, 0xd84b1822
add rbx, 0x67be329e; xor
=== 7339
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 768
add rsp, 768
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r8
mov r13, rdi
=== 7340
mov r12, r13
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rdi
mov dl, byte ptr [r14]
mov rbx, 0xff
shl rbx, 0x18
not rbx
and r12, rbx
movzx rbx, dl
shl rbx, 0x18
or r12, rbx
=== 7341
mov rsi, r12
push rsi
mov rdi, rsp
mov r12, r12
=== 7342
mov rax, rdi
mov rsi, r12
push rax
push 0x638155b9
push 0x7be16e5d
push 0x40d528ff
push 0x27c66837
=== 7343
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov rdi, rsi
movzx rsi, sil
=== 7344
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xcdd8ffd4
push r13
push 0x1e7f026f
push 0x6d7c0714
push 0x10bb167e
add qword ptr [rsp + 0x18], 0x72304aec; xor
mov r12, rdi
=== 7345
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbx
mov rdi, r12
=== 7346
mov r12, rdi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r14
mov dl, byte ptr [r13]
mov r10, 0xff
shl r10, 0x20
not r10
and r12, r10
movzx r10, dl
shl r10, 0x20
or r12, r10
=== 7347
mov rsi, r12
movabs r14, 0x139579b1c
add r14, 0x7321dcc; input
=== 7348
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 8
add rsp, 8
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
mov r14, rsi
movzx rbx, bl
=== 7349
mov rax, rbx
mov rdx, 0xffffffffb6c274ea
add rdx, 0x49bd6d2b
push rdx
mov r13, r14
mul qword ptr [rsp]
mov rsi, rax
=== 7350
mov rsi, r13
xor rsi, rsi
=== 7351
mov r11, rsi
push r11
mov rdi, rsp
mov rbp, rsi
=== 7352
mov r11, rdi
mov r15, rbp
push r11
push 0x4e300f9a
push 0x57a3767c
push 0x39cb5378
=== 7353
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov rbx, r15
movzx r14, r14b
=== 7354
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xd106ea4e
add rcx, 0x6f027872; add_carry
mov rcx, qword ptr [rcx + 0xb8]
add rcx, r14
mov bl, byte ptr [rcx]
movzx rbx, bl
shl rbx, 8
add rbx, rbx
movabs rsi, 0x1281a2e40
push rsi
push 0x1c886592
push 0x7ce568f7
push 0xb762dd8
add qword ptr [rsp + 0x18], 0x17ef2c80; add
mov rbp, rbx
=== 7355
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 184
add rsp, 184
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov r15, rbp
=== 7356
mov rdi, r15
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r14
mov r14b, byte ptr [r11]
mov dil, r14b
=== 7357
mov r11, rdi
push r11
mov rbx, rsp
mov rbp, rdi
=== 7358
mov r8, rbx
mov r12, rbp
push r8
push 0xc3c6025
push 0x2e472bc1
push 0x58435e20
=== 7359
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rax
mov r12, r12
movzx rsi, sil
=== 7360
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xd8b2fa39
add rdi, 0x67566887; add_carry
mov rdi, qword ptr [rdi + 0x398]
add rdi, rsi
mov r13b, byte ptr [rdi]
movzx r13, r13b
shl r13, 0x10
add r12, r13
movabs r15, 0xf5f6f9ab
push r15
push 0x3bd8117a
push 0x3b4f63ed
push 0x2e8a36b7
push 0x182954b7
add qword ptr [rsp + 0x20], 0x4a126115; add
mov r12, r12
=== 7361
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 920
add rsp, 920
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdx
mov rbx, r12
=== 7362
mov rsi, rbx
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r14
mov r11b, byte ptr [rdx]
mov rdx, 0xff
shl rdx, 8
not rdx
and rsi, rdx
movzx rdx, r11b
shl rdx, 8
or rsi, rdx
=== 7363
mov r15, rsi
push r15
mov r15, rsp
mov r12, rsi
=== 7364
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov rdi, r12
movzx rsi, sil
=== 7365
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x13ddefbdd
add rdx, 0x22a66e3; add_carry
mov rdx, qword ptr [rdx + 0x250]
add rdx, rsi
mov r14b, byte ptr [rdx]
movzx r14, r14b
shl r14, 0x18
add rdi, r14
movabs rcx, 0x13a903d6c
push rcx
push 0x7efe4dbf
push 0x21ea6880
push 0x6c030aca
add qword ptr [rsp + 0x18], 0x5791d54; add
mov rsi, rdi
=== 7366
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 592
add rsp, 592
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rax
mov rbp, rsi
=== 7367
mov rsi, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r14
mov r13b, byte ptr [r10]
mov r15, 0xff
shl r15, 0x10
not r15
and rsi, r15
movzx r15, r13b
shl r15, 0x10
or rsi, r15
=== 7368
mov r13, rsi
push r13
mov r15, rsp
mov rdi, rsi
=== 7369
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbx
mov r15, rdi
movzx rsi, sil
=== 7370
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x1334619d8
add rdi, 0xcc348e8; add_carry
mov rdi, qword ptr [rdi + 0x588]
add rdi, rsi
mov sil, byte ptr [rdi]
movzx rsi, sil
shl rsi, 0x20
add r15, rsi
movabs r13, 0x114adfed1
push r13
push 0x3e4f193e
push 0x2627395c
push 0x24922fe1
push 0x890614f
add qword ptr [rsp + 0x20], 0x2b5b5bef; add
mov r13, r15
=== 7371
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1416
add rsp, 1416
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r10
mov rdi, r13
=== 7372
mov r12, rdi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbx
mov bl, byte ptr [rsi]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and r12, rcx
movzx rcx, bl
shl rcx, 0x18
or r12, rcx
=== 7373
mov r13, r12
push r13
mov rdi, rsp
mov r14, r12
=== 7374
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov rsi, r14
movzx rbp, bpl
=== 7375
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xc09a3211
add r8, 0x7f6f30af; add_carry
mov r8, qword ptr [r8]
add r8, rbp
mov r10b, byte ptr [r8]
movzx r10, r10b
shl r10, 0x30
add rsi, r10
mov r15, rsi
movabs rbp, 0x104dcdec2
add rbp, 0x3b2c7bfe; add
=== 7376
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov rdi, r15
=== 7377
mov r15, rdi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rsi
mov r14b, byte ptr [rbp]
mov r11, 0xff
shl r11, 0x28
not r11
and r15, r11
movzx r11, r14b
shl r11, 0x28
or r15, r11
=== 7378
mov r10, r15
push r10
mov rdi, rsp
mov r13, r15
=== 7379
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbx
mov rbp, r13
movzx rbx, bl
=== 7380
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xfbb0f0dd
push rdi
push 0x7497fde
push 0x5a033306
push 0x18c55dd
add qword ptr [rsp + 0x18], 0x445869e3; add
mov rbp, rbp
=== 7381
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rsi
mov r15, rbp
=== 7382
mov rdi, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov r15b, byte ptr [rcx]
mov rbp, 0xff
shl rbp, 0x38
not rbp
and rdi, rbp
movzx rbp, r15b
shl rbp, 0x38
or rdi, rbp
=== 7383
mov r13, rdi
movabs r15, 0xfd3f8905
add r15, 0x434a2fe3; input
=== 7384
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 16
add rsp, 16
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov r13, r13
movzx r14, r14b
=== 7385
mov rax, r14
mov rcx, 0xffffffffedaf6f20
add rcx, 0x132c3028
push rcx
mov r12, r13
mul qword ptr [rsp]
mov r15, rax
=== 7386
mov r14, r12
sub r14, r15
=== 7387
mov r8, r14
push r8
mov rbp, rsp
mov rdi, r14
=== 7388
mov rcx, rbp
mov rsi, rdi
push rcx
push 0x57334af3
push 0x51666a1a
push 0x3bc26af
push 0x51c3e38
=== 7389
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov r12, rsi
movzx r13, r13b
=== 7390
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x10dca6898
add r14, 0x323f0a28; sub_carry
mov r14, qword ptr [r14 + 0x790]
add r14, r13
mov r11b, byte ptr [r14]
movzx r11, r11b
shl r11, 8
sub r12, r11
mov rbp, r12
movabs r14, 0x1219427b5
add r14, 0x1e75430b; sub
=== 7391
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1936
add rsp, 1936
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov r15, rbp
=== 7392
mov rsi, r15
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbp
mov cl, byte ptr [r14]
mov sil, cl
=== 7393
mov r14, rsi
push r14
mov rdi, rsp
mov r14, rsi
=== 7394
mov r15, rdi
mov r13, r14
push r15
push 0x5103c5a
push 0x3537568a
push 0x1a4a5e12
=== 7395
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r8
mov rsi, r13
movzx rbp, bpl
=== 7396
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x134682bf0
add r10, 0xba146d0; sub_carry
mov r10, qword ptr [r10 + 0x28]
add r10, rbp
mov bpl, byte ptr [r10]
movzx rbp, bpl
shl rbp, 0x10
sub rsi, rbp
movabs rbx, 0xcc094c20
push rbx
push 0x41163e0b
push 0x3d611563
push 0x53605f23
push 0x1be52bf1
add qword ptr [rsp + 0x20], 0x74001ea0; sub
mov rbx, rsi
=== 7397
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 40
add rsp, 40
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r12
mov r12, rbx
=== 7398
mov r13, r12
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rsi
mov r11b, byte ptr [r8]
mov r10, 0xff
shl r10, 8
not r10
and r13, r10
movzx r10, r11b
shl r10, 8
or r13, r10
=== 7399
mov rbp, r13
push rbp
mov r13, rsp
mov r12, r13
=== 7400
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r8
mov r14, r12
movzx r12, r12b
=== 7401
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xe5e368cd
add r12, 0x5a2609f3; sub_carry
mov r12, qword ptr [r12 + 0x548]
add r12, r12
mov bl, byte ptr [r12]
movzx rbx, bl
shl rbx, 0x18
sub r14, rbx
mov r13, r14
movabs r15, 0x1168ef2aa
add r15, 0x297a7816; sub
=== 7402
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1352
add rsp, 1352
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov r14, r13
=== 7403
mov r15, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov r14b, byte ptr [r10]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r15, rdi
movzx rdi, r14b
shl rdi, 0x10
or r15, rdi
=== 7404
mov rbp, r15
push rbp
mov rbx, rsp
mov r14, r15
=== 7405
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdi
mov r13, r14
movzx rdi, dil
=== 7406
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x10f1704cc
add r10, 0x30f26df4; sub_carry
mov r10, qword ptr [r10 + 0x5e0]
add r10, rdi
mov dil, byte ptr [r10]
movzx rdi, dil
shl rdi, 0x20
sub r13, rdi
mov r15, r13
movabs r14, 0x109a9ef73
add r14, 0x365f7b4d; sub
=== 7407
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1504
add rsp, 1504
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov r13, r15
=== 7408
mov r12, r13
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r15
mov r13b, byte ptr [r11]
mov r8, 0xff
shl r8, 0x18
not r8
and r12, r8
movzx r8, r13b
shl r8, 0x18
or r12, r8
=== 7409
mov r15, r12
push r15
mov rdi, rsp
mov r14, r12
=== 7410
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov rsi, r14
movzx rdi, dil
=== 7411
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x13cd130c9
add rsi, 0x33841f7; sub_carry
mov rsi, qword ptr [rsi]
add rsi, rdi
mov r8b, byte ptr [rsi]
movzx r8, r8b
shl r8, 0x28
sub rsi, r8
movabs r15, 0xcadb643a
push r15
push 0x4d2e733c
push 0x4afb6c74
push 0x23d36f4d
add qword ptr [rsp + 0x18], 0x752e0686; sub
mov r13, rsi
=== 7412
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov rbx, r13
=== 7413
mov r13, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbp
mov r14b, byte ptr [rax]
mov rbp, 0xff
shl rbp, 0x20
not rbp
and r13, rbp
movzx rbp, r14b
shl rbp, 0x20
or r13, rbp
=== 7414
mov r11, r13
push r11
mov rsi, rsp
mov r15, r13
=== 7415
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov rdi, r15
movzx rbx, bl
=== 7416
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xd3540353
add rcx, 0x6cb56f6d; sub_carry
mov rcx, qword ptr [rcx]
add rcx, rbx
mov bl, byte ptr [rcx]
movzx rbx, bl
shl rbx, 0x30
sub rdi, rbx
mov r15, rdi
movabs r13, 0x134440f00
add r13, 0xbc55bc0; sub
=== 7417
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov rdi, r15
=== 7418
mov rdi, rdi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r12
mov r13b, byte ptr [r14]
mov r12, 0xff
shl r12, 0x28
not r12
and rdi, r12
movzx r12, r13b
shl r12, 0x28
or rdi, r12
=== 7419
mov rbx, rdi
push rbx
mov r14, rsp
mov r12, rdi
=== 7420
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov r13, r12
movzx rdi, dil
=== 7421
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xcc9b2394
add r8, 0x736e4f2c; sub_carry
mov r8, qword ptr [r8]
add r8, rdi
mov r11b, byte ptr [r8]
movzx r11, r11b
shl r11, 0x38
sub r13, r11
mov rdi, r13
movabs rbp, 0xd4a55e74
add rbp, 0x6b640c4c; sub
=== 7422
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov r15, rdi
=== 7423
mov rbx, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov r11b, byte ptr [rcx]
mov rdi, 0xff
shl rdi, 0x30
not rdi
and rbx, rdi
movzx rdi, r11b
shl rdi, 0x30
or rbx, rdi
=== 7424
mov rdi, rbx
movabs r12, 0xd25374ae
add r12, 0x6e36443a; input
=== 7425
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 28
add rsp, 28
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov r13, rdi
movzx rsi, sil
=== 7426
mov rax, rsi
mov r14, 0xffffffffd2b2385d
add r14, 0x2e090a19
push r14
mov rdi, r13
mul qword ptr [rsp]
mov rsi, rax
=== 7427
mov r13, rdi
sub r13, rsi
=== 7428
mov rcx, r13
push rcx
mov rsi, rsp
mov rdi, r13
=== 7429
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov r15, rdi
movzx rbx, bl
=== 7430
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x1052d2078
add r13, 0x3adc5248; sub_carry
mov r13, qword ptr [r13 + 0x240]
add r13, rbx
mov dl, byte ptr [r13]
movzx rdx, dl
shl rdx, 8
sub r15, rdx
movabs r10, 0x106f41c24
push r10
push 0x6d022f49
push 0x20c64f4b
push 0x5746233f
push 0x25a24f93
add qword ptr [rsp + 0x20], 0x39154e9c; sub
mov r14, r15
=== 7431
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 576
add rsp, 576
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r10
mov r12, r14
=== 7432
mov rdi, r12
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rdi
mov al, byte ptr [rbx]
mov dil, al
=== 7433
mov rbx, rdi
push rbx
mov rdi, rsp
mov rsi, rdi
=== 7434
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r13
mov rsi, rsi
movzx r12, r12b
=== 7435
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x11e6b0791
add rdx, 0x219e6b2f; sub_carry
mov rdx, qword ptr [rdx + 0x110]
add rdx, r12
mov dl, byte ptr [rdx]
movzx rdx, dl
shl rdx, 0x10
sub rsi, rdx
movabs r11, 0xc54753b5
push r11
push 0x6ee34288
push 0x1a8b0980
push 0x6c8a44f5
add qword ptr [rsp + 0x18], 0x7ac2170b; sub
mov r15, rsi
=== 7436
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 272
add rsp, 272
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rsi
mov r13, r15
=== 7437
mov r13, r13
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r14
mov r9b, byte ptr [r12]
mov rax, 0xff
shl rax, 8
not rax
and r13, rax
movzx rax, r9b
shl rax, 8
or r13, rax
=== 7438
mov r12, r13
push r12
mov r12, rsp
mov rbx, r13
=== 7439
mov r14, r12
mov rbx, rbx
push r14
push 0x2579414b
push 0x6c1235b8
push 0x3efd7b71
push 0x55e2139a
=== 7440
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r15
mov rsi, rbx
movzx r13, r13b
=== 7441
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xccc3fbf3
add rax, 0x734576cd; sub_carry
mov rax, qword ptr [rax + 0x70]
add rax, r13
mov r13b, byte ptr [rax]
movzx r13, r13b
shl r13, 0x18
sub rsi, r13
movabs rdx, 0x1141261fb
push rdx
push 0x34cd7ca2
push 0x14e142f8
push 0x14ef089e
add qword ptr [rsp + 0x18], 0x2bf708c5; sub
mov r15, rsi
=== 7442
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 112
add rsp, 112
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbx
mov rbp, r15
=== 7443
mov r13, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rsi
mov bpl, byte ptr [rdx]
mov r10, 0xff
shl r10, 0x10
not r10
and r13, r10
movzx r10, bpl
shl r10, 0x10
or r13, r10
=== 7444
mov rsi, r13
push rsi
mov r12, rsp
mov rbp, r13
=== 7445
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r15
mov rsi, rbp
movzx r13, r13b
=== 7446
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x128571676
add r11, 0x17b25c4a; sub_carry
mov r11, qword ptr [r11 + 0x490]
add r11, r13
mov cl, byte ptr [r11]
movzx rcx, cl
shl rcx, 0x20
sub rsi, rcx
mov r15, rsi
movabs r12, 0x128744c6b
add r12, 0x17951e55; sub
=== 7447
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1168
add rsp, 1168
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rsi
mov rsi, r15
=== 7448
mov r12, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov r14b, byte ptr [r14]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r12, rsi
movzx rsi, r14b
shl rsi, 0x18
or r12, rsi
=== 7449
mov rbp, r12
push rbp
mov rsi, rsp
mov rdi, r12
=== 7450
mov r15, rsi
mov r14, rdi
push r15
push 0x533c368c
push 0x63db1bd0
push 0x17276d5b
push 0x1ae7cf4
=== 7451
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r8
mov r15, r14
movzx r13, r13b
=== 7452
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x131120381
add rcx, 0xef76f3f; sub_carry
mov rcx, qword ptr [rcx]
add rcx, r13
mov r15b, byte ptr [rcx]
movzx r15, r15b
shl r15, 0x28
sub r15, r15
mov r12, r15
movabs r15, 0x116f74d8c
add r15, 0x29121d34; sub
=== 7453
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdi
mov r15, r12
=== 7454
mov r12, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov r14b, byte ptr [rbp]
mov rdx, 0xff
shl rdx, 0x20
not rdx
and r12, rdx
movzx rdx, r14b
shl rdx, 0x20
or r12, rdx
=== 7455
mov r13, r12
push r13
mov r13, rsp
mov rbp, r12
=== 7456
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov r12, rbp
movzx rdi, dil
=== 7457
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x110b44243
add rbp, 0x2f55307d; sub_carry
mov rbp, qword ptr [rbp]
add rbp, rdi
mov dl, byte ptr [rbp]
movzx rdx, dl
shl rdx, 0x30
sub r12, rdx
movabs r11, 0x12af659f0
push r11
push 0x3fab6f13
push 0x34a83949
push 0x6ead4a93
add qword ptr [rsp + 0x18], 0x151310d0; sub
mov rdi, r12
=== 7458
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbp
mov r14, rdi
=== 7459
mov r13, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov dil, byte ptr [r9]
mov rcx, 0xff
shl rcx, 0x28
not rcx
and r13, rcx
movzx rcx, dil
shl rcx, 0x28
or r13, rcx
=== 7460
mov rdi, r13
push rdi
mov rsi, rsp
mov rbx, r13
=== 7461
mov r10, rsi
mov rbp, rbx
push r10
push 0x66312fe8
push 0x3d572cef
push 0x67d339e7
=== 7462
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r9
mov rbp, rbp
movzx rdi, dil
=== 7463
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x10e6971f9
add r10, 0x31a000c7; sub_carry
mov r10, qword ptr [r10]
add r10, rdi
mov dl, byte ptr [r10]
movzx rdx, dl
shl rdx, 0x38
sub rbp, rdx
mov rbp, rbp
movabs r14, 0x125a548bc
add r14, 0x1a642204; sub
=== 7464
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rax
mov r15, rbp
=== 7465
mov r15, r15
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r13
mov dl, byte ptr [r11]
mov r11, 0xff
shl r11, 0x30
not r11
and r15, r11
movzx r11, dl
shl r11, 0x30
or r15, r11
=== 7466
mov rbp, r15
push rbp
mov rbx, rsp
mov r12, r15
=== 7467
mov rcx, rbx
mov rsi, r12
push rcx
push 0x155332a9
push 0x73944304
push 0x380244eb
push 0x37c939bd
=== 7468
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r15
mov r12, rsi
movzx r13, r13b
=== 7469
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xfd8635f2
push rdi
push 0x62f24517
push 0x5a855e88
push 0x541b0fc3
push 0x170303cd
add qword ptr [rsp + 0x20], 0x428334ce; sub
mov rbx, r12
=== 7470
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov r12, rbx
=== 7471
mov r12, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rsi
mov al, byte ptr [r13]
mov rsi, 0xff
shl rsi, 0x38
not rsi
and r12, rsi
movzx rsi, al
shl rsi, 0x38
or r12, rsi
=== 7472
movabs r11, 0x10e4255bc
push r11
push 0x7bf77d3d
push 0x18d607ac
push 0x6e9e24ab
add qword ptr [rsp + 0x18], 0x3247632c; input
mov r14, r12
=== 7473
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r11
mov rbp, r14
movzx rbx, bl
=== 7474
mov rax, rbx
mov rbx, 0xffffffff917fa253
add rbx, 0x6f24599c
push rbx
mov rdi, rbp
mul qword ptr [rsp]
mov r14, rax
=== 7475
mov r12, rdi
xor r12, r14
=== 7476
mov r14, r12
push r14
mov rdi, rsp
mov rbx, r12
=== 7477
mov rdx, rdi
mov rbp, rbx
push rdx
push 0x273946ea
push 0x590f0549
push 0x79d130b
=== 7478
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r14
mov r13, rbp
movzx rsi, sil
=== 7479
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xf64d26b6
add r15, 0x49bc3c0a; add_carry
mov r15, qword ptr [r15 + 0x698]
add r15, rsi
mov dl, byte ptr [r15]
movzx rdx, dl
shl rdx, 8
add r13, rdx
mov r14, r13
movabs rdi, 0x11ec13566
add rdi, 0x2148255a; add
=== 7480
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1688
add rsp, 1688
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r11
mov rbx, r14
=== 7481
mov rbx, rbx
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rsi
mov r13b, byte ptr [r14]
mov bl, r13b
=== 7482
mov rcx, rbx
push rcx
mov r14, rsp
mov r15, rbx
=== 7483
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov r14, r15
movzx rbx, bl
=== 7484
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x1393116e0
add rax, 0x6d84be0; add_carry
mov rax, qword ptr [rax + 0x690]
add rax, rbx
mov dl, byte ptr [rax]
movzx rdx, dl
shl rdx, 0x10
add r14, rdx
movabs rbp, 0xf5d74266
push rbp
push 0x6fb55750
push 0x36ad303d
push 0x525c5bb0
push 0x32fa306e
add qword ptr [rsp + 0x20], 0x4a32185a; add
mov rbx, r14
=== 7485
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1680
add rsp, 1680
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r14
mov r13, rbx
=== 7486
mov r15, r13
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov r10b, byte ptr [r10]
mov rcx, 0xff
shl rcx, 8
not rcx
and r15, rcx
movzx rcx, r10b
shl rcx, 8
or r15, rcx
=== 7487
mov rcx, r15
push rcx
mov r12, rsp
mov rsi, r15
=== 7488
mov r12, r12
mov rsi, rsi
push r12
push 0x6b0678f1
push 0x68665dd
push 0x769d23b4
=== 7489
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbp
mov rbx, rsi
movzx r14, r14b
=== 7490
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x1394a07d4
add r10, 0x6bf5aec; add_carry
mov r10, qword ptr [r10 + 0x110]
add r10, r14
mov r11b, byte ptr [r10]
movzx r11, r11b
shl r11, 0x18
add rbx, r11
movabs rdi, 0x12b021048
push rdi
push 0x6e83a55
push 0x3016496d
push 0x33e53c9f
add qword ptr [rsp + 0x18], 0x15074a78; add
mov r13, rbx
=== 7491
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 272
add rsp, 272
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdx
mov r13, r13
=== 7492
mov r14, r13
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rsi
mov r10b, byte ptr [rbx]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and r14, rbp
movzx rbp, r10b
shl rbp, 0x10
or r14, rbp
=== 7493
mov r8, r14
push r8
mov rdi, rsp
mov rbp, r14
=== 7494
mov r14, rdi
mov rsi, rbp
push r14
push 0x5e3426d2
push 0x199807ad
push 0x58b60142
push 0x57e11e9e
=== 7495
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdi
mov r15, rsi
movzx r12, r12b
=== 7496
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x12225533e
add rsi, 0x1de40f82; add_carry
mov rsi, qword ptr [rsi + 0x260]
add rsi, r12
mov r13b, byte ptr [rsi]
movzx r13, r13b
shl r13, 0x20
add r15, r13
movabs r14, 0x11bcde658
push r14
push 0x544229e1
push 0xcec7314
push 0x5b032bec
add qword ptr [rsp + 0x18], 0x243b7468; add
mov rbx, r15
=== 7497
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 608
add rsp, 608
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov rbx, rbx
=== 7498
mov r14, rbx
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r14
mov r9b, byte ptr [r12]
mov r12, 0xff
shl r12, 0x18
not r12
and r14, r12
movzx r12, r9b
shl r12, 0x18
or r14, r12
=== 7499
mov rcx, r14
push rcx
mov r13, rsp
mov rdi, r14
=== 7500
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov rsi, rdi
movzx r15, r15b
=== 7501
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xc4cee597
add r14, 0x7b3a7d29; add_carry
mov r14, qword ptr [r14]
add r14, r15
mov cl, byte ptr [r14]
movzx rcx, cl
shl rcx, 0x38
add rsi, rcx
mov r15, rsi
movabs rbx, 0x128f14647
add rbx, 0x17181479; add
=== 7502
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r14
mov r13, r15
=== 7503
mov r15, r13
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov r8b, byte ptr [r13]
mov rdx, 0xff
shl rdx, 0x30
not rdx
and r15, rdx
movzx rdx, r8b
shl rdx, 0x30
or r15, rdx
=== 7504
mov r12, r15
push r12
mov rdi, rsp
mov rbp, r15
=== 7505
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov r15, rbp
movzx r12, r12b
=== 7506
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xd8b01026
push rdi
push 0x695f1b97
push 0x283862af
push 0x520c76e0
add qword ptr [rsp + 0x18], 0x67594a9a; add
mov rdi, r15
=== 7507
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r11
mov r12, rdi
=== 7508
mov r13, r12
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r15
mov r12b, byte ptr [rsi]
mov rdx, 0xff
shl rdx, 0x38
not rdx
and r13, rdx
movzx rdx, r12b
shl rdx, 0x38
or r13, rdx
=== 7509
mov r12, r13
movabs rdi, 0x12a1b8536
add rdi, 0x166e33b2; input
=== 7510
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 12
add rsp, 12
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r10
mov rbx, r12
movzx rbp, bpl
=== 7511
mov rax, rbp
mov rbp, 0xfffffffff2128047
add rbp, 0xeb3683c
push rbp
mov r15, rbx
mul qword ptr [rsp]
mov rdi, rax
=== 7512
mov rsi, r15
xor rsi, rdi
=== 7513
mov r8, rsi
push r8
mov r14, rsp
mov rdi, rsi
=== 7514
mov r10, r14
mov r15, rdi
push r10
push 0xc4d3a51
push 0x6f3a5cef
push 0x1a4f63f8
=== 7515
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov r12, r15
movzx r14, r14b
=== 7516
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xc18e0798
push rdx
push 0x15556ec3
push 0x107f60cf
push 0x76f41c02
add qword ptr [rsp + 0x18], 0x7e7b4328; xor
mov rbp, r12
=== 7517
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1608
add rsp, 1608
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdi
mov rbx, rbp
=== 7518
mov r12, rbx
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r13
mov cl, byte ptr [rdi]
mov r12b, cl
=== 7519
mov r12, r12
push r12
mov r14, rsp
mov r15, r12
=== 7520
mov rbp, r14
mov rdi, r15
push rbp
push 0x2d11479c
push 0xbeb64e8
push 0x7c7455ba
push 0x1e5c7393
=== 7521
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov r14, rdi
movzx rdi, dil
=== 7522
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xca04ed57
push r14
push 0x37b3603a
push 0x4a71866
push 0x7dde09ca
push 0x6e3f4723
add qword ptr [rsp + 0x20], 0x76045d69; xor
mov r12, r14
=== 7523
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1832
add rsp, 1832
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rbx, r12
=== 7524
mov r15, rbx
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r13
mov r13b, byte ptr [r12]
mov r12, 0xff
shl r12, 8
not r12
and r15, r12
movzx r12, r13b
shl r12, 8
or r15, r12
=== 7525
mov r15, r15
push r15
mov r13, rsp
mov r15, r15
=== 7526
mov rbp, r13
mov r12, r15
push rbp
push 0x1579047f
push 0x579f6c9f
push 0x10ef5932
=== 7527
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r13
mov r15, r12
movzx rbx, bl
=== 7528
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r15
movabs r13, 0xf62ff8be
add r13, 0x49d95202; xor
=== 7529
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1328
add rsp, 1328
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdi
mov r14, r12
=== 7530
mov rbx, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbx
mov dil, byte ptr [r13]
mov r10, 0xff
shl r10, 0x10
not r10
and rbx, r10
movzx r10, dil
shl r10, 0x10
or rbx, r10
=== 7531
mov rbp, rbx
push rbp
mov r14, rsp
mov r12, rbx
=== 7532
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov r13, r12
movzx r14, r14b
=== 7533
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r13
movabs r13, 0x10b31238b
add r13, 0x34d82735; xor
=== 7534
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 640
add rsp, 640
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov rbx, r14
=== 7535
mov rbx, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov sil, byte ptr [rax]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and rbx, rbp
movzx rbp, sil
shl rbp, 0x18
or rbx, rbp
=== 7536
mov rcx, rbx
push rcx
mov r15, rsp
mov rbp, rbx
=== 7537
mov r14, r15
mov rbp, rbp
push r14
push 0x1b6f1f05
push 0x21f7f56
push 0x7ac60076
push 0x5be45b23
=== 7538
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov rbx, rbp
movzx r15, r15b
=== 7539
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x11262fba4
push rbp
push 0x6243514b
push 0x33274e94
push 0x6a0e3347
add qword ptr [rsp + 0x18], 0x2da64f1c; xor
mov r13, rbx
=== 7540
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov rbp, r13
=== 7541
mov rbx, rbp
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov r10b, byte ptr [r14]
mov rdx, 0xff
shl rdx, 0x20
not rdx
and rbx, rdx
movzx rdx, r10b
shl rdx, 0x20
or rbx, rdx
=== 7542
mov rdi, rbx
push rdi
mov r12, rsp
mov r13, rbx
=== 7543
mov r11, r12
mov rbx, r13
push r11
push 0x7fae2122
push 0x54613bff
push 0x2b2b63ac
push 0xc594a
=== 7544
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov rbx, rbx
movzx rdi, dil
=== 7545
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xcacdcd03
push rax
push 0x436655a5
push 0x4f756211
push 0x92b678d
add qword ptr [rsp + 0x18], 0x753b7dbd; xor
mov rdi, rbx
=== 7546
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov r12, rdi
=== 7547
mov r14, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov dil, byte ptr [rdx]
mov r10, 0xff
shl r10, 0x38
not r10
and r14, r10
movzx r10, dil
shl r10, 0x38
or r14, r10
=== 7548
mov rbp, r14
push rbp
mov rdi, rsp
mov r13, r14
=== 7549
mov r11, rdi
mov r14, r13
push r11
push 0xb042e6e
push 0x4f0f72b0
push 0x74891cbd
=== 7550
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov rsi, r14
movzx r13, r13b
=== 7551
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x11fe0f364
add rsi, 0x20287f5c; sub_carry
mov rsi, qword ptr [rsi + 0x630]
add rsi, r13
mov r10b, byte ptr [rsi]
movzx r10, r10b
shl r10, 8
sub rsi, r10
mov r15, rsi
movabs rbp, 0x11a5ffece
add rbp, 0x25a96bf2; sub
=== 7552
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1584
add rsp, 1584
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov r14, r15
=== 7553
mov rdi, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov r15b, byte ptr [rax]
mov dil, r15b
=== 7554
mov r14, rdi
push r14
mov rsi, rsp
mov r13, rdi
=== 7555
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov rdi, r13
movzx rbp, bpl
=== 7556
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x13bfd6493
add r14, 0x40c0e2d; sub_carry
mov r14, qword ptr [r14 + 0x5e8]
add r14, rbp
mov r8b, byte ptr [r14]
movzx r8, r8b
shl r8, 0x10
sub rdi, r8
mov rdi, rdi
movabs rbx, 0xc674eb46
add rbx, 0x79947f7a; sub
=== 7557
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1512
add rsp, 1512
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r10
mov rsi, rdi
=== 7558
mov rsi, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov r15b, byte ptr [r14]
mov rcx, 0xff
shl rcx, 8
not rcx
and rsi, rcx
movzx rcx, r15b
shl rcx, 8
or rsi, rcx
=== 7559
mov rdx, rsi
push rdx
mov r15, rsp
mov rbp, rsi
=== 7560
mov rcx, r15
mov r14, rbp
push rcx
push 0x783188d
push 0x49a25be5
push 0x3fec13af
=== 7561
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r8
mov rdi, r14
movzx rbx, bl
=== 7562
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x11ebdfdbd
add r12, 0x214b7503; sub_carry
mov r12, qword ptr [r12 + 0x728]
add r12, rbx
mov sil, byte ptr [r12]
movzx rsi, sil
shl rsi, 0x18
sub rdi, rsi
movabs r8, 0x130782a1d
push r8
push 0x3b877097
push 0x61cb4a60
push 0x705756d2
push 0x20c854e1
add qword ptr [rsp + 0x20], 0xf9140a3; sub
mov r15, rdi
=== 7563
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1832
add rsp, 1832
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdx
mov r13, r15
=== 7564
mov rbp, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov r10b, byte ptr [r15]
mov rax, 0xff
shl rax, 0x10
not rax
and rbp, rax
movzx rax, r10b
shl rax, 0x10
or rbp, rax
=== 7565
mov r8, rbp
push r8
mov r12, rsp
mov r13, rbp
=== 7566
mov r14, r12
mov rbp, r13
push r14
push 0x2f1d0fe4
push 0x185d2f34
push 0x3d3b5889
push 0x18874c23
=== 7567
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov r15, rbp
movzx r14, r14b
=== 7568
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xc5722822
add r8, 0x7a974a9e; sub_carry
mov r8, qword ptr [r8 + 0x6c0]
add r8, r14
mov bpl, byte ptr [r8]
movzx rbp, bpl
shl rbp, 0x20
sub r15, rbp
movabs r14, 0x109a62ccc
push r14
push 0x3804281f
push 0x5854367b
push 0x52846400
add qword ptr [rsp + 0x18], 0x36633df4; sub
mov r15, r15
=== 7569
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1728
add rsp, 1728
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdi
mov r12, r15
=== 7570
mov rdi, r12
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rdi
mov sil, byte ptr [rbx]
mov r11, 0xff
shl r11, 0x18
not r11
and rdi, r11
movzx r11, sil
shl r11, 0x18
or rdi, r11
=== 7571
mov rsi, rdi
push rsi
mov r14, rsp
mov r15, rdi
=== 7572
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r14
mov rsi, r15
movzx rbp, bpl
=== 7573
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xdd42f431
add rax, 0x62c67e8f; sub_carry
mov rax, qword ptr [rax + 0x7f8]
add rax, rbp
mov sil, byte ptr [rax]
movzx rsi, sil
shl rsi, 0x28
sub rsi, rsi
movabs r10, 0x13e612ea5
push r10
push 0x2eac1400
push 0x58b03980
push 0x13730b89
push 0x45f51259
add qword ptr [rsp + 0x20], 0x1a83c1b; sub
mov rbx, rsi
=== 7574
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r13
mov r14, rbx
=== 7575
mov rsi, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbp
mov bl, byte ptr [r15]
mov rbp, 0xff
shl rbp, 0x20
not rbp
and rsi, rbp
movzx rbp, bl
shl rbp, 0x20
or rsi, rbp
=== 7576
mov r13, rsi
push r13
mov r15, rsp
mov r14, rsi
=== 7577
mov r14, r15
mov rdi, r14
push r14
push 0x7fa322db
push 0x6967349e
push 0x56926ecb
push 0x2ed658f1
=== 7578
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r13
mov rdi, rdi
movzx r12, r12b
=== 7579
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xf0811cbd
add rcx, 0x4f885603; sub_carry
mov rcx, qword ptr [rcx + 0x7f8]
add rcx, r12
mov r8b, byte ptr [rcx]
movzx r8, r8b
shl r8, 0x30
sub rdi, r8
movabs r15, 0x125521ad1
push r15
push 0x11ad4975
push 0x1e2876a0
push 0x479836d9
push 0xf400ecc
add qword ptr [rsp + 0x20], 0x1ab74fef; sub
mov r12, rdi
=== 7580
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r15
mov rdi, r12
=== 7581
mov r13, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r15
mov r9b, byte ptr [r8]
mov r12, 0xff
shl r12, 0x28
not r12
and r13, r12
movzx r12, r9b
shl r12, 0x28
or r13, r12
=== 7582
mov r10, r13
push r10
mov rbx, rsp
mov rsi, r13
=== 7583
mov r10, rbx
mov r12, rsi
push r10
push 0x29aa0a88
push 0x66a81c44
push 0x1a8a2a50
=== 7584
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
mov r13, r12
movzx rsi, sil
=== 7585
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xf66d5078
add rcx, 0x499c2248; sub_carry
mov rcx, qword ptr [rcx + 0x7f8]
add rcx, rsi
mov bl, byte ptr [rcx]
movzx rbx, bl
shl rbx, 0x38
sub r13, rbx
movabs rdx, 0xc54667ad
push rdx
push 0x74a91a3b
push 0x5250158c
push 0x54dc6dea
add qword ptr [rsp + 0x18], 0x7ac30313; sub
mov r15, r13
=== 7586
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov rbp, r15
=== 7587
mov r15, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov cl, byte ptr [r10]
mov rbp, 0xff
shl rbp, 0x30
not rbp
and r15, rbp
movzx rbp, cl
shl rbp, 0x30
or r15, rbp
=== 7588
mov rdi, r15
push rdi
mov rbx, rsp
mov rdi, r15
=== 7589
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov rbx, rdi
movzx r14, r14b
=== 7590
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rbx
movabs r13, 0x13475149b
add r13, 0xb945625; sub
=== 7591
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov rsi, r12
=== 7592
mov rdi, rsi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov bl, byte ptr [r10]
mov r12, 0xff
shl r12, 0x38
not r12
and rdi, r12
movzx r12, bl
shl r12, 0x38
or rdi, r12
=== 7593
mov r8, rdi
push r8
mov r15, rsp
mov r13, rdi
=== 7594
mov r10, r15
mov rbp, r13
push r10
push 0x68db6447
push 0x357f7a79
push 0x343f0afe
=== 7595
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov r13, rbp
movzx r15, r15b
=== 7596
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x109e204aa
push rbx
push 0x365906d5
push 0x2f274e98
push 0x667f7885
push 0x7fc31e11
add qword ptr [rsp + 0x20], 0x36274e16; or
mov r15, r13
=== 7597
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rsi
mov r15, r15
=== 7598
mov rdi, r15
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbp
mov r9b, byte ptr [r8]
mov r15, 0xff
shl r15, 0x10
not r15
and rdi, r15
movzx r15, r9b
shl r15, 0x10
or rdi, r15
=== 7599
mov rcx, rdi
push rcx
mov r12, rsp
mov r15, rdi
=== 7600
mov r14, r12
mov rbp, r15
push r14
push 0x4cbf4043
push 0x75cc73b3
push 0x5f323614
push 0x2db113c1
=== 7601
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov rbp, rbp
movzx rdi, dil
=== 7602
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rbp
movabs r12, 0x1109c03f8
add r12, 0x2f6d4ec8; or
=== 7603
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdx
mov r15, r13
=== 7604
mov r13, r15
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r12
mov r8b, byte ptr [r11]
mov r14, 0xff
shl r14, 0x18
not r14
and r13, r14
movzx r14, r8b
shl r14, 0x18
or r13, r14
=== 7605
mov r15, r13
push r15
mov r15, rsp
mov rdi, r13
=== 7606
mov rax, r15
mov rsi, rdi
push rax
push 0x5839264e
push 0x56ed2291
push 0x4c77249c
push 0x27b315b9
=== 7607
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rax
mov rdi, rsi
movzx r15, r15b
=== 7608
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xf4c8ddd5
push r15
push 0x4bd617c6
push 0x9430a2d
push 0x13e8409e
add qword ptr [rsp + 0x18], 0x4b4074eb; or
mov rbx, rdi
=== 7609
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r13
mov rdi, rbx
=== 7610
mov r13, rdi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r13
mov r10b, byte ptr [r11]
mov rcx, 0xff
shl rcx, 0x30
not rcx
and r13, rcx
movzx rcx, r10b
shl rcx, 0x30
or r13, rcx
=== 7611
mov rbp, r13
movabs rbx, 0xc215e91e
add rbx, 0x7dea28d2
test rbp, rbp
lea r12, [rip - 0x3ffad4]
cmovne r12, rbx
jmp r12
=== 7612
movabs rbp, 0x107eb6bd1
add rbp, 0x389e4d17; input
=== 7613
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 13
add rsp, 13
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbx
movzx r15, r15b
=== 7614
mov rax, r15
mov rbp, 0xffffffffccc7da6e
add rbp, 0x33835294
push rbp
mul qword ptr [rsp]
mov r14, rax
=== 7615
mov rdi, r14
push rdi
mov r14, rsp
mov rbx, r14
=== 7616
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov rbp, rbx
movzx rsi, sil
=== 7617
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x12c2ccd84
push r10
push 0x36fa5918
push 0x2ca779be
push 0x60aa30ff
add qword ptr [rsp + 0x18], 0x13dc7d3c; xor
mov rsi, rbp
=== 7618
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 464
add rsp, 464
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov rsi, rsi
=== 7619
mov rbp, rsi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbp
mov r14b, byte ptr [r11]
mov bpl, r14b
=== 7620
mov r15, rbp
push r15
mov r15, rsp
mov rdi, rbp
=== 7621
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov rbp, rdi
movzx rdi, dil
=== 7622
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rbp
movabs r12, 0xce38d285
add r12, 0x71d0783b; xor
=== 7623
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1480
add rsp, 1480
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov rbx, rbx
=== 7624
mov r14, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov r12b, byte ptr [rbp]
mov r11, 0xff
shl r11, 8
not r11
and r14, r11
movzx r11, r12b
shl r11, 8
or r14, r11
=== 7625
mov r15, r14
push r15
mov rbx, rsp
mov rbp, r14
=== 7626
mov r8, rbx
mov r13, rbp
push r8
push 0x32e85446
push 0x39ea12f4
push 0x14b47eea
push 0x1e8879d0
=== 7627
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rcx
mov rsi, r13
movzx r12, r12b
=== 7628
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rsi
movabs rdi, 0x12915fd25
add rdi, 0x16f34d9b; xor
=== 7629
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 712
add rsp, 712
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov r14, r14
=== 7630
mov r13, r14
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r13
mov dil, byte ptr [rsi]
mov r12, 0xff
shl r12, 0x10
not r12
and r13, r12
movzx r12, dil
shl r12, 0x10
or r13, r12
=== 7631
mov rdi, r13
push rdi
mov rdi, rsp
mov r12, r13
=== 7632
mov rdi, rdi
mov r12, r12
push rdi
push 0x134174c4
push 0x48d05d00
push 0x27ed402a
=== 7633
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov rbp, r12
movzx r12, r12b
=== 7634
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rbp
movabs rsi, 0x123df1552
add rsi, 0x1c2a356e; xor
=== 7635
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 600
add rsp, 600
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rax
mov rdi, r15
=== 7636
mov rbx, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbp
mov sil, byte ptr [rcx]
mov r13, 0xff
shl r13, 0x18
not r13
and rbx, r13
movzx r13, sil
shl r13, 0x18
or rbx, r13
=== 7637
mov r10, rbx
push r10
mov r13, rsp
mov r14, rbx
=== 7638
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov r13, r14
movzx rsi, sil
=== 7639
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xd0a6f3db
push rsi
push 0x31a624ca
push 0x4b7d46c5
push 0x51724b8b
push 0x45c92076
add qword ptr [rsp + 0x20], 0x6f6256e5; xor
mov rdi, r13
=== 7640
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rsi
mov rbp, rdi
=== 7641
mov r12, rbp
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rdi
mov bpl, byte ptr [rbx]
mov r14, 0xff
shl r14, 0x20
not r14
and r12, r14
movzx r14, bpl
shl r14, 0x20
or r12, r14
=== 7642
mov rbp, r12
push rbp
mov rbp, rsp
mov r15, r12
=== 7643
mov rdx, rbp
mov rbx, r15
push rdx
push 0x52711576
push 0x5c2165e0
push 0x328f78a0
=== 7644
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov r14, rbx
movzx rdi, dil
=== 7645
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xf6a6d4bc
push rbx
push 0x64fb7ad7
push 0x280f6774
push 0x249c2e19
add qword ptr [rsp + 0x18], 0x49627604; xor
mov rbp, r14
=== 7646
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdi
mov r14, rbp
=== 7647
mov r14, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbp
mov sil, byte ptr [r8]
mov r9, 0xff
shl r9, 0x28
not r9
and r14, r9
movzx r9, sil
shl r9, 0x28
or r14, r9
=== 7648
mov rcx, r14
push rcx
mov r15, rsp
mov rbp, r14
=== 7649
mov rbx, r15
mov rsi, rbp
push rbx
push 0x121d7135
push 0x13504661
push 0x3371233e
=== 7650
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r9
mov r15, rsi
movzx r13, r13b
=== 7651
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xc94636ab
push r15
push 0x388f0f37
push 0xd8d07e1
push 0x3ea4608f
push 0x1a1e1a35
add qword ptr [rsp + 0x20], 0x76c31415; xor
mov r12, r15
=== 7652
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdx
mov rdi, r12
=== 7653
mov r14, rdi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r13
mov r15b, byte ptr [rbp]
mov rdi, 0xff
shl rdi, 0x30
not rdi
and r14, rdi
movzx rdi, r15b
shl rdi, 0x30
or r14, rdi
=== 7654
mov rsi, r14
movabs r12, 0xdff95c53
add r12, 0x60905c95; input
=== 7655
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 9
add rsp, 9
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r9
mov r14, rsi
movzx r13, r13b
=== 7656
mov rax, r13
mov rcx, 0xffffffffee96889d
add rcx, 0x11ee328f
push rcx
mov rsi, r14
mul qword ptr [rsp]
mov rbx, rax
=== 7657
mov rsi, rsi
sub rsi, rbx
=== 7658
mov r14, rsi
push r14
mov r15, rsp
mov r13, rsi
=== 7659
mov r8, r15
mov rdi, r13
push r8
push 0x19b25dcc
push 0x5ac41ace
push 0x345f6bf4
=== 7660
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov rbp, rdi
movzx rbx, bl
=== 7661
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xc815054e
push r14
push 0x178a2d02
push 0x5a952c8f
push 0x19840871
push 0x43a90a38
add qword ptr [rsp + 0x20], 0x77f44572; xor
mov rdi, rbp
=== 7662
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 352
add rsp, 352
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov r13, rdi
=== 7663
mov rbp, r13
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov dl, byte ptr [rcx]
mov bpl, dl
=== 7664
mov r10, rbp
push r10
mov rbp, rsp
mov rbx, rbp
=== 7665
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
mov rbx, rbx
movzx rsi, sil
=== 7666
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rbx
movabs r12, 0x10b81e24e
add r12, 0x34876872; xor
=== 7667
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 808
add rsp, 808
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r11
mov rbp, r15
=== 7668
mov rbx, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov r9b, byte ptr [r9]
mov r13, 0xff
shl r13, 8
not r13
and rbx, r13
movzx r13, r9b
shl r13, 8
or rbx, r13
=== 7669
mov r8, rbx
push r8
mov r14, rsp
mov r12, rbx
=== 7670
mov r11, r14
mov rsi, r12
push r11
push 0x128e5c2d
push 0xfaf448a
push 0x4d7329a8
push 0x6d326c70
=== 7671
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdi
mov r13, rsi
movzx rsi, sil
=== 7672
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r13
movabs rdi, 0xf7fb345d
add rdi, 0x480e1663; xor
=== 7673
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1704
add rsp, 1704
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbp
mov r12, rbx
=== 7674
mov r12, r12
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rsi
mov al, byte ptr [r14]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r12, rdi
movzx rdi, al
shl rdi, 0x10
or r12, rdi
=== 7675
mov r13, r12
push r13
mov r13, rsp
mov r14, r12
=== 7676
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbx
mov rdi, r14
movzx r15, r15b
=== 7677
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rdi
movabs rbp, 0x127d4264d
add rbp, 0x18352473; xor
=== 7678
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 528
add rsp, 528
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rsi
mov r14, rdi
=== 7679
mov r14, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov r13b, byte ptr [r11]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r14, rsi
movzx rsi, r13b
shl rsi, 0x18
or r14, rsi
=== 7680
mov rcx, r14
push rcx
mov rsi, rsp
mov r14, r14
=== 7681
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov r12, r14
movzx rbp, bpl
=== 7682
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r12
movabs r15, 0xdc13fd14
add r15, 0x63f54dac; xor
=== 7683
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r14
mov r15, rbx
=== 7684
mov rsi, r15
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbp
mov r9b, byte ptr [r12]
mov r15, 0xff
shl r15, 0x20
not r15
and rsi, r15
movzx r15, r9b
shl r15, 0x20
or rsi, r15
=== 7685
mov rsi, rsi
push rsi
mov r14, rsp
mov r15, rsi
=== 7686
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbp
mov rbp, r15
movzx r14, r14b
=== 7687
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rbp
movabs r13, 0x11a06d612
add r13, 0x260274ae; xor
=== 7688
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov r12, rbp
=== 7689
mov rbx, r12
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbp
mov r13b, byte ptr [r14]
mov rbp, 0xff
shl rbp, 0x38
not rbp
and rbx, rbp
movzx rbp, r13b
shl rbp, 0x38
or rbx, rbp
=== 7690
mov rsi, rbx
movabs r12, 0x12430509c
add r12, 0x1c59684c; input
=== 7691
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 25
add rsp, 25
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r14
mov rbx, rsi
movzx r15, r15b
=== 7692
mov rax, r15
mov r15, 0xffffffffde3ae626
add r15, 0x223446fb
push r15
mov rdi, rbx
mul qword ptr [rsp]
mov r12, rax
=== 7693
mov rbx, rdi
xor rbx, r12
=== 7694
mov r12, rbx
push r12
mov r14, rsp
mov r12, rbx
=== 7695
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov rsi, r12
movzx r13, r13b
=== 7696
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x13b5b203c
add r14, 0x4ae4284; add_carry
mov r14, qword ptr [r14 + 0x1d0]
add r14, r13
mov r14b, byte ptr [r14]
movzx r14, r14b
shl r14, 8
add rsi, r14
movabs rbp, 0xf24cdb7d
push rbp
push 0x547e0cc5
push 0x6fe12241
push 0x41ac313b
push 0x7d42440
add qword ptr [rsp + 0x20], 0x4dbc7f43; add
mov r13, rsi
=== 7697
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 464
add rsp, 464
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov rsi, r13
=== 7698
mov r15, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov r10b, byte ptr [r9]
mov r15b, r10b
=== 7699
mov rcx, r15
push rcx
mov rbp, rsp
mov r14, r15
=== 7700
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r9
mov rsi, r14
movzx rdi, dil
=== 7701
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x1220030d7
add rax, 0x1e0931e9; add_carry
mov rax, qword ptr [rax + 0x98]
add rax, rdi
mov r8b, byte ptr [rax]
movzx r8, r8b
shl r8, 0x10
add rsi, r8
movabs r11, 0xcb1de8d7
push r11
push 0x3f972c43
push 0x4a7d2a34
push 0x3c8e1f74
push 0x4382118f
add qword ptr [rsp + 0x20], 0x74eb71e9; add
mov r13, rsi
=== 7702
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 152
add rsp, 152
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r14
mov rsi, r13
=== 7703
mov r14, rsi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov r11b, byte ptr [r11]
mov r15, 0xff
shl r15, 8
not r15
and r14, r15
movzx r15, r11b
shl r15, 8
or r14, r15
=== 7704
mov rbp, r14
push rbp
mov rbp, rsp
mov r13, r14
=== 7705
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov rbx, r13
movzx rsi, sil
=== 7706
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xcb365893
add r8, 0x74d30a2d; add_carry
mov r8, qword ptr [r8 + 0x100]
add r8, rsi
mov r11b, byte ptr [r8]
movzx r11, r11b
shl r11, 0x18
add rbx, r11
mov r12, rbx
movabs rbp, 0x1076eecec
add rbp, 0x389a6dd4; add
=== 7707
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 256
add rsp, 256
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov rdi, r12
=== 7708
mov rdi, rdi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r15
mov al, byte ptr [rsi]
mov rcx, 0xff
shl rcx, 0x10
not rcx
and rdi, rcx
movzx rcx, al
shl rcx, 0x10
or rdi, rcx
=== 7709
mov rax, rdi
push rax
mov r14, rsp
mov r12, rdi
=== 7710
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov r12, r12
movzx r15, r15b
=== 7711
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xe68206bd
add rax, 0x59875c03; add_carry
mov rax, qword ptr [rax + 0x80]
add rax, r15
mov r14b, byte ptr [rax]
movzx r14, r14b
shl r14, 0x20
add r12, r14
movabs rax, 0xc8e8e0e7
push rax
push 0x27283b35
push 0x583b36ec
push 0x2bb4602b
add qword ptr [rsp + 0x18], 0x772079d9; add
mov rdi, r12
=== 7712
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_SMALL 128
add rsp, 128
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r10
mov rdi, rdi
=== 7713
mov rsi, rdi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rsi
mov r15b, byte ptr [rdi]
mov r14, 0xff
shl r14, 0x18
not r14
and rsi, r14
movzx r14, r15b
shl r14, 0x18
or rsi, r14
=== 7714
mov r14, rsi
push r14
mov r15, rsp
mov rbp, rsi
=== 7715
mov r15, r15
mov r13, rbp
push r15
push 0x381c3d3e
push 0x76171e31
push 0x323a6563
=== 7716
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov rsi, r13
movzx rbx, bl
=== 7717
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xdb233fe8
add rsi, 0x64e622d8; add_carry
mov rsi, qword ptr [rsi]
add rsi, rbx
mov r14b, byte ptr [rsi]
movzx r14, r14b
shl r14, 0x28
add rsi, r14
movabs rbx, 0x119e83a60
push rbx
push 0x3d5d1bb5
push 0x11b94c66
push 0x903f29
push 0x561a494e
add qword ptr [rsp + 0x20], 0x26212060; add
mov rsi, rsi
=== 7718
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov r15, rsi
=== 7719
mov r14, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov r12b, byte ptr [rcx]
mov rbp, 0xff
shl rbp, 0x20
not rbp
and r14, rbp
movzx rbp, r12b
shl rbp, 0x20
or r14, rbp
=== 7720
mov r11, r14
push r11
mov rsi, rsp
mov rdi, r14
=== 7721
mov r8, rsi
mov rbx, rdi
push r8
push 0x642a699e
push 0x7ed43e96
push 0x31590687
=== 7722
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r13
mov rbp, rbx
movzx r14, r14b
=== 7723
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xdf09f382
add r11, 0x60ff6f3e; add_carry
mov r11, qword ptr [r11]
add r11, r14
mov r11b, byte ptr [r11]
movzx r11, r11b
shl r11, 0x38
add rbp, r11
mov r14, rbp
movabs rbx, 0xecea0b94
add rbx, 0x531f4f2c; add
=== 7724
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov rdi, r14
=== 7725
mov rdi, rdi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbp
mov r15b, byte ptr [rbp]
mov rbp, 0xff
shl rbp, 0x30
not rbp
and rdi, rbp
movzx rbp, r15b
shl rbp, 0x30
or rdi, rbp
=== 7726
mov rbp, rdi
movabs rsi, 0xce2baf8c
add rsi, 0x725e095c; input
=== 7727
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 29
add rsp, 29
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbx
mov r14, rbp
movzx rdi, dil
=== 7728
mov rax, rdi
mov rdx, 0xffffffffaad16752
add rdx, 0x558e7c3d
push rdx
mov rdi, r14
mul qword ptr [rsp]
mov rsi, rax
=== 7729
mov r14, rdi
add r14, rsi
=== 7730
mov rdx, r14
push rdx
mov r12, rsp
mov rbp, r14
=== 7731
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rax
mov r12, rbp
movzx r15, r15b
=== 7732
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xf2706b5d
add rax, 0x4d990763; sub_carry
mov rax, qword ptr [rax + 0x100]
add rax, r15
mov cl, byte ptr [rax]
movzx rcx, cl
shl rcx, 8
sub r12, rcx
mov r12, r12
movabs rbx, 0x119d5098a
add rbx, 0x26346136; sub
=== 7733
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 256
add rsp, 256
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdi
mov r14, r12
=== 7734
mov rbx, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r13
mov cl, byte ptr [r15]
mov bl, cl
=== 7735
mov rdx, rbx
push rdx
mov rdi, rsp
mov r13, rbx
=== 7736
mov rax, rdi
mov rbx, r13
push rax
push 0x37741833
push 0x401b5c66
push 0x2cfd4d4c
push 0x39cd1cae
=== 7737
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r13
mov rsi, rbx
movzx r15, r15b
=== 7738
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x12c5d6534
add rsi, 0x13ac0d8c; sub_carry
mov rsi, qword ptr [rsi + 0x3d8]
add rsi, r15
mov sil, byte ptr [rsi]
movzx rsi, sil
shl rsi, 0x10
sub rsi, rsi
movabs r14, 0x128774d64
push r14
push 0xde5405d
push 0x2a186309
push 0x2e304268
push 0x39c4820
add qword ptr [rsp + 0x20], 0x17921d5c; sub
mov rdi, rsi
=== 7739
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 984
add rsp, 984
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r12
mov rsi, rdi
=== 7740
mov r14, rsi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov r8b, byte ptr [rcx]
mov rdx, 0xff
shl rdx, 8
not rdx
and r14, rdx
movzx rdx, r8b
shl rdx, 8
or r14, rdx
=== 7741
mov rcx, r14
push rcx
mov rdi, rsp
mov rbp, r14
=== 7742
mov rax, rdi
mov r12, rbp
push rax
push 0x7d771a40
push 0x20ee2420
push 0x12187316
=== 7743
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rsi
mov rbp, r12
movzx r12, r12b
=== 7744
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xe2c8581a
add rax, 0x5d411aa6; sub_carry
mov rax, qword ptr [rax + 0x400]
add rax, r12
mov r11b, byte ptr [rax]
movzx r11, r11b
shl r11, 0x18
sub rbp, r11
mov r15, rbp
movabs r12, 0xd88af3a8
add r12, 0x677e7718; sub
=== 7745
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1024
add rsp, 1024
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov r13, r15
=== 7746
mov rdi, r13
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov r9b, byte ptr [rcx]
mov r11, 0xff
shl r11, 0x10
not r11
and rdi, r11
movzx r11, r9b
shl r11, 0x10
or rdi, r11
=== 7747
mov rbp, rdi
push rbp
mov rbp, rsp
mov rbx, rdi
=== 7748
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov r14, rbx
movzx r13, r13b
=== 7749
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x1023728c1
add rax, 0x3dd249ff; sub_carry
mov rax, qword ptr [rax + 0x310]
add rax, r13
mov dl, byte ptr [rax]
movzx rdx, dl
shl rdx, 0x20
sub r14, rdx
movabs r15, 0x12dfe51a7
push r15
push 0x24267ecf
push 0x4d3559ea
push 0x43c63c3
push 0x7aa367ae
add qword ptr [rsp + 0x20], 0x120b1919; sub
mov r15, r14
=== 7750
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 784
add rsp, 784
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rax
mov rbx, r15
=== 7751
mov rdi, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov r8b, byte ptr [rax]
mov r9, 0xff
shl r9, 0x18
not r9
and rdi, r9
movzx r9, r8b
shl r9, 0x18
or rdi, r9
=== 7752
mov r10, rdi
push r10
mov r15, rsp
mov r13, rdi
=== 7753
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov r14, r13
movzx rsi, sil
=== 7754
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x10c3d02b2
add rdi, 0x33cc700e; sub_carry
mov rdi, qword ptr [rdi]
add rdi, rsi
mov r13b, byte ptr [rdi]
movzx r13, r13b
shl r13, 0x28
sub r14, r13
mov r13, r14
movabs r15, 0x129f73acc
add r15, 0x16122ff4; sub
=== 7755
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov rbp, r13
=== 7756
mov rdi, rbp
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov r13b, byte ptr [r13]
mov rbp, 0xff
shl rbp, 0x20
not rbp
and rdi, rbp
movzx rbp, r13b
shl rbp, 0x20
or rdi, rbp
=== 7757
mov rax, rdi
push rax
mov rbp, rsp
mov r12, rdi
=== 7758
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r15
mov rbx, r12
movzx r12, r12b
=== 7759
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xe6624e1f
add r10, 0x59a724a1; sub_carry
mov r10, qword ptr [r10]
add r10, r12
mov bl, byte ptr [r10]
movzx rbx, bl
shl rbx, 0x30
sub rbx, rbx
mov rsi, rbx
movabs rdi, 0x13c42691c
add rdi, 0x3c701a4; sub
=== 7760
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdi
mov r13, rsi
=== 7761
mov rbp, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov dil, byte ptr [r15]
mov rsi, 0xff
shl rsi, 0x28
not rsi
and rbp, rsi
movzx rsi, dil
shl rsi, 0x28
or rbp, rsi
=== 7762
mov r15, rbp
push r15
mov rbx, rsp
mov r14, rbp
=== 7763
mov rbp, rbx
mov rbx, r14
push rbp
push 0x71fc59cc
push 0x17146c91
push 0x38725db8
push 0x5ce570f3
=== 7764
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r11
mov rdi, rbx
movzx rbp, bpl
=== 7765
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rdi
movabs rbp, 0x1260b35c3
add rbp, 0x19fe34fd; sub
=== 7766
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r15
mov rdi, r13
=== 7767
mov r15, rdi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r12
mov bl, byte ptr [rsi]
mov r12, 0xff
shl r12, 0x38
not r12
and r15, r12
movzx r12, bl
shl r12, 0x38
or r15, r12
=== 7768
mov r15, r15
movabs r13, 0xddb35af9
add r13, 0x62d65def; input
=== 7769
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 21
add rsp, 21
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov r13, r15
movzx rbp, bpl
=== 7770
mov rax, rbp
mov rdx, 0xffffffffc9adcbfa
add rdx, 0x373c54ab
push rdx
mov rbx, r13
mul qword ptr [rsp]
mov rbp, rax
=== 7771
mov r15, rbx
add r15, rbp
=== 7772
mov rsi, r15
push rsi
mov rbx, rsp
mov r15, r15
=== 7773
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r14
mov rbp, r15
movzx rsi, sil
=== 7774
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x1236ae9af
push r14
push 0x6ee770a8
push 0x2a5819c3
push 0x7dbe7f4d
add qword ptr [rsp + 0x18], 0x1c9e6111; xor
mov r14, rbp
=== 7775
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1880
add rsp, 1880
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rsi
mov r15, r14
=== 7776
mov r12, r15
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbp
mov r13b, byte ptr [rdi]
mov r12b, r13b
=== 7777
mov r12, r12
push r12
mov rbp, rsp
mov r15, r12
=== 7778
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r14
mov r12, r15
movzx rbp, bpl
=== 7779
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xcfea2166
push rdi
push 0x31561d07
push 0x612e0740
push 0x3b43d5
add qword ptr [rsp + 0x18], 0x701f295a; xor
mov rbp, r12
=== 7780
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1248
add rsp, 1248
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov rbx, rbp
=== 7781
mov rbx, rbx
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r15
mov r14b, byte ptr [rdi]
mov r15, 0xff
shl r15, 8
not r15
and rbx, r15
movzx r15, r14b
shl r15, 8
or rbx, r15
=== 7782
mov rcx, rbx
push rcx
mov r14, rsp
mov r12, rbx
=== 7783
mov rsi, r14
mov r13, r12
push rsi
push 0x28b70b0
push 0xa614cf9
push 0x19c06602
push 0x3824680e
=== 7784
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov rdi, r13
movzx rbx, bl
=== 7785
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x1287c3b15
push rdx
push 0xadf0d63
push 0x7f2e1f21
push 0x766c7fba
push 0x33a5060d
add qword ptr [rsp + 0x20], 0x178d0fab; xor
mov rsi, rdi
=== 7786
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 952
add rsp, 952
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov r14, rsi
=== 7787
mov rdi, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov r12b, byte ptr [r15]
mov r8, 0xff
shl r8, 0x10
not r8
and rdi, r8
movzx r8, r12b
shl r8, 0x10
or rdi, r8
=== 7788
mov r10, rdi
push r10
mov rdi, rsp
mov r13, rdi
=== 7789
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rsi, r13
movzx r13, r13b
=== 7790
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rsi
movabs r15, 0xd4bf0aa2
add r15, 0x6b4a401e; xor
=== 7791
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 768
add rsp, 768
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rdi, rdi
=== 7792
mov rsi, rdi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov r10b, byte ptr [r9]
mov r13, 0xff
shl r13, 0x18
not r13
and rsi, r13
movzx r13, r10b
shl r13, 0x18
or rsi, r13
=== 7793
mov rax, rsi
push rax
mov rbx, rsp
mov r14, rsi
=== 7794
mov r13, rbx
mov rsi, r14
push r13
push 0x4be131ae
push 0x2ca03868
push 0x15712101
=== 7795
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov r12, rsi
movzx rsi, sil
=== 7796
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xe388e0cc
push rbp
push 0x425970a3
push 0x62f66e87
push 0x2a9f43f0
add qword ptr [rsp + 0x18], 0x5c8069f4; xor
mov rdi, r12
=== 7797
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov rbx, rdi
=== 7798
mov r15, rbx
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r13
mov r10b, byte ptr [rdi]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and r15, rdx
movzx rdx, r10b
shl rdx, 0x28
or r15, rdx
=== 7799
mov rbx, r15
push rbx
mov r14, rsp
mov rsi, r15
=== 7800
mov rdi, r14
mov r13, rsi
push rdi
push 0xb94659f
push 0x342d0e6b
push 0x375d52c4
push 0x471d16fa
=== 7801
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov r15, r13
movzx r14, r14b
=== 7802
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r15
movabs r14, 0xf0bdd8d5
add r14, 0x4f4b71eb; xor
=== 7803
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbx
mov rsi, rbp
=== 7804
mov rsi, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r15
mov cl, byte ptr [r13]
mov r15, 0xff
shl r15, 0x30
not r15
and rsi, r15
movzx r15, cl
shl r15, 0x30
or rsi, r15
=== 7805
mov rsi, rsi
movabs rbx, 0xc7875f50
add rbx, 0x79025998; input
=== 7806
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 17
add rsp, 17
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov r14, rsi
movzx r15, r15b
=== 7807
mov rax, r15
mov r10, 0xffffffffe23da000
add r10, 0x1e1e77aa
push r10
mov r14, r14
mul qword ptr [rsp]
mov rbx, rax
=== 7808
mov rdi, r14
xor rdi, rbx
=== 7809
mov rbp, rdi
push rbp
mov r12, rsp
mov r14, rdi
=== 7810
mov rax, r12
mov rbx, r14
push rax
push 0x30c41757
push 0x33ce262f
push 0x7c296880
push 0x2b6116e0
=== 7811
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbp
mov rdi, rbx
movzx r15, r15b
=== 7812
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xfeec25ea
push r11
push 0x17e0b21
push 0x105d4e5a
push 0x7bb6741
add qword ptr [rsp + 0x18], 0x411d24d6; xor
mov r15, rdi
=== 7813
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 360
add rsp, 360
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdi
mov r15, r15
=== 7814
mov r13, r15
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r12
mov r11b, byte ptr [rsi]
mov r13b, r11b
=== 7815
mov r14, r13
push r14
mov r12, rsp
mov r13, r13
=== 7816
mov r8, r12
mov rsi, r13
push r8
push 0x106b0f05
push 0x7be002d9
push 0x2b5a4345
=== 7817
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r13
mov r15, rsi
movzx r13, r13b
=== 7818
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x10a914662
push rbx
push 0x4e1d3fd8
push 0x271247d2
push 0xa9d3667
add qword ptr [rsp + 0x18], 0x3578045e; xor
mov r12, r15
=== 7819
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1104
add rsp, 1104
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r14, r12
=== 7820
mov rdi, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov r8b, byte ptr [r10]
mov rcx, 0xff
shl rcx, 8
not rcx
and rdi, rcx
movzx rcx, r8b
shl rcx, 8
or rdi, rcx
=== 7821
mov rsi, rdi
push rsi
mov rsi, rsp
mov r15, rdi
=== 7822
mov r12, rsi
mov rdi, r15
push r12
push 0x42ba2164
push 0x7ed4feb
push 0x7e4b6794
=== 7823
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov rsi, rdi
movzx rdi, dil
=== 7824
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x1064f3543
push r11
push 0x746e57e5
push 0x11b232a7
push 0xa1367e1
add qword ptr [rsp + 0x18], 0x39ba157d; xor
mov rsi, rsi
=== 7825
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1400
add rsp, 1400
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rcx
mov r13, rsi
=== 7826
mov rbx, r13
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r12
mov sil, byte ptr [rdi]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and rbx, rbp
movzx rbp, sil
shl rbp, 0x10
or rbx, rbp
=== 7827
mov rbx, rbx
push rbx
mov rbx, rsp
mov r12, rbx
=== 7828
mov rbx, rbx
mov r13, r12
push rbx
push 0x77943231
push 0x534c7694
push 0x2de21a6c
push 0x6f0317b7
=== 7829
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov r13, r13
movzx rbp, bpl
=== 7830
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r13
movabs rdi, 0x10ccce3eb
add rdi, 0x333c66d5; xor
=== 7831
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 208
add rsp, 208
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r15, rsi
=== 7832
mov r12, r15
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov r15b, byte ptr [r15]
mov r9, 0xff
shl r9, 0x18
not r9
and r12, r9
movzx r9, r15b
shl r9, 0x18
or r12, r9
=== 7833
mov r11, r12
push r11
mov r14, rsp
mov rdi, r12
=== 7834
mov rsi, r14
mov r14, rdi
push rsi
push 0x6fc64330
push 0x127c05c4
push 0x69aa5a70
=== 7835
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r11
mov r13, r14
movzx rdi, dil
=== 7836
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r13
movabs r15, 0xe48ce742
add r15, 0x5b7c637e; xor
=== 7837
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rsi
mov rsi, r12
=== 7838
mov r14, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbp
mov dil, byte ptr [r8]
mov r13, 0xff
shl r13, 0x20
not r13
and r14, r13
movzx r13, dil
shl r13, 0x20
or r14, r13
=== 7839
mov r8, r14
push r8
mov rbp, rsp
mov rdi, r14
=== 7840
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r14
mov r15, rdi
movzx rsi, sil
=== 7841
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x1298d26b5
push r12
push 0x14e44b3f
push 0x4a551b95
push 0x55976c91
push 0x42894412
add qword ptr [rsp + 0x20], 0x167c240b; xor
mov r14, r15
=== 7842
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rsi
mov r14, r14
=== 7843
mov r15, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbp
mov sil, byte ptr [r11]
mov rcx, 0xff
shl rcx, 0x30
not rcx
and r15, rcx
movzx rcx, sil
shl rcx, 0x30
or r15, rcx
=== 7844
movabs rdx, 0xf851a2fe
push rdx
push 0x102c2f2b
push 0x50673d4e
push 0x16e266d1
push 0x1ae47361
add qword ptr [rsp + 0x20], 0x483815ea; input
mov r12, r15
=== 7845
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rax
mov rbx, r12
movzx rsi, sil
=== 7846
mov rax, rsi
mov rsi, 0xfffffffffa1e8dd5
add rsi, 0x69b70db
push rsi
mov rsi, rbx
mul qword ptr [rsp]
mov rbp, rax
=== 7847
mov r12, rsi
sub r12, rbp
=== 7848
mov r12, r12
push r12
mov rbx, rsp
mov r13, r12
=== 7849
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov r15, r13
movzx r13, r13b
=== 7850
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x103cef874
add r15, 0x3c3a7a4c; sub_carry
mov r15, qword ptr [r15 + 0x7d8]
add r15, r13
mov sil, byte ptr [r15]
movzx rsi, sil
shl rsi, 8
sub r15, rsi
mov rbp, r15
movabs r13, 0x1159c361c
add r13, 0x2a6d34a4; sub
=== 7851
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2008
add rsp, 2008
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdi
mov rbp, rbp
=== 7852
mov rbx, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r14
mov r10b, byte ptr [rdx]
mov bl, r10b
=== 7853
mov r12, rbx
push r12
mov rdi, rsp
mov r14, rbx
=== 7854
mov rdi, rdi
mov r15, r14
push rdi
push 0x10da157e
push 0x68d3b27
push 0x57ee2726
push 0x487559b0
=== 7855
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r13
mov r14, r15
movzx rbx, bl
=== 7856
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xf5fd6e26
add r15, 0x4a0c049a; sub_carry
mov r15, qword ptr [r15 + 0x10]
add r15, rbx
mov r13b, byte ptr [r15]
movzx r13, r13b
shl r13, 0x10
sub r14, r13
mov r15, r14
movabs rsi, 0xe03d2467
add rsi, 0x5fcc4659; sub
=== 7857
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_SMALL 16
add rsp, 16
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov r15, r15
=== 7858
mov r14, r15
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rsi
mov dil, byte ptr [rsi]
mov rbp, 0xff
shl rbp, 8
not rbp
and r14, rbp
movzx rbp, dil
shl rbp, 8
or r14, rbp
=== 7859
mov r12, r14
push r12
mov r12, rsp
mov r14, r14
=== 7860
mov r8, r12
mov rbx, r14
push r8
push 0x4c1763a2
push 0x52741695
push 0x3a6617fc
=== 7861
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov r12, rbx
movzx r14, r14b
=== 7862
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x125c9266c
add rdx, 0x1a404c54; sub_carry
mov rdx, qword ptr [rdx + 0x5f0]
add rdx, r14
mov bpl, byte ptr [rdx]
movzx rbp, bpl
shl rbp, 0x18
sub r12, rbp
movabs rbp, 0x11e8c390c
push rbp
push 0x520e3a74
push 0x77a25172
push 0x64b3732c
push 0x7a96068f
add qword ptr [rsp + 0x20], 0x217d31b4; sub
mov r15, r12
=== 7863
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1520
add rsp, 1520
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r10
mov rdi, r15
=== 7864
mov rbp, rdi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r12
mov al, byte ptr [r14]
mov r10, 0xff
shl r10, 0x10
not r10
and rbp, r10
movzx r10, al
shl r10, 0x10
or rbp, r10
=== 7865
mov rsi, rbp
push rsi
mov rbp, rsp
mov rdi, rbp
=== 7866
mov rbp, rbp
mov r15, rdi
push rbp
push 0x660c60f0
push 0x16975e93
push 0x7b391e2d
push 0x4b727308
=== 7867
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rbp, r15
movzx r13, r13b
=== 7868
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x104595f78
add r8, 0x3bb01348; sub_carry
mov r8, qword ptr [r8 + 0x568]
add r8, r13
mov sil, byte ptr [r8]
movzx rsi, sil
shl rsi, 0x20
sub rbp, rsi
mov rbp, rbp
movabs rdi, 0xdb9b19d4
add rdi, 0x646e50ec; sub
=== 7869
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1384
add rsp, 1384
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdi
mov r14, rbp
=== 7870
mov rsi, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbp
mov r13b, byte ptr [r8]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and rsi, rdx
movzx rdx, r13b
shl rdx, 0x18
or rsi, rdx
=== 7871
mov rdi, rsi
push rdi
mov rbx, rsp
mov r15, rsi
=== 7872
mov r13, rbx
mov r15, r15
push r13
push 0x4d007d5a
push 0x7aab25ca
push 0x672a7af9
=== 7873
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r10
mov rsi, r15
movzx rbp, bpl
=== 7874
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x12e8f081b
add rdx, 0x117a6aa5; sub_carry
mov rdx, qword ptr [rdx]
add rdx, rbp
mov bpl, byte ptr [rdx]
movzx rbp, bpl
shl rbp, 0x28
sub rsi, rbp
movabs r11, 0x12c79243f
push r11
push 0x66400e41
push 0x37bd7cff
push 0x55453908
add qword ptr [rsp + 0x18], 0x13904681; sub
mov r12, rsi
=== 7875
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdi
mov rbx, r12
=== 7876
mov r15, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov al, byte ptr [rbp]
mov r9, 0xff
shl r9, 0x20
not r9
and r15, r9
movzx r9, al
shl r9, 0x20
or r15, r9
=== 7877
mov r8, r15
push r8
mov rbp, rsp
mov rdi, r15
=== 7878
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r11
mov r15, rdi
movzx r12, r12b
=== 7879
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r15
movabs r15, 0x11ace1a86
add r15, 0x253b503a; sub
=== 7880
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov r12, rbp
=== 7881
mov rsi, r12
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov bpl, byte ptr [r12]
mov rax, 0xff
shl rax, 0x38
not rax
and rsi, rax
movzx rax, bpl
shl rax, 0x38
or rsi, rax
=== 7882
movabs r8, 0xd9c78bdc
push r8
push 0x33b4879
push 0x6ccd4df1
push 0x555a036f
add qword ptr [rsp + 0x18], 0x66c22d0c; input
mov r14, rsi
=== 7883
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov r14, r14
movzx r15, r15b
=== 7884
mov rax, r15
mov rdi, 0xffffffff9af50f31
add rdi, 0x65832048
push rdi
mov r12, r14
mul qword ptr [rsp]
mov r13, rax
=== 7885
mov r15, r12
sub r15, r13
=== 7886
mov r8, r15
push r8
mov r13, rsp
mov rbp, r15
=== 7887
mov rsi, r13
mov rdi, rbp
push rsi
push 0x118974d6
push 0x687117
push 0x347e1bb6
push 0x716e6434
=== 7888
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov rdi, rdi
movzx rbx, bl
=== 7889
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x11f2d6250
add r8, 0x20dc1070; sub_carry
mov r8, qword ptr [r8 + 0x1b0]
add r8, rbx
mov al, byte ptr [r8]
movzx rax, al
shl rax, 8
sub rdi, rax
mov rdi, rdi
movabs rsi, 0x1194f3edc
add rsi, 0x26ba2be4; sub
=== 7890
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 432
add rsp, 432
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov r13, rdi
=== 7891
mov r15, r13
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r15
mov r8b, byte ptr [r8]
mov r15b, r8b
=== 7892
mov r11, r15
push r11
mov r12, rsp
mov r15, r15
=== 7893
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov rbp, r15
movzx rbx, bl
=== 7894
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xd53219ab
add r14, 0x6ad75915; sub_carry
mov r14, qword ptr [r14 + 0x140]
add r14, rbx
mov r13b, byte ptr [r14]
movzx r13, r13b
shl r13, 0x10
sub rbp, r13
mov r12, rbp
movabs rdi, 0xdcfa3248
add rdi, 0x630f3878; sub
=== 7895
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 320
add rsp, 320
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdx
mov r13, r12
=== 7896
mov r15, r13
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rdi
mov al, byte ptr [rdx]
mov rbp, 0xff
shl rbp, 8
not rbp
and r15, rbp
movzx rbp, al
shl rbp, 8
or r15, rbp
=== 7897
mov rcx, r15
push rcx
mov rsi, rsp
mov rbx, r15
=== 7898
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov r12, rbx
movzx r14, r14b
=== 7899
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x1129d2f21
add r11, 0x2d6c439f; sub_carry
mov r11, qword ptr [r11 + 0x608]
add r11, r14
mov al, byte ptr [r11]
movzx rax, al
shl rax, 0x18
sub r12, rax
movabs rdx, 0xd5ed0c5c
push rdx
push 0x7559730e
push 0x1aab72bf
push 0x62617bc0
add qword ptr [rsp + 0x18], 0x6a1c5e64; sub
mov r15, r12
=== 7900
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1544
add rsp, 1544
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov rdi, r15
=== 7901
mov rdi, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rsi
mov r11b, byte ptr [rdx]
mov r15, 0xff
shl r15, 0x10
not r15
and rdi, r15
movzx r15, r11b
shl r15, 0x10
or rdi, r15
=== 7902
mov rax, rdi
push rax
mov rsi, rsp
mov r13, rdi
=== 7903
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov rbp, r13
movzx r14, r14b
=== 7904
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x1303445ad
add r13, 0xfd52d13; sub_carry
mov r13, qword ptr [r13 + 0x678]
add r13, r14
mov bpl, byte ptr [r13]
movzx rbp, bpl
shl rbp, 0x20
sub rbp, rbp
movabs rbx, 0x12706fbe8
push rbx
push 0x2fb74af5
push 0x19bf2dd4
push 0x71b920e3
add qword ptr [rsp + 0x18], 0x19026ed8; sub
mov r12, rbp
=== 7905
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1656
add rsp, 1656
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r8
mov r14, r12
=== 7906
mov r15, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov dl, byte ptr [r10]
mov rax, 0xff
shl rax, 0x18
not rax
and r15, rax
movzx rax, dl
shl rax, 0x18
or r15, rax
=== 7907
mov r10, r15
push r10
mov r14, rsp
mov rdi, r15
=== 7908
mov r9, r14
mov rbx, rdi
push r9
push 0x29ac7c23
push 0x35ac3ea6
push 0x499f42ad
push 0x5c764935
=== 7909
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov r15, rbx
movzx r12, r12b
=== 7910
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x12f3b4f43
add r12, 0x10ce237d; sub_carry
mov r12, qword ptr [r12]
add r12, r12
mov bl, byte ptr [r12]
movzx rbx, bl
shl rbx, 0x30
sub r15, rbx
mov rsi, r15
movabs r13, 0xdc2d51d1
add r13, 0x63dc18ef; sub
=== 7911
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov r13, rsi
=== 7912
mov r15, r13
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rsi
mov dil, byte ptr [rsi]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and r15, rdx
movzx rdx, dil
shl rdx, 0x28
or r15, rdx
=== 7913
mov r8, r15
push r8
mov rdi, rsp
mov r12, r15
=== 7914
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov r13, r12
movzx rbp, bpl
=== 7915
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xe2ee0aa8
add rbx, 0x5d1b6818; sub_carry
mov rbx, qword ptr [rbx]
add rbx, rbp
mov r10b, byte ptr [rbx]
movzx r10, r10b
shl r10, 0x38
sub r13, r10
mov r14, r13
movabs r13, 0x1181a0c10
add r13, 0x27ef5eb0; sub
=== 7916
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov r13, r14
=== 7917
mov rdi, r13
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r12
mov dl, byte ptr [r11]
mov r12, 0xff
shl r12, 0x30
not r12
and rdi, r12
movzx r12, dl
shl r12, 0x30
or rdi, r12
=== 7918
mov r12, rdi
push r12
mov r15, rsp
mov r14, rdi
=== 7919
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r12
mov r15, r14
movzx rbx, bl
=== 7920
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r15
movabs rdi, 0xce2f1752
add rdi, 0x71da536e; sub
=== 7921
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov r15, rsi
=== 7922
mov r13, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov r10b, byte ptr [r9]
mov rsi, 0xff
shl rsi, 0x38
not rsi
and r13, rsi
movzx rsi, r10b
shl rsi, 0x38
or r13, rsi
=== 7923
mov rax, r13
push rax
mov r14, rsp
mov rdi, r13
=== 7924
mov rax, r14
mov r13, rdi
push rax
push 0x2f551dbb
push 0x4af0737
push 0xeb13b60
push 0x2a6731f4
=== 7925
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r15
mov r15, r13
movzx r12, r12b
=== 7926
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xf4974121
add r14, 0x4b72319f; sub_carry
mov r14, qword ptr [r14 + 0x30]
add r14, r12
mov r10b, byte ptr [r14]
movzx r10, r10b
shl r10, 8
sub r15, r10
movabs rdi, 0xde8d4a6c
push rdi
push 0x68cc56bb
push 0x5ebc4960
push 0x6bcc470f
add qword ptr [rsp + 0x18], 0x617c2054; sub
mov r14, r15
=== 7927
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 48
add rsp, 48
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r10
mov r14, r14
=== 7928
mov rsi, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rdi
mov r13b, byte ptr [r8]
mov sil, r13b
=== 7929
mov rsi, rsi
push rsi
mov rbx, rsp
mov r13, rsi
=== 7930
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbp
mov r15, r13
movzx rsi, sil
=== 7931
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xde090c12
add rbx, 0x620066ae; sub_carry
mov rbx, qword ptr [rbx + 0x358]
add rbx, rsi
mov r11b, byte ptr [rbx]
movzx r11, r11b
shl r11, 0x10
sub r15, r11
movabs rbx, 0xfe5f37b5
push rbx
push 0x624e1b35
push 0x1322260c
push 0xed589c
add qword ptr [rsp + 0x18], 0x41aa330b; sub
mov rbp, r15
=== 7932
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 856
add rsp, 856
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov r13, rbp
=== 7933
mov rbx, r13
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r15
mov r10b, byte ptr [r10]
mov rsi, 0xff
shl rsi, 8
not rsi
and rbx, rsi
movzx rsi, r10b
shl rsi, 8
or rbx, rsi
=== 7934
mov r14, rbx
push r14
mov rbp, rsp
mov rbx, rbx
=== 7935
mov rax, rbp
mov r12, rbx
push rax
push 0x1d0b4f49
push 0x3f847838
push 0x74412c93
push 0x3a0d7992
=== 7936
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov rsi, r12
movzx rdi, dil
=== 7937
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xd345f4b1
add r11, 0x6cc37e0f; sub_carry
mov r11, qword ptr [r11 + 0x468]
add r11, rdi
mov sil, byte ptr [r11]
movzx rsi, sil
shl rsi, 0x18
sub rsi, rsi
mov rsi, rsi
movabs r14, 0xcbf2096c
add r14, 0x74176154; sub
=== 7938
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1128
add rsp, 1128
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbx
mov rbx, rsi
=== 7939
mov r13, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rsi
mov bl, byte ptr [rbp]
mov r11, 0xff
shl r11, 0x10
not r11
and r13, r11
movzx r11, bl
shl r11, 0x10
or r13, r11
=== 7940
mov r15, r13
push r15
mov rbp, rsp
mov r15, r13
=== 7941
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov r15, r15
movzx r12, r12b
=== 7942
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x13dc71837
add r10, 0x2425a89; sub_carry
mov r10, qword ptr [r10 + 0x240]
add r10, r12
mov dl, byte ptr [r10]
movzx rdx, dl
shl rdx, 0x20
sub r15, rdx
movabs rbx, 0x131491317
push rbx
push 0x74b81963
push 0x17de102d
push 0x75c0b50
push 0x41bc4de3
add qword ptr [rsp + 0x20], 0xec057a9; sub
mov rdi, r15
=== 7943
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 576
add rsp, 576
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov rsi, rdi
=== 7944
mov rbx, rsi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov r9b, byte ptr [rdx]
mov r15, 0xff
shl r15, 0x18
not r15
and rbx, r15
movzx r15, r9b
shl r15, 0x18
or rbx, r15
=== 7945
mov rdi, rbx
push rdi
mov r13, rsp
mov rdi, rbx
=== 7946
mov rcx, r13
mov rbp, rdi
push rcx
push 0x24050746
push 0x1fa6cd2
push 0x7ab64dca
=== 7947
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r14
mov rdi, rbp
movzx rbp, bpl
=== 7948
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x13fea2882
add rcx, 0x1f4a3e; sub_carry
mov rcx, qword ptr [rcx + 0x7f0]
add rcx, rbp
mov r13b, byte ptr [rcx]
movzx r13, r13b
shl r13, 0x28
sub rdi, r13
movabs r10, 0xc3cc3de5
push r10
push 0x6dcb3cc6
push 0x6bc846cd
push 0x3e475042
add qword ptr [rsp + 0x18], 0x7c3d2cdb; sub
mov r12, rdi
=== 7949
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2032
add rsp, 2032
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rcx
mov rdi, r12
=== 7950
mov r13, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov r14b, byte ptr [rdx]
mov rax, 0xff
shl rax, 0x20
not rax
and r13, rax
movzx rax, r14b
shl rax, 0x20
or r13, rax
=== 7951
mov r12, r13
push r12
mov r12, rsp
mov r14, r13
=== 7952
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r9
mov r13, r14
movzx rdi, dil
=== 7953
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xd7a83751
add r11, 0x68613b6f; sub_carry
mov r11, qword ptr [r11 + 0x7f8]
add r11, rdi
mov r8b, byte ptr [r11]
movzx r8, r8b
shl r8, 0x30
sub r13, r8
movabs rbp, 0xfe42fb20
push rbp
push 0xbce0b30
push 0x6ad35e14
push 0x2b637a0e
push 0x2de21723
add qword ptr [rsp + 0x20], 0x41c66fa0; sub
mov r13, r13
=== 7954
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r10
mov r13, r13
=== 7955
mov rdi, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov sil, byte ptr [r15]
mov rbx, 0xff
shl rbx, 0x28
not rbx
and rdi, rbx
movzx rbx, sil
shl rbx, 0x28
or rdi, rbx
=== 7956
mov rdx, rdi
push rdx
mov r15, rsp
mov r14, rdi
=== 7957
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov rbx, r14
movzx rbp, bpl
=== 7958
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x13032fc32
add r12, 0xfd6768e; sub_carry
mov r12, qword ptr [r12 + 0x7f8]
add r12, rbp
mov r10b, byte ptr [r12]
movzx r10, r10b
shl r10, 0x38
sub rbx, r10
mov r12, rbx
movabs r15, 0x13d19331d
add r15, 0x2f037a3; sub
=== 7959
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rcx
mov rsi, r12
=== 7960
mov r13, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov r14b, byte ptr [r9]
mov rdx, 0xff
shl rdx, 0x30
not rdx
and r13, rdx
movzx rdx, r14b
shl rdx, 0x30
or r13, rdx
=== 7961
mov rax, r13
push rax
mov r15, rsp
mov r13, r13
=== 7962
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov r15, r13
movzx rbx, bl
=== 7963
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xfc5f255b
push rbx
push 0x6d216b2d
push 0x3aaa1f7e
push 0x16100190
push 0x58243588
add qword ptr [rsp + 0x20], 0x43aa4565; sub
mov r15, r15
=== 7964
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov r13, r15
=== 7965
mov r15, r13
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rsi
mov r13b, byte ptr [rdx]
mov rax, 0xff
shl rax, 0x38
not rax
and r15, rax
movzx rax, r13b
shl rax, 0x38
or r15, rax
=== 7966
mov r14, r15
push r14
mov r15, rsp
mov rbp, r15
=== 7967
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rcx
mov r14, rbp
movzx r12, r12b
=== 7968
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xffec0f7f
push rcx
push 0x5b145ab5
push 0x282c1e6f
push 0x28136bff
add qword ptr [rsp + 0x18], 0x401d4341; or
mov rdi, r14
=== 7969
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov rbp, rdi
=== 7970
mov rbx, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov bpl, byte ptr [r9]
mov r12, 0xff
shl r12, 8
not r12
and rbx, r12
movzx r12, bpl
shl r12, 8
or rbx, r12
=== 7971
mov r12, rbx
push r12
mov rsi, rsp
mov rbp, rbx
=== 7972
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov r15, rbp
movzx r14, r14b
=== 7973
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xc1ab4302
push r11
push 0x13f3342a
push 0x38c71e81
push 0x34125511
push 0x1dff3494
add qword ptr [rsp + 0x20], 0x7e5e0fbe; or
mov rsi, r15
=== 7974
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rcx
mov r15, rsi
=== 7975
mov rbx, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov r15b, byte ptr [rbp]
mov rsi, 0xff
shl rsi, 0x20
not rsi
and rbx, rsi
movzx rsi, r15b
shl rsi, 0x20
or rbx, rsi
=== 7976
mov rdi, rbx
push rdi
mov rsi, rsp
mov rbp, rbx
=== 7977
mov rcx, rsi
mov rdi, rbp
push rcx
push 0x7363782c
push 0x2e4e438d
push 0x58013a3f
=== 7978
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov r14, rdi
movzx r15, r15b
=== 7979
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r14
movabs rbp, 0x105a0d664
add rbp, 0x3a687c5c; or
=== 7980
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r13
mov r13, rbx
=== 7981
mov rsi, r13
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov r11b, byte ptr [rbp]
mov rcx, 0xff
shl rcx, 0x28
not rcx
and rsi, rcx
movzx rcx, r11b
shl rcx, 0x28
or rsi, rcx
=== 7982
mov rax, rsi
push rax
mov r13, rsp
mov r12, rsi
=== 7983
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbx
mov rbp, r12
movzx rdi, dil
=== 7984
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rbp
movabs r12, 0x13c590dcf
add r12, 0x3b044f1; or
=== 7985
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov r12, r13
=== 7986
mov rdi, r12
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov r13b, byte ptr [r14]
mov r9, 0xff
shl r9, 0x30
not r9
and rdi, r9
movzx r9, r13b
shl r9, 0x30
or rdi, r9
=== 7987
mov rax, rdi
push rax
mov r14, rsp
mov r13, rdi
=== 7988
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbp
mov r15, r13
movzx r14, r14b
=== 7989
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, r15
movabs rbp, 0xc16e19eb
add rbp, 0x7e9b38d5; or
=== 7990
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov r13, rdi
=== 7991
mov rbp, r13
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov dl, byte ptr [r10]
mov rax, 0xff
shl rax, 0x38
not rax
and rbp, rax
movzx rax, dl
shl rax, 0x38
or rbp, rax
=== 7992
mov r13, rbp
movabs r12, 0x1048a94d6
add r12, 0x3b757d1a
test r13, r13
lea r13, [rip - 0x40d511]
cmovne r13, r12
jmp r13
=== 7993
movabs r14, 0x129ecb390
push r14
push 0x36ea54f5
push 0x480b1fc0
push 0x2a3539f8
push 0x2ffa4053
add qword ptr [rsp + 0x20], 0x169d0558; input
=== 7994
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
movzx rsi, sil
=== 7995
mov rax, rsi
mov rdx, 0xffffffffad7f4ae0
add rdx, 0x52e14239
push rdx
mul qword ptr [rsp]
mov r12, rax
=== 7996
mov r14, r12
push r14
mov r14, rsp
mov rbp, r12
=== 7997
mov rbx, r14
mov r15, rbp
push rbx
push 0x25d3523
push 0x59dd7e72
push 0x6fd727cd
push 0x7c4b0662
=== 7998
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
mov rbx, r15
movzx r15, r15b
=== 7999
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xe7186823
add rax, 0x58f10a9d; sub_carry
mov rax, qword ptr [rax + 0x760]
add rax, r15
mov bpl, byte ptr [rax]
movzx rbp, bpl
shl rbp, 8
sub rbx, rbp
movabs r10, 0x10f052bc7
push r10
push 0x22ac13fe
push 0x43606700
push 0x148e02d9
push 0x352a3f27
add qword ptr [rsp + 0x20], 0x31043ef9; sub
mov r15, rbx
=== 8000
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1888
add rsp, 1888
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdx
mov rdi, r15
=== 8001
mov rbx, rdi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbx
mov sil, byte ptr [r14]
mov bl, sil
=== 8002
mov r12, rbx
push r12
mov r12, rsp
mov r14, rbx
=== 8003
mov rsi, r12
mov rdi, r14
push rsi
push 0x20c5230d
push 0x2a5417a6
push 0xa82760e
=== 8004
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r13
mov rbx, rdi
movzx r14, r14b
=== 8005
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xd08069da
add r15, 0x6f8908e6; sub_carry
mov r15, qword ptr [r15 + 0x310]
add r15, r14
mov cl, byte ptr [r15]
movzx rcx, cl
shl rcx, 0x10
sub rbx, rcx
mov r13, rbx
movabs rbx, 0x11a0f1f1a
add rbx, 0x25fa4ba6; sub
=== 8006
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 784
add rsp, 784
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov r12, r13
=== 8007
mov r14, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov bl, byte ptr [r11]
mov rcx, 0xff
shl rcx, 8
not rcx
and r14, rcx
movzx rcx, bl
shl rcx, 8
or r14, rcx
=== 8008
mov r11, r14
push r11
mov rsi, rsp
mov rbp, r14
=== 8009
mov r10, rsi
mov r15, rbp
push r10
push 0x29ba0ea4
push 0x2e0b5d26
push 0x77604e4f
=== 8010
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov rdi, r15
movzx r14, r14b
=== 8011
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xc9125256
add r13, 0x76f7206a; sub_carry
mov r13, qword ptr [r13 + 0x770]
add r13, r14
mov dl, byte ptr [r13]
movzx rdx, dl
shl rdx, 0x18
sub rdi, rdx
mov r12, rdi
movabs rbx, 0xea9726f9
add rbx, 0x557243c7; sub
=== 8012
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1904
add rsp, 1904
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbx
mov rbp, r12
=== 8013
mov rdi, rbp
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r13
mov al, byte ptr [r14]
mov r10, 0xff
shl r10, 0x10
not r10
and rdi, r10
movzx r10, al
shl r10, 0x10
or rdi, r10
=== 8014
mov r13, rdi
push r13
mov rdi, rsp
mov r12, rdi
=== 8015
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov r15, r12
movzx r13, r13b
=== 8016
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x123c75f6c
add rbp, 0x1c421354; sub_carry
mov rbp, qword ptr [rbp + 0x170]
add rbp, r13
mov r14b, byte ptr [rbp]
movzx r14, r14b
shl r14, 0x20
sub r15, r14
mov rbp, r15
movabs rbx, 0xd0f2f91f
add rbx, 0x6f1671a1; sub
=== 8017
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 368
add rsp, 368
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbx
mov r14, rbp
=== 8018
mov rbp, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r15
mov r13b, byte ptr [rdi]
mov r10, 0xff
shl r10, 0x18
not r10
and rbp, r10
movzx r10, r13b
shl r10, 0x18
or rbp, r10
=== 8019
movabs rsi, 0x112bbaec7
push rsi
push 0x32c92508
push 0x7d3e20ac
push 0x3e9571c9
add qword ptr [rsp + 0x18], 0x2dce0a21; input
mov r12, rbp
=== 8020
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 14
add rsp, 14
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov rbx, r12
movzx rdi, dil
=== 8021
mov rax, rdi
mov r11, 0xffffffffd821fa47
add r11, 0x289c1ead
push r11
mov rbp, rbx
mul qword ptr [rsp]
mov rdi, rax
=== 8022
mov rdi, rbp
sub rdi, rdi
=== 8023
mov r13, rdi
push r13
mov r15, rsp
mov r14, rdi
=== 8024
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r11
mov r12, r14
movzx rbp, bpl
=== 8025
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x10aa50cc0
push rsi
push 0x45ff624e
push 0x713c308b
push 0x56d02a9d
push 0x6d3f4da0
add qword ptr [rsp + 0x20], 0x35643e00; xor
mov r12, r12
=== 8026
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 912
add rsp, 912
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r13
mov r14, r12
=== 8027
mov rdi, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbp
mov bl, byte ptr [r8]
mov dil, bl
=== 8028
mov rdx, rdi
push rdx
mov rbp, rsp
mov rbx, rdi
=== 8029
mov r9, rbp
mov rsi, rbx
push r9
push 0x27ab0799
push 0x6ed72a26
push 0x257c1fcd
push 0x675e00b2
=== 8030
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r9
mov r14, rsi
movzx r13, r13b
=== 8031
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xe999d0fd
push r11
push 0x56e52d91
push 0x602a2c31
push 0x1a7d7195
push 0x6eec41d9
add qword ptr [rsp + 0x20], 0x566f79c3; xor
mov rbp, r14
=== 8032
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1240
add rsp, 1240
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbx
mov r12, rbp
=== 8033
mov r12, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r13
mov dil, byte ptr [r13]
mov r11, 0xff
shl r11, 8
not r11
and r12, r11
movzx r11, dil
shl r11, 8
or r12, r11
=== 8034
mov r14, r12
push r14
mov rbx, rsp
mov r14, r12
=== 8035
mov r12, rbx
mov r15, r14
push r12
push 0x3cb07aa1
push 0x78205f2f
push 0x4ea03cb7
=== 8036
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov r14, r15
movzx rbp, bpl
=== 8037
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x10c3dd22a
push r11
push 0x4b7b6f9f
push 0x515e42cc
push 0x39174889
add qword ptr [rsp + 0x18], 0x33cb7896; xor
mov rdi, r14
=== 8038
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 888
add rsp, 888
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov rsi, rdi
=== 8039
mov rbx, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r12
mov sil, byte ptr [r14]
mov r9, 0xff
shl r9, 0x10
not r9
and rbx, r9
movzx r9, sil
shl r9, 0x10
or rbx, r9
=== 8040
mov rax, rbx
push rax
mov rdi, rsp
mov r13, rbx
=== 8041
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov rsi, r13
movzx r12, r12b
=== 8042
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x118bce381
push r11
push 0x27963ee3
push 0x44327b0b
push 0x54971995
add qword ptr [rsp + 0x18], 0x274c673f; xor
mov r14, rsi
=== 8043
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1472
add rsp, 1472
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov r14, r14
=== 8044
mov r12, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov dl, byte ptr [r9]
mov rax, 0xff
shl rax, 0x18
not rax
and r12, rax
movzx rax, dl
shl rax, 0x18
or r12, rax
=== 8045
mov r11, r12
push r11
mov r13, rsp
mov r15, r12
=== 8046
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov r15, r15
movzx rsi, sil
=== 8047
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r15
movabs r14, 0x1101002b8
add r14, 0x2ff94808; xor
=== 8048
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r14
mov r13, r13
=== 8049
mov rbp, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov dl, byte ptr [rax]
mov r10, 0xff
shl r10, 0x28
not r10
and rbp, r10
movzx r10, dl
shl r10, 0x28
or rbp, r10
=== 8050
mov r11, rbp
push r11
mov rdi, rsp
mov r12, rbp
=== 8051
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov rdi, r12
movzx rbp, bpl
=== 8052
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rdi
movabs r13, 0x131fd1a58
add r13, 0xe0c3068; xor
=== 8053
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdx
mov r15, rbx
=== 8054
mov r13, r15
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rdi
mov r12b, byte ptr [r12]
mov rcx, 0xff
shl rcx, 0x30
not rcx
and r13, rcx
movzx rcx, r12b
shl rcx, 0x30
or r13, rcx
=== 8055
mov rdx, r13
push rdx
mov r15, rsp
mov rdi, r13
=== 8056
mov rax, r15
mov r12, rdi
push rax
push 0x23152c33
push 0x305049ef
push 0x6d0b3412
push 0x56d5591d
=== 8057
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov r13, r12
movzx r14, r14b
=== 8058
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r13
movabs r13, 0xd94234cb
add r13, 0x66c715f5; xor
=== 8059
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r10
mov r12, r12
=== 8060
mov r14, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov bpl, byte ptr [r15]
mov r15, 0xff
shl r15, 0x38
not r15
and r14, r15
movzx r15, bpl
shl r15, 0x38
or r14, r15
=== 8061
mov rsi, r14
movabs rbp, 0xe5a4b2d5
add rbp, 0x5ae50613; input
=== 8062
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 30
add rsp, 30
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbp
mov r12, rsi
movzx r14, r14b
=== 8063
mov rax, r14
mov rdi, 0xffffffffbdc8b817
add rdi, 0x42c026b2
push rdi
mov rdi, r12
mul qword ptr [rsp]
mov rsi, rax
=== 8064
mov r15, rdi
xor r15, rsi
=== 8065
mov rcx, r15
push rcx
mov rbp, rsp
mov r13, r15
=== 8066
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r14
mov r13, r13
movzx rdi, dil
=== 8067
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x1270d0ea7
add rdi, 0x18fc5419; add_carry
mov rdi, qword ptr [rdi + 0x4b8]
add rdi, rdi
mov r11b, byte ptr [rdi]
movzx r11, r11b
shl r11, 8
add r13, r11
mov r15, r13
movabs rbx, 0xd2172422
add rbx, 0x6df2369e; add
=== 8068
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1208
add rsp, 1208
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbp
mov rbx, r15
=== 8069
mov rsi, rbx
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r13
mov bl, byte ptr [r13]
mov sil, bl
=== 8070
mov r14, rsi
push r14
mov r12, rsp
mov r13, rsi
=== 8071
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov rbp, r13
movzx r14, r14b
=== 8072
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x120e51b3f
add rsi, 0x1f244781; add_carry
mov rsi, qword ptr [rsi + 0x6b8]
add rsi, r14
mov r8b, byte ptr [rsi]
movzx r8, r8b
shl r8, 0x10
add rbp, r8
movabs r15, 0xe3f31b37
push r15
push 0x64226d5f
push 0x5e5e21b5
push 0x7193776c
push 0x1cc058d1
add qword ptr [rsp + 0x20], 0x5c163f89; add
mov r13, rbp
=== 8073
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1720
add rsp, 1720
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdi
mov rsi, r13
=== 8074
mov r15, rsi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r14
mov r14b, byte ptr [rdi]
mov r12, 0xff
shl r12, 8
not r12
and r15, r12
movzx r12, r14b
shl r12, 8
or r15, r12
=== 8075
mov rcx, r15
push rcx
mov rbx, rsp
mov rdi, r15
=== 8076
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r8
mov rbp, rdi
movzx r13, r13b
=== 8077
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xe3f146f6
add r14, 0x5c181bca; add_carry
mov r14, qword ptr [r14 + 0x2e0]
add r14, r13
mov al, byte ptr [r14]
movzx rax, al
shl rax, 0x18
add rbp, rax
mov r14, rbp
movabs r13, 0xc0e72a90
add r13, 0x7f223030; add
=== 8078
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 736
add rsp, 736
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbx
mov r15, r14
=== 8079
mov rbx, r15
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov r10b, byte ptr [r11]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and rbx, rsi
movzx rsi, r10b
shl rsi, 0x10
or rbx, rsi
=== 8080
mov rdi, rbx
push rdi
mov r13, rsp
mov rbp, rbx
=== 8081
mov rbp, r13
mov r13, rbp
push rbp
push 0x13ae4de1
push 0x47b51eb9
push 0x47d01019
=== 8082
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r8
mov r15, r13
movzx rbp, bpl
=== 8083
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x12110e2e4
add r10, 0x1ef87fdc; add_carry
mov r10, qword ptr [r10 + 0x578]
add r10, rbp
mov bl, byte ptr [r10]
movzx rbx, bl
shl rbx, 0x20
add r15, rbx
mov r12, r15
movabs r13, 0xf325dc48
add r13, 0x4ce37e78; add
=== 8084
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1400
add rsp, 1400
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r15
mov rsi, r12
=== 8085
mov r14, rsi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r15
mov bpl, byte ptr [r12]
mov r8, 0xff
shl r8, 0x18
not r8
and r14, r8
movzx r8, bpl
shl r8, 0x18
or r14, r8
=== 8086
mov rax, r14
push rax
mov r12, rsp
mov r13, r14
=== 8087
mov r15, r12
mov rsi, r13
push r15
push 0x15380e58
push 0x387228a2
push 0x62ba2444
push 0x67380ed8
=== 8088
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov rsi, rsi
movzx r14, r14b
=== 8089
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xde01407c
add r13, 0x62082244; add_carry
mov r13, qword ptr [r13]
add r13, r14
mov sil, byte ptr [r13]
movzx rsi, sil
shl rsi, 0x28
add rsi, rsi
movabs rsi, 0x1164c5a20
push rsi
push 0x1f9101a9
push 0x3a9d3683
push 0x5fe942a9
add qword ptr [rsp + 0x18], 0x29bd00a0; add
mov rdi, rsi
=== 8090
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rax
mov rbp, rdi
=== 8091
mov rsi, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov cl, byte ptr [r8]
mov r8, 0xff
shl r8, 0x20
not r8
and rsi, r8
movzx r8, cl
shl r8, 0x20
or rsi, r8
=== 8092
mov rbx, rsi
push rbx
mov r14, rsp
mov rbp, rsi
=== 8093
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov rbp, rbp
movzx r12, r12b
=== 8094
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x1087a31ea
add r8, 0x378f30d6; add_carry
mov r8, qword ptr [r8]
add r8, r12
mov r8b, byte ptr [r8]
movzx r8, r8b
shl r8, 0x30
add rbp, r8
movabs r8, 0x128fd3942
push r8
push 0x4eaa1902
push 0x202710c7
push 0x28a03412
push 0xc1c131c
add qword ptr [rsp + 0x20], 0x170c217e; add
mov r15, rbp
=== 8095
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r12
mov r15, r15
=== 8096
mov r12, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov cl, byte ptr [rax]
mov r9, 0xff
shl r9, 0x28
not r9
and r12, r9
movzx r9, cl
shl r9, 0x28
or r12, r9
=== 8097
mov rcx, r12
push rcx
mov r15, rsp
mov rdi, r12
=== 8098
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov rsi, rdi
movzx r14, r14b
=== 8099
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xddc5e393
push rsi
push 0x7a651c1e
push 0x5e2a047b
push 0x5ff47537
push 0x53c6133f
add qword ptr [rsp + 0x20], 0x6243772d; add
mov rbx, rsi
=== 8100
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rcx
mov rsi, rbx
=== 8101
mov rsi, rsi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r15
mov r11b, byte ptr [rcx]
mov r9, 0xff
shl r9, 0x38
not r9
and rsi, r9
movzx r9, r11b
shl r9, 0x38
or rsi, r9
=== 8102
movabs r10, 0x10afca2f0
push r10
push 0x4fda5fef
push 0x2bd25398
push 0x1f791ef8
add qword ptr [rsp + 0x18], 0x358d15f8; input
mov r14, rsi
=== 8103
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 18
add rsp, 18
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rcx
mov r12, r14
movzx rbp, bpl
=== 8104
mov rax, rbp
mov r15, 0xffffffffe0d27ded
add r15, 0x1fe40363
push r15
mov r13, r12
mul qword ptr [rsp]
mov r15, rax
=== 8105
mov rdi, r13
xor rdi, r15
=== 8106
mov r14, rdi
push r14
mov rbp, rsp
mov r13, rdi
=== 8107
mov rdi, rbp
mov rsi, r13
push rdi
push 0x164a74b1
push 0x4f90651
push 0x1665753e
=== 8108
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r15
mov r12, rsi
movzx rsi, sil
=== 8109
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xdec2024f
add rbp, 0x61477071; sub_carry
mov rbp, qword ptr [rbp + 0x528]
add rbp, rsi
mov bpl, byte ptr [rbp]
movzx rbp, bpl
shl rbp, 8
sub r12, rbp
movabs r12, 0x13ae53f84
push r12
push 0x1ab484a
push 0x46df2cbc
push 0x543303a5
push 0x65ec2945
add qword ptr [rsp + 0x20], 0x5242b3c; sub
mov r14, r12
=== 8110
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1320
add rsp, 1320
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov rbx, r14
=== 8111
mov r14, rbx
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r15
mov r13b, byte ptr [rdi]
mov r14b, r13b
=== 8112
mov r15, r14
push r15
mov rbx, rsp
mov r13, r14
=== 8113
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov rsi, r13
movzx rbx, bl
=== 8114
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xf50552db
add r12, 0x4b041fe5; sub_carry
mov r12, qword ptr [r12 + 0x1d8]
add r12, rbx
mov sil, byte ptr [r12]
movzx rsi, sil
shl rsi, 0x10
sub rsi, rsi
mov r13, rsi
movabs r14, 0xc7f61853
add r14, 0x7813526d; sub
=== 8115
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 472
add rsp, 472
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov r14, r13
=== 8116
mov rdi, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov r9b, byte ptr [r13]
mov rax, 0xff
shl rax, 8
not rax
and rdi, rax
movzx rax, r9b
shl rax, 8
or rdi, rax
=== 8117
mov rbp, rdi
push rbp
mov r12, rsp
mov rbp, rdi
=== 8118
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r9
mov r14, rbp
movzx rdi, dil
=== 8119
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xe504fdee
add rbx, 0x5b0474d2; sub_carry
mov rbx, qword ptr [rbx + 0x38]
add rbx, rdi
mov r15b, byte ptr [rbx]
movzx r15, r15b
shl r15, 0x18
sub r14, r15
mov r15, r14
movabs rsi, 0x10073101c
add rsi, 0x3f965aa4; sub
=== 8120
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 56
add rsp, 56
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rsi
mov r12, r15
=== 8121
mov r13, r12
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov r10b, byte ptr [rbp]
mov r11, 0xff
shl r11, 0x10
not r11
and r13, r11
movzx r11, r10b
shl r11, 0x10
or r13, r11
=== 8122
mov r14, r13
push r14
mov rdi, rsp
mov rsi, r13
=== 8123
mov r12, rdi
mov r13, rsi
push r12
push 0x6b6e59b9
push 0x573d4070
push 0x4bda74cf
push 0x66d36b08
=== 8124
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbp
mov rbx, r13
movzx rdi, dil
=== 8125
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x111f31c9a
add rcx, 0x2e165626; sub_carry
mov rcx, qword ptr [rcx + 0x1e8]
add rcx, rdi
mov r14b, byte ptr [rcx]
movzx r14, r14b
shl r14, 0x20
sub rbx, r14
mov r15, rbx
movabs r12, 0xf52c3352
add r12, 0x4add376e; sub
=== 8126
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 488
add rsp, 488
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbp
mov rbx, r15
=== 8127
mov rsi, rbx
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov r10b, byte ptr [r11]
mov r14, 0xff
shl r14, 0x18
not r14
and rsi, r14
movzx r14, r10b
shl r14, 0x18
or rsi, r14
=== 8128
mov r12, rsi
push r12
mov r13, rsp
mov rsi, rsi
=== 8129
mov rax, r13
mov r15, rsi
push rax
push 0x741436e1
push 0x38461992
push 0x2e8a7b57
=== 8130
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov rbx, r15
movzx rdi, dil
=== 8131
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rbx
movabs rbx, 0x12fb02470
add rbx, 0x10594650; sub
=== 8132
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov rbp, r14
=== 8133
mov rbx, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov r9b, byte ptr [r8]
mov r10, 0xff
shl r10, 0x38
not r10
and rbx, r10
movzx r10, r9b
shl r10, 0x38
or rbx, r10
=== 8134
movabs r15, 0x117893aea
push r15
push 0x486d473d
push 0x5aa14416
push 0x5d5824d9
add qword ptr [rsp + 0x18], 0x29007dfe; input
mov r15, rbx
=== 8135
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 22
add rsp, 22
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov rbx, r15
movzx rbp, bpl
=== 8136
mov rax, rbp
mov rbp, 0xffffffffd6f6c029
add rbp, 0x29565643
push rbp
mov r15, rbx
mul qword ptr [rsp]
mov rbp, rax
=== 8137
mov r12, r15
add r12, rbp
=== 8138
mov r11, r12
push r11
mov r14, rsp
mov r12, r12
=== 8139
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov rbp, r12
movzx r14, r14b
=== 8140
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x13f633ae2
add rsi, 0xa627de; add_carry
mov rsi, qword ptr [rsi + 0x1c8]
add rsi, r14
mov r14b, byte ptr [rsi]
movzx r14, r14b
shl r14, 8
add rbp, r14
movabs r15, 0x101a642b5
push r15
push 0x1d076f86
push 0x7e470975
push 0x395066ae
push 0x27ff2542
add qword ptr [rsp + 0x20], 0x3e63180b; add
mov r12, rbp
=== 8141
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 456
add rsp, 456
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r14
mov r13, r12
=== 8142
mov rbx, r13
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov r10b, byte ptr [r9]
mov bl, r10b
=== 8143
mov r15, rbx
push r15
mov rbp, rsp
mov rdi, rbx
=== 8144
mov r13, rbp
mov r15, rdi
push r13
push 0x35e15b5d
push 0x650a21c1
push 0x7cf85ae1
=== 8145
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov r14, r15
movzx r15, r15b
=== 8146
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x112e4455b
add r15, 0x2d251d65; add_carry
mov r15, qword ptr [r15 + 0x80]
add r15, r15
mov r8b, byte ptr [r15]
movzx r8, r8b
shl r8, 0x10
add r14, r8
movabs rbp, 0xc71b1c69
push rbp
push 0x231c6fdf
push 0x23f95ca6
push 0x238b691d
push 0x66b76255
add qword ptr [rsp + 0x20], 0x78ee3e57; add
mov rdi, r14
=== 8147
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 128
add rsp, 128
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov rbx, rdi
=== 8148
mov rbp, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov cl, byte ptr [r8]
mov rdi, 0xff
shl rdi, 8
not rdi
and rbp, rdi
movzx rdi, cl
shl rdi, 8
or rbp, rdi
=== 8149
mov r8, rbp
push r8
mov rbx, rsp
mov r15, rbp
=== 8150
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r8
mov rbx, r15
movzx r12, r12b
=== 8151
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x1222fe6aa
add rsi, 0x1dd97c16; add_carry
mov rsi, qword ptr [rsi + 0xf0]
add rsi, r12
mov cl, byte ptr [rsi]
movzx rcx, cl
shl rcx, 0x18
add rbx, rcx
mov rbx, rbx
movabs r15, 0x1390b276a
add r15, 0x6fe3356; add
=== 8152
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 240
add rsp, 240
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r10
mov rbx, rbx
=== 8153
mov r12, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov al, byte ptr [rax]
mov r8, 0xff
shl r8, 0x10
not r8
and r12, r8
movzx r8, al
shl r8, 0x10
or r12, r8
=== 8154
mov r8, r12
push r8
mov r14, rsp
mov rbx, r12
=== 8155
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r13
mov r13, rbx
movzx r15, r15b
=== 8156
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xc8affcdc
add rsi, 0x775965e4; add_carry
mov rsi, qword ptr [rsi + 0x5d8]
add rsi, r15
mov dl, byte ptr [rsi]
movzx rdx, dl
shl rdx, 0x20
add r13, rdx
movabs r11, 0xea6f12b7
push r11
push 0xb426a17
push 0x322c094f
push 0x2d293776
add qword ptr [rsp + 0x18], 0x559a4809; add
mov rbx, r13
=== 8157
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1496
add rsp, 1496
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rcx
mov r12, rbx
=== 8158
mov r13, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbp
mov dil, byte ptr [rcx]
mov r9, 0xff
shl r9, 0x18
not r9
and r13, r9
movzx r9, dil
shl r9, 0x18
or r13, r9
=== 8159
mov rcx, r13
push rcx
mov rsi, rsp
mov r13, r13
=== 8160
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov rsi, r13
movzx rbp, bpl
=== 8161
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xe44e4a87
add rsi, 0x5bbb1839; add_carry
mov rsi, qword ptr [rsi]
add rsi, rbp
mov r15b, byte ptr [rsi]
movzx r15, r15b
shl r15, 0x28
add rsi, r15
mov r15, rsi
movabs rbp, 0x107e80847
add rbp, 0x38215279; add
=== 8162
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov rbx, r15
=== 8163
mov rbp, rbx
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov r8b, byte ptr [r14]
mov rsi, 0xff
shl rsi, 0x20
not rsi
and rbp, rsi
movzx rsi, r8b
shl rsi, 0x20
or rbp, rsi
=== 8164
mov r14, rbp
movabs rbx, 0xed9758be
add rbx, 0x52f2602a; input
=== 8165
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov r14, r14
movzx r15, r15b
=== 8166
mov rax, r15
mov rbx, 0xfffffffff2794dcd
add rbx, 0xdd01072
push rbx
mov rsi, r14
mul qword ptr [rsp]
mov r15, rax
=== 8167
mov rsi, rsi
sub rsi, r15
=== 8168
mov rdx, rsi
push rdx
mov rbx, rsp
mov rdi, rsi
=== 8169
mov r12, rbx
mov rbp, rdi
push r12
push 0x7bf65c82
push 0x16bf5be0
push 0x99f55fe
=== 8170
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov rdi, rbp
movzx r13, r13b
=== 8171
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x13ff12247
add rcx, 0x184079; add_carry
mov rcx, qword ptr [rcx + 0x470]
add rcx, r13
mov bl, byte ptr [rcx]
movzx rbx, bl
shl rbx, 8
add rdi, rbx
movabs r14, 0x10db6dd1e
push r14
push 0x46b82c8a
push 0x50d8289b
push 0x7f3a10e1
push 0x68f45ea7
add qword ptr [rsp + 0x20], 0x32527da2; add
mov r15, rdi
=== 8172
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1136
add rsp, 1136
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rsi
mov rbp, r15
=== 8173
mov r15, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov r13b, byte ptr [r9]
mov r15b, r13b
=== 8174
mov rbx, r15
push rbx
mov rbx, rsp
mov rsi, r15
=== 8175
mov r11, rbx
mov r12, rsi
push r11
push 0x94b693c
push 0xbe07276
push 0x74916e13
push 0x20314a4f
=== 8176
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov r13, r12
movzx rsi, sil
=== 8177
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xcde0ec3a
add rsi, 0x72287686; add_carry
mov rsi, qword ptr [rsi + 0x5c8]
add rsi, rsi
mov r10b, byte ptr [rsi]
movzx r10, r10b
shl r10, 0x10
add r13, r10
movabs rdx, 0xf9161245
push rdx
push 0x46863b3
push 0x737a3f1c
push 0x57573821
add qword ptr [rsp + 0x18], 0x46f3487b; add
mov rsi, r13
=== 8178
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1480
add rsp, 1480
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r11
mov r14, rsi
=== 8179
mov rsi, r14
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r13
mov r15b, byte ptr [r14]
mov r13, 0xff
shl r13, 8
not r13
and rsi, r13
movzx r13, r15b
shl r13, 8
or rsi, r13
=== 8180
mov r10, rsi
push r10
mov rsi, rsp
mov r14, rsi
=== 8181
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r11
mov rbp, r14
movzx r12, r12b
=== 8182
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xe64234ec
add rax, 0x59c72dd4; add_carry
mov rax, qword ptr [rax + 0x138]
add rax, r12
mov r13b, byte ptr [rax]
movzx r13, r13b
shl r13, 0x18
add rbp, r13
movabs r8, 0xf59945cb
push r8
push 0x30f81268
push 0x11d722d2
push 0x2d1b2f7d
add qword ptr [rsp + 0x18], 0x4a7014f5; add
mov r12, rbp
=== 8183
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 312
add rsp, 312
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rsi
mov r15, r12
=== 8184
mov rsi, r15
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r14
mov r11b, byte ptr [r11]
mov r12, 0xff
shl r12, 0x10
not r12
and rsi, r12
movzx r12, r11b
shl r12, 0x10
or rsi, r12
=== 8185
mov r10, rsi
push r10
mov rbp, rsp
mov r13, rsi
=== 8186
mov r8, rbp
mov r15, r13
push r8
push 0x3c601438
push 0x667e554f
push 0x75ef2e69
=== 8187
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov rsi, r15
movzx r13, r13b
=== 8188
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xd6dd1a36
add rsi, 0x692c488a; add_carry
mov rsi, qword ptr [rsi + 0x738]
add rsi, r13
mov dl, byte ptr [rsi]
movzx rdx, dl
shl rdx, 0x20
add rsi, rdx
mov r12, rsi
movabs rdi, 0xc14aee74
add rdi, 0x7ebe6c4c; add
=== 8189
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1848
add rsp, 1848
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdx
mov rsi, r12
=== 8190
mov rbp, rsi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov r13b, byte ptr [r10]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and rbp, rsi
movzx rsi, r13b
shl rsi, 0x18
or rbp, rsi
=== 8191
mov rsi, rbp
push rsi
mov rsi, rsp
mov rbx, rbp
=== 8192
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov r15, rbx
movzx rdi, dil
=== 8193
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x12af7fb68
add rbp, 0x15116758; add_carry
mov rbp, qword ptr [rbp]
add rbp, rdi
mov r8b, byte ptr [rbp]
movzx r8, r8b
shl r8, 0x38
add r15, r8
movabs r11, 0xcbaa34dd
push r11
push 0x10aa1014
push 0x185f1835
push 0x6fa87b74
add qword ptr [rsp + 0x18], 0x745f25e3; add
mov r15, r15
=== 8194
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rcx
mov rbx, r15
=== 8195
mov r14, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov al, byte ptr [r8]
mov rdx, 0xff
shl rdx, 0x30
not rdx
and r14, rdx
movzx rdx, al
shl rdx, 0x30
or r14, rdx
=== 8196
mov rbp, r14
push rbp
mov rbx, rsp
mov r13, r14
=== 8197
mov r10, rbx
mov r12, r13
push r10
push 0x31f04a7
push 0x3e11010
push 0x62ed7d70
=== 8198
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rcx
mov rbx, r12
movzx rdi, dil
=== 8199
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rbx
movabs rbp, 0x10ce03463
add rbp, 0x3329265d; add
=== 8200
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbp
mov rdi, r12
=== 8201
mov rbp, rdi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rsi
mov r13b, byte ptr [rbx]
mov r9, 0xff
shl r9, 0x38
not r9
and rbp, r9
movzx r9, r13b
shl r9, 0x38
or rbp, r9
=== 8202
movabs rsi, 0xf89d8a97
push rsi
push 0x1fe36a8
push 0x5b953ace
push 0x60ec048e
push 0x381c4500
add qword ptr [rsp + 0x20], 0x47ec2e51; input
mov r13, rbp
=== 8203
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 10
add rsp, 10
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
mov rdi, r13
movzx r15, r15b
=== 8204
mov rax, r15
mov r13, 0xffffffffda5295db
add r13, 0x260a15c6
push r13
mov r14, rdi
mul qword ptr [rsp]
mov r13, rax
=== 8205
mov r14, r14
sub r14, r13
=== 8206
mov rbx, r14
push rbx
mov rsi, rsp
mov rbx, r14
=== 8207
mov rax, rsi
mov r14, rbx
push rax
push 0x2a1e5933
push 0x4ec63fc6
push 0x74b53653
push 0x175b4710
=== 8208
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov rbp, r14
movzx r15, r15b
=== 8209
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xd121405e
add rsi, 0x6ee83262; sub_carry
mov rsi, qword ptr [rsi + 0x608]
add rsi, r15
mov r13b, byte ptr [rsi]
movzx r13, r13b
shl r13, 8
sub rbp, r13
movabs rbp, 0x13f0d667b
push rbp
push 0xc2e7325
push 0x3582393c
push 0x3144328e
push 0x7f5363e8
add qword ptr [rsp + 0x20], 0xfc0445; sub
mov rbx, rbp
=== 8210
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1544
add rsp, 1544
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov r12, rbx
=== 8211
mov r14, r12
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r14
mov r15b, byte ptr [rbx]
mov r14b, r15b
=== 8212
mov rdi, r14
push rdi
mov r14, rsp
mov rdi, r14
=== 8213
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rsi
mov rsi, rdi
movzx r12, r12b
=== 8214
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xfd2cfcf0
add r11, 0x42dc75d0; sub_carry
mov r11, qword ptr [r11 + 0x7b0]
add r11, r12
mov r8b, byte ptr [r11]
movzx r8, r8b
shl r8, 0x10
sub rsi, r8
mov r14, rsi
movabs rsi, 0xfc435c5c
add rsi, 0x43c60e64; sub
=== 8215
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1968
add rsp, 1968
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rcx
mov r14, r14
=== 8216
mov rsi, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov r10b, byte ptr [r11]
mov r11, 0xff
shl r11, 8
not r11
and rsi, r11
movzx r11, r10b
shl r11, 8
or rsi, r11
=== 8217
mov r11, rsi
push r11
mov r13, rsp
mov rsi, rsi
=== 8218
mov rdi, r13
mov rsi, rsi
push rdi
push 0x1b184c51
push 0x171e7d3a
push 0x4f524583
=== 8219
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov rdi, rsi
movzx r14, r14b
=== 8220
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x122553032
add r14, 0x1db4428e; sub_carry
mov r14, qword ptr [r14 + 0x1e0]
add r14, r14
mov r11b, byte ptr [r14]
movzx r11, r11b
shl r11, 0x18
sub rdi, r11
mov r15, rdi
movabs rsi, 0xe4071313
add rsi, 0x5c0257ad; sub
=== 8221
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 480
add rsp, 480
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r10
mov rbx, r15
=== 8222
mov rbx, rbx
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov al, byte ptr [r14]
mov r9, 0xff
shl r9, 0x10
not r9
and rbx, r9
movzx r9, al
shl r9, 0x10
or rbx, r9
=== 8223
mov r8, rbx
push r8
mov rdi, rsp
mov rsi, rbx
=== 8224
mov r11, rdi
mov rdi, rsi
push r11
push 0x471c5657
push 0x1c85052e
push 0x705419c9
=== 8225
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov rbx, rdi
movzx rsi, sil
=== 8226
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xf19d317c
add r8, 0x4e6c4144; sub_carry
mov r8, qword ptr [r8 + 0xd0]
add r8, rsi
mov dl, byte ptr [r8]
movzx rdx, dl
shl rdx, 0x20
sub rbx, rdx
movabs rax, 0xca60fda6
push rax
push 0x7a1e474e
push 0x27f76d53
push 0x244c55af
add qword ptr [rsp + 0x18], 0x75a86d1a; sub
mov r13, rbx
=== 8227
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 208
add rsp, 208
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdx
mov rdi, r13
=== 8228
mov rsi, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov r12b, byte ptr [r8]
mov r11, 0xff
shl r11, 0x18
not r11
and rsi, r11
movzx r11, r12b
shl r11, 0x18
or rsi, r11
=== 8229
mov rdx, rsi
push rdx
mov rbp, rsp
mov r13, rsi
=== 8230
mov rcx, rbp
mov r12, r13
push rcx
push 0x3b292758
push 0x33b248c6
push 0x4262ad6
push 0xbe02382
=== 8231
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r8
mov r14, r12
movzx rbx, bl
=== 8232
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x13050572c
add r12, 0xfb91b94; sub_carry
mov r12, qword ptr [r12]
add r12, rbx
mov dl, byte ptr [r12]
movzx rdx, dl
shl rdx, 0x28
sub r14, rdx
mov rbp, r14
movabs r12, 0x104a41433
add r12, 0x3b65568d; sub
=== 8233
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov rbp, rbp
=== 8234
mov r12, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov r8b, byte ptr [r8]
mov rax, 0xff
shl rax, 0x20
not rax
and r12, rax
movzx rax, r8b
shl rax, 0x20
or r12, rax
=== 8235
mov r13, r12
push r13
mov r12, rsp
mov rbx, r12
=== 8236
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rcx
mov rbx, rbx
movzx r13, r13b
=== 8237
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xcb1128d8
add rdx, 0x74f849e8; sub_carry
mov rdx, qword ptr [rdx]
add rdx, r13
mov dl, byte ptr [rdx]
movzx rdx, dl
shl rdx, 0x38
sub rbx, rdx
mov r14, rbx
movabs rbx, 0xf8043d39
add rbx, 0x48052d87; sub
=== 8238
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov rsi, r14
=== 8239
mov rsi, rsi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rdi
mov al, byte ptr [rdi]
mov r14, 0xff
shl r14, 0x30
not r14
and rsi, r14
movzx r14, al
shl r14, 0x30
or rsi, r14
=== 8240
mov r15, rsi
push r15
mov r12, rsp
mov r15, rsi
=== 8241
mov rax, r12
mov rbp, r15
push rax
push 0x472f075f
push 0x72ef6128
push 0x577c1ab6
=== 8242
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r10
mov r13, rbp
movzx rbp, bpl
=== 8243
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r13
movabs rdi, 0xe948f0fd
add rdi, 0x56c079c3; sub
=== 8244
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov rsi, r13
=== 8245
mov r12, rsi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov dil, byte ptr [rax]
mov r11, 0xff
shl r11, 0x38
not r11
and r12, r11
movzx r11, dil
shl r11, 0x38
or r12, r11
=== 8246
mov rbx, r12
movabs r14, 0xf811493b
add r14, 0x48786fad; input
=== 8247
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 26
add rsp, 26
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov rbx, rbx
movzx r15, r15b
=== 8248
mov rax, r15
mov rdi, 0xffffffffa31ce632
add rdi, 0x5cfb541b
push rdi
mov rsi, rbx
mul qword ptr [rsp]
mov rdi, rax
=== 8249
mov r15, rsi
add r15, rdi
=== 8250
mov r10, r15
push r10
mov rdi, rsp
mov rsi, r15
=== 8251
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdi
mov r13, rsi
movzx r14, r14b
=== 8252
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xf6356542
add rdx, 0x49d40d7e; sub_carry
mov rdx, qword ptr [rdx + 0x708]
add rdx, r14
mov r14b, byte ptr [rdx]
movzx r14, r14b
shl r14, 8
sub r13, r14
movabs r15, 0xd04645d6
push r15
push 0x4d856846
push 0x792663a3
push 0x42ad74b6
push 0x692316b6
add qword ptr [rsp + 0x20], 0x6fc324ea; sub
mov r14, r13
=== 8253
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1800
add rsp, 1800
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbp
mov r12, r14
=== 8254
mov r15, r12
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov dl, byte ptr [r8]
mov r15b, dl
=== 8255
mov rax, r15
push rax
mov r15, rsp
mov rbx, r15
=== 8256
mov rbx, r15
mov r13, rbx
push rbx
push 0x1cc66841
push 0x8dd3b4e
push 0x45f14c6e
push 0x268b34c1
=== 8257
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r11
mov rsi, r13
movzx r13, r13b
=== 8258
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xfa5371c8
add r12, 0x45b600f8; sub_carry
mov r12, qword ptr [r12 + 0x4b8]
add r12, r13
mov r14b, byte ptr [r12]
movzx r14, r14b
shl r14, 0x10
sub rsi, r14
mov r13, rsi
movabs rbx, 0x11dc81cd1
add rbx, 0x22414def; sub
=== 8259
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1208
add rsp, 1208
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdx
mov r13, r13
=== 8260
mov r13, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov r11b, byte ptr [r15]
mov rax, 0xff
shl rax, 8
not rax
and r13, rax
movzx rax, r11b
shl rax, 8
or r13, rax
=== 8261
mov rdi, r13
push rdi
mov r15, rsp
mov rbx, r13
=== 8262
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rsi
mov r13, rbx
movzx r15, r15b
=== 8263
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xeb3a296a
add r11, 0x54cf4956; sub_carry
mov r11, qword ptr [r11 + 0x18]
add r11, r15
mov r13b, byte ptr [r11]
movzx r13, r13b
shl r13, 0x18
sub r13, r13
mov r14, r13
movabs rdi, 0xc09552bb
add rdi, 0x7f741805; sub
=== 8264
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 24
add rsp, 24
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov rdi, r14
=== 8265
mov rdi, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rsi
mov bpl, byte ptr [r8]
mov rax, 0xff
shl rax, 0x10
not rax
and rdi, rax
movzx rax, bpl
shl rax, 0x10
or rdi, rax
=== 8266
mov rcx, rdi
push rcx
mov rdi, rsp
mov rbp, rdi
=== 8267
mov r9, rdi
mov rsi, rbp
push r9
push 0x13107436
push 0x2fd20591
push 0x6e471ef5
=== 8268
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov r13, rsi
movzx r12, r12b
=== 8269
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xd535495a
add rdi, 0x6ad42966; sub_carry
mov rdi, qword ptr [rdi + 0x650]
add rdi, r12
mov bpl, byte ptr [rdi]
movzx rbp, bpl
shl rbp, 0x20
sub r13, rbp
movabs r11, 0xec9e5c9c
push r11
push 0x265f226b
push 0x5ec81f5c
push 0x6da3368a
push 0x577f2a57
add qword ptr [rsp + 0x20], 0x536b0e24; sub
mov rsi, r13
=== 8270
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1616
add rsp, 1616
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r10
mov r15, rsi
=== 8271
mov r13, r15
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rsi
mov cl, byte ptr [rbx]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and r13, rbp
movzx rbp, cl
shl rbp, 0x18
or r13, rbp
=== 8272
mov r15, r13
push r15
mov rbp, rsp
mov rbx, r13
=== 8273
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov rbx, rbx
movzx r13, r13b
=== 8274
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rbx
movabs r14, 0x12289f6e1
add r14, 0x1d7f73df; sub
=== 8275
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov rbx, rdi
=== 8276
mov r14, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov r11b, byte ptr [rbp]
mov r10, 0xff
shl r10, 0x38
not r10
and r14, r10
movzx r10, r11b
shl r10, 0x38
or r14, r10
=== 8277
mov rdx, r14
push rdx
mov rdi, rsp
mov r13, r14
=== 8278
mov rax, rdi
mov rbp, r13
push rax
push 0x638805e1
push 0x1147228b
push 0x52b366b6
=== 8279
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdi
mov r13, rbp
movzx r14, r14b
=== 8280
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x12fc54ffb
add r12, 0x104422c5; sub_carry
mov r12, qword ptr [r12 + 0xe8]
add r12, r14
mov r11b, byte ptr [r12]
movzx r11, r11b
shl r11, 8
sub r13, r11
movabs rcx, 0xff816774
push rcx
push 0x307c1e0e
push 0x64827825
push 0x256854d0
push 0x3c956813
add qword ptr [rsp + 0x20], 0x4088034c; sub
mov r13, r13
=== 8281
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 232
add rsp, 232
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov rdi, r13
=== 8282
mov r12, rdi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rsi
mov al, byte ptr [r14]
mov r12b, al
=== 8283
mov rbx, r12
push rbx
mov rbp, rsp
mov rdi, r12
=== 8284
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov rsi, rdi
movzx rbp, bpl
=== 8285
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x113f96173
add rsi, 0x2c10114d; sub_carry
mov rsi, qword ptr [rsi + 0x518]
add rsi, rbp
mov r10b, byte ptr [rsi]
movzx r10, r10b
shl r10, 0x10
sub rsi, r10
mov rbp, rsi
movabs rsi, 0x10a3df221
add rsi, 0x35cb789f; sub
=== 8286
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1304
add rsp, 1304
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r11
mov rsi, rbp
=== 8287
mov rbp, rsi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r14
mov r15b, byte ptr [r11]
mov r12, 0xff
shl r12, 8
not r12
and rbp, r12
movzx r12, r15b
shl r12, 8
or rbp, r12
=== 8288
mov rdi, rbp
push rdi
mov r15, rsp
mov rdi, rbp
=== 8289
mov r14, r15
mov rbp, rdi
push r14
push 0x5f7e2605
push 0x16457f79
push 0x72a519d9
push 0x36972edd
=== 8290
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r10
mov rbx, rbp
movzx r14, r14b
=== 8291
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x133125ed9
add rbx, 0xcf713e7; sub_carry
mov rbx, qword ptr [rbx + 0x420]
add rbx, r14
mov cl, byte ptr [rbx]
movzx rcx, cl
shl rcx, 0x18
sub rbx, rcx
mov r12, rbx
movabs rdi, 0x131c5fdd6
add rdi, 0xe436cea; sub
=== 8292
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1056
add rsp, 1056
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov r14, r12
=== 8293
mov rsi, r14
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov r13b, byte ptr [r12]
mov rcx, 0xff
shl rcx, 0x10
not rcx
and rsi, rcx
movzx rcx, r13b
shl rcx, 0x10
or rsi, rcx
=== 8294
mov r15, rsi
push r15
mov r14, rsp
mov rsi, rsi
=== 8295
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov r15, rsi
movzx r12, r12b
=== 8296
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xd0ac4ad7
add r14, 0x6f5d27e9; sub_carry
mov r14, qword ptr [r14 + 0x330]
add r14, r12
mov r11b, byte ptr [r14]
movzx r11, r11b
shl r11, 0x20
sub r15, r11
mov rsi, r15
movabs rdi, 0x13d1668a6
add rdi, 0x2f3021a; sub
=== 8297
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 816
add rsp, 816
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r13
mov r12, rsi
=== 8298
mov rbx, r12
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r14
mov cl, byte ptr [rsi]
mov r13, 0xff
shl r13, 0x18
not r13
and rbx, r13
movzx r13, cl
shl r13, 0x18
or rbx, r13
=== 8299
mov r15, rbx
push r15
mov r13, rsp
mov rbx, rbx
=== 8300
mov rbx, r13
mov r15, rbx
push rbx
push 0x28e964f2
push 0x6efd4e59
push 0x67896b6a
=== 8301
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbp
mov r14, r15
movzx r12, r12b
=== 8302
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r14
movabs rbp, 0x110de1b04
add rbp, 0x2f2b4fbc; sub
=== 8303
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov rdi, rsi
=== 8304
mov r13, rdi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov cl, byte ptr [r9]
mov rdx, 0xff
shl rdx, 0x38
not rdx
and r13, rdx
movzx rdx, cl
shl rdx, 0x38
or r13, rdx
=== 8305
mov r13, r13
push r13
mov rbx, rsp
mov rbp, r13
=== 8306
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov r15, rbp
movzx rsi, sil
=== 8307
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r15
movabs rdi, 0x13a2ee356
add rdi, 0x5da6f6a; or
=== 8308
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rax
mov rbp, r15
=== 8309
mov rbx, rbp
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r13
mov r12b, byte ptr [r11]
mov bl, r12b
=== 8310
mov r12, rbx
push r12
mov rsi, rsp
mov r12, rbx
=== 8311
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov rsi, r12
movzx r15, r15b
=== 8312
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rsi
movabs rbp, 0x12a5716b0
add rbp, 0x15b23c10; or
=== 8313
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rcx
mov rdi, r12
=== 8314
mov rbp, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r15
mov r12b, byte ptr [r12]
mov rbx, 0xff
shl rbx, 8
not rbx
and rbp, rbx
movzx rbx, r12b
shl rbx, 8
or rbp, rbx
=== 8315
mov r10, rbp
push r10
mov r12, rsp
mov rdi, rbp
=== 8316
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov r14, rdi
movzx r13, r13b
=== 8317
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xf907446c
push rbx
push 0x16037392
push 0x1d1c727d
push 0x30097aca
push 0x65aa6c4b
add qword ptr [rsp + 0x20], 0x47020e54; or
mov r13, r14
=== 8318
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov r14, r13
=== 8319
mov r13, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbp
mov r10b, byte ptr [rdi]
mov r14, 0xff
shl r14, 0x18
not r14
and r13, r14
movzx r14, r10b
shl r14, 0x18
or r13, r14
=== 8320
mov r14, r13
push r14
mov rsi, rsp
mov rbp, r13
=== 8321
mov rbx, rsi
mov r13, rbp
push rbx
push 0x4fbb2396
push 0x3c4f1c7e
push 0x7f1d1d84
push 0x541037b
=== 8322
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov r15, r13
movzx rdi, dil
=== 8323
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x11c3eeb3b
push rbp
push 0x8353ddd
push 0x734e0fe7
push 0x15820d93
push 0x50027ec1
add qword ptr [rsp + 0x20], 0x23ca6785; or
mov rbp, r15
=== 8324
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov rdi, rbp
=== 8325
mov rbx, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbx
mov r8b, byte ptr [r12]
mov r14, 0xff
shl r14, 0x30
not r14
and rbx, r14
movzx r14, r8b
shl r14, 0x30
or rbx, r14
=== 8326
mov rcx, rbx
push rcx
mov rbp, rsp
mov rbx, rbx
=== 8327
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov r12, rbx
movzx rdi, dil
=== 8328
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r12
movabs r14, 0xf1163dfc
add r14, 0x4ef314c4; or
=== 8329
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r12
mov r12, rbp
=== 8330
mov rdi, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov bl, byte ptr [rdx]
mov rsi, 0xff
shl rsi, 0x38
not rsi
and rdi, rsi
movzx rsi, bl
shl rsi, 0x38
or rdi, rsi
=== 8331
mov rbp, rdi
movabs r14, 0xc0f5c878
add r14, 0x7f0a4978
test rbp, rbp
lea r15, [rip - 0x41ab9d]
cmovne r15, r14
jmp r15
=== 8332
movabs rdi, 0xc362563f
add rdi, 0x7d2762a9; input
=== 8333
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 11
add rsp, 11
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdi
movzx r12, r12b
=== 8334
mov rax, r12
mov rbx, 0xffffffff93067673
add rbx, 0x6df95a57
push rbx
mul qword ptr [rsp]
mov rbx, rax
=== 8335
mov r8, rbx
push r8
mov r15, rsp
mov r14, rbx
=== 8336
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r8
mov rbx, r14
movzx r12, r12b
=== 8337
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xf12721f2
add r12, 0x4ee250ce; sub_carry
mov r12, qword ptr [r12 + 0x740]
add r12, r12
mov dl, byte ptr [r12]
movzx rdx, dl
shl rdx, 8
sub rbx, rdx
movabs r8, 0xc1e44bc6
push r8
push 0x454248c2
push 0x49e43cab
push 0x1199594a
add qword ptr [rsp + 0x18], 0x7e251efa; sub
mov r12, rbx
=== 8338
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1856
add rsp, 1856
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov rdi, r12
=== 8339
mov r14, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbp
mov bl, byte ptr [r12]
mov r14b, bl
=== 8340
mov rax, r14
push rax
mov rbx, rsp
mov r13, r14
=== 8341
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
mov r14, r13
movzx r15, r15b
=== 8342
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x105d36c0d
add r12, 0x3a3606b3; sub_carry
mov r12, qword ptr [r12 + 0x670]
add r12, r15
mov dl, byte ptr [r12]
movzx rdx, dl
shl rdx, 0x10
sub r14, rdx
mov r15, r14
movabs r13, 0x126f834e7
add r13, 0x191135d9; sub
=== 8343
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1648
add rsp, 1648
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rcx
mov rbp, r15
=== 8344
mov r13, rbp
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov r12b, byte ptr [r11]
mov r14, 0xff
shl r14, 8
not r14
and r13, r14
movzx r14, r12b
shl r14, 8
or r13, r14
=== 8345
mov r8, r13
push r8
mov rbp, rsp
mov r12, r13
=== 8346
mov r11, rbp
mov rbp, r12
push r11
push 0x1aa771e9
push 0x69612f4f
push 0x7efa24f9
push 0x13020f53
=== 8347
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov rdi, rbp
movzx rbp, bpl
=== 8348
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x139c34193
add rbx, 0x646312d; sub_carry
mov rbx, qword ptr [rbx + 0x130]
add rbx, rbp
mov sil, byte ptr [rbx]
movzx rsi, sil
shl rsi, 0x18
sub rdi, rsi
mov rsi, rdi
movabs r15, 0x11b4d1af9
add r15, 0x24bc4fc7; sub
=== 8349
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 304
add rsp, 304
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbx
mov r15, rsi
=== 8350
mov rdi, r15
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r13
mov al, byte ptr [r11]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and rdi, rbx
movzx rbx, al
shl rbx, 0x10
or rdi, rbx
=== 8351
mov r15, rdi
push r15
mov r14, rsp
mov rsi, rdi
=== 8352
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov rbx, rsi
movzx r15, r15b
=== 8353
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x12819655c
add r11, 0x17f00d64; sub_carry
mov r11, qword ptr [r11 + 0x478]
add r11, r15
mov bpl, byte ptr [r11]
movzx rbp, bpl
shl rbp, 0x20
sub rbx, rbp
movabs rdx, 0x109ab0c11
push rdx
push 0xec258cc
push 0x31c60810
push 0x5ceb7e33
add qword ptr [rsp + 0x18], 0x365e5eaf; sub
mov rsi, rbx
=== 8354
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1144
add rsp, 1144
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r10
mov r14, rsi
=== 8355
mov r15, r14
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r15
mov dil, byte ptr [rcx]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r15, rsi
movzx rsi, dil
shl rsi, 0x18
or r15, rsi
=== 8356
mov rbx, r15
push rbx
mov rbx, rsp
mov rsi, r15
=== 8357
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov r12, rsi
movzx r15, r15b
=== 8358
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x129af5ea2
add r15, 0x165a141e; sub_carry
mov r15, qword ptr [r15]
add r15, r15
mov r13b, byte ptr [r15]
movzx r13, r13b
shl r13, 0x28
sub r12, r13
mov rbx, r12
movabs r13, 0x12ee96376
add r13, 0x1120074a; sub
=== 8359
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r11
mov r14, rbx
=== 8360
mov rsi, r14
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov bpl, byte ptr [rdx]
mov r10, 0xff
shl r10, 0x20
not r10
and rsi, r10
movzx r10, bpl
shl r10, 0x20
or rsi, r10
=== 8361
mov r13, rsi
push r13
mov rdi, rsp
mov r13, rsi
=== 8362
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rcx
mov rbx, r13
movzx r12, r12b
=== 8363
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xf2765a00
add r13, 0x4d9318c0; sub_carry
mov r13, qword ptr [r13]
add r13, r12
mov sil, byte ptr [r13]
movzx rsi, sil
shl rsi, 0x38
sub rbx, rsi
mov rbp, rbx
movabs r15, 0xea570d21
add r15, 0x55b25d9f; sub
=== 8364
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov rdi, rbp
=== 8365
mov rbp, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov r9b, byte ptr [rdx]
mov r10, 0xff
shl r10, 0x30
not r10
and rbp, r10
movzx r10, r9b
shl r10, 0x30
or rbp, r10
=== 8366
movabs r13, 0xeb5e7ff7
push r13
push 0xb1e26e9
push 0x12482c26
push 0x36132d9f
add qword ptr [rsp + 0x18], 0x552b38f1; input
mov r13, rbp
=== 8367
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
mov r15, r13
movzx rsi, sil
=== 8368
mov rax, rsi
mov rsi, 0xffffffffeddcb496
add rsi, 0x12e276c3
push rsi
mov r12, r15
mul qword ptr [rsp]
mov rbx, rax
=== 8369
mov r15, r12
xor r15, rbx
=== 8370
mov rbx, r15
push rbx
mov rdi, rsp
mov r15, r15
=== 8371
mov r8, rdi
mov r15, r15
push r8
push 0x49b52d05
push 0x7d7d03e7
push 0x48094d6a
push 0xdda2e58
=== 8372
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rcx
mov rdi, r15
movzx r12, r12b
=== 8373
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x13c7521a1
add r11, 0x394411f; add_carry
mov r11, qword ptr [r11 + 0x370]
add r11, r12
mov cl, byte ptr [r11]
movzx rcx, cl
shl rcx, 8
add rdi, rcx
mov rbx, rdi
movabs rbp, 0xfe5bfeb9
add rbp, 0x41ad5c07; add
=== 8374
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 880
add rsp, 880
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r14
mov r14, rbx
=== 8375
mov r14, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov r15b, byte ptr [r9]
mov r14b, r15b
=== 8376
mov rdx, r14
push rdx
mov rbx, rsp
mov r13, r14
=== 8377
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov rbx, r13
movzx r14, r14b
=== 8378
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x1097e5923
add rbx, 0x368b099d; add_carry
mov rbx, qword ptr [rbx + 0x568]
add rbx, r14
mov al, byte ptr [rbx]
movzx rax, al
shl rax, 0x10
add rbx, rax
mov rdi, rbx
movabs r12, 0xe7c5e7d0
add r12, 0x584372f0; add
=== 8379
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1384
add rsp, 1384
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rsi
mov r14, rdi
=== 8380
mov r14, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r15
mov dl, byte ptr [r9]
mov r15, 0xff
shl r15, 8
not r15
and r14, r15
movzx r15, dl
shl r15, 8
or r14, r15
=== 8381
mov rbp, r14
push rbp
mov r12, rsp
mov rbp, r14
=== 8382
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov rbp, rbp
movzx r13, r13b
=== 8383
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xdb655084
add r12, 0x64a4123c; add_carry
mov r12, qword ptr [r12 + 0x358]
add r12, r13
mov r15b, byte ptr [r12]
movzx r15, r15b
shl r15, 0x18
add rbp, r15
movabs rcx, 0xda9e07d2
push rcx
push 0xe445c7
push 0x62e70fed
push 0x3272662c
push 0x3bd847f2
add qword ptr [rsp + 0x20], 0x656b52ee; add
mov rsi, rbp
=== 8384
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 856
add rsp, 856
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov rbx, rsi
=== 8385
mov rsi, rbx
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov r9b, byte ptr [r15]
mov rdx, 0xff
shl rdx, 0x10
not rdx
and rsi, rdx
movzx rdx, r9b
shl rdx, 0x10
or rsi, rdx
=== 8386
mov rcx, rsi
push rcx
mov r12, rsp
mov r13, rsi
=== 8387
mov r8, r12
mov r12, r13
push r8
push 0x18d4714c
push 0x56fb46e2
push 0x45fe7f57
push 0x12f8526a
=== 8388
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r9
mov rdi, r12
movzx r13, r13b
=== 8389
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x12145584c
add r14, 0x1ec40a74; add_carry
mov r14, qword ptr [r14 + 0x638]
add r14, r13
mov bl, byte ptr [r14]
movzx rbx, bl
shl rbx, 0x20
add rdi, rbx
movabs rcx, 0x103f9f370
push rcx
push 0x110c5841
push 0x1f0b6875
push 0x6b3d3e49
push 0x1ddc3192
add qword ptr [rsp + 0x20], 0x3c0f6750; add
mov r15, rdi
=== 8390
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1592
add rsp, 1592
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r14
mov r14, r15
=== 8391
mov rdi, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov r8b, byte ptr [r11]
mov r11, 0xff
shl r11, 0x18
not r11
and rdi, r11
movzx r11, r8b
shl r11, 0x18
or rdi, r11
=== 8392
mov rcx, rdi
push rcx
mov r12, rsp
mov rbp, rdi
=== 8393
mov rax, r12
mov rdi, rbp
push rax
push 0x412a7937
push 0x227a0a2e
push 0x45063db9
=== 8394
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov rbp, rdi
movzx rbx, bl
=== 8395
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xd1c83856
add rcx, 0x6e412a6a; add_carry
mov rcx, qword ptr [rcx]
add rcx, rbx
mov r8b, byte ptr [rcx]
movzx r8, r8b
shl r8, 0x30
add rbp, r8
movabs rbp, 0xea4bec11
push rbp
push 0x6b3655bc
push 0x64820b95
push 0x4b34564a
add qword ptr [rsp + 0x18], 0x55bd6eaf; add
mov rbp, rbp
=== 8396
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r11
mov r14, rbp
=== 8397
mov rdi, r14
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbp
mov dl, byte ptr [r12]
mov rbp, 0xff
shl rbp, 0x28
not rbp
and rdi, rbp
movzx rbp, dl
shl rbp, 0x28
or rdi, rbp
=== 8398
mov r14, rdi
movabs r13, 0xef7a46f2
add r13, 0x510f71f6; input
=== 8399
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 23
add rsp, 23
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov rdi, r14
movzx rbx, bl
=== 8400
mov rax, rbx
mov rbp, 0xffffffffdca3b890
add rbp, 0x23862671
push rbp
mov r15, rdi
mul qword ptr [rsp]
mov rsi, rax
=== 8401
mov r15, r15
add r15, rsi
=== 8402
mov rbx, r15
push rbx
mov r14, rsp
mov rbp, r15
=== 8403
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov rbp, rbp
movzx rbx, bl
=== 8404
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x10ae142f9
add r14, 0x35281fc7; add_carry
mov r14, qword ptr [r14 + 0x510]
add r14, rbx
mov r11b, byte ptr [r14]
movzx r11, r11b
shl r11, 8
add rbp, r11
movabs rax, 0xf87adeb4
push rax
push 0x3ae4027
push 0x610f3517
push 0x504c4001
add qword ptr [rsp + 0x18], 0x478e7c0c; add
mov rdi, rbp
=== 8405
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1296
add rsp, 1296
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r13
mov rsi, rdi
=== 8406
mov r13, rsi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbp
mov bpl, byte ptr [rbx]
mov r13b, bpl
=== 8407
mov r11, r13
push r11
mov rsi, rsp
mov rbp, r13
=== 8408
mov r15, rsi
mov rbx, rbp
push r15
push 0x109638e
push 0x54f65b46
push 0x77ae2d5e
=== 8409
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbp
mov r15, rbx
movzx r14, r14b
=== 8410
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xf3a90c37
add rax, 0x4c605689; add_carry
mov rax, qword ptr [rax + 0x1a0]
add rax, r14
mov dl, byte ptr [rax]
movzx rdx, dl
shl rdx, 0x10
add r15, rdx
mov r13, r15
movabs rsi, 0x109584a5f
add rsi, 0x36b11061; add
=== 8411
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 416
add rsp, 416
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r14
mov rdi, r13
=== 8412
mov rsi, rdi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov r11b, byte ptr [r10]
mov r8, 0xff
shl r8, 8
not r8
and rsi, r8
movzx r8, r11b
shl r8, 8
or rsi, r8
=== 8413
mov rcx, rsi
push rcx
mov rbx, rsp
mov r12, rsi
=== 8414
mov r13, rbx
mov rbp, r12
push r13
push 0x41b8347a
push 0x5ac12cea
push 0x79934a6a
push 0x5d082127
=== 8415
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov r13, rbp
movzx rdi, dil
=== 8416
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x12ed4303e
add r15, 0x11353282; add_carry
mov r15, qword ptr [r15 + 0x780]
add r15, rdi
mov r13b, byte ptr [r15]
movzx r13, r13b
shl r13, 0x18
add r13, r13
movabs rax, 0xf76cef71
push rax
push 0x2f6b233e
push 0x36291b98
push 0x4482559b
add qword ptr [rsp + 0x18], 0x489c6b4f; add
mov r15, r13
=== 8417
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1920
add rsp, 1920
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbx
mov r13, r15
=== 8418
mov r14, r13
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbx
mov r12b, byte ptr [rbp]
mov r15, 0xff
shl r15, 0x10
not r15
and r14, r15
movzx r15, r12b
shl r15, 0x10
or r14, r15
=== 8419
mov r12, r14
push r12
mov rbx, rsp
mov rdi, r14
=== 8420
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov rbx, rdi
movzx r15, r15b
=== 8421
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xe5ac098f
add rax, 0x5a5d5931; add_carry
mov rax, qword ptr [rax + 0x770]
add rax, r15
mov cl, byte ptr [rax]
movzx rcx, cl
shl rcx, 0x20
add rbx, rcx
mov rbp, rbx
movabs rdi, 0x10a440485
add rdi, 0x35c5563b; add
=== 8422
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1904
add rsp, 1904
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov rbp, rbp
=== 8423
mov r13, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r13
mov r12b, byte ptr [rax]
mov r15, 0xff
shl r15, 0x18
not r15
and r13, r15
movzx r15, r12b
shl r15, 0x18
or r13, r15
=== 8424
mov r15, r13
push r15
mov r13, rsp
mov r12, r13
=== 8425
mov r14, r13
mov r12, r12
push r14
push 0x6f070a7d
push 0x51d05cd7
push 0x8634596
=== 8426
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdi
mov rbp, r12
movzx rsi, sil
=== 8427
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xc10c02ec
add rsi, 0x7efd5fd4; add_carry
mov rsi, qword ptr [rsi]
add rsi, rsi
mov sil, byte ptr [rsi]
movzx rsi, sil
shl rsi, 0x38
add rbp, rsi
movabs r8, 0xcdde2650
push r8
push 0x6b630480
push 0x5f551bca
push 0xa4e4aa5
push 0xd7c32c2
add qword ptr [rsp + 0x20], 0x722b3470; add
mov r15, rbp
=== 8428
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov rbx, r15
=== 8429
mov r12, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov r9b, byte ptr [r8]
mov rcx, 0xff
shl rcx, 0x30
not rcx
and r12, rcx
movzx rcx, r9b
shl rcx, 0x30
or r12, rcx
=== 8430
mov rsi, r12
movabs rbp, 0xd8b79dc7
add rbp, 0x67d21b21; input
=== 8431
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 27
add rsp, 27
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov r12, rsi
movzx r15, r15b
=== 8432
mov rax, r15
mov r14, 0xffffffff85eecd8e
add r14, 0x7acd0c8f
push r14
mov r14, r12
mul qword ptr [rsp]
mov r12, rax
=== 8433
mov rdi, r14
xor rdi, r12
=== 8434
mov r14, rdi
push r14
mov rdi, rsp
mov r14, rdi
=== 8435
mov r14, rdi
mov rbx, r14
push r14
push 0x71093e8b
push 0x7b097d2f
push 0x6d0b330b
push 0x2a8867eb
=== 8436
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rsi, rbx
movzx r13, r13b
=== 8437
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x13624e451
add r12, 0x9e47e6f; add_carry
mov r12, qword ptr [r12 + 0x270]
add r12, r13
mov r15b, byte ptr [r12]
movzx r15, r15b
shl r15, 8
add rsi, r15
mov rbx, rsi
movabs rbp, 0xe58f469a
add rbp, 0x5a7a1426; add
=== 8438
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 624
add rsp, 624
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rsi
mov rsi, rbx
=== 8439
mov rdi, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov r15b, byte ptr [r9]
mov dil, r15b
=== 8440
mov r13, rdi
push r13
mov rsi, rsp
mov r13, rdi
=== 8441
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdi
mov rbx, r13
movzx r14, r14b
=== 8442
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x1181c2757
add r12, 0x27ed3b69; add_carry
mov r12, qword ptr [r12 + 0xc8]
add r12, r14
mov r13b, byte ptr [r12]
movzx r13, r13b
shl r13, 0x10
add rbx, r13
movabs r13, 0xcf3cf3cf
push r13
push 0x4c6e1f38
push 0x1569060a
push 0x371272e6
push 0x4aa8703e
add qword ptr [rsp + 0x20], 0x70cc66f1; add
mov rbx, rbx
=== 8443
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 200
add rsp, 200
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r15
mov rdi, rbx
=== 8444
mov rbx, rdi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov cl, byte ptr [r9]
mov rax, 0xff
shl rax, 8
not rax
and rbx, rax
movzx rax, cl
shl rax, 8
or rbx, rax
=== 8445
mov rdi, rbx
push rdi
mov rdi, rsp
mov r12, rbx
=== 8446
mov rax, rdi
mov rbx, r12
push rax
push 0x52f45d46
push 0x136c14f9
push 0x16290181
=== 8447
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov rsi, rbx
movzx r14, r14b
=== 8448
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x13bd4efcf
add rsi, 0x43472f1; add_carry
mov rsi, qword ptr [rsi + 0x118]
add rsi, r14
mov al, byte ptr [rsi]
movzx rax, al
shl rax, 0x18
add rsi, rax
mov rsi, rsi
movabs r14, 0xd3961622
a
d
d
 
r
1
4
,
 
0
x
6
c
7
3
4
4
9
e
=== 8449
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 280
add rsp, 280
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdi
mov rsi, rsi
=== 8450
mov rbx, rsi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r15
mov r8b, byte ptr [rdi]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and rbx, rsi
movzx rsi, r8b
shl rsi, 0x10
or rbx, rsi
=== 8451
mov r13, rbx
push r13
mov rdi, rsp
mov r12, rbx
=== 8452
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov r15, r12
movzx r14, r14b
=== 8453
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x11d33041e
add r13, 0x22d65ea2; add_carry
mov r13, qword ptr [r13 + 0x2c8]
add r13, r14
mov r8b, byte ptr [r13]
movzx r8, r8b
shl r8, 0x20
add r15, r8
movabs rsi, 0xd2b81972
push rsi
push 0x5ed97c14
push 0x3d3730e
push 0x77cd2088
add qword ptr [rsp + 0x18], 0x6d51414e; add
mov r12, r15
=== 8454
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 712
add rsp, 712
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r10
mov r12, r12
=== 8455
mov r14, r12
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov sil, byte ptr [rax]
mov r8, 0xff
shl r8, 0x18
not r8
and r14, r8
movzx r8, sil
shl r8, 0x18
or r14, r8
=== 8456
movabs r15, 0xd5937b34
push r15
push 0x3d5b0a8e
push 0x6e6e1923
push 0x4c21251a
add qword ptr [rsp + 0x18], 0x6af63db4; input
mov rdi, r14
=== 8457
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 31
add rsp, 31
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbp
mov r13, rdi
movzx rsi, sil
=== 8458
mov rax, rsi
mov r13, 0xffffffff83aad11a
add r13, 0x7cb2538b
push r13
mov rdi, r13
mul qword ptr [rsp]
mov r13, rax
=== 8459
mov rsi, rdi
sub rsi, r13
=== 8460
mov rdx, rsi
push rdx
mov rsi, rsp
mov rbp, rsi
=== 8461
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r15
mov r14, rbp
movzx r12, r12b
=== 8462
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xf4435eaf
add rbx, 0x4bc61411; sub_carry
mov rbx, qword ptr [rbx + 0x4c8]
add rbx, r12
mov dil, byte ptr [rbx]
movzx rdi, dil
shl rdi, 8
sub r14, rdi
movabs rdi, 0xe3394f8e
push rdi
push 0x38573988
push 0x14354ff4
push 0x40a41099
add qword ptr [rsp + 0x18], 0x5cd01b32; sub
mov r15, r14
=== 8463
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1224
add rsp, 1224
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rax
mov rsi, r15
=== 8464
mov r12, rsi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov bpl, byte ptr [rcx]
mov r12b, bpl
=== 8465
mov r11, r12
push r11
mov r12, rsp
mov rsi, r12
=== 8466
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov r15, rsi
movzx rdi, dil
=== 8467
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xeedf1b0e
add rcx, 0x512a57b2; sub_carry
mov rcx, qword ptr [rcx + 0x38]
add rcx, rdi
mov dl, byte ptr [rcx]
movzx rdx, dl
shl rdx, 0x10
sub r15, rdx
movabs rcx, 0x1358d4118
push rcx
push 0x39936faa
push 0x5d587e2b
push 0x592d3d25
add qword ptr [rsp + 0x18], 0xa7c29a8; sub
mov r12, r15
=== 8468
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 56
add rsp, 56
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r10
mov r15, r12
=== 8469
mov rdi, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rdi
mov r15b, byte ptr [rbp]
mov rcx, 0xff
shl rcx, 8
not rcx
and rdi, rcx
movzx rcx, r15b
shl rcx, 8
or rdi, rcx
=== 8470
mov rdi, rdi
push rdi
mov r12, rsp
mov r14, rdi
=== 8471
mov rax, r12
mov r12, r14
push rax
push 0x573c2760
push 0x46ed5cfc
push 0x46ef25f8
=== 8472
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov r13, r12
movzx rdi, dil
=== 8473
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x1245139b8
add r15, 0x1bb83908; sub_carry
mov r15, qword ptr [r15 + 0x80]
add r15, rdi
mov cl, byte ptr [r15]
movzx rcx, cl
shl rcx, 0x18
sub r13, rcx
movabs rcx, 0xe2b42939
push rcx
push 0xd8550d6
push 0x34050e13
push 0x3c4e290d
add qword ptr [rsp + 0x18], 0x5d554187; sub
mov r14, r13
=== 8474
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 128
add rsp, 128
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdi
mov rbx, r14
=== 8475
mov rdi, rbx
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov bpl, byte ptr [rdx]
mov r11, 0xff
shl r11, 0x10
not r11
and rdi, r11
movzx r11, bpl
shl r11, 0x10
or rdi, r11
=== 8476
mov rbp, rdi
push rbp
mov rsi, rsp
mov r15, rdi
=== 8477
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov rdi, r15
movzx r12, r12b
=== 8478
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x13c5c1a56
add rax, 0x3ad586a; sub_carry
mov rax, qword ptr [rax + 0x408]
add rax, r12
mov r12b, byte ptr [rax]
movzx r12, r12b
shl r12, 0x20
sub rdi, r12
mov rdi, rdi
movabs r15, 0x10e45547e
add r15, 0x31c41642; sub
=== 8479
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1032
add rsp, 1032
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbx
mov rbp, rdi
=== 8480
mov r12, rbp
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r12
mov dl, byte ptr [r11]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and r12, rdi
movzx rdi, dl
shl rdi, 0x18
or r12, rdi
=== 8481
mov rax, r12
push rax
mov r13, rsp
mov rsi, r12
=== 8482
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r10
mov rbp, rsi
movzx rsi, sil
=== 8483
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xfabd6b10
add rcx, 0x454c07b0; sub_carry
mov rcx, qword ptr [rcx]
add rcx, rsi
mov r10b, byte ptr [rcx]
movzx r10, r10b
shl r10, 0x38
sub rbp, r10
movabs r10, 0xca2bff5f
push r10
push 0x4b205113
push 0x2f2906dd
push 0x1a12582f
add qword ptr [rsp + 0x18], 0x75dd6b61; sub
mov r14, rbp
=== 8484
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r11
mov r14, r14
=== 8485
mov rsi, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov dl, byte ptr [r11]
mov rbp, 0xff
shl rbp, 0x30
not rbp
and rsi, rbp
movzx rbp, dl
shl rbp, 0x30
or rsi, rbp
=== 8486
mov r12, rsi
push r12
mov rbx, rsp
mov r15, rsi
=== 8487
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rsi
mov r15, r15
movzx r12, r12b
=== 8488
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x132b826e7
push rax
push 0x4f504f0f
push 0x21835e4d
push 0x79e5690c
push 0x274a352c
add qword ptr [rsp + 0x20], 0xd5143d9; sub
mov rsi, r15
=== 8489
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r9
mov rbp, rsi
=== 8490
mov r15, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rdi
mov al, byte ptr [r8]
mov rcx, 0xff
shl rcx, 0x38
not rcx
and r15, rcx
movzx rcx, al
shl rcx, 0x38
or r15, rcx
=== 8491
mov r15, r15
movabs rsi, 0x11351aa71
add rsi, 0x2d380e77; input
=== 8492
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 15
add rsp, 15
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov r13, r15
movzx r15, r15b
=== 8493
mov rax, r15
mov rdi, 0xffffffffee3ca160
add rdi, 0x120123a5
push rdi
mov rdi, r13
mul qword ptr [rsp]
mov r13, rax
=== 8494
mov rbp, rdi
add rbp, r13
=== 8495
mov r14, rbp
push r14
mov r13, rsp
mov rdi, rbp
=== 8496
mov r14, r13
mov r15, rdi
push r14
push 0x52a36a8c
push 0x6b6b39a9
push 0x4ce11399
push 0x4403445d
=== 8497
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov r13, r15
movzx r12, r12b
=== 8498
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xf1c52843
add rbx, 0x4e444a7d; sub_carry
mov rbx, qword ptr [rbx + 0x488]
add rbx, r12
mov dil, byte ptr [rbx]
movzx rdi, dil
shl rdi, 8
sub r13, rdi
mov r14, r13
movabs r12, 0xe04e30f4
add r12, 0x5fbb39cc; sub
=== 8499
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1160
add rsp, 1160
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov r15, r14
=== 8500
mov r13, r15
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r13
mov r12b, byte ptr [r14]
mov r13b, r12b
=== 8501
mov r15, r13
push r15
mov r14, rsp
mov r15, r13
=== 8502
mov rbp, r14
mov rsi, r15
push rbp
push 0x6bf574e1
push 0x7d940caf
push 0x378c42dc
=== 8503
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov rdi, rsi
movzx r14, r14b
=== 8504
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xf1a92216
add r12, 0x4e6050aa; sub_carry
mov r12, qword ptr [r12 + 0x770]
add r12, r14
mov bl, byte ptr [r12]
movzx rbx, bl
shl rbx, 0x10
sub rdi, rbx
movabs r15, 0xf1761421
push r15
push 0x3e8d3f80
push 0x68cd7758
push 0x3b8747df
push 0x5de53aeb
add qword ptr [rsp + 0x20], 0x4e93569f; sub
mov r13, rdi
=== 8505
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1904
add rsp, 1904
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r15
mov rsi, r13
=== 8506
mov r14, rsi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r13
mov dil, byte ptr [r11]
mov rsi, 0xff
shl rsi, 8
not rsi
and r14, rsi
movzx rsi, dil
shl rsi, 8
or r14, rsi
=== 8507
mov rbx, r14
push rbx
mov rbx, rsp
mov rsi, r14
=== 8508
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov rsi, rsi
movzx rbx, bl
=== 8509
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xfeacf922
add rdi, 0x415c799e; sub_carry
mov rdi, qword ptr [rdi + 0x5d0]
add rdi, rbx
mov cl, byte ptr [rdi]
movzx rcx, cl
shl rcx, 0x18
sub rsi, rcx
mov r14, rsi
movabs rsi, 0xc13d5e95
add rsi, 0x7ecc0c2b; sub
=== 8510
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1488
add rsp, 1488
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov rsi, r14
=== 8511
mov rdi, rsi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbx
mov bpl, byte ptr [rbx]
mov r10, 0xff
shl r10, 0x10
not r10
and rdi, r10
movzx r10, bpl
shl r10, 0x10
or rdi, r10
=== 8512
mov r14, rdi
push r14
mov rbx, rsp
mov r13, rdi
=== 8513
mov r14, rbx
mov rbp, r13
push r14
push 0x7e076582
push 0x7c861a08
push 0x697a3bfc
push 0x7fd61cfb
=== 8514
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov rbp, rbp
movzx r13, r13b
=== 8515
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x12acf2cfe
add r12, 0x153a45c2; sub_carry
mov r12, qword ptr [r12 + 0x348]
add r12, r13
mov r12b, byte ptr [r12]
movzx r12, r12b
shl r12, 0x20
sub rbp, r12
movabs rsi, 0xe5a44a46
push rsi
push 0x27455d81
push 0x8b95fa3
push 0x5c7b1d5a
add qword ptr [rsp + 0x18], 0x5a65207a; sub
mov rsi, rbp
=== 8516
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 840
add rsp, 840
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov rdi, rsi
=== 8517
mov rdi, rdi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbp
mov r8b, byte ptr [r14]
mov r12, 0xff
shl r12, 0x18
not r12
and rdi, r12
movzx r12, r8b
shl r12, 0x18
or rdi, r12
=== 8518
mov r14, rdi
movabs r13, 0xe4c159e1
add r13, 0x5bc85f07; input
=== 8519
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 19
add rsp, 19
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov r14, r14
movzx r13, r13b
=== 8520
mov rax, r13
mov rsi, 0xffffffff921cb168
add rsi, 0x6e31743e
push rsi
mov rbp, r14
mul qword ptr [rsp]
mov r13, rax
=== 8521
mov r14, rbp
xor r14, r13
=== 8522
mov rbp, r14
push rbp
mov r13, rsp
mov r12, r14
=== 8523
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdi
mov rbx, r12
movzx r12, r12b
=== 8524
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xc01d00dd
add r8, 0x7fec61e3; add_carry
mov r8, qword ptr [r8 + 0x50]
add r8, r12
mov al, byte ptr [r8]
movzx rax, al
shl rax, 8
add rbx, rax
mov r12, rbx
movabs r14, 0x11649f449
add r14, 0x29bf6677; add
=== 8525
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 80
add rsp, 80
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov rbp, r12
=== 8526
mov r15, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov r8b, byte ptr [r12]
mov r15b, r8b
=== 8527
mov rsi, r15
push rsi
mov rsi, rsp
mov r14, r15
=== 8528
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov r13, r14
movzx r12, r12b
=== 8529
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x1134e5fbb
add r14, 0x2cbb0305; add_carry
mov r14, qword ptr [r14 + 0x598]
add r14, r12
mov dil, byte ptr [r14]
movzx rdi, dil
shl rdi, 0x10
add r13, rdi
movabs r10, 0xfa1cebaa
push r10
push 0xa26241c
push 0x7d71c2d
push 0x1c80550c
push 0x482143d9
add qword ptr [rsp + 0x20], 0x45ec6f16; add
mov r14, r13
=== 8530
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1432
add rsp, 1432
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r15
mov r14, r14
=== 8531
mov rsi, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbx
mov bpl, byte ptr [rdi]
mov r8, 0xff
shl r8, 8
not r8
and rsi, r8
movzx r8, bpl
shl r8, 8
or rsi, r8
=== 8532
mov rsi, rsi
push rsi
mov r13, rsp
mov rbp, rsi
=== 8533
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov r14, rbp
movzx rdi, dil
=== 8534
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x1126042f3
add rbp, 0x2da91fcd; add_carry
mov rbp, qword ptr [rbp + 0x340]
add rbp, rdi
mov bpl, byte ptr [rbp]
movzx rbp, bpl
shl rbp, 0x18
add r14, rbp
mov r14, r14
movabs rdi, 0xfcd50b69
add rdi, 0x43344f57; add
=== 8535
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 832
add rsp, 832
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r15
mov r15, r14
=== 8536
mov r12, r15
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbp
mov bpl, byte ptr [rsi]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and r12, rbx
movzx rbx, bpl
shl rbx, 0x10
or r12, rbx
=== 8537
mov r12, r12
push r12
mov r12, rsp
mov rbx, r12
=== 8538
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov rbx, rbx
movzx r12, r12b
=== 8539
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x104313e1a
add r8, 0x3bd824a6; add_carry
mov r8, qword ptr [r8 + 0x120]
add r8, r12
mov r14b, byte ptr [r8]
movzx r14, r14b
shl r14, 0x20
add rbx, r14
mov r14, rbx
movabs rdi, 0x107b2dedb
add rdi, 0x38567be5; add
=== 8540
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 288
add rsp, 288
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r9
mov rbx, r14
=== 8541
mov r13, rbx
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov r14b, byte ptr [r11]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and r13, rdi
movzx rdi, r14b
shl rdi, 0x18
or r13, rdi
=== 8542
mov rcx, r13
push rcx
mov rbp, rsp
mov r13, r13
=== 8543
mov rdx, rbp
mov rsi, r13
push rdx
push 0xe8c2a56
push 0x1492658c
push 0x61a06e9b
=== 8544
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov r13, rsi
movzx rdi, dil
=== 8545
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x1020e2ff2
add rsi, 0x3dfb32ce; add_carry
mov rsi, qword ptr [rsi]
add rsi, rdi
mov sil, byte ptr [rsi]
movzx rsi, sil
shl rsi, 0x30
add r13, rsi
movabs r12, 0x13b1b291b
push r12
push 0x26192a85
push 0x252f4e47
push 0x1ac21192
push 0x3dc751a5
add qword ptr [rsp + 0x20], 0x4ee31a5; add
mov rbp, r13
=== 8546
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov r15, rbp
=== 8547
mov r12, r15
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r13
mov r10b, byte ptr [r15]
mov rax, 0xff
shl rax, 0x28
not rax
and r12, rax
movzx rax, r10b
shl rax, 0x28
or r12, rax
=== 8548
mov r14, r12
push r14
mov rbp, rsp
mov rsi, r12
=== 8549
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r9
mov r15, rsi
movzx rdi, dil
=== 8550
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x13db655f4
add rcx, 0x2530ccc; add_carry
mov rcx, qword ptr [rcx]
add rcx, rdi
mov cl, byte ptr [rcx]
movzx rcx, cl
shl rcx, 0x38
add r15, rcx
movabs r15, 0xf6b134ec
push r15
push 0xced4aa3
push 0x5fbe167b
push 0x7ca50ca0
push 0x75536146
add qword ptr [rsp + 0x20], 0x495825d4; add
mov rdi, r15
=== 8551
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rsi
mov r15, rdi
=== 8552
mov r12, r15
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov dl, byte ptr [r10]
mov rbp, 0xff
shl rbp, 0x30
not rbp
and r12, rbp
movzx rbp, dl
shl rbp, 0x30
or r12, rbp
=== 8553
movabs rdi, 0xdaeb588b
push rdi
push 0x76de5e00
push 0x64d716e6
push 0x7976671b
push 0x5dd06352
add qword ptr [rsp + 0x20], 0x659e605d; input
mov rbx, r12
=== 8554
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov r15, rbx
movzx rsi, sil
=== 8555
mov rax, rsi
mov r8, 0xffffffff9fc9fc81
add r8, 0x60e41c9f
push r8
mov rdi, r15
mul qword ptr [rsp]
mov r13, rax
=== 8556
mov rbp, rdi
sub rbp, r13
=== 8557
mov r12, rbp
push r12
mov rbp, rsp
mov rdi, rbp
=== 8558
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov rbx, rdi
movzx rsi, sil
=== 8559
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x122e8114f
push rbp
push 0x4a583849
push 0x60300703
push 0x536d300f
add qword ptr [rsp + 0x18], 0x1d213971; xor
mov r14, rbx
=== 8560
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 528
add rsp, 528
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rax
mov r12, r14
=== 8561
mov r12, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov r10b, byte ptr [rcx]
mov r12b, r10b
=== 8562
mov r13, r12
push r13
mov rdi, rsp
mov rbp, r12
=== 8563
mov r8, rdi
mov r15, rbp
push r8
push 0x4e1c5cc7
push 0x16b36bbb
push 0x6277403e
push 0x19981319
=== 8564
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov r12, r15
movzx r14, r14b
=== 8565
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x11db61c4a
push r14
push 0x7533286e
push 0x78992513
push 0x5872382
push 0x6e042756
add qword ptr [rsp + 0x20], 0x22532e76; xor
mov rdi, r12
=== 8566
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 776
add rsp, 776
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r12
mov rbx, rdi
=== 8567
mov r14, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov r13b, byte ptr [rax]
mov r8, 0xff
shl r8, 8
not r8
and r14, r8
movzx r8, r13b
shl r8, 8
or r14, r8
=== 8568
mov rbp, r14
push rbp
mov r13, rsp
mov rbp, r14
=== 8569
mov rbx, r13
mov rbp, rbp
push rbx
push 0x69181c31
push 0x5c780694
push 0x5d945eef
push 0x3b042a8c
=== 8570
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov r14, rbp
movzx r15, r15b
=== 8571
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r14
movabs r14, 0x128d50a08
add r14, 0x173440b8; xor
=== 8572
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1752
add rsp, 1752
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbp
mov r12, rsi
=== 8573
mov rbx, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov r8b, byte ptr [r10]
mov r15, 0xff
shl r15, 0x10
not r15
and rbx, r15
movzx r15, r8b
shl r15, 0x10
or rbx, r15
=== 8574
mov rdx, rbx
push rdx
mov rsi, rsp
mov rbp, rbx
=== 8575
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov rsi, rbp
movzx r14, r14b
=== 8576
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xe3a324be
push r15
push 0x555848e4
push 0x437f7762
push 0x8146f2a
add qword ptr [rsp + 0x18], 0x5c662602; xor
mov r13, rsi
=== 8577
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1688
add rsp, 1688
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r8
mov rbx, r13
=== 8578
mov rsi, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov r11b, byte ptr [r9]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and rsi, rbp
movzx rbp, r11b
shl rbp, 0x18
or rsi, rbp
=== 8579
mov rbp, rsi
push rbp
mov r15, rsp
mov rdi, rsi
=== 8580
mov rcx, r15
mov rdi, rdi
push rcx
push 0x3e56333f
push 0x75497eeb
push 0xdaf10c9
push 0xee86e7f
=== 8581
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov rdi, rdi
movzx r14, r14b
=== 8582
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rdi
movabs r15, 0xd3cd25e3
add r15, 0x6c3c24dd; xor
=== 8583
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdx
mov r14, r14
=== 8584
mov r13, r14
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov r11b, byte ptr [rdx]
mov rsi, 0xff
shl rsi, 0x28
not rsi
and r13, rsi
movzx rsi, r11b
shl rsi, 0x28
or r13, rsi
=== 8585
mov r12, r13
push r12
mov rbp, rsp
mov r12, r13
=== 8586
mov r9, rbp
mov r13, r12
push r9
push 0x4d8067c9
push 0x7abc0fa8
push 0x36e6428b
push 0x643e484f
=== 8587
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r10
mov rbx, r13
movzx r14, r14b
=== 8588
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xf4276dcc
add rbp, 0x4be204f4; sub_carry
mov rbp, qword ptr [rbp + 0x78]
add rbp, r14
mov bl, byte ptr [rbp]
movzx rbx, bl
shl rbx, 8
sub rbx, rbx
movabs r10, 0xe2d10dda
push r10
push 0x299e5866
push 0x66e5081c
push 0x1a0549b1
push 0x6dab634d
add qword ptr [rsp + 0x20], 0x5d385ce6; sub
mov r14, rbx
=== 8589
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 120
add rsp, 120
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbx
mov r14, r14
=== 8590
mov rbp, r14
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r13
mov bl, byte ptr [rsi]
mov bpl, bl
=== 8591
mov r11, rbp
push r11
mov r14, rsp
mov rsi, rbp
=== 8592
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov rbp, rsi
movzx rdi, dil
=== 8593
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xf7c44fa9
add r11, 0x48452317; sub_carry
mov r11, qword ptr [r11 + 0x780]
add r11, rdi
mov r14b, byte ptr [r11]
movzx r14, r14b
shl r14, 0x10
sub rbp, r14
movabs rax, 0x12fc25573
push rax
push 0x242c1dba
push 0x373e46a4
push 0x2569311d
add qword ptr [rsp + 0x18], 0x1047154d; sub
mov r13, rbp
=== 8594
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1920
add rsp, 1920
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov r12, r13
=== 8595
mov r14, r12
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov bpl, byte ptr [rax]
mov r10, 0xff
shl r10, 8
not r10
and r14, r10
movzx r10, bpl
shl r10, 8
or r14, r10
=== 8596
mov r15, r14
push r15
mov rbp, rsp
mov r15, r14
=== 8597
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov r12, r15
movzx r15, r15b
=== 8598
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xd0a8f93f
add r10, 0x6f607981; sub_carry
mov r10, qword ptr [r10 + 0x3d0]
add r10, r15
mov dil, byte ptr [r10]
movzx rdi, dil
shl rdi, 0x18
sub r12, rdi
mov rdi, r12
movabs r12, 0xf903f11a
add r12, 0x470579a6; sub
=== 8599
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 976
add rsp, 976
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r9
mov r12, rdi
=== 8600
mov rbp, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rdi
mov sil, byte ptr [rdx]
mov rcx, 0xff
shl rcx, 0x10
not rcx
and rbp, rcx
movzx rcx, sil
shl rcx, 0x10
or rbp, rcx
=== 8601
mov r12, rbp
push r12
mov rsi, rsp
mov rbp, rbp
=== 8602
mov rdi, rsi
mov rbp, rbp
push rdi
push 0x2c763875
push 0x5ba1bfd
push 0x13770ebc
=== 8603
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov rbx, rbp
movzx r15, r15b
=== 8604
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x10e49fec4
add r8, 0x31bf73fc; sub_carry
mov r8, qword ptr [r8 + 0x5d8]
add r8, r15
mov sil, byte ptr [r8]
movzx rsi, sil
shl rsi, 0x20
sub rbx, rsi
movabs rax, 0x11fb9ed9b
push rax
push 0x6a732012
push 0x3c1a5e05
push 0x1ae424af
push 0x5ece3a08
add qword ptr [rsp + 0x20], 0x204f7d25; sub
mov r13, rbx
=== 8605
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1496
add rsp, 1496
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdi
mov r14, r13
=== 8606
mov rdi, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov bl, byte ptr [rax]
mov r10, 0xff
shl r10, 0x18
not r10
and rdi, r10
movzx r10, bl
shl r10, 0x18
or rdi, r10
=== 8607
mov rcx, rdi
push rcx
mov rdi, rsp
mov rbx, rdi
=== 8608
mov rdx, rdi
mov r14, rbx
push rdx
push 0x7f164e43
push 0x35c439cd
push 0x4bbc4279
=== 8609
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov rbx, r14
movzx r12, r12b
=== 8610
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x133c1238a
add r13, 0xc484f36; sub_carry
mov r13, qword ptr [r13 + 8]
add r13, r12
mov dl, byte ptr [r13]
movzx rdx, dl
shl rdx, 0x28
sub rbx, rdx
mov rsi, rbx
movabs r13, 0x117682555
add r13, 0x28a1456b; sub
=== 8611
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 8
add rsp, 8
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbx
mov rdi, rsi
=== 8612
mov r14, rdi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rsi
mov r8b, byte ptr [rbp]
mov r11, 0xff
shl r11, 0x20
not r11
and r14, r11
movzx r11, r8b
shl r11, 0x20
or r14, r11
=== 8613
mov rbp, r14
push rbp
mov r13, rsp
mov rsi, r14
=== 8614
mov r11, r13
mov rbx, rsi
push r11
push 0x56dc70d2
push 0x334375bf
push 0x296444a5
push 0x3f6f5be0
=== 8615
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov r15, rbx
movzx rdi, dil
=== 8616
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x10d40218b
add rcx, 0x32c95135; sub_carry
mov rcx, qword ptr [rcx]
add rcx, rdi
mov r13b, byte ptr [rcx]
movzx r13, r13b
shl r13, 0x38
sub r15, r13
mov r15, r15
movabs rbx, 0x102136262
add rbx, 0x3df6085e; sub
=== 8617
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r10
mov r15, r15
=== 8618
mov rdi, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov sil, byte ptr [rax]
mov rbx, 0xff
shl rbx, 0x30
not rbx
and rdi, rbx
movzx rbx, sil
shl rbx, 0x30
or rdi, rbx
=== 8619
mov r15, rdi
push r15
mov rdi, rsp
mov r14, rdi
=== 8620
mov r9, rdi
mov r13, r14
push r9
push 0x3f1830d9
push 0x27887727
push 0x509a49ec
=== 8621
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r15
mov rdi, r13
movzx r15, r15b
=== 8622
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rdi
movabs r14, 0xc2ac4d6e
add r14, 0x7d5d1d52; sub
=== 8623
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r11
mov rbp, rsi
=== 8624
mov rdi, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r13
mov r15b, byte ptr [r12]
mov rbx, 0xff
shl rbx, 0x38
not rbx
and rdi, rbx
movzx rbx, r15b
shl rbx, 0x38
or rdi, rbx
=== 8625
mov rax, rdi
push rax
mov r15, rsp
mov rsi, rdi
=== 8626
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r11
mov rdi, rsi
movzx rbp, bpl
=== 8627
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x1224230e3
push rax
push 0x765c52da
push 0x30dd1c16
push 0x67797c94
push 0x72b45fd2
add qword ptr [rsp + 0x20], 0x1dc711dd
mov r12, rdi
=== 8628
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov r14, r12
=== 8629
mov r14, r14
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov r13b, byte ptr [rbp]
mov r12, 0xff
shl r12, 8
not r12
and r14, r12
movzx r12, r13b
shl r12, 8
or r14, r12
=== 8630
mov rdi, r14
push rdi
mov rbp, rsp
mov rdi, r14
=== 8631
mov r11, rbp
mov r14, rdi
push r11
push 0x1de912a3
push 0x3d04786
push 0x18e71143
push 0x3bce7d15
=== 8632
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbp
mov rsi, r14
movzx r12, r12b
=== 8633
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xeb7d1e15
push r8
push 0x3c594acc
push 0x24b678f8
push 0x25cf7c58
add qword ptr [rsp + 0x18], 0x548c24ab
mov rsi, rsi
=== 8634
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov rdi, rsi
=== 8635
mov r15, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbp
mov cl, byte ptr [rcx]
mov rdi, 0xff
shl rdi, 0x30
not rdi
and r15, rdi
movzx rdi, cl
shl rdi, 0x30
or r15, rdi
=== 8636
mov rbp, r15
movabs r15, 0xf7d9f220
add r15, 0x48261fd0
test rbp, rbp
lea rbx, [rip - 0x427882]
cmovne rbx, r15
jmp rbx
=== 8637
movabs r14, 0x10d065e5e
add r14, 0x33835a8a; input
=== 8638
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
movzx rsi, sil
=== 8639
mov rax, rsi
mov rcx, 0xffffffffe4b82bc7
add rcx, 0x1c3d409b
push rcx
mul qword ptr [rsp]
mov r12, rax
=== 8640
mov r8, r12
push r8
mov r12, rsp
mov rdi, r12
=== 8641
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov rsi, rdi
movzx rbx, bl
=== 8642
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xe7902641
push r11
push 0x16573588
push 0x69792325
push 0x28ff20f6
add qword ptr [rsp + 0x18], 0x5879247f; xor
mov r13, rsi
=== 8643
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 520
add rsp, 520
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov r15, r13
=== 8644
mov r13, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov r12b, byte ptr [rax]
mov r13b, r12b
=== 8645
mov rcx, r13
push rcx
mov r15, rsp
mov rdi, r13
=== 8646
mov r13, r15
mov rsi, rdi
push r13
push 0x8f71862
push 0x36ad4beb
push 0x25fb467c
=== 8647
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r13
mov rbp, rsi
movzx r15, r15b
=== 8648
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x120a8cc35
push r15
push 0x3dc50730
push 0x6e092928
push 0x1f582cfa
add qword ptr [rsp + 0x18], 0x1f607e8b; xor
mov rdi, rbp
=== 8649
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 248
add rsp, 248
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov rbp, rdi
=== 8650
mov rbx, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rsi
mov r10b, byte ptr [r10]
mov rsi, 0xff
shl rsi, 8
not rsi
and rbx, rsi
movzx rsi, r10b
shl rsi, 8
or rbx, rsi
=== 8651
mov rbx, rbx
push rbx
mov rbp, rsp
mov r13, rbx
=== 8652
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rax
mov r15, r13
movzx rsi, sil
=== 8653
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xc4f1f300
push rcx
push 0x3e762858
push 0x1bd53769
push 0x77dc3d35
add qword ptr [rsp + 0x18], 0x7b1757c0; xor
mov rsi, r15
=== 8654
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1000
add rsp, 1000
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rcx
mov r12, rsi
=== 8655
mov rsi, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r14
mov r8b, byte ptr [rdx]
mov r9, 0xff
shl r9, 0x10
not r9
and rsi, r9
movzx r9, r8b
shl r9, 0x10
or rsi, r9
=== 8656
mov r10, rsi
push r10
mov rsi, rsp
mov r15, rsi
=== 8657
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov rbp, r15
movzx r12, r12b
=== 8658
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rbp
movabs rbx, 0x13637d623
add rbx, 0x9d1749d; xor
=== 8659
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 864
add rsp, 864
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r14
mov rsi, rbp
=== 8660
mov rdi, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbx
mov r13b, byte ptr [r13]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and rdi, rdx
movzx rdx, r13b
shl rdx, 0x18
or rdi, rdx
=== 8661
movabs rbp, 0x1075a72b6
push rbp
push 0x22c66ced
push 0x1289686e
push 0x15c650ef
push 0x780807d3
add qword ptr [rsp + 0x20], 0x392f4632; input
mov rsi, rdi
=== 8662
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_SMALL 16
add rsp, 16
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r15
mov rdi, rsi
movzx r12, r12b
=== 8663
mov rax, r12
mov rbp, 0xffffffffab883127
add rbp, 0x54d924de
push rbp
mov rdi, rdi
mul qword ptr [rsp]
mov r13, rax
=== 8664
mov rbp, rdi
add rbp, r13
=== 8665
mov r13, rbp
push r13
mov r12, rsp
mov rdi, rbp
=== 8666
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov r14, rdi
movzx rsi, sil
=== 8667
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xce8624a0
add r11, 0x71833e20; add_carry
mov r11, qword ptr [r11 + 0x770]
add r11, rsi
mov al, byte ptr [r11]
movzx rax, al
shl rax, 8
add r14, rax
movabs r13, 0x1348b59b2
push r13
push 0x10616b04
push 0x361a532c
push 0x2fd47f92
push 0x1c4c21d1
add qword ptr [rsp + 0x20], 0xb7e010e; add
mov rdi, r14
=== 8668
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1904
add rsp, 1904
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rcx
mov rdi, rdi
=== 8669
mov r13, rdi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov cl, byte ptr [r10]
mov r13b, cl
=== 8670
mov rdi, r13
push rdi
mov rbx, rsp
mov rsi, r13
=== 8671
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov r13, rsi
movzx rdi, dil
=== 8672
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xf66d59a2
add r15, 0x499c091e; add_carry
mov r15, qword ptr [r15 + 0x7b0]
add r15, rdi
mov cl, byte ptr [r15]
movzx rcx, cl
shl rcx, 0x10
add r13, rcx
mov r14, r13
movabs rbp, 0xc9f50b60
add rbp, 0x76144f60; add
=== 8673
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1968
add rsp, 1968
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbp
mov r14, r14
=== 8674
mov r12, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rsi
mov r13b, byte ptr [rdi]
mov r9, 0xff
shl r9, 8
not r9
and r12, r9
movzx r9, r13b
shl r9, 8
or r12, r9
=== 8675
mov r12, r12
push r12
mov rdi, rsp
mov rsi, r12
=== 8676
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r12
mov rbx, rsi
movzx r13, r13b
=== 8677
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x11c513ee0
add r11, 0x23b823e0; add_carry
mov r11, qword ptr [r11 + 0x290]
add r11, r13
mov bl, byte ptr [r11]
movzx rbx, bl
shl rbx, 0x18
add rbx, rbx
movabs rbp, 0xc0b4270c
push rbp
push 0x7e025d27
push 0x187e3729
push 0x5ed46e51
add qword ptr [rsp + 0x18], 0x7f5533b4; add
mov rdi, rbx
=== 8678
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 656
add rsp, 656
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r14
mov r13, rdi
=== 8679
mov r15, r13
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbp
mov r12b, byte ptr [rbp]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and r15, rbx
movzx rbx, r12b
shl rbx, 0x10
or r15, rbx
=== 8680
mov rsi, r15
push rsi
mov r14, rsp
mov r12, r15
=== 8681
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbx
mov r12, r12
movzx rsi, sil
=== 8682
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x1384f3a4a
add r11, 0x7ba2876; add_carry
mov r11, qword ptr [r11 + 0x2d8]
add r11, rsi
mov r8b, byte ptr [r11]
movzx r8, r8b
shl r8, 0x20
add r12, r8
mov rbp, r12
movabs rbx, 0xf76d103e
add rbx, 0x489c4a82; add
=== 8683
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 728
add rsp, 728
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r15
mov r13, rbp
=== 8684
mov rdi, r13
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov r15b, byte ptr [r13]
mov r11, 0xff
shl r11, 0x18
not r11
and rdi, r11
movzx r11, r15b
shl r11, 0x18
or rdi, r11
=== 8685
mov rbx, rdi
push rbx
mov r14, rsp
mov rdi, rdi
=== 8686
mov r10, r14
mov rbx, rdi
push r10
push 0x559a0423
push 0x1d7b1753
push 0x34aa1fff
push 0x541b2481
=== 8687
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov rbx, rbx
movzx r15, r15b
=== 8688
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x1010759cf
add r13, 0x3f0208f1; add_carry
mov r13, qword ptr [r13]
add r13, r15
mov r11b, byte ptr [r13]
movzx r11, r11b
shl r11, 0x30
add rbx, r11
movabs rbx, 0x1198158fc
push rbx
push 0x7b2f5302
push 0x26df4005
push 0x32c449f2
push 0x412a0cdf
add qword ptr [rsp + 0x20], 0x268801c4; add
mov r14, rbx
=== 8689
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdx
mov rdi, r14
=== 8690
mov rbp, rdi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r15
mov sil, byte ptr [rdi]
mov rcx, 0xff
shl rcx, 0x28
not rcx
and rbp, rcx
movzx rcx, sil
shl rcx, 0x28
or rbp, rcx
=== 8691
mov rdx, rbp
push rdx
mov r12, rsp
mov rbx, rbp
=== 8692
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov rbp, rbx
movzx rsi, sil
=== 8693
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x11992f897
add rbp, 0x26766a29; add_carry
mov rbp, qword ptr [rbp]
add rbp, rsi
mov r14b, byte ptr [rbp]
movzx r14, r14b
shl r14, 0x38
add rbp, r14
mov r14, rbp
movabs rbp, 0x11a0be8cb
add rbp, 0x25fd71f5; add
=== 8694
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r11
mov rbx, r14
=== 8695
mov r14, rbx
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rdi
mov r11b, byte ptr [r13]
mov rbx, 0xff
shl rbx, 0x30
not rbx
and r14, rbx
movzx rbx, r11b
shl rbx, 0x30
or r14, rbx
=== 8696
mov r14, r14
push r14
mov r14, rsp
mov rbx, r14
=== 8697
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r10
mov rbp, rbx
movzx rsi, sil
=== 8698
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xdec8f1fe
push r10
push 0x525e5d14
push 0x46212e22
push 0x73fd21b3
push 0x75300530
add qword ptr [rsp + 0x20], 0x614068c2; add
mov rsi, rbp
=== 8699
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov r12, rsi
=== 8700
mov rbx, r12
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov r15b, byte ptr [rbp]
mov r12, 0xff
shl r12, 0x38
not r12
and rbx, r12
movzx r12, r15b
shl r12, 0x38
or rbx, r12
=== 8701
movabs r14, 0x10c6e9ea5
push r14
push 0x41767c8e
push 0x6937376a
push 0x237733c4
add qword ptr [rsp + 0x18], 0x341b1a43; input
mov r13, rbx
=== 8702
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 20
add rsp, 20
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov rdi, r13
movzx rbx, bl
=== 8703
mov rax, rbx
mov r13, 0xffffffff992278a9
add r13, 0x67600bad
push r13
mov rbx, rdi
mul qword ptr [rsp]
mov r14, rax
=== 8704
mov rdi, rbx
add rdi, r14
=== 8705
mov rsi, rdi
push rsi
mov rbx, rsp
mov r12, rdi
=== 8706
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r11
mov r13, r12
movzx rdi, dil
=== 8707
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x1087f3ad9
push r13
push 0x7fde3510
push 0x3c23347
push 0x7bb81fa3
push 0x1b406899
add qword ptr [rsp + 0x20], 0x378a0fe7; xor
mov r12, r13
=== 8708
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 712
add rsp, 712
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov r12, r12
=== 8709
mov rbx, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rsi
mov r10b, byte ptr [r15]
mov bl, r10b
=== 8710
mov rbp, rbx
push rbp
mov r14, rsp
mov r13, rbx
=== 8711
mov r13, r14
mov r15, r13
push r13
push 0x7fb16a1a
push 0x3fab4e06
push 0x5987701
=== 8712
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov rdi, r15
movzx r13, r13b
=== 8713
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rdi
movabs rdi, 0x11417e137
add rdi, 0x2bf16989; xor
=== 8714
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1208
add rsp, 1208
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov r15, r15
=== 8715
mov rsi, r15
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov r14b, byte ptr [rdx]
mov rax, 0xff
shl rax, 8
not rax
and rsi, rax
movzx rax, r14b
shl rax, 8
or rsi, rax
=== 8716
mov r14, rsi
push r14
mov rbx, rsp
mov r12, rsi
=== 8717
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov rdi, r12
movzx r15, r15b
=== 8718
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rdi
movabs rbx, 0xea17fb05
add rbx, 0x55f14fbb; xor
=== 8719
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 40
add rsp, 40
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov r12, rsi
=== 8720
mov r15, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov cl, byte ptr [rcx]
mov r12, 0xff
shl r12, 0x10
not r12
and r15, r12
movzx r12, cl
shl r12, 0x10
or r15, r12
=== 8721
mov r13, r15
push r13
mov r12, rsp
mov rbx, r15
=== 8722
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
mov rbp, rbx
movzx rsi, sil
=== 8723
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rbp
movabs r15, 0x11c133223
add r15, 0x23f6189d; xor
=== 8724
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 888
add rsp, 888
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rsi
mov rsi, r12
=== 8725
mov r14, rsi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rdi
mov bl, byte ptr [r12]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and r14, rdi
movzx rdi, bl
shl rdi, 0x18
or r14, rdi
=== 8726
movabs rbp, 0x12e9365da
push rbp
push 0x490137c2
push 0xc714ed0
push 0x78913352
add qword ptr [rsp + 0x18], 0x11f6530e; input
mov rsi, r14
=== 8727
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 28
add rsp, 28
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r11
mov r14, rsi
movzx rbx, bl
=== 8728
mov rax, rbx
mov r14, 0xffffffff9628e9f7
add r14, 0x6a275e54
push r14
mov r12, r14
mul qword ptr [rsp]
mov rbp, rax
=== 8729
mov rsi, r12
sub rsi, rbp
=== 8730
mov r8, rsi
push r8
mov rdi, rsp
mov r12, rsi
=== 8731
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdi
mov rdi, r12
movzx r12, r12b
=== 8732
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xd765ebd8
add r11, 0x68a376e8; add_carry
mov r11, qword ptr [r11 + 0x578]
add r11, r12
mov dil, byte ptr [r11]
movzx rdi, dil
shl rdi, 8
add rdi, rdi
movabs rcx, 0xe0e328b9
push rcx
push 0x51f54082
push 0x16136df7
push 0x494b21c6
add qword ptr [rsp + 0x18], 0x5f263207; add
mov rbx, rdi
=== 8733
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1400
add rsp, 1400
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov rbp, rbx
=== 8734
mov rbp, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov r10b, byte ptr [rdx]
mov bpl, r10b
=== 8735
mov rdi, rbp
push rdi
mov r13, rsp
mov rsi, rbp
=== 8736
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rax
mov r13, rsi
movzx r15, r15b
=== 8737
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x1190bf605
add r15, 0x26fd6cbb; add_carry
mov r15, qword ptr [r15 + 0x110]
add r15, r15
mov r12b, byte ptr [r15]
movzx r12, r12b
shl r12, 0x10
add r13, r12
movabs rdi, 0xd9df1bbb
push rdi
push 0x70af2bbd
push 0x33d84cc9
push 0x3d1a5806
push 0x270e6c4a
add qword ptr [rsp + 0x20], 0x662a3f05; add
mov r15, r13
=== 8738
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 272
add rsp, 272
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov r15, r15
=== 8739
mov rbp, r15
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbp
mov al, byte ptr [r8]
mov r10, 0xff
shl r10, 8
not r10
and rbp, r10
movzx r10, al
shl r10, 8
or rbp, r10
=== 8740
mov r14, rbp
push r14
mov rsi, rsp
mov r15, rbp
=== 8741
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rax
mov r15, r15
movzx rsi, sil
=== 8742
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xfb995023
add rax, 0x4470129d; add_carry
mov rax, qword ptr [rax + 0x710]
add rax, rsi
mov r15b, byte ptr [rax]
movzx r15, r15b
shl r15, 0x18
add r15, r15
movabs r13, 0xf93721ea
push r13
push 0x31e64df7
push 0x167f33f0
push 0x7c651e40
push 0x417c2ae7
add qword ptr [rsp + 0x20], 0x46d238d6; add
mov r15, r15
=== 8743
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1808
add rsp, 1808
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov r15, r15
=== 8744
mov r12, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov dl, byte ptr [r9]
mov r9, 0xff
shl r9, 0x10
not r9
and r12, r9
movzx r9, dl
shl r9, 0x10
or r12, r9
=== 8745
mov rbp, r12
push rbp
mov r12, rsp
mov r15, r12
=== 8746
mov rax, r12
mov rbp, r15
push rax
push 0x53cd76b7
push 0x62f119b5
push 0x290f5f15
push 0xded5b63
=== 8747
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r10
mov rbp, rbp
movzx rsi, sil
=== 8748
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x11476fe9f
add rsi, 0x2b926421; add_carry
mov rsi, qword ptr [rsi + 0x420]
add rsi, rsi
mov al, byte ptr [rsi]
movzx rax, al
shl rax, 0x20
add rbp, rax
movabs rax, 0xf5fc5659
push rax
push 0x4968744c
push 0x74373e3c
push 0x41b9020a
add qword ptr [rsp + 0x18], 0x4a0d0467; add
mov rbp, rbp
=== 8749
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1056
add rsp, 1056
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbx
mov r14, rbp
=== 8750
mov r13, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov bl, byte ptr [r11]
mov r9, 0xff
shl r9, 0x18
not r9
and r13, r9
movzx r9, bl
shl r9, 0x18
or r13, r9
=== 8751
mov rbp, r13
push rbp
mov rsi, rsp
mov rbx, r13
=== 8752
mov rbx, rsi
mov r15, rbx
push rbx
push 0x1c64277f
push 0x765147e2
push 0x1d0d29fa
push 0x678b68ce
=== 8753
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r12, r15
movzx rbx, bl
=== 8754
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x13d790223
add r15, 0x290609d; add_carry
mov r15, qword ptr [r15]
add r15, rbx
mov cl, byte ptr [r15]
movzx rcx, cl
shl rcx, 0x28
add r12, rcx
movabs r12, 0x10afa0725
push r12
push 0x3def6a81
push 0x578624c7
push 0x55a82965
add qword ptr [rsp + 0x18], 0x350f539b; add
mov rdi, r12
=== 8755
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r10
mov r14, rdi
=== 8756
mov rbp, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov r13b, byte ptr [r13]
mov rdi, 0xff
shl rdi, 0x20
not rdi
and rbp, rdi
movzx rdi, r13b
shl rdi, 0x20
or rbp, rdi
=== 8757
mov rbp, rbp
push rbp
mov r12, rsp
mov r15, rbp
=== 8758
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov rbx, r15
movzx rbp, bpl
=== 8759
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xee82f59b
add rsi, 0x51866d25; add_carry
mov rsi, qword ptr [rsi]
add rsi, rbp
mov dil, byte ptr [rsi]
movzx rdi, dil
shl rdi, 0x30
add rbx, rdi
mov r13, rbx
movabs rdi, 0xd077038e
add rdi, 0x6f925732; add
=== 8760
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rsi
mov r12, r13
=== 8761
mov rbp, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r15
mov dil, byte ptr [r11]
mov r10, 0xff
shl r10, 0x28
not r10
and rbp, r10
movzx r10, dil
shl r10, 0x28
or rbp, r10
=== 8762
mov rdi, rbp
push rdi
mov rsi, rsp
mov r15, rbp
=== 8763
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rbp, r15
movzx r13, r13b
=== 8764
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xfef05e9d
add rcx, 0x41190423; add_carry
mov rcx, qword ptr [rcx]
add rcx, r13
mov dil, byte ptr [rcx]
movzx rdi, dil
shl rdi, 0x38
add rbp, rdi
mov r14, rbp
movabs rsi, 0xd413fe0d
add rsi, 0x6bf55cb3; add
=== 8765
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rax
mov rbx, r14
=== 8766
mov r14, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov bpl, byte ptr [r9]
mov r12, 0xff
shl r12, 0x30
not r12
and r14, r12
movzx r12, bpl
shl r12, 0x30
or r14, r12
=== 8767
mov r8, r14
push r8
mov rbp, rsp
mov r13, r14
=== 8768
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
mov r14, r13
movzx rsi, sil
=== 8769
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xc5cae142
push rcx
push 0x705a31e8
push 0x65080b26
push 0x6ae81281
push 0x26071e39
add qword ptr [rsp + 0x20], 0x7a3e797e; add
mov r15, r14
=== 8770
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov r12, r15
=== 8771
mov rsi, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov r9b, byte ptr [r13]
mov r11, 0xff
shl r11, 0x38
not r11
and rsi, r11
movzx r11, r9b
shl r11, 0x38
or rsi, r11
=== 8772
movabs r10, 0x136e1913c
push r10
push 0x4dfe0b28
push 0x1580366c
push 0x9ee6d9b
push 0x7e0e09f7
add qword ptr [rsp + 0x20], 0x9a827ac; input
mov r15, rsi
=== 8773
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 8
add rsp, 8
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r13, r15
movzx rbx, bl
=== 8774
mov rax, rbx
mov rcx, 0xffffffff95ab681e
add rcx, 0x6ade6e22
push rcx
mov rsi, r13
mul qword ptr [rsp]
mov r15, rax
=== 8775
mov rdi, rsi
xor rdi, r15
=== 8776
mov rdx, rdi
push rdx
mov r15, rsp
mov rbx, rdi
=== 8777
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov r15, rbx
movzx rsi, sil
=== 8778
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xd84d243e
add rdx, 0x67bc3e82; add_carry
mov rdx, qword ptr [rdx + 0x2d8]
add rdx, rsi
mov bpl, byte ptr [rdx]
movzx rbp, bpl
shl rbp, 8
add r15, rbp
movabs r13, 0x139984998
push r13
push 0x23016b5a
push 0x21076adc
push 0x68a106bf
add qword ptr [rsp + 0x18], 0x6711128; add
mov r12, r15
=== 8779
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 728
add rsp, 728
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbx
mov rbx, r12
=== 8780
mov rbx, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov r8b, byte ptr [r9]
mov bl, r8b
=== 8781
mov rax, rbx
push rax
mov rdi, rsp
mov rbx, rbx
=== 8782
mov r13, rdi
mov rdi, rbx
push r13
push 0x1d0d37ff
push 0x62321dc3
push 0x73c67ea3
=== 8783
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rsi
mov rdi, rdi
movzx rbp, bpl
=== 8784
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x10c15f204
add r13, 0x33f370bc; add_carry
mov r13, qword ptr [r13 + 0x1a0]
add r13, rbp
mov r12b, byte ptr [r13]
movzx r12, r12b
shl r12, 0x10
add rdi, r12
mov r12, rdi
movabs rbx, 0x1301459b9
add rbx, 0xff50107; add
=== 8785
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 416
add rsp, 416
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rcx
mov r13, r12
=== 8786
mov rbp, r13
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r14
mov r11b, byte ptr [rdx]
mov rdi, 0xff
shl rdi, 8
not rdi
and rbp, rdi
movzx rdi, r11b
shl rdi, 8
or rbp, rdi
=== 8787
mov r8, rbp
push r8
mov r15, rsp
mov r14, rbp
=== 8788
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov rsi, r14
movzx r14, r14b
=== 8789
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x10ed1482e
add rsi, 0x31381a92; add_carry
mov rsi, qword ptr [rsi + 0x108]
add rsi, r14
mov bpl, byte ptr [rsi]
movzx rbp, bpl
shl rbp, 0x18
add rsi, rbp
mov rbp, rsi
movabs rsi, 0x11d8c08b9
add rsi, 0x227d5207; add
=== 8790
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 264
add rsp, 264
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdi
mov r15, rbp
=== 8791
mov rbx, r15
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov r10b, byte ptr [rdx]
mov r13, 0xff
shl r13, 0x10
not r13
and rbx, r13
movzx r13, r10b
shl r13, 0x10
or rbx, r13
=== 8792
mov r13, rbx
push r13
mov rbp, rsp
mov r15, rbx
=== 8793
mov r11, rbp
mov r13, r15
push r11
push 0x727768a7
push 0x4195d1d
push 0x22741cca
=== 8794
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov r13, r13
movzx r14, r14b
=== 8795
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xe495e59c
add rbp, 0x5b737d24; add_carry
mov rbp, qword ptr [rbp + 0x7e8]
add rbp, r14
mov bl, byte ptr [rbp]
movzx rbx, bl
shl rbx, 0x20
add r13, rbx
movabs r13, 0x136a1e276
push r13
push 0x1ece3bc2
push 0x654a45c2
push 0x4d27b77
push 0x325663aa
add qword ptr [rsp + 0x20], 0x967784a; add
mov r14, r13
=== 8796
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2024
add rsp, 2024
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdi
mov r15, r14
=== 8797
mov r12, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r13
mov r11b, byte ptr [rcx]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and r12, rbp
movzx rbp, r11b
shl rbp, 0x18
or r12, rbp
=== 8798
mov rdi, r12
push rdi
mov r12, rsp
mov rdi, r12
=== 8799
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r14
mov r13, rdi
movzx rsi, sil
=== 8800
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xe87d589c
push r13
push 0x1992345a
push 0x37d77ef5
push 0x39471981
push 0x2aa427e6
add qword ptr [rsp + 0x20], 0x578c0224; add
mov r13, r13
=== 8801
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov rdi, r13
=== 8802
mov r13, rdi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov r8b, byte ptr [r11]
mov rbp, 0xff
shl rbp, 0x38
not rbp
and r13, rbp
movzx rbp, r8b
shl rbp, 0x38
or r13, rbp
=== 8803
mov r12, r13
movabs rbx, 0xee18885d
add rbx, 0x5271308b; input
=== 8804
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 24
add rsp, 24
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov r12, r12
movzx rbp, bpl
=== 8805
mov rax, rbp
mov r12, 0xffffffffdd065000
add r12, 0x23de6191
push r12
mov r15, r12
mul qword ptr [rsp]
mov r13, rax
=== 8806
mov r12, r15
sub r12, r13
=== 8807
mov rdi, r12
push rdi
mov r14, rsp
mov rsi, r12
=== 8808
mov rcx, r14
mov r12, rsi
push rcx
push 0x25ee7c75
push 0x5a102f8a
push 0x29ec3823
push 0x12653f48
=== 8809
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov r15, r12
movzx rsi, sil
=== 8810
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xff5a28a2
add r12, 0x40af3a1e; add_carry
mov r12, qword ptr [r12 + 0x448]
add r12, rsi
mov al, byte ptr [r12]
movzx rax, al
shl rax, 8
add r15, rax
movabs r11, 0x13bc1556c
push r11
push 0x73af5a93
push 0x70a05415
push 0x107a5ef8
push 0x18db101d
add qword ptr [rsp + 0x20], 0x4480554; add
mov rsi, r15
=== 8811
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1096
add rsp, 1096
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov rdi, rsi
=== 8812
mov rbp, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov bl, byte ptr [rax]
mov bpl, bl
=== 8813
mov rax, rbp
push rax
mov r14, rsp
mov rsi, rbp
=== 8814
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r11
mov r13, rsi
movzx rdi, dil
=== 8815
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xe011fdf3
add rcx, 0x5ff764cd; add_carry
mov rcx, qword ptr [rcx + 0x538]
add rcx, rdi
mov r11b, byte ptr [rcx]
movzx r11, r11b
shl r11, 0x10
add r13, r11
movabs r10, 0xe1fb4e60
push r10
push 0x29d95cc3
push 0x6cf539a9
push 0x6846130b
add qword ptr [rsp + 0x18], 0x5e0e0c60; add
mov r13, r13
=== 8816
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1336
add rsp, 1336
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov r15, r13
=== 8817
mov r15, r15
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbx
mov r12b, byte ptr [r13]
mov r9, 0xff
shl r9, 8
not r9
and r15, r9
movzx r9, r12b
shl r9, 8
or r15, r9
=== 8818
mov r14, r15
push r14
mov r15, rsp
mov r14, r15
=== 8819
mov rax, r15
mov rbx, r14
push rax
push 0x54587bca
push 0x627941ce
push 0x68c41a00
=== 8820
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov r13, rbx
movzx rdi, dil
=== 8821
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xcd362f52
add r10, 0x72d3336e; add_carry
mov r10, qword ptr [r10 + 0xa8]
add r10, rdi
mov r11b, byte ptr [r10]
movzx r11, r11b
shl r11, 0x18
add r13, r11
mov rsi, r13
movabs rbp, 0x1297427cd
add rbp, 0x169532f3; add
=== 8822
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 168
add rsp, 168
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov r14, rsi
=== 8823
mov r13, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbp
mov r15b, byte ptr [rdi]
mov r12, 0xff
shl r12, 0x10
not r12
and r13, r12
movzx r12, r15b
shl r12, 0x10
or r13, r12
=== 8824
mov rdi, r13
push rdi
mov r15, rsp
mov rbx, r13
=== 8825
mov r14, r15
mov r15, rbx
push r14
push 0x1bdd5061
push 0x41467f65
push 0x422a3ae6
=== 8826
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov r14, r15
movzx r13, r13b
=== 8827
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xd3280ed1
add rdi, 0x6ce153ef; add_carry
mov rdi, qword ptr [rdi + 0x7f0]
add rdi, r13
mov dil, byte ptr [rdi]
movzx rdi, dil
shl rdi, 0x20
add r14, rdi
movabs rbp, 0xfff32997
push rbp
push 0x78466a45
push 0x6b2b3447
push 0x6ea06ef6
add qword ptr [rsp + 0x18], 0x40163129; add
mov rsi, r14
=== 8828
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2032
add rsp, 2032
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r12
mov rbp, rsi
=== 8829
mov rdi, rbp
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rdi
mov bpl, byte ptr [rsi]
mov r8, 0xff
shl r8, 0x18
not r8
and rdi, r8
movzx r8, bpl
shl r8, 0x18
or rdi, r8
=== 8830
mov rbx, rdi
push rbx
mov rbp, rsp
mov rdi, rdi
=== 8831
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov rbx, rdi
movzx r15, r15b
=== 8832
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x125d63342
add rdx, 0x1a332f7e; add_carry
mov rdx, qword ptr [rdx]
add rdx, r15
mov dl, byte ptr [rdx]
movzx rdx, dl
shl rdx, 0x28
add rbx, rdx
mov rdi, rbx
movabs rsi, 0xdd402268
add rsi, 0x62c93858; add
=== 8833
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov r14, rdi
=== 8834
mov rdi, r14
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbp
mov dl, byte ptr [r14]
mov r8, 0xff
shl r8, 0x20
not r8
and rdi, r8
movzx r8, dl
shl r8, 0x20
or rdi, r8
=== 8835
mov rsi, rdi
movabs r15, 0xefc78767
add r15, 0x50c23181; input
=== 8836
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov r15, rsi
movzx r12, r12b
=== 8837
mov rax, r12
mov r8, 0xffffffff94295682
add r8, 0x6c63023f
push r8
mov rdi, r15
mul qword ptr [rsp]
mov rbx, rax
=== 8838
mov rdi, rdi
xor rdi, rbx
=== 8839
mov r12, rdi
push r12
mov r15, rsp
mov rbp, rdi
=== 8840
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdi
mov rbp, rbp
movzx r14, r14b
=== 8841
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x1016a00c4
push r14
push 0x4b91bb2
push 0x5b2b7552
push 0x415212a6
push 0x1d51a8e
add qword ptr [rsp + 0x20], 0x3e9f49fc; xor
mov rdi, rbp
=== 8842
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1272
add rsp, 1272
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r14
mov rdi, rdi
=== 8843
mov rsi, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov r12b, byte ptr [r12]
mov sil, r12b
=== 8844
mov rax, rsi
push rax
mov rdi, rsp
mov rbp, rsi
=== 8845
mov r15, rdi
mov rdi, rbp
push r15
push 0x4dec671f
push 0x415f4888
push 0xf17bc8
push 0x5b383e31
=== 8846
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r14
mov rsi, rdi
movzx r15, r15b
=== 8847
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x13601da5b
push rsi
push 0x77461d13
push 0x43125517
push 0x36dd3cca
add qword ptr [rsp + 0x18], 0xa077065; xor
mov r12, rsi
=== 8848
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_SMALL 72
add rsp, 72
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbx
mov r13, r12
=== 8849
mov rbp, r13
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r14
mov al, byte ptr [rsi]
mov rdx, 0xff
shl rdx, 8
not rdx
and rbp, rdx
movzx rdx, al
shl rdx, 8
or rbp, rdx
=== 8850
mov rbx, rbp
push rbx
mov rsi, rsp
mov r15, rbp
=== 8851
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov r14, r15
movzx rbp, bpl
=== 8852
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xf37d360c
push r13
push 0xd6d6d3d
push 0x36eb5547
push 0x553b0f16
push 0x5a166450
add qword ptr [rsp + 0x20], 0x4c8c14b4; xor
mov r15, r14
=== 8853
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 584
add rsp, 584
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rsi
mov rsi, r15
=== 8854
mov r12, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r15
mov r10b, byte ptr [r9]
mov rax, 0xff
shl rax, 0x10
not rax
and r12, rax
movzx rax, r10b
shl rax, 0x10
or r12, rax
=== 8855
mov r10, r12
push r10
mov rdi, rsp
mov r15, r12
=== 8856
mov r14, rdi
mov r15, r15
push r14
push 0x42793bb5
push 0x6af51a48
push 0x63125b4f
push 0x22850473
=== 8857
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r10
mov r12, r15
movzx r14, r14b
=== 8858
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r12
movabs rbp, 0xe9341fe6
add rbp, 0x56d52ada; xor
=== 8859
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 608
add rsp, 608
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r8
mov rbp, r13
=== 8860
mov r12, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov r15b, byte ptr [rdx]
mov r11, 0xff
shl r11, 0x18
not r11
and r12, r11
movzx r11, r15b
shl r11, 0x18
or r12, r11
=== 8861
movabs r12, 0x13967b47b
push r12
push 0x75f0547c
push 0x7bd6173a
push 0x391b2846
add qword ptr [rsp + 0x18], 0x722046d; input
mov rsi, r12
=== 8862
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 12
add rsp, 12
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov rdi, rsi
movzx r15, r15b
=== 8863
mov rax, r15
mov r10, 0xffffffffc69fd59c
add r10, 0x3a0166b0
push r10
mov r12, rdi
mul qword ptr [rsp]
mov rsi, rax
=== 8864
mov r12, r12
add r12, rsi
=== 8865
mov rsi, r12
push rsi
mov rbx, rsp
mov rdi, r12
=== 8866
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov rbx, rdi
movzx r12, r12b
=== 8867
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rbx
movabs r14, 0x1036c3797
add r14, 0x3c9d1329; xor
=== 8868
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1136
add rsp, 1136
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov rbp, r13
=== 8869
mov rsi, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov dil, byte ptr [rdx]
mov sil, dil
=== 8870
mov rdi, rsi
push rdi
mov rdi, rsp
mov r15, rsi
=== 8871
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r11
mov r14, r15
movzx rbp, bpl
=== 8872
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r14
movabs rbp, 0x11dff0a87
add rbp, 0x220a4039; xor
=== 8873
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 320
add rsp, 320
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov rbx, r14
=== 8874
mov rbx, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov r8b, byte ptr [r8]
mov rcx, 0xff
shl rcx, 8
not rcx
and rbx, rcx
movzx rcx, r8b
shl rcx, 8
or rbx, rcx
=== 8875
mov r11, rbx
push r11
mov r15, rsp
mov r13, rbx
=== 8876
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbp
mov rbx, r13
movzx r15, r15b
=== 8877
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xc6cbe444
push rbp
push 0x2f5a1199
push 0x78d95788
push 0x59092cc8
push 0x6ed053f9
add qword ptr [rsp + 0x20], 0x793d667c; xor
mov rsi, rbx
=== 8878
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1576
add rsp, 1576
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbp
mov r14, rsi
=== 8879
mov r15, r14
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov sil, byte ptr [rdx]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r15, rdi
movzx rdi, sil
shl rdi, 0x10
or r15, rdi
=== 8880
mov r12, r15
push r12
mov rbp, rsp
mov r14, r15
=== 8881
mov r14, rbp
mov rsi, r14
push r14
push 0x6f176957
push 0xe1c2b2c
push 0x67e76234
push 0x1e2b386a
=== 8882
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbx
mov r13, rsi
movzx rdi, dil
=== 8883
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r13
movabs rdi, 0xc975fc7b
add rdi, 0x76934e45; xor
=== 8884
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 312
add rsp, 312
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov rbx, r13
=== 8885
mov r15, rbx
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov bpl, byte ptr [rdx]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r15, rsi
movzx rsi, bpl
shl rsi, 0x18
or r15, rsi
=== 8886
mov r14, r15
push r14
mov r13, rsp
mov r14, r15
=== 8887
mov r10, r13
mov r12, r14
push r10
push 0x2d8e7774
push 0x4dc33e5f
push 0x5252087c
push 0x28f963d1
=== 8888
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov r15, r12
movzx r13, r13b
=== 8889
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x1345200c6
push rax
push 0xc8f1002
push 0x53ca08cf
push 0x14303355
add qword ptr [rsp + 0x18], 0xbb749fa; xor
mov r12, r15
=== 8890
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r14
mov r12, r12
=== 8891
mov r12, r12
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbx
mov r8b, byte ptr [rbx]
mov r9, 0xff
shl r9, 0x28
not r9
and r12, r9
movzx r9, r8b
shl r9, 0x28
or r12, r9
=== 8892
mov rcx, r12
push rcx
mov rsi, rsp
mov r15, r12
=== 8893
mov r15, rsi
mov rdi, r15
push r15
push 0x641176b2
push 0x10aa321e
push 0x570c3957
=== 8894
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov rbx, rdi
movzx r14, r14b
=== 8895
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xf5943759
add r15, 0x4a753b67; sub_carry
mov r15, qword ptr [r15 + 0x58]
add r15, r14
mov r14b, byte ptr [r15]
movzx r14, r14b
shl r14, 8
sub rbx, r14
movabs rsi, 0xc5acf67a
push rsi
push 0x1a8618f6
push 0x5ae96ded
push 0x272b5012
add qword ptr [rsp + 0x18], 0x7a5c7446; sub
mov rbp, rbx
=== 8896
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 88
add rsp, 88
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdi
mov r13, rbp
=== 8897
mov rsi, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov dil, byte ptr [rax]
mov sil, dil
=== 8898
mov rsi, rsi
push rsi
mov rdi, rsp
mov rbx, rsi
=== 8899
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r11
mov rbx, rbx
movzx rdi, dil
=== 8900
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xce451618
add rdx, 0x71c45ca8; sub_carry
mov rdx, qword ptr [rdx + 0x6d8]
add rdx, rdi
mov r8b, byte ptr [rdx]
movzx r8, r8b
shl r8, 0x10
sub rbx, r8
mov r12, rbx
movabs r14, 0xf66fffff
add r14, 0x49996ac1; sub
=== 8901
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1752
add rsp, 1752
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov r14, r12
=== 8902
mov r12, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rdi
mov al, byte ptr [r13]
mov rdx, 0xff
shl rdx, 8
not rdx
and r12, rdx
movzx rdx, al
shl rdx, 8
or r12, rdx
=== 8903
mov r11, r12
push r11
mov r15, rsp
mov rsi, r12
=== 8904
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r12
mov rdi, rsi
movzx r13, r13b
=== 8905
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x1287456ec
add r13, 0x17951bd4; sub_carry
mov r13, qword ptr [r13 + 0x4c0]
add r13, r13
mov r13b, byte ptr [r13]
movzx r13, r13b
shl r13, 0x18
sub rdi, r13
movabs r14, 0xe99b134f
push r14
push 0x11bc6354
push 0x25296f28
push 0x3a33fcb
push 0x63986b35
add qword ptr [rsp + 0x20], 0x566e5771; sub
mov r14, rdi
=== 8906
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1216
add rsp, 1216
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov r12, r14
=== 8907
mov rdi, r12
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbx
mov sil, byte ptr [rbp]
mov r15, 0xff
shl r15, 0x10
not r15
and rdi, r15
movzx r15, sil
shl r15, 0x10
or rdi, r15
=== 8908
mov r12, rdi
push r12
mov rdi, rsp
mov rbp, rdi
=== 8909
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r15
mov rbp, rbp
movzx r12, r12b
=== 8910
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xcc6069c6
add rbp, 0x73a908fa; sub_carry
mov rbp, qword ptr [rbp + 0x18]
add rbp, r12
mov r11b, byte ptr [rbp]
movzx r11, r11b
shl r11, 0x28
sub rbp, r11
mov rsi, rbp
movabs r12, 0xd5f9534f
add r12, 0x6a101771; sub
=== 8911
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 24
add rsp, 24
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rcx
mov r15, rsi
=== 8912
mov r12, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov r15b, byte ptr [rax]
mov r10, 0xff
shl r10, 0x20
not r10
and r12, r10
movzx r10, r15b
shl r10, 0x20
or r12, r10
=== 8913
mov rdx, r12
push rdx
mov rdi, rsp
mov r12, r12
=== 8914
mov r11, rdi
mov rdi, r12
push r11
push 0x1ee32cd5
push 0x77df4cad
push 0x59f6574a
=== 8915
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov rsi, rdi
movzx r15, r15b
=== 8916
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xf88b395a
add rax, 0x477e3966; sub_carry
mov rax, qword ptr [rax]
add rax, r15
mov r13b, byte ptr [rax]
movzx r13, r13b
shl r13, 0x30
sub rsi, r13
mov r14, rsi
movabs r15, 0xd7596191
add r15, 0x68b0092f; sub
=== 8917
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdi
mov r13, r14
=== 8918
mov rbp, r13
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbx
mov r12b, byte ptr [rsi]
mov rsi, 0xff
shl rsi, 0x28
not rsi
and rbp, rsi
movzx rsi, r12b
shl rsi, 0x28
or rbp, rsi
=== 8919
mov r15, rbp
push r15
mov r14, rsp
mov r13, rbp
=== 8920
mov r10, r14
mov r14, r13
push r10
push 0x14c6521b
push 0x48ba55c4
push 0x7a1f1b36
=== 8921
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r8
mov rsi, r14
movzx r13, r13b
=== 8922
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xf6431a77
add r11, 0x49c65849; sub_carry
mov r11, qword ptr [r11]
add r11, r13
mov cl, byte ptr [r11]
movzx rcx, cl
shl rcx, 0x38
sub rsi, rcx
movabs r8, 0x113bc035a
push r8
push 0x19947f35
push 0x54ba695e
push 0x1c531c26
push 0x1a6c346e
add qword ptr [rsp + 0x20], 0x2c4d6766; sub
mov r14, rsi
=== 8923
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdx
mov r14, r14
=== 8924
mov rdi, r14
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov bpl, byte ptr [rdx]
mov r8, 0xff
shl r8, 0x30
not r8
and rdi, r8
movzx r8, bpl
shl r8, 0x30
or rdi, r8
=== 8925
mov rbx, rdi
push rbx
mov r13, rsp
mov rbp, rdi
=== 8926
mov rdx, r13
mov r12, rbp
push rdx
push 0xe4c7f4e
push 0x49b736d1
push 0x6c7404d6
=== 8927
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbp
mov r14, r12
movzx r15, r15b
=== 8928
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xe9f33d5c
push r12
push 0x497506ff
push 0x2a903ff2
push 0x36062966
push 0x466a473b
add qword ptr [rsp + 0x20], 0x56162d64; sub
mov r14, r14
=== 8929
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rax
mov r13, r14
=== 8930
mov r12, r13
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rdi
mov r8b, byte ptr [r14]
mov r11, 0xff
shl r11, 0x38
not r11
and r12, r11
movzx r11, r8b
shl r11, 0x38
or r12, r11
=== 8931
mov r14, r12
push r14
mov rbp, rsp
mov r15, r12
=== 8932
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov r14, r15
movzx r15, r15b
=== 8933
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x120520864
push r8
push 0x560441ce
push 0x52ea1724
push 0x374978d5
push 0x1aa75fa1
add qword ptr [rsp + 0x20], 0x1fb73a5c
mov r15, r14
=== 8934
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r10
mov r15, r15
=== 8935
mov r14, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov r12b, byte ptr [rcx]
mov r14b, r12b
=== 8936
mov rbx, r14
push rbx
mov rdi, rsp
mov r13, r14
=== 8937
mov rsi, rdi
mov r12, r13
push rsi
push 0x76dc503c
push 0x3aa2e91
push 0x6ffa52e9
=== 8938
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r11
mov rdi, r12
movzx r12, r12b
=== 8939
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xe05cc47a
push r8
push 0xb9b3e76
push 0x39e5054
push 0x1bbe1390
push 0x70805792
add qword ptr [rsp + 0x20], 0x5fac7e46
mov rbp, rdi
=== 8940
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov r15, rbp
=== 8941
mov r12, r15
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov r13b, byte ptr [rdx]
mov r8, 0xff
shl r8, 8
not r8
and r12, r8
movzx r8, r13b
shl r8, 8
or r12, r8
=== 8942
mov rdi, r12
push rdi
mov rbx, rsp
mov rdi, r12
=== 8943
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r13
mov rbp, rdi
movzx rbx, bl
=== 8944
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x106e7123a
push r11
push 0x7e93393c
push 0x45d7634b
push 0x361e1f49
push 0x4d122928
add qword ptr [rsp + 0x20], 0x39223086
mov r15, rbp
=== 8945
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r9
mov rsi, r15
=== 8946
mov r13, rsi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov bl, byte ptr [r10]
mov rcx, 0xff
shl rcx, 0x20
not rcx
and r13, rcx
movzx rcx, bl
shl rcx, 0x20
or r13, rcx
=== 8947
mov r15, r13
push r15
mov rsi, rsp
mov rbp, r13
=== 8948
mov rsi, rsi
mov r15, rbp
push rsi
push 0x2dc53736
push 0x2ba73b21
push 0x185a0d35
=== 8949
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r14
mov rsi, r15
movzx rdi, dil
=== 8950
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x13c52d019
push rdx
push 0x3e1d5a44
push 0x566c0df6
push 0x5c31677
push 0x3d374180
add qword ptr [rsp + 0x20], 0x3b672a7
mov r14, rsi
=== 8951
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdx
mov r15, r14
=== 8952
mov r13, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r13
mov bl, byte ptr [rax]
mov rsi, 0xff
shl rsi, 0x28
not rsi
and r13, rsi
movzx rsi, bl
shl rsi, 0x28
or r13, rsi
=== 8953
mov r13, r13
movabs r12, 0xc8890d20
add r12, 0x777704d0
test r13, r13
lea r13, [rip - 0x4330ed]
cmovne r13, r12
jmp r13
=== 8954
movabs r15, 0xdfbb9b65
push r15
push 0x34826706
push 0x72047a53
push 0x27c173b5
push 0x2eb84b48
add qword ptr [rsp + 0x20], 0x60ce1d83; input
=== 8955
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r11
movzx r13, r13b
=== 8956
mov rax, r13
mov r8, 0xffffffff9d0c356f
add r8, 0x63677581
push r8
mul qword ptr [rsp]
mov rbx, rax
=== 8957
mov r10, rbx
push r10
mov rbp, rsp
mov rbx, rbx
=== 8958
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov r12, rbx
movzx r13, r13b
=== 8959
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r12
movabs rdi, 0xd78d0a5c
add rdi, 0x687c4064; xor
=== 8960
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1928
add rsp, 1928
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r11
mov rbx, r15
=== 8961
mov rbx, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov sil, byte ptr [r9]
mov bl, sil
=== 8962
mov r15, rbx
push r15
mov r14, rsp
mov r12, rbx
=== 8963
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov r12, r12
movzx r15, r15b
=== 8964
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r12
movabs r12, 0x12438d5ef
add r12, 0x1bd074d1; xor
=== 8965
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 416
add rsp, 416
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rcx
mov rdi, r15
=== 8966
mov r13, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbp
mov bpl, byte ptr [rax]
mov r14, 0xff
shl r14, 8
not r14
and r13, r14
movzx r14, bpl
shl r14, 8
or r13, r14
=== 8967
mov rdx, r13
push rdx
mov r13, rsp
mov rbx, r13
=== 8968
mov r15, r13
mov r13, rbx
push r15
push 0x526432b7
push 0x1cb031c1
push 0x4a273440
=== 8969
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov rsi, r13
movzx r14, r14b
=== 8970
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xfccfe3bd
push rax
push 0x138618b7
push 0x56144433
push 0x48745f28
add qword ptr [rsp + 0x18], 0x43396703; xor
mov r13, rsi
=== 8971
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 624
add rsp, 624
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rsi
mov r15, r13
=== 8972
mov rdi, r15
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rsi
mov cl, byte ptr [r13]
mov r13, 0xff
shl r13, 0x10
not r13
and rdi, r13
movzx r13, cl
shl r13, 0x10
or rdi, r13
=== 8973
mov r13, rdi
push r13
mov r13, rsp
mov r15, rdi
=== 8974
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbx
mov rdi, r15
movzx r15, r15b
=== 8975
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xc089ce55
push r10
push 0x560a78bc
push 0x179731c4
push 0x30373f46
push 0x229e003e
add qword ptr [rsp + 0x20], 0x7f7f7c6b; xor
mov rdi, rdi
=== 8976
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1280
add rsp, 1280
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rcx
mov r15, rdi
=== 8977
mov rdi, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov bl, byte ptr [r9]
mov r13, 0xff
shl r13, 0x18
not r13
and rdi, r13
movzx r13, bl
shl r13, 0x18
or rdi, r13
=== 8978
mov rsi, rdi
push rsi
mov rsi, rsp
mov r14, rdi
=== 8979
mov r13, rsi
mov r12, r14
push r13
push 0x38bc7c0b
push 0x1ff50d09
push 0x255d6ae7
=== 8980
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov r13, r12
movzx r15, r15b
=== 8981
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r13
movabs r13, 0x139404665
add r13, 0x6c9045b; xor
=== 8982
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov r13, r14
=== 8983
mov r14, r13
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov r13b, byte ptr [rbp]
mov r10, 0xff
shl r10, 0x20
not r10
and r14, r10
movzx r10, r13b
shl r10, 0x20
or r14, r10
=== 8984
mov rax, r14
push rax
mov rbp, rsp
mov r15, r14
=== 8985
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov rbp, r15
movzx r12, r12b
=== 8986
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x11304127e
push rdx
push 0x1bad5874
push 0x42511963
push 0x3b4938c9
push 0x681b6b60
add qword ptr [rsp + 0x20], 0x2d053842; xor
mov r15, rbp
=== 8987
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rsi
mov r12, r15
=== 8988
mov rbp, r12
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rdi
mov r11b, byte ptr [r8]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and rbp, rdx
movzx rdx, r11b
shl rdx, 0x28
or rbp, rdx
=== 8989
mov r12, rbp
push r12
mov rdi, rsp
mov r14, rbp
=== 8990
mov rcx, rdi
mov rbp, r14
push rcx
push 0x3475868
push 0x7c885526
push 0x4663320f
push 0x1034587a
=== 8991
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbx
mov r14, rbp
movzx rdi, dil
=== 8992
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r14
movabs r13, 0x130313e31
add r13, 0xfd80c8f; xor
=== 8993
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov rsi, r14
=== 8994
mov rsi, rsi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbx
mov r14b, byte ptr [rdx]
mov r12, 0xff
shl r12, 0x30
not r12
and rsi, r12
movzx r12, r14b
shl r12, 0x30
or rsi, r12
=== 8995
movabs r15, 0x10008938b
push r15
push 0x7b7a0c0c
push 0x7d757c32
push 0x2dc5e17
add qword ptr [rsp + 0x18], 0x4081255d; input
mov rsi, rsi
=== 8996
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 29
add rsp, 29
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
mov r15, rsi
movzx r12, r12b
=== 8997
mov rax, r12
mov rbp, 0xfffffffff564a13a
add rbp, 0xb917d09
push rbp
mov r14, r15
mul qword ptr [rsp]
mov r12, rax
=== 8998
mov rdi, r14
add rdi, r12
=== 8999
mov r11, rdi
push r11
mov r14, rsp
mov r13, rdi
=== 9000
mov r11, r14
mov rbp, r13
push r11
push 0x5df83fda
push 0x390039cb
push 0x8e823c8
=== 9001
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r13
mov r13, rbp
movzx r15, r15b
=== 9002
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xc7b31cc5
add rcx, 0x785645fb; add_carry
mov rcx, qword ptr [rcx + 0x798]
add rcx, r15
mov r11b, byte ptr [rcx]
movzx r11, r11b
shl r11, 8
add r13, r11
mov rbx, r13
movabs r14, 0x12c6bf028
add r14, 0x139d6a98; add
=== 9003
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1944
add rsp, 1944
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r13, rbx
=== 9004
mov r13, r13
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov bl, byte ptr [r10]
mov r13b, bl
=== 9005
mov rbp, r13
push rbp
mov rdi, rsp
mov r13, r13
=== 9006
mov r11, rdi
mov r13, r13
push r11
push 0x772d2b19
push 0x5dd0613e
push 0x36506b5
=== 9007
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r12
mov r12, r13
movzx r14, r14b
=== 9008
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x108c32c46
add rsi, 0x3746367a; add_carry
mov rsi, qword ptr [rsi + 0x330]
add rsi, r14
mov r11b, byte ptr [rsi]
movzx r11, r11b
shl r11, 0x10
add r12, r11
movabs rbp, 0xd5185481
push rbp
push 0x6e8407f7
push 0x18a6652f
push 0x7f1348a
add qword ptr [rsp + 0x18], 0x6af1063f; add
mov r13, r12
=== 9009
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 816
add rsp, 816
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov r15, r13
=== 9010
mov rsi, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov r9b, byte ptr [r9]
mov rdx, 0xff
shl rdx, 8
not rdx
and rsi, rdx
movzx rdx, r9b
shl rdx, 8
or rsi, rdx
=== 9011
mov r11, rsi
push r11
mov rbx, rsp
mov rdi, rsi
=== 9012
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov r12, rdi
movzx rbp, bpl
=== 9013
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x13fd4f356
add rdi, 0x346f6a; add_carry
mov rdi, qword ptr [rdi + 0x4d8]
add rdi, rbp
mov r13b, byte ptr [rdi]
movzx r13, r13b
shl r13, 0x18
add r12, r13
mov rdi, r12
movabs rbx, 0xe46cdea0
add rbx, 0x5b9c7c20; add
=== 9014
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1240
add rsp, 1240
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov rbx, rdi
=== 9015
mov r15, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbp
mov r12b, byte ptr [rax]
mov r14, 0xff
shl r14, 0x10
not r14
and r15, r14
movzx r14, r12b
shl r14, 0x10
or r15, r14
=== 9016
mov r15, r15
push r15
mov rbx, rsp
mov r12, r15
=== 9017
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov r14, r12
movzx rbp, bpl
=== 9018
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xc0524d3b
add r13, 0x7fb71585; add_carry
mov r13, qword ptr [r13 + 0x680]
add r13, rbp
mov dil, byte ptr [r13]
movzx rdi, dil
shl rdi, 0x20
add r14, rdi
movabs rdi, 0x12a293f5e
push rdi
push 0x8891317
push 0x3a060761
push 0x1e156e7d
push 0xfd932e5
add qword ptr [rsp + 0x20], 0x15e01b62; add
mov r13, r14
=== 9019
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1664
add rsp, 1664
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbp
mov rsi, r13
=== 9020
mov rsi, rsi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbp
mov r10b, byte ptr [rbx]
mov r13, 0xff
shl r13, 0x18
not r13
and rsi, r13
movzx r13, r10b
shl r13, 0x18
or rsi, r13
=== 9021
mov r11, rsi
push r11
mov rdi, rsp
mov rbx, rsi
=== 9022
mov rax, rdi
mov r12, rbx
push rax
push 0x3c7931b0
push 0x286b2710
push 0x6ff77b28
=== 9023
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov r12, r12
movzx rbp, bpl
=== 9024
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x13084f336
add r12, 0xf846f8a; add_carry
mov r12, qword ptr [r12]
add r12, rbp
mov sil, byte ptr [r12]
movzx rsi, sil
shl rsi, 0x28
add r12, rsi
movabs rcx, 0xf23e3f4f
push rcx
push 0x66b56eea
push 0x255322cc
push 0x46f555c9
add qword ptr [rsp + 0x18], 0x4dcb1b71; add
mov rsi, r12
=== 9025
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdx
mov r13, rsi
=== 9026
mov r14, r13
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov dl, byte ptr [r13]
mov r11, 0xff
shl r11, 0x20
not r11
and r14, r11
movzx r11, dl
shl r11, 0x20
or r14, r11
=== 9027
mov rbx, r14
push rbx
mov rbp, rsp
mov r15, r14
=== 9028
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov rbx, r15
movzx r14, r14b
=== 9029
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xd112f4cc
add r15, 0x6ef66df4; add_carry
mov r15, qword ptr [r15]
add r15, r14
mov r15b, byte ptr [r15]
movzx r15, r15b
shl r15, 0x30
add rbx, r15
movabs rcx, 0x12aa0f7ed
push rcx
push 0x3f530d6a
push 0xc45403b
push 0x725143d5
push 0x43280b3f
add qword ptr [rsp + 0x20], 0x156862d3; add
mov r14, rbx
=== 9030
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r15
mov rdi, r14
=== 9031
mov rsi, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbp
mov r14b, byte ptr [r12]
mov r12, 0xff
shl r12, 0x28
not r12
and rsi, r12
movzx r12, r14b
shl r12, 0x28
or rsi, r12
=== 9032
mov rdx, rsi
push rdx
mov rbx, rsp
mov rsi, rsi
=== 9033
mov r15, rbx
mov rbx, rsi
push r15
push 0x39bb2b90
push 0x23c6976
push 0x4ecf5bf7
push 0x4f2564d7
=== 9034
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov r13, rbx
movzx r15, r15b
=== 9035
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xd6e026b1
add rdx, 0x69293c0f; add_carry
mov rdx, qword ptr [rdx]
add rdx, r15
mov al, byte ptr [rdx]
movzx rax, al
shl rax, 0x38
add r13, rax
mov rbp, r13
movabs r12, 0xf6c0f442
add r12, 0x4948667e; add
=== 9036
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov r15, rbp
=== 9037
mov rdi, r15
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r12
mov r14b, byte ptr [r14]
mov rax, 0xff
shl rax, 0x30
not rax
and rdi, rax
movzx rax, r14b
shl rax, 0x30
or rdi, rax
=== 9038
mov rbx, rdi
movabs rsi, 0xda1d9144
add rsi, 0x666c27a4; input
=== 9039
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 25
add rsp, 25
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov rsi, rbx
movzx r12, r12b
=== 9040
mov rax, r12
mov rdx, 0xffffffffd87a8d1c
add rdx, 0x281228d4
push rdx
mov r12, rsi
mul qword ptr [rsp]
mov r13, rax
=== 9041
mov r12, r12
add r12, r13
=== 9042
mov rbx, r12
push rbx
mov r12, rsp
mov r14, r12
=== 9043
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov rbx, r14
movzx r12, r12b
=== 9044
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x108620a1a
add r15, 0x37a758a6; add_carry
mov r15, qword ptr [r15 + 0x258]
add r15, r12
mov r12b, byte ptr [r15]
movzx r12, r12b
shl r12, 8
add rbx, r12
mov r13, rbx
movabs r12, 0xf4591689
add r12, 0x4bb04437; add
=== 9045
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 600
add rsp, 600
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rcx
mov rdi, r13
=== 9046
mov r15, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov r13b, byte ptr [rax]
mov r15b, r13b
=== 9047
mov rcx, r15
push rcx
mov r12, rsp
mov r14, r15
=== 9048
mov rsi, r12
mov r13, r14
push rsi
push 0x736549af
push 0xae92841
push 0x59d959ae
=== 9049
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov r12, r13
movzx r14, r14b
=== 9050
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xe69840e1
add rbp, 0x597121df; add_carry
mov rbp, qword ptr [rbp + 0x4d8]
add rbp, r14
mov r15b, byte ptr [rbp]
movzx r15, r15b
shl r15, 0x10
add r12, r15
movabs r11, 0xc350efae
push r11
push 0x6de07275
push 0x305c0faa
push 0x43f63586
push 0xdd73f7
add qword ptr [rsp + 0x20], 0x7cb86b12; add
mov r13, r12
=== 9051
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1240
add rsp, 1240
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdi
mov rbp, r13
=== 9052
mov rbx, rbp
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov cl, byte ptr [r15]
mov r12, 0xff
shl r12, 8
not r12
and rbx, r12
movzx r12, cl
shl r12, 8
or rbx, r12
=== 9053
mov r13, rbx
push r13
mov r13, rsp
mov r12, rbx
=== 9054
mov rcx, r13
mov r12, r12
push rcx
push 0x677a702a
push 0x3d767681
push 0x3a2b53af
=== 9055
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r15
mov rbx, r12
movzx rdi, dil
=== 9056
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xec6a3849
add rdi, 0x539f2a77; add_carry
mov rdi, qword ptr [rdi + 0xe0]
add rdi, rdi
mov dl, byte ptr [rdi]
movzx rdx, dl
shl rdx, 0x18
add rbx, rdx
movabs r11, 0x1154516e9
push r11
push 0x60cf513b
push 0x1b4c2b1b
push 0x13376ee8
add qword ptr [rsp + 0x18], 0x2ac443d7; add
mov r14, rbx
=== 9057
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 224
add rsp, 224
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov r12, r14
=== 9058
mov rdi, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov sil, byte ptr [r15]
mov r12, 0xff
shl r12, 0x10
not r12
and rdi, r12
movzx r12, sil
shl r12, 0x10
or rdi, r12
=== 9059
mov rbp, rdi
push rbp
mov r13, rsp
mov rsi, rdi
=== 9060
mov r9, r13
mov rdi, rsi
push r9
push 0x6f32994
push 0x69920a80
push 0x465f191f
=== 9061
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r12, rdi
movzx rbx, bl
=== 9062
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x118d05930
add rax, 0x27390990; add_carry
mov rax, qword ptr [rax + 0x608]
add rax, rbx
mov r14b, byte ptr [rax]
movzx r14, r14b
shl r14, 0x20
add r12, r14
mov rsi, r12
movabs rdi, 0x129f31dea
add rdi, 0x16163cd6; add
=== 9063
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1544
add rsp, 1544
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r9
mov r15, rsi
=== 9064
mov rsi, r15
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov bl, byte ptr [rdx]
mov rax, 0xff
shl rax, 0x18
not rax
and rsi, rax
movzx rax, bl
shl rax, 0x18
or rsi, rax
=== 9065
mov rax, rsi
push rax
mov rdi, rsp
mov r13, rsi
=== 9066
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov rdi, r13
movzx r13, r13b
=== 9067
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xedbc4ecb
add r13, 0x524d13f5; add_carry
mov r13, qword ptr [r13]
add r13, r13
mov bpl, byte ptr [r13]
movzx rbp, bpl
shl rbp, 0x28
add rdi, rbp
mov rsi, rdi
movabs rbp, 0xcae019e4
add rbp, 0x752940dc; add
=== 9068
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r15
mov r12, rsi
=== 9069
mov r14, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r15
mov r15b, byte ptr [r11]
mov r12, 0xff
shl r12, 0x20
not r12
and r14, r12
movzx r12, r15b
shl r12, 0x20
or r14, r12
=== 9070
mov r15, r14
push r15
mov rbx, rsp
mov rdi, r14
=== 9071
mov r11, rbx
mov rbp, rdi
push r11
push 0x2a1413ad
push 0x3a9d60ef
push 0x24e42d85
push 0x5cef60f0
=== 9072
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r11
mov rsi, rbp
movzx rbx, bl
=== 9073
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x135fe41df
add r12, 0xa0b20e1; add_carry
mov r12, qword ptr [r12]
add r12, rbx
mov r13b, byte ptr [r12]
movzx r13, r13b
shl r13, 0x30
add rsi, r13
movabs r14, 0xc21f130e
push r14
push 0x64470bd6
push 0x366d588a
push 0x6c6c126b
add qword ptr [rsp + 0x18], 0x7dea47b2; add
mov r15, rsi
=== 9074
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdx
mov rdi, r15
=== 9075
mov r15, rdi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r14
mov cl, byte ptr [rbx]
mov r12, 0xff
shl r12, 0x28
not r12
and r15, r12
movzx r12, cl
shl r12, 0x28
or r15, r12
=== 9076
mov r11, r15
push r11
mov rbx, rsp
mov r15, r15
=== 9077
mov r9, rbx
mov rdi, r15
push r9
push 0x51e654a2
push 0x7ab34a25
push 0x3c0d20d2
=== 9078
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rcx
mov rsi, rdi
movzx rdi, dil
=== 9079
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rsi
movabs r15, 0x11d4afb8e
add r15, 0x22be5f32; add
=== 9080
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdx
mov r13, rbp
=== 9081
mov rsi, r13
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rsi
mov al, byte ptr [rbx]
mov r9, 0xff
shl r9, 0x38
not r9
and rsi, r9
movzx r9, al
shl r9, 0x38
or rsi, r9
=== 9082
movabs r12, 0xcd9c77b2
push r12
push 0x22412b29
push 0x484a05c4
push 0x2dcd233b
add qword ptr [rsp + 0x18], 0x72ed4136; input
mov rbp, rsi
=== 9083
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 17
add rsp, 17
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov rdi, rbp
movzx r14, r14b
=== 9084
mov rax, r14
mov r8, 0xffffffffffc6e096
add r8, 0x887312
push r8
mov r13, rdi
mul qword ptr [rsp]
mov rbx, rax
=== 9085
mov rbp, r13
xor rbp, rbx
=== 9086
mov rcx, rbp
push rcx
mov r12, rsp
mov rbp, rbp
=== 9087
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov rdi, rbp
movzx r13, r13b
=== 9088
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xc58f4532
add r8, 0x7a7a2d8e; sub_carry
mov r8, qword ptr [r8 + 0x170]
add r8, r13
mov r8b, byte ptr [r8]
movzx r8, r8b
shl r8, 8
sub rdi, r8
movabs rax, 0x107d9255c
push rax
push 0x2a027187
push 0x8e845ff
push 0x5df905ff
add qword ptr [rsp + 0x18], 0x38304564; sub
mov rsi, rdi
=== 9089
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 368
add rsp, 368
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rax
mov rbp, rsi
=== 9090
mov rbx, rbp
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov r8b, byte ptr [r14]
mov bl, r8b
=== 9091
mov r13, rbx
push r13
mov r14, rsp
mov r15, rbx
=== 9092
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r11
mov r12, r15
movzx r13, r13b
=== 9093
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xd0b7feb2
add rsi, 0x6f51740e; sub_carry
mov rsi, qword ptr [rsi + 0x338]
add rsi, r13
mov al, byte ptr [rsi]
movzx rax, al
shl rax, 0x10
sub r12, rax
movabs r10, 0x100f44276
push r10
push 0x26bd7482
push 0x683e18b6
push 0x29c30af9
push 0x514e11a9
add qword ptr [rsp + 0x20], 0x3f15284a; sub
mov rbx, r12
=== 9094
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 824
add rsp, 824
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov r12, rbx
=== 9095
mov rdi, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r14
mov sil, byte ptr [r10]
mov r10, 0xff
shl r10, 8
not r10
and rdi, r10
movzx r10, sil
shl r10, 8
or rdi, r10
=== 9096
mov r15, rdi
push r15
mov rdi, rsp
mov rbx, rdi
=== 9097
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r11
mov r15, rbx
movzx r13, r13b
=== 9098
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x10fac328a
add r12, 0x305d4036; sub_carry
mov r12, qword ptr [r12 + 0x328]
add r12, r13
mov sil, byte ptr [r12]
movzx rsi, sil
shl rsi, 0x18
sub r15, rsi
movabs rbp, 0x10eda2ac3
push rbp
push 0x106b6eeb
push 0x4a772fc0
push 0x21eb43a0
add qword ptr [rsp + 0x18], 0x312f3ffd; sub
mov r15, r15
=== 9099
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 808
add rsp, 808
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov rbp, r15
=== 9100
mov rbp, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r14
mov r10b, byte ptr [r12]
mov r15, 0xff
shl r15, 0x10
not r15
and rbp, r15
movzx r15, r10b
shl r15, 0x10
or rbp, r15
=== 9101
mov r11, rbp
push r11
mov r12, rsp
mov r15, rbp
=== 9102
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rcx
mov r13, r15
movzx r12, r12b
=== 9103
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xd7f11a2d
add r8, 0x68185893; sub_carry
mov r8, qword ptr [r8 + 0x320]
add r8, r12
mov bpl, byte ptr [r8]
movzx rbp, bpl
shl rbp, 0x20
sub r13, rbp
mov rsi, r13
movabs r15, 0x12533fdfc
add r15, 0x1ad56cc4; sub
=== 9104
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 800
add rsp, 800
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbx
mov r15, rsi
=== 9105
mov rbp, r15
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov bl, byte ptr [r11]
mov r13, 0xff
shl r13, 0x18
not r13
and rbp, r13
movzx r13, bl
shl r13, 0x18
or rbp, r13
=== 9106
mov r15, rbp
push r15
mov rbx, rsp
mov rdi, rbp
=== 9107
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r12
mov r12, rdi
movzx r14, r14b
=== 9108
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xd51d2c3e
add rdx, 0x6aec4682; sub_carry
mov rdx, qword ptr [rdx]
add rdx, r14
mov bl, byte ptr [rdx]
movzx rbx, bl
shl rbx, 0x38
sub r12, rbx
movabs r12, 0xce97fd1b
push r12
push 0x1edd5c75
push 0x417f593e
push 0x76642dff
push 0x702a01b0
add qword ptr [rsp + 0x20], 0x71716da5; sub
mov r15, r12
=== 9109
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov r13, r15
=== 9110
mov r15, r13
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rsi
mov r14b, byte ptr [rdx]
mov rcx, 0xff
shl rcx, 0x30
not rcx
and r15, rcx
movzx rcx, r14b
shl rcx, 0x30
or r15, rcx
=== 9111
mov r11, r15
push r11
mov rbx, rsp
mov r15, r15
=== 9112
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbp
mov rsi, r15
movzx r12, r12b
=== 9113
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xdd48172f
push rsi
push 0x4de32df9
push 0x36365a1
push 0x733058da
push 0x290f088b
add qword ptr [rsp + 0x20], 0x62c15391; sub
mov rbx, rsi
=== 9114
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rsi
mov rdi, rbx
=== 9115
mov r14, rdi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rsi
mov dl, byte ptr [rbx]
mov r13, 0xff
shl r13, 0x38
not r13
and r14, r13
movzx r13, dl
shl r13, 0x38
or r14, r13
=== 9116
mov rbp, r14
movabs r12, 0x10ca9a94e
add r12, 0x33e00f9a; input
=== 9117
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 9
add rsp, 9
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rcx
mov rbp, rbp
movzx r12, r12b
=== 9118
mov rax, r12
mov r15, 0xffffffffde188c1c
add r15, 0x229a55de
push r15
mov r14, rbp
mul qword ptr [rsp]
mov r12, rax
=== 9119
mov r14, r14
add r14, r12
=== 9120
mov r15, r14
push r15
mov r15, rsp
mov rdi, r14
=== 9121
mov rcx, r15
mov r13, rdi
push rcx
push 0x42220132
push 0x45091627
push 0x14f12940
push 0x13e54e9f
=== 9122
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov r15, r13
movzx rdi, dil
=== 9123
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r15
movabs r12, 0xdd8ed3db
add r12, 0x627a76e5; xor
=== 9124
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1728
add rsp, 1728
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdx
mov rsi, r13
=== 9125
mov r13, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r15
mov cl, byte ptr [r9]
mov r13b, cl
=== 9126
mov rcx, r13
push rcx
mov r14, rsp
mov rsi, r13
=== 9127
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov rsi, rsi
movzx r14, r14b
=== 9128
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rsi
movabs rdi, 0x1328225fa
add rdi, 0xd8724c6; xor
=== 9129
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1016
add rsp, 1016
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov r13, r12
=== 9130
mov rdi, r13
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r14
mov r12b, byte ptr [r11]
mov r13, 0xff
shl r13, 8
not r13
and rdi, r13
movzx r13, r12b
shl r13, 8
or rdi, r13
=== 9131
mov rdi, rdi
push rdi
mov rsi, rsp
mov r14, rdi
=== 9132
mov r11, rsi
mov rbp, r14
push r11
push 0x1b2b22ae
push 0x21e72362
push 0x58e45c4d
push 0x35d25db5
=== 9133
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rcx
mov rsi, rbp
movzx rdi, dil
=== 9134
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rsi
movabs r13, 0x1204dcf99
add r13, 0x1fbb7b27; xor
=== 9135
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1536
add rsp, 1536
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rcx
mov r14, rdi
=== 9136
mov r15, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r12
mov al, byte ptr [rax]
mov rdx, 0xff
shl rdx, 0x10
not rdx
and r15, rdx
movzx rdx, al
shl rdx, 0x10
or r15, rdx
=== 9137
mov r8, r15
push r8
mov r13, rsp
mov r15, r15
=== 9138
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov r15, r15
movzx r14, r14b
=== 9139
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r15
movabs rbx, 0x12e812c4c
add rbx, 0x11881e74; xor
=== 9140
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 952
add rsp, 952
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r15
mov r14, r14
=== 9141
mov rdi, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov r15b, byte ptr [r9]
mov r12, 0xff
shl r12, 0x18
not r12
and rdi, r12
movzx r12, r15b
shl r12, 0x18
or rdi, r12
=== 9142
mov rax, rdi
push rax
mov rdi, rsp
mov rbx, rdi
=== 9143
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov rsi, rbx
movzx rbp, bpl
=== 9144
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rsi
movabs rdi, 0xdb8f110a
add rdi, 0x647a39b6; xor
=== 9145
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r10
mov rbp, r15
=== 9146
mov rbx, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r12
mov al, byte ptr [rax]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and rbx, rsi
movzx rsi, al
shl rsi, 0x30
or rbx, rsi
=== 9147
movabs r12, 0xc3f56e27
push r12
push 0x1b517256
push 0x9853dcc
push 0x21e92a88
add qword ptr [rsp + 0x18], 0x7c944ac1; input
mov r15, rbx
=== 9148
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 21
add rsp, 21
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r14
mov r13, r15
movzx rbp, bpl
=== 9149
mov rax, rbp
mov rsi, 0xffffffffb72a9f00
add rsi, 0x498e18b3
push rsi
mov rbp, r13
mul qword ptr [rsp]
mov r15, rax
=== 9150
mov rbp, rbp
sub rbp, r15
=== 9151
mov r11, rbp
push r11
mov rsi, rsp
mov rbp, rbp
=== 9152
mov rbx, rsi
mov rsi, rbp
push rbx
push 0x87b07f2
push 0x50d97bc8
push 0x185b5ba9
push 0x736f45f2
=== 9153
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r15
mov rdi, rsi
movzx rbp, bpl
=== 9154
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x125f5304d
add r14, 0x1a144273; sub_carry
mov r14, qword ptr [r14 + 0x108]
add r14, rbp
mov r15b, byte ptr [r14]
movzx r15, r15b
shl r15, 8
sub rdi, r15
mov r12, rdi
movabs rdi, 0x124ac3bf0
add rdi, 0x1b5d2ed0; sub
=== 9155
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 264
add rsp, 264
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rax
mov r12, r12
=== 9156
mov r12, r12
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbp
mov dl, byte ptr [rdi]
mov r12b, dl
=== 9157
mov r14, r12
push r14
mov rbx, rsp
mov rbp, r12
=== 9158
mov r9, rbx
mov rsi, rbp
push r9
push 0x3df00edd
push 0x6b1b3582
push 0x15d83551
push 0x85150e9
=== 9159
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r9
mov r13, rsi
movzx rdi, dil
=== 9160
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x127494e68
add rbp, 0x18c02458; sub_carry
mov rbp, qword ptr [rbp + 0xa8]
add rbp, rdi
mov bl, byte ptr [rbp]
movzx rbx, bl
shl rbx, 0x10
sub r13, rbx
movabs r8, 0xf1a0354c
push r8
push 0x5f082e1a
push 0x6d112d30
push 0x643206cc
add qword ptr [rsp + 0x18], 0x4e693574; sub
mov r15, r13
=== 9161
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 168
add rsp, 168
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbx
mov r14, r15
=== 9162
mov r13, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov bpl, byte ptr [r15]
mov rdx, 0xff
shl rdx, 8
not rdx
and r13, rdx
movzx rdx, bpl
shl rdx, 8
or r13, rdx
=== 9163
mov rcx, r13
push rcx
mov rdi, rsp
mov rbp, r13
=== 9164
mov rax, rdi
mov r12, rbp
push rax
push 0x7ef52c1
push 0x59736325
push 0x1acc362b
push 0x592c50c8
=== 9165
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov rdi, r12
movzx rbp, bpl
=== 9166
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x1356dfd7d
add rdx, 0xa9b7543; sub_carry
mov rdx, qword ptr [rdx + 0x160]
add rdx, rbp
mov r13b, byte ptr [rdx]
movzx r13, r13b
shl r13, 0x18
sub rdi, r13
mov r15, rdi
movabs rdi, 0x10ec9fdaf
add rdi, 0x313f6d11; sub
=== 9167
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 352
add rsp, 352
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov rdi, r15
=== 9168
mov rdi, rdi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rsi
mov r14b, byte ptr [rsi]
mov r11, 0xff
shl r11, 0x10
not r11
and rdi, r11
movzx r11, r14b
shl r11, 0x10
or rdi, r11
=== 9169
mov rax, rdi
push rax
mov rdi, rsp
mov rbx, rdi
=== 9170
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov r13, rbx
movzx r15, r15b
=== 9171
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xc2df3b7c
add r8, 0x7d2a3744; sub_carry
mov r8, qword ptr [r8 + 0x440]
add r8, r15
mov r13b, byte ptr [r8]
movzx r13, r13b
shl r13, 0x20
sub r13, r13
movabs rdi, 0xe2594d92
push rdi
push 0x55004d7
push 0x2f9b524b
push 0x11c57c98
push 0x6df01d8b
add qword ptr [rsp + 0x20], 0x5db01d2e; sub
mov r12, r13
=== 9172
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1088
add rsp, 1088
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r10
mov rdi, r12
=== 9173
mov rdi, rdi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r12
mov r13b, byte ptr [r14]
mov r12, 0xff
shl r12, 0x18
not r12
and rdi, r12
movzx r12, r13b
shl r12, 0x18
or rdi, r12
=== 9174
mov rsi, rdi
push rsi
mov r13, rsp
mov r15, rdi
=== 9175
mov rsi, r13
mov rbp, r15
push rsi
push 0x294b3646
push 0x44e74892
push 0x3e537d9
=== 9176
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov rsi, rbp
movzx r15, r15b
=== 9177
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xd18df756
add r14, 0x6e7b7b6a; sub_carry
mov r14, qword ptr [r14]
add r14, r15
mov dl, byte ptr [r14]
movzx rdx, dl
shl rdx, 0x30
sub rsi, rdx
mov rdi, rsi
movabs r15, 0x1359321d6
add r15, 0xa7648ea; sub
=== 9178
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r11
mov r14, rdi
=== 9179
mov r13, r14
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rdi
mov r11b, byte ptr [rdx]
mov rbp, 0xff
shl rbp, 0x28
not rbp
and r13, rbp
movzx rbp, r11b
shl rbp, 0x28
or r13, rbp
=== 9180
mov rsi, r13
movabs r13, 0xf8699deb
add r13, 0x48201afd; input
=== 9181
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 13
add rsp, 13
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
mov rbx, rsi
movzx rsi, sil
=== 9182
mov rax, rsi
mov r11, 0xffffffffb9de7041
add r11, 0x463547c6
push r11
mov r14, rbx
mul qword ptr [rsp]
mov r13, rax
=== 9183
mov r15, r14
add r15, r13
=== 9184
mov rcx, r15
push rcx
mov r12, rsp
mov r14, r15
=== 9185
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov r14, r14
movzx rsi, sil
=== 9186
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r14
movabs r13, 0xc804182e
add r13, 0x78053292; xor
=== 9187
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 528
add rsp, 528
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r12
mov rdi, rbp
=== 9188
mov r15, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rsi
mov r13b, byte ptr [rax]
mov r15b, r13b
=== 9189
mov rcx, r15
push rcx
mov rdi, rsp
mov rbx, r15
=== 9190
mov rax, rdi
mov r13, rbx
push rax
push 0x2ff338ee
push 0x1a353f99
push 0x41aa76a8
=== 9191
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov r13, r13
movzx r14, r14b
=== 9192
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r13
movabs r13, 0xf6a83019
add r13, 0x49611aa7; xor
=== 9193
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1672
add rsp, 1672
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rax
mov r14, rsi
=== 9194
mov r15, r14
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov r14b, byte ptr [r14]
mov rbp, 0xff
shl rbp, 8
not rbp
and r15, rbp
movzx rbp, r14b
shl rbp, 8
or r15, rbp
=== 9195
mov r15, r15
push r15
mov r14, rsp
mov r13, r15
=== 9196
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdi
mov rsi, r13
movzx r15, r15b
=== 9197
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xf162dde4
push r15
push 0x54b65da8
push 0x18c07fbd
push 0x76ae5f62
push 0x50dc0eda
add qword ptr [rsp + 0x20], 0x4ea66cdc; xor
mov rbx, rsi
=== 9198
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1128
add rsp, 1128
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r9
mov r15, rbx
=== 9199
mov rdi, r15
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rdi
mov r9b, byte ptr [rbx]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and rdi, rbx
movzx rbx, r9b
shl rbx, 0x10
or rdi, rbx
=== 9200
mov r15, rdi
push r15
mov r12, rsp
mov rbx, rdi
=== 9201
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov rbp, rbx
movzx r13, r13b
=== 9202
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rbp
movabs rbp, 0x10e7900fc
add rbp, 0x319049c4; xor
=== 9203
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 936
add rsp, 936
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov rsi, r14
=== 9204
mov rsi, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov r9b, byte ptr [r13]
mov r11, 0xff
shl r11, 0x18
not r11
and rsi, r11
movzx r11, r9b
shl r11, 0x18
or rsi, r11
=== 9205
mov r14, rsi
push r14
mov r12, rsp
mov rbx, rsi
=== 9206
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r15
mov rdi, rbx
movzx r15, r15b
=== 9207
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xdb1d2d3e
push r14
push 0x159748c8
push 0x50b011f4
push 0x3707246f
push 0x1ecd7e90
add qword ptr [rsp + 0x20], 0x64ec1d82; xor
mov r14, rdi
=== 9208
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r11
mov rsi, r14
=== 9209
mov rsi, rsi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r15
mov bpl, byte ptr [rdi]
mov r8, 0xff
shl r8, 0x20
not r8
and rsi, r8
movzx r8, bpl
shl r8, 0x20
or rsi, r8
=== 9210
mov r8, rsi
push r8
mov r14, rsp
mov r13, rsi
=== 9211
mov rax, r14
mov r12, r13
push rax
push 0x7c882c7f
push 0x6e7d0404
push 0x73c03538
push 0x32f84049
=== 9212
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov r13, r12
movzx r14, r14b
=== 9213
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xd3f70fe9
push rdi
push 0x3c6f6c5e
push 0x51ac728e
push 0x4cf51297
push 0x19857e90
add qword ptr [rsp + 0x20], 0x6c123ad7; xor
mov r13, r13
=== 9214
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov rsi, r13
=== 9215
mov r14, rsi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r15
mov dil, byte ptr [rcx]
mov rax, 0xff
shl rax, 0x28
not rax
and r14, rax
movzx rax, dil
shl rax, 0x28
or r14, rax
=== 9216
mov rdi, r14
push rdi
mov rbp, rsp
mov rsi, r14
=== 9217
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov rbx, rsi
movzx r14, r14b
=== 9218
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x1397a05d8
push r8
push 0x65520145
push 0x38db4310
push 0x4d746458
push 0x643b0642
add qword ptr [rsp + 0x20], 0x68f44e8; xor
mov r14, rbx
=== 9219
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdi
mov rbx, r14
=== 9220
mov r13, rbx
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r12
mov cl, byte ptr [rbx]
mov r14, 0xff
shl r14, 0x30
not r14
and r13, r14
movzx r14, cl
shl r14, 0x30
or r13, r14
=== 9221
movabs r11, 0x111b26436
push r11
push 0x6eb409cb
push 0x212d08dd
push 0x1b751f8b
add qword ptr [rsp + 0x18], 0x2ed754b2; input
mov r12, r13
=== 9222
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r11
mov r13, r12
movzx rbp, bpl
=== 9223
mov rax, rbp
mov rcx, 0xffffffffa5ad2b1a
add rcx, 0x5b3015aa
push rcx
mov r15, r13
mul qword ptr [rsp]
mov r12, rax
=== 9224
mov r12, r15
xor r12, r12
=== 9225
mov rbx, r12
push rbx
mov r13, rsp
mov r15, r12
=== 9226
mov rdi, r13
mov r13, r15
push rdi
push 0x6f7561fe
push 0x4ab90eb5
push 0x5b73756
push 0x6b445fd0
=== 9227
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov rsi, r13
movzx rbp, bpl
=== 9228
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xfd17072a
add r11, 0x42f26b96; sub_carry
mov r11, qword ptr [r11 + 0x730]
add r11, rbp
mov dl, byte ptr [r11]
movzx rdx, dl
shl rdx, 8
sub rsi, rdx
movabs r11, 0xf2d80910
push r11
push 0x21e965a1
push 0x39f958fa
push 0xb696695
add qword ptr [rsp + 0x18], 0x4d3161b0; sub
mov r15, rsi
=== 9229
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1840
add rsp, 1840
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rsi
mov rdi, r15
=== 9230
mov rdi, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbx
mov cl, byte ptr [r12]
mov dil, cl
=== 9231
mov r13, rdi
push r13
mov r15, rsp
mov r14, rdi
=== 9232
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rsi
mov r13, r14
movzx r12, r12b
=== 9233
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x114a826ba
add rax, 0x2b614c06; sub_carry
mov rax, qword ptr [rax + 0x430]
add rax, r12
mov r11b, byte ptr [rax]
movzx r11, r11b
shl r11, 0x10
sub r13, r11
mov r12, r13
movabs rbx, 0xf25ef755
add rbx, 0x4daa736b; sub
=== 9234
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1072
add rsp, 1072
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov r13, r12
=== 9235
mov r15, r13
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rsi
mov dil, byte ptr [rdx]
mov r10, 0xff
shl r10, 8
not r10
and r15, r10
movzx r10, dil
shl r10, 8
or r15, r10
=== 9236
mov rsi, r15
push rsi
mov r13, rsp
mov r12, r15
=== 9237
mov r9, r13
mov rbx, r12
push r9
push 0x3d8b0888
push 0xa415b91
push 0x64496418
push 0x65576583
=== 9238
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov rbp, rbx
movzx rdi, dil
=== 9239
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xd0344a00
add rcx, 0x6fd528c0; sub_carry
mov rcx, qword ptr [rcx + 0x4b8]
add rcx, rdi
mov bpl, byte ptr [rcx]
movzx rbp, bpl
shl rbp, 0x18
sub rbp, rbp
mov rbp, rbp
movabs r13, 0x1059c46f3
add r13, 0x3a6d23cd; sub
=== 9240
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1208
add rsp, 1208
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbx
mov rbp, rbp
=== 9241
mov r13, rbp
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbx
mov bpl, byte ptr [rbp]
mov r10, 0xff
shl r10, 0x10
not r10
and r13, r10
movzx r10, bpl
shl r10, 0x10
or r13, r10
=== 9242
mov r14, r13
push r14
mov r15, rsp
mov r12, r13
=== 9243
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r13
mov r14, r12
movzx r13, r13b
=== 9244
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xe8bd66a2
add r8, 0x574c0c1e; sub_carry
mov r8, qword ptr [r8 + 0x220]
add r8, r13
mov r12b, byte ptr [r8]
movzx r12, r12b
shl r12, 0x20
sub r14, r12
movabs r10, 0x11b8c3298
push r10
push 0x238a46d2
push 0x70241529
push 0x4c2b3a1c
add qword ptr [rsp + 0x18], 0x247d3828; sub
mov r15, r14
=== 9245
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 544
add rsp, 544
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov rdi, r15
=== 9246
mov rbp, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov r9b, byte ptr [r8]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and rbp, rdx
movzx rdx, r9b
shl rdx, 0x18
or rbp, rdx
=== 9247
mov r11, rbp
push r11
mov r15, rsp
mov r13, rbp
=== 9248
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov rsi, r13
movzx rbx, bl
=== 9249
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x107933be8
add rdi, 0x387636d8; sub_carry
mov rdi, qword ptr [rdi]
add rdi, rbx
mov dil, byte ptr [rdi]
movzx rdi, dil
shl rdi, 0x38
sub rsi, rdi
movabs rax, 0x13c231c2d
push rax
push 0x6cde07db
push 0x58a91520
push 0x6b09528f
push 0x74b772fe
add qword ptr [rsp + 0x20], 0x3e64e93; sub
mov rdi, rsi
=== 9250
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbp
mov rsi, rdi
=== 9251
mov rsi, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov dil, byte ptr [r8]
mov rcx, 0xff
shl rcx, 0x30
not rcx
and rsi, rcx
movzx rcx, dil
shl rcx, 0x30
or rsi, rcx
=== 9252
mov rbp, rsi
push rbp
mov r14, rsp
mov rbp, rsi
=== 9253
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov rdi, rbp
movzx rsi, sil
=== 9254
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rdi
movabs rbx, 0xda4b49c8
add rbx, 0x65be20f8; sub
=== 9255
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r10
mov rdi, rdi
=== 9256
mov r15, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbx
mov r8b, byte ptr [r12]
mov r11, 0xff
shl r11, 0x38
not r11
and r15, r11
movzx r11, r8b
shl r11, 0x38
or r15, r11
=== 9257
mov rbx, r15
push rbx
mov rsi, rsp
mov rbp, r15
=== 9258
mov r14, rsi
mov rsi, rbp
push r14
push 0x5074ea
push 0x7103263e
push 0x747b5c38
=== 9259
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r15
mov r14, rsi
movzx r15, r15b
=== 9260
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x1149f6f9f
add r10, 0x2b6a0321; sub_carry
mov r10, qword ptr [r10 + 0x1e0]
add r10, r15
mov bl, byte ptr [r10]
movzx rbx, bl
shl rbx, 8
sub r14, rbx
mov r13, r14
movabs r12, 0xd5fe29bc
add r12, 0x6a0b4104; sub
=== 9261
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 480
add rsp, 480
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov rbx, r13
=== 9262
mov rbx, rbx
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov al, byte ptr [r10]
mov bl, al
=== 9263
mov r15, rbx
push r15
mov rdi, rsp
mov r12, rbx
=== 9264
mov rsi, rdi
mov r13, r12
push rsi
push 0x56e22967
push 0x6a323798
push 0x5561639e
=== 9265
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r11
mov rdi, r13
movzx rbp, bpl
=== 9266
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x12b8e2819
add r14, 0x147b4aa7; sub_carry
mov r14, qword ptr [r14 + 0x6c8]
add r14, rbp
mov al, byte ptr [r14]
movzx rax, al
shl rax, 0x10
sub rdi, rax
mov r14, rdi
movabs rdi, 0x12fca14d7
add rdi, 0x103f55e9; sub
=== 9267
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1736
add rsp, 1736
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r15, r14
=== 9268
mov rdi, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov r10b, byte ptr [rax]
mov r14, 0xff
shl r14, 8
not r14
and rdi, r14
movzx r14, r10b
shl r14, 8
or rdi, r14
=== 9269
mov r12, rdi
push r12
mov rbp, rsp
mov r14, rdi
=== 9270
mov rcx, rbp
mov rdi, r14
push rcx
push 0x602a796f
push 0x50910af4
push 0x128444f6
push 0x70ea1f63
=== 9271
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov r13, rdi
movzx r15, r15b
=== 9272
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x132ab6b53
add rbp, 0xd5e076d; sub_carry
mov rbp, qword ptr [rbp + 0x2e8]
add rbp, r15
mov r10b, byte ptr [rbp]
movzx r10, r10b
shl r10, 0x18
sub r13, r10
mov rsi, r13
movabs rbx, 0x1081a3dde
add rbx, 0x37ef2ce2; sub
=== 9273
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 744
add rsp, 744
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r14
mov rdi, rsi
=== 9274
mov r14, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov r9b, byte ptr [r8]
mov r11, 0xff
shl r11, 0x10
not r11
and r14, r11
movzx r11, r9b
shl r11, 0x10
or r14, r11
=== 9275
mov r8, r14
push r8
mov rbx, rsp
mov rsi, r14
=== 9276
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r11
mov r13, rsi
movzx rbx, bl
=== 9277
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x103624120
add r14, 0x3ca731a0; sub_carry
mov r14, qword ptr [r14 + 0x580]
add r14, rbx
mov bl, byte ptr [r14]
movzx rbx, bl
shl rbx, 0x20
sub r13, rbx
mov rsi, r13
movabs rbx, 0x116e72c57
add rbx, 0x29223e69; sub
=== 9278
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1408
add rsp, 1408
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r15
mov rsi, rsi
=== 9279
mov rdi, rsi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r14
mov r11b, byte ptr [rsi]
mov rax, 0xff
shl rax, 0x18
not rax
and rdi, rax
movzx rax, r11b
shl rax, 0x18
or rdi, rax
=== 9280
mov rbp, rdi
push rbp
mov r13, rsp
mov rbx, rdi
=== 9281
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov rsi, rbx
movzx r14, r14b
=== 9282
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xf6682403
add r13, 0x49a14ebd; sub_carry
mov r13, qword ptr [r13 + 8]
add r13, r14
mov sil, byte ptr [r13]
movzx rsi, sil
shl rsi, 0x28
sub rsi, rsi
mov rbp, rsi
movabs rdi, 0x12a95206e
add rdi, 0x15744a52; sub
=== 9283
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 8
add rsp, 8
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbx
mov rdi, rbp
=== 9284
mov r14, rdi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r15
mov r10b, byte ptr [rsi]
mov rdi, 0xff
shl rdi, 0x20
not rdi
and r14, rdi
movzx rdi, r10b
shl rdi, 0x20
or r14, rdi
=== 9285
mov r13, r14
push r13
mov r12, rsp
mov rbp, r14
=== 9286
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r13
mov rbp, rbp
movzx r13, r13b
=== 9287
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x121b30739
push r11
push 0x248c00d4
push 0x414253ff
push 0x61716456
add qword ptr [rsp + 0x18], 0x1e563b87
mov r12, rbp
=== 9288
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov r14, r12
=== 9289
mov r15, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rsi
mov al, byte ptr [r8]
mov r10, 0xff
shl r10, 0x20
not r10
and r15, r10
movzx r10, al
shl r10, 0x20
or r15, r10
=== 9290
mov rsi, r15
push rsi
mov rsi, rsp
mov r13, r15
=== 9291
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov r13, r13
movzx rbx, bl
=== 9292
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r13
movabs rdi, 0x118c601c1
add rdi, 0x274340ff
=== 9293
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov rbx, r14
=== 9294
mov r13, rbx
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r12
mov r9b, byte ptr [r11]
mov r14, 0xff
shl r14, 0x38
not r14
and r13, r14
movzx r14, r9b
shl r14, 0x38
or r13, r14
=== 9295
mov rbx, r13
movabs rdi, 0x11316cc08
add rdi, 0x2ce945e8
test rbx, rbx
lea r12, [rip - 0x43fd48]
cmovne r12, rdi
jmp r12
=== 9296
movabs r14, 0x120a73c64
push r14
push 0x3ac104fb
push 0x69e5322d
push 0x7e6c703b
push 0xc246e1c
add qword ptr [rsp + 0x20], 0x1fe27c84; input
=== 9297
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 14
add rsp, 14
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
movzx r13, r13b
=== 9298
mov rax, r13
mov r12, 0xfffffffffafe729c
add r12, 0x5cc16af
push r12
mul qword ptr [rsp]
mov rdi, rax
=== 9299
mov rdx, rdi
push rdx
mov rbp, rsp
mov rsi, rdi
=== 9300
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r14
mov rbp, rsi
movzx rdi, dil
=== 9301
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xe805eefc
add r10, 0x580373c4; add_carry
mov r10, qword ptr [r10 + 0x30]
add r10, rdi
mov r12b, byte ptr [r10]
movzx r12, r12b
shl r12, 8
add rbp, r12
movabs r13, 0xf63afe1a
push r13
push 0x408002a0
push 0x6d51524c
push 0x461752f7
push 0x5da71a77
add qword ptr [rsp + 0x20], 0x49ce5ca6; add
mov r13, rbp
=== 9302
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 48
add rsp, 48
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r12
mov rbp, r13
=== 9303
mov r15, rbp
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r15
mov sil, byte ptr [rdi]
mov r15b, sil
=== 9304
mov r15, r15
push r15
mov rbp, rsp
mov r14, r15
=== 9305
mov rcx, rbp
mov rsi, r14
push rcx
push 0x3c7e46d5
push 0x70f0ed5
push 0x79957515
=== 9306
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r10
mov rbx, rsi
movzx rbp, bpl
=== 9307
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xf2a10a88
add rdi, 0x4d685838; add_carry
mov rdi, qword ptr [rdi + 0x720]
add rdi, rbp
mov bpl, byte ptr [rdi]
movzx rbp, bpl
shl rbp, 0x10
add rbx, rbp
mov r15, rbx
movabs r12, 0x10551f584
add r12, 0x3ab7653c; add
=== 9308
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1824
add rsp, 1824
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rax
mov rbp, r15
=== 9309
mov rdi, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov cl, byte ptr [rax]
mov r8, 0xff
shl r8, 8
not r8
and rdi, r8
movzx r8, cl
shl r8, 8
or rdi, r8
=== 9310
mov rdx, rdi
push rdx
mov rbp, rsp
mov rsi, rdi
=== 9311
mov rdi, rbp
mov rbx, rsi
push rdi
push 0x1f2f4a1a
push 0x35f2b95
push 0x23446543
=== 9312
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov rbp, rbx
movzx rsi, sil
=== 9313
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xc0ea161a
add r14, 0x7f1f4ca6; add_carry
mov r14, qword ptr [r14 + 0x278]
add r14, rsi
mov al, byte ptr [r14]
movzx rax, al
shl rax, 0x18
add rbp, rax
mov r14, rbp
movabs rdi, 0x100cc1bf6
add rdi, 0x3f3d3eca; add
=== 9314
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 632
add rsp, 632
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r12
mov r14, r14
=== 9315
mov r15, r14
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r15
mov r8b, byte ptr [rcx]
mov rdx, 0xff
shl rdx, 0x10
not rdx
and r15, rdx
movzx rdx, r8b
shl rdx, 0x10
or r15, rdx
=== 9316
mov rbp, r15
push rbp
mov r13, rsp
mov rsi, r15
=== 9317
mov rbx, r13
mov r14, rsi
push rbx
push 0x16cd666a
push 0x2ad2244a
push 0x59652970
push 0x4eba04b9
=== 9318
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov r12, r14
movzx r15, r15b
=== 9319
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xe79539a5
add r12, 0x5874291b; add_carry
mov r12, qword ptr [r12 + 0x518]
add r12, r15
mov dl, byte ptr [r12]
movzx rdx, dl
shl rdx, 0x20
add r12, rdx
movabs rbx, 0xd4154ab7
push rbx
push 0x366d6dcc
push 0x253b0539
push 0x799c4cba
push 0x313a47f8
add qword ptr [rsp + 0x20], 0x6bf41009; add
mov r14, r12
=== 9320
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1304
add rsp, 1304
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov rsi, r14
=== 9321
mov rbp, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rdi
mov dl, byte ptr [r14]
mov r12, 0xff
shl r12, 0x18
not r12
and rbp, r12
movzx r12, dl
shl r12, 0x18
or rbp, r12
=== 9322
mov rax, rbp
push rax
mov r13, rsp
mov r14, rbp
=== 9323
mov r10, r13
mov r13, r14
push r10
push 0x77b75542
push 0x78137aa9
push 0x2e25d82
=== 9324
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov r15, r13
movzx rdi, dil
=== 9325
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x10ddd3898
add rax, 0x322c2a28; add_carry
mov rax, qword ptr [rax]
add rax, rdi
mov bpl, byte ptr [rax]
movzx rbp, bpl
shl rbp, 0x30
add r15, rbp
mov rbx, r15
movabs r13, 0xede3e915
add r13, 0x522571ab; add
=== 9326
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov rbx, rbx
=== 9327
mov rsi, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov cl, byte ptr [rcx]
mov r8, 0xff
shl r8, 0x28
not r8
and rsi, r8
movzx r8, cl
shl r8, 0x28
or rsi, r8
=== 9328
movabs r12, 0xcc5c3ebb
push r12
push 0x4be54d38
push 0x7d9855a0
push 0x553872e9
push 0x1422337d
add qword ptr [rsp + 0x20], 0x742d7a2d; input
mov r14, rsi
=== 9329
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 18
add rsp, 18
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov rbp, r14
movzx rbx, bl
=== 9330
mov rax, rbx
mov rdi, 0xffffffffcc0151a6
add rdi, 0x34100385
push rdi
mov r14, rbp
mul qword ptr [rsp]
mov r15, rax
=== 9331
mov r12, r14
add r12, r15
=== 9332
mov r13, r12
push r13
mov rsi, rsp
mov r12, r12
=== 9333
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov rsi, r12
movzx rbx, bl
=== 9334
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xf4320439
add rdi, 0x4bd75e87; add_carry
mov rdi, qword ptr [rdi + 0x6a0]
add rdi, rbx
mov sil, byte ptr [rdi]
movzx rsi, sil
shl rsi, 8
add rsi, rsi
movabs r8, 0x104ed1267
push r8
push 0x502d4650
push 0x66016e58
push 0x46d5383c
push 0x15ef443b
add qword ptr [rsp + 0x20], 0x3b1c4859; add
mov rdi, rsi
=== 9335
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1696
add rsp, 1696
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov r13, rdi
=== 9336
mov r13, r13
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r12
mov bpl, byte ptr [r14]
mov r13b, bpl
=== 9337
mov rdx, r13
push rdx
mov r13, rsp
mov rsi, r13
=== 9338
mov rbp, r13
mov r13, rsi
push rbp
push 0x3e783393
push 0x562b081c
push 0x5db56d3e
push 0x15ec485e
=== 9339
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov rdi, r13
movzx rbx, bl
=== 9340
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x1374b592f
add rdx, 0x8be0991; add_carry
mov rdx, qword ptr [rdx + 0x760]
add rdx, rbx
mov r14b, byte ptr [rdx]
movzx r14, r14b
shl r14, 0x10
add rdi, r14
movabs r13, 0xe362e2bf
push r13
push 0x689c6556
push 0x10b6033b
push 0x1a38302e
add qword ptr [rsp + 0x18], 0x5ca67801; add
mov r12, rdi
=== 9341
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1888
add rsp, 1888
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov rbp, r12
=== 9342
mov r13, rbp
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbx
mov r10b, byte ptr [rsi]
mov rdi, 0xff
shl rdi, 8
not rdi
and r13, rdi
movzx rdi, r10b
shl rdi, 8
or r13, rdi
=== 9343
mov r8, r13
push r8
mov r13, rsp
mov r12, r13
=== 9344
mov r10, r13
mov r12, r12
push r10
push 0x71b43ef4
push 0xc903f1f
push 0x632a0f15
=== 9345
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rcx
mov rbp, r12
movzx r12, r12b
=== 9346
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xe8834fac
add r15, 0x57861314; add_carry
mov r15, qword ptr [r15 + 0x320]
add r15, r12
mov al, byte ptr [r15]
movzx rax, al
shl rax, 0x18
add rbp, rax
mov r13, rbp
movabs rsi, 0xe30918ae
add rsi, 0x5d004212; add
=== 9347
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 800
add rsp, 800
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r11
mov r14, r13
=== 9348
mov r15, r14
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rdi
mov cl, byte ptr [rbp]
mov r12, 0xff
shl r12, 0x10
not r12
and r15, r12
movzx r12, cl
shl r12, 0x10
or r15, r12
=== 9349
mov rcx, r15
push rcx
mov r14, rsp
mov r13, r15
=== 9350
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov r14, r13
movzx r13, r13b
=== 9351
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x1378e3976
add r12, 0x87b294a; add_carry
mov r12, qword ptr [r12 + 0x1b8]
add r12, r13
mov bpl, byte ptr [r12]
movzx rbp, bpl
shl rbp, 0x20
add r14, rbp
movabs rcx, 0x113ef0ae4
push rcx
push 0x2c3c3620
push 0x69f57c14
push 0x15026c41
add qword ptr [rsp + 0x18], 0x2c1a4fdc; add
mov r13, r14
=== 9352
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 440
add rsp, 440
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r11
mov r15, r13
=== 9353
mov r15, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rsi
mov r13b, byte ptr [rbp]
mov r11, 0xff
shl r11, 0x18
not r11
and r15, r11
movzx r11, r13b
shl r11, 0x18
or r15, r11
=== 9354
mov rbx, r15
push rbx
mov r13, rsp
mov r14, r15
=== 9355
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r13
mov r15, r14
movzx r12, r12b
=== 9356
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xe0c20e28
push rbx
push 0x109c4d05
push 0x7afe64cf
push 0x524b710a
push 0x5c760924
add qword ptr [rsp + 0x20], 0x5f474c98; add
mov r14, r15
=== 9357
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rsi
mov rbp, r14
=== 9358
mov rdi, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov r10b, byte ptr [r8]
mov rcx, 0xff
shl rcx, 0x38
not rcx
and rdi, rcx
movzx rcx, r10b
shl rcx, 0x38
or rdi, rcx
=== 9359
movabs rax, 0xc2c94969
push rax
push 0x24ea6a32
push 0x4e9a6386
push 0x251c7f18
push 0x217e3a12
add qword ptr [rsp + 0x20], 0x7dc06f7f; input
mov r14, rdi
=== 9360
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 22
add rsp, 22
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r15
mov r12, r14
movzx rdi, dil
=== 9361
mov rax, rdi
mov rbx, 0xffffffffb6bcb7d9
add rbx, 0x49c10b92
push rbx
mov rsi, r12
mul qword ptr [rsp]
mov r12, rax
=== 9362
mov r14, rsi
xor r14, r12
=== 9363
mov r15, r14
push r15
mov r13, rsp
mov r14, r14
=== 9364
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov r15, r14
movzx rdi, dil
=== 9365
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xe03dff3e
add rcx, 0x5fcb6382; add_carry
mov rcx, qword ptr [rcx + 0x3d8]
add rcx, rdi
mov dil, byte ptr [rcx]
movzx rdi, dil
shl rdi, 8
add r15, rdi
movabs r15, 0xcf212841
push r15
push 0x3c945a6c
push 0x4c99532f
push 0x65ec0b60
push 0x6b3c5ad8
add qword ptr [rsp + 0x20], 0x70e8327f; add
mov rdi, r15
=== 9366
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 984
add rsp, 984
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbp
mov r14, rdi
=== 9367
mov rbx, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov al, byte ptr [r8]
mov bl, al
=== 9368
mov rbp, rbx
push rbp
mov r15, rsp
mov r12, rbx
=== 9369
mov rsi, r15
mov r13, r12
push rsi
push 0x8c30907
push 0x6f678ca
push 0x40507dde
=== 9370
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov rsi, r13
movzx rdi, dil
=== 9371
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xd5e8f19a
add r13, 0x6a207126; add_carry
mov r13, qword ptr [r13 + 0x3b8]
add r13, rdi
mov dil, byte ptr [r13]
movzx rdi, dil
shl rdi, 0x10
add rsi, rdi
mov r13, rsi
movabs r12, 0xdbc84c60
add r12, 0x64410e60; add
=== 9372
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 952
add rsp, 952
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov rbx, r13
=== 9373
mov rdi, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov cl, byte ptr [r9]
mov rbx, 0xff
shl rbx, 8
not rbx
and rdi, rbx
movzx rbx, cl
shl rbx, 8
or rdi, rbx
=== 9374
mov rdi, rdi
push rdi
mov r13, rsp
mov r12, rdi
=== 9375
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r11
mov r12, r12
movzx rbp, bpl
=== 9376
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x12ace541e
add r14, 0x153b0ea2; add_carry
mov r14, qword ptr [r14 + 0x2f0]
add r14, rbp
mov r14b, byte ptr [r14]
movzx r14, r14b
shl r14, 0x18
add r12, r14
movabs rdi, 0xf2c340a6
push rdi
push 0x652e1f53
push 0x2cd8238a
push 0xaeb2738
push 0x120703f5
add qword ptr [rsp + 0x20], 0x4d461a1a; add
mov rdi, r12
=== 9377
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 752
add rsp, 752
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov r12, rdi
=== 9378
mov rbp, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r14
mov al, byte ptr [r15]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and rbp, rbx
movzx rbx, al
shl rbx, 0x10
or rbp, rbx
=== 9379
mov r14, rbp
push r14
mov r12, rsp
mov rbp, rbp
=== 9380
mov r13, r12
mov r12, rbp
push r13
push 0x78fc2e18
push 0x292f1fc7
push 0x64f81709
=== 9381
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbx
mov r12, r12
movzx r15, r15b
=== 9382
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x11ec817b2
add r14, 0x21414b0e; add_carry
mov r14, qword ptr [r14 + 0x5a0]
add r14, r15
mov r13b, byte ptr [r14]
movzx r13, r13b
shl r13, 0x20
add r12, r13
mov rdi, r12
movabs rbx, 0xf682f03d
add rbx, 0x49866a83; add
=== 9383
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1440
add rsp, 1440
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rcx
mov r14, rdi
=== 9384
mov rbx, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbx
mov al, byte ptr [rdi]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and rbx, rbp
movzx rbp, al
shl rbp, 0x18
or rbx, rbp
=== 9385
mov rbx, rbx
push rbx
mov rdi, rsp
mov r14, rbx
=== 9386
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r13
mov rsi, r14
movzx r14, r14b
=== 9387
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xe8033f67
add rdi, 0x58062359; add_carry
mov rdi, qword ptr [rdi]
add rdi, r14
mov bpl, byte ptr [rdi]
movzx rbp, bpl
shl rbp, 0x38
add rsi, rbp
movabs r8, 0x12c6548db
push r8
push 0x69a779af
push 0x275a47a7
push 0x197650dc
push 0x65780062
add qword ptr [rsp + 0x20], 0x13a411e5; add
mov r14, rsi
=== 9388
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbx
mov r15, r14
=== 9389
mov rbx, r15
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov r11b, byte ptr [r12]
mov rcx, 0xff
shl rcx, 0x30
not rcx
and rbx, rcx
movzx rcx, r11b
shl rcx, 0x30
or rbx, rcx
=== 9390
mov r15, rbx
movabs rdi, 0xecf648a2
add rdi, 0x53937046; input
=== 9391
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 26
add rsp, 26
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r8
mov rdi, r15
movzx r13, r13b
=== 9392
mov rax, r13
mov r10, 0xffffffff8381817e
add r10, 0x7d4d4428
push r10
mov r15, rdi
mul qword ptr [rsp]
mov rbx, rax
=== 9393
mov r13, r15
xor r13, rbx
=== 9394
mov r14, r13
push r14
mov r13, rsp
mov r15, r13
=== 9395
mov r8, r13
mov r12, r15
push r8
push 0xd17c49
push 0x6b672494
push 0x58856e09
=== 9396
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r14
mov rbp, r12
movzx rsi, sil
=== 9397
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x127df2280
push r12
push 0x6c2221aa
push 0x34093fc0
push 0x75513133
add qword ptr [rsp + 0x18], 0x182a2840; xor
mov r13, rbp
=== 9398
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 168
add rsp, 168
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov rbx, r13
=== 9399
mov r15, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov bpl, byte ptr [rbp]
mov r15b, bpl
=== 9400
mov r14, r15
push r14
mov rbp, rsp
mov rbx, r15
=== 9401
mov rbp, rbp
mov rsi, rbx
push rbp
push 0x549151a1
push 0x12855dd4
push 0x66562ef3
=== 9402
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov rdi, rsi
movzx rbx, bl
=== 9403
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xe82f4202
push r15
push 0x79352339
push 0x3aff686a
push 0x26104793
add qword ptr [rsp + 0x18], 0x57da08be; xor
mov r12, rdi
=== 9404
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1504
add rsp, 1504
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r10
mov rsi, r12
=== 9405
mov r15, rsi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rdi
mov dil, byte ptr [rbp]
mov rdx, 0xff
shl rdx, 8
not rdx
and r15, rdx
movzx rdx, dil
shl rdx, 8
or r15, rdx
=== 9406
mov rbp, r15
push rbp
mov rdi, rsp
mov r13, r15
=== 9407
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r12
mov r14, r13
movzx rbx, bl
=== 9408
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r14
movabs rdi, 0x104652043
add rdi, 0x3ba42a7d; xor
=== 9409
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 712
add rsp, 712
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdi
mov rsi, r14
=== 9410
mov rsi, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rdi
mov dil, byte ptr [r14]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and rsi, rbx
movzx rbx, dil
shl rbx, 0x10
or rsi, rbx
=== 9411
mov rbp, rsi
push rbp
mov rbp, rsp
mov r13, rsi
=== 9412
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdi
mov rbx, r13
movzx r12, r12b
=== 9413
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rbx
movabs rdi, 0x100913fcf
add rdi, 0x3f780af1; xor
=== 9414
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 360
add rsp, 360
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov rbp, r15
=== 9415
mov rbx, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbx
mov r11b, byte ptr [rdx]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and rbx, rdx
movzx rdx, r11b
shl rdx, 0x18
or rbx, rdx
=== 9416
mov r8, rbx
push r8
mov rdi, rsp
mov rbp, rbx
=== 9417
mov rbp, rdi
mov rdi, rbp
push rbp
push 0x105400e9
push 0x17da5502
push 0x4ec81f96
push 0x4a097650
=== 9418
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov rbx, rdi
movzx r15, r15b
=== 9419
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rbx
movabs rdi, 0x112c847d4
add rdi, 0x2d4102ec; xor
=== 9420
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov rdi, rbp
=== 9421
mov rbp, rdi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbx
mov r8b, byte ptr [r13]
mov rdi, 0xff
shl rdi, 0x30
not rdi
and rbp, rdi
movzx rdi, r8b
shl rdi, 0x30
or rbp, rdi
=== 9422
mov r11, rbp
push r11
mov rdi, rsp
mov rbx, rbp
=== 9423
mov rax, rdi
mov rbx, rbx
push rax
push 0x5fe01087
push 0x107f0daa
push 0x11020455
push 0x2ebf7455
=== 9424
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rcx
mov r13, rbx
movzx r12, r12b
=== 9425
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r13
movabs rsi, 0xe1f01533
add rsi, 0x5e19358d; xor
=== 9426
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r13
mov r14, r15
=== 9427
mov r15, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r13
mov r11b, byte ptr [rdi]
mov rsi, 0xff
shl rsi, 0x38
not rsi
and r15, rsi
movzx rsi, r11b
shl rsi, 0x38
or r15, rsi
=== 9428
movabs r14, 0x11cc7a3ec
push r14
push 0x3ce2ef1
push 0x679c0b2d
push 0x72f42d5a
push 0x133c697e
add qword ptr [rsp + 0x20], 0x23c214fc; input
mov r15, r15
=== 9429
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 30
add rsp, 30
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov r15, r15
movzx rdi, dil
=== 9430
mov rax, rdi
mov rdx, 0xffffffffd8f0b43d
add rdx, 0x27c62ed0
push rdx
mov rsi, r15
mul qword ptr [rsp]
mov r14, rax
=== 9431
mov r13, rsi
add r13, r14
=== 9432
mov rdi, r13
push rdi
mov rbx, rsp
mov r12, r13
=== 9433
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r13, r12
movzx rbx, bl
=== 9434
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r13
movabs r14, 0xc2342380
add r14, 0x7dd52740; xor
=== 9435
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1120
add rsp, 1120
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov rbp, r12
=== 9436
mov r15, rbp
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbx
mov dil, byte ptr [r14]
mov r15b, dil
=== 9437
mov rbx, r15
push rbx
mov rbx, rsp
mov r13, r15
=== 9438
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov r12, r13
movzx rsi, sil
=== 9439
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xf931cbb0
push rbx
push 0x34750928
push 0x16615e45
push 0x1aca6356
add qword ptr [rsp + 0x18], 0x46d77f10; xor
mov rbp, r12
=== 9440
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 960
add rsp, 960
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov rbp, rbp
=== 9441
mov rsi, rbp
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov r13b, byte ptr [r11]
mov rbp, 0xff
shl rbp, 8
not rbp
and rsi, rbp
movzx rbp, r13b
shl rbp, 8
or rsi, rbp
=== 9442
mov rdx, rsi
push rdx
mov rbx, rsp
mov r15, rsi
=== 9443
mov r11, rbx
mov rbx, r15
push r11
push 0x7406729
push 0x7dc45cd3
push 0x48ec2c61
push 0x516e426a
=== 9444
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rsi
mov rbx, rbx
movzx r12, r12b
=== 9445
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rbx
movabs r13, 0x1196146fc
add r13, 0x26a803c4; xor
=== 9446
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1480
add rsp, 1480
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdx
mov rbx, r15
=== 9447
mov r13, rbx
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov r8b, byte ptr [r10]
mov r12, 0xff
shl r12, 0x10
not r12
and r13, r12
movzx r12, r8b
shl r12, 0x10
or r13, r12
=== 9448
mov r13, r13
push r13
mov rsi, rsp
mov rbx, r13
=== 9449
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov r15, rbx
movzx r12, r12b
=== 9450
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xf6cf0db2
push rcx
push 0x76d8326e
push 0x2e326df8
push 0x640864a8
add qword ptr [rsp + 0x18], 0x493a3d0e; xor
mov rdi, r15
=== 9451
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2000
add rsp, 2000
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov rbx, rdi
=== 9452
mov rbp, rbx
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r15
mov cl, byte ptr [r12]
mov rbx, 0xff
shl rbx, 0x18
not rbx
and rbp, rbx
movzx rbx, cl
shl rbx, 0x18
or rbp, rbx
=== 9453
mov r13, rbp
push r13
mov rsi, rsp
mov rdi, rbp
=== 9454
mov r11, rsi
mov r13, rdi
push r11
push 0x55db7ce1
push 0x189b2ce2
push 0x1b877ef5
push 0x6a5855d9
=== 9455
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r8
mov r13, r13
movzx r12, r12b
=== 9456
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xf86129f8
push rdx
push 0x57fd3a0e
push 0x1d0e603c
push 0x65d532dc
push 0x622105f2
add qword ptr [rsp + 0x20], 0x47a820c8; xor
mov r13, r13
=== 9457
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov r15, r13
=== 9458
mov r15, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov r13b, byte ptr [rax]
mov r8, 0xff
shl r8, 0x28
not r8
and r15, r8
movzx r8, r13b
shl r8, 0x28
or r15, r8
=== 9459
mov r10, r15
push r10
mov r13, rsp
mov r12, r15
=== 9460
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r9
mov r14, r12
movzx r13, r13b
=== 9461
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xd41b272e
push rbx
push 0x77f41dc4
push 0x6b1f28f8
push 0x14882941
push 0x16965fdd
add qword ptr [rsp + 0x20], 0x6bee2392; xor
mov r12, r14
=== 9462
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbp
mov r14, r12
=== 9463
mov rdi, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov r10b, byte ptr [r9]
mov r9, 0xff
shl r9, 0x38
not r9
and rdi, r9
movzx r9, r10b
shl r9, 0x38
or rdi, r9
=== 9464
mov r12, rdi
movabs r14, 0x13d986977
add r14, 0x2f14f71; input
=== 9465
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 10
add rsp, 10
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov r15, r12
movzx r13, r13b
=== 9466
mov rax, r13
mov r11, 0xffffffffd26e3734
add r11, 0x2e1764e0
push r11
mov r12, r15
mul qword ptr [rsp]
mov rdi, rax
=== 9467
mov r15, r12
xor r15, rdi
=== 9468
mov r15, r15
push r15
mov r15, rsp
mov r14, r15
=== 9469
mov rsi, r15
mov r12, r14
push rsi
push 0x4c6100bd
push 0x4cf269b2
push 0x77117dc3
push 0x71e9519d
=== 9470
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rsi
mov rbx, r12
movzx r12, r12b
=== 9471
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xc64648a9
add rax, 0x79c31a17; add_carry
mov rax, qword ptr [rax + 0x2a0]
add rax, r12
mov r10b, byte ptr [rax]
movzx r10, r10b
shl r10, 8
add rbx, r10
movabs rdi, 0x12b2f492d
push rdi
push 0x41c01f03
push 0x60ec5e53
push 0x7dd35c1a
add qword ptr [rsp + 0x18], 0x14da1193; add
mov rsi, rbx
=== 9472
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 672
add rsp, 672
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbx
mov r15, rsi
=== 9473
mov r12, r15
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r14
mov r9b, byte ptr [r10]
mov r12b, r9b
=== 9474
mov r15, r12
push r15
mov r14, rsp
mov r13, r12
=== 9475
mov rsi, r14
mov rdi, r13
push rsi
push 0x60507422
push 0x5e730aa5
push 0x61c24c55
=== 9476
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r14
mov rbp, rdi
movzx rsi, sil
=== 9477
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xdbc7e9f2
add rax, 0x644178ce; add_carry
mov rax, qword ptr [rax + 0x470]
add rax, rsi
mov dl, byte ptr [rax]
movzx rdx, dl
shl rdx, 0x10
add rbp, rdx
movabs r13, 0xef692548
push r13
push 0x7b7b2b5c
push 0x37897b57
push 0xbd86a50
push 0x4900778f
add qword ptr [rsp + 0x20], 0x50a03578; add
mov r14, rbp
=== 9478
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1136
add rsp, 1136
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rcx
mov r12, r14
=== 9479
mov rsi, r12
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov r9b, byte ptr [r9]
mov rbp, 0xff
shl rbp, 8
not rbp
and rsi, rbp
movzx rbp, r9b
shl rbp, 8
or rsi, rbp
=== 9480
mov r13, rsi
push r13
mov rsi, rsp
mov rdi, rsi
=== 9481
mov r14, rsi
mov rbp, rdi
push r14
push 0x76a03738
push 0x3d281060
push 0x5ed802e7
push 0x7840ec4
=== 9482
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov rdi, rbp
movzx rbx, bl
=== 9483
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xc200f9ac
add rsi, 0x7e086914; add_carry
mov rsi, qword ptr [rsi + 0x430]
add rsi, rbx
mov r13b, byte ptr [rsi]
movzx r13, r13b
shl r13, 0x18
add rdi, r13
mov rbp, rdi
movabs r12, 0xcc164954
add r12, 0x73f3116c; add
=== 9484
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1072
add rsp, 1072
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov r15, rbp
=== 9485
mov r14, r15
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rsi
mov r12b, byte ptr [r10]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and r14, rbx
movzx rbx, r12b
shl rbx, 0x10
or r14, rbx
=== 9486
mov rbx, r14
push rbx
mov rsi, rsp
mov rbx, r14
=== 9487
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov rsi, rbx
movzx r15, r15b
=== 9488
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xe2a6203f
add r14, 0x5d634281; add_carry
mov r14, qword ptr [r14 + 0x208]
add r14, r15
mov dl, byte ptr [r14]
movzx rdx, dl
shl rdx, 0x20
add rsi, rdx
movabs rax, 0x1255f2ba6
push rax
push 0x3ca4758b
push 0x55bc0ed6
push 0x37db6cc8
push 0x27097ff6
add qword ptr [rsp + 0x20], 0x1aaa2f1a; add
mov rbx, rsi
=== 9489
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 520
add rsp, 520
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r9
mov rsi, rbx
=== 9490
mov rdi, rsi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r13
mov bpl, byte ptr [rcx]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and rdi, rdx
movzx rdx, bpl
shl rdx, 0x18
or rdi, rdx
=== 9491
movabs r8, 0x12e0d4a44
push r8
push 0x27be51cc
push 0x156cf6
push 0x3b083691
add qword ptr [rsp + 0x18], 0x127c6ea4; input
mov r13, rdi
=== 9492
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov r14, r13
movzx rdi, dil
=== 9493
mov rax, rdi
mov rbx, 0xffffffffd76f70ff
add rbx, 0x296207d4
push rbx
mov r14, r14
mul qword ptr [rsp]
mov rsi, rax
=== 9494
mov rbx, r14
add rbx, rsi
=== 9495
mov rax, rbx
push rax
mov rdi, rsp
mov r12, rbx
=== 9496
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov rsi, r12
movzx r14, r14b
=== 9497
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xccc3eab3
add rbp, 0x7345780d; add_carry
mov rbp, qword ptr [rbp + 0x718]
add rbp, r14
mov r10b, byte ptr [rbp]
movzx r10, r10b
shl r10, 8
add rsi, r10
movabs rbx, 0xd75f1ad2
push rbx
push 0x54e179ef
push 0x30564439
push 0x61964d85
push 0x3ce6cb1
add qword ptr [rsp + 0x20], 0x68aa3fee; add
mov r13, rsi
=== 9498
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1816
add rsp, 1816
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r12
mov rsi, r13
=== 9499
mov rbp, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rdi
mov r8b, byte ptr [r8]
mov bpl, r8b
=== 9500
mov rsi, rbp
push rsi
mov r13, rsp
mov rbp, rbp
=== 9501
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rcx
mov rbx, rbp
movzx rbp, bpl
=== 9502
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x135bd08d7
add r13, 0xa4c59e9; add_carry
mov r13, qword ptr [r13 + 0x58]
add r13, rbp
mov dl, byte ptr [r13]
movzx rdx, dl
shl rdx, 0x10
add rbx, rdx
movabs rdi, 0xf67bfccf
push rdi
push 0x5b0d3c8b
push 0x28d90e43
push 0x22255b20
add qword ptr [rsp + 0x18], 0x498d5df1; add
mov rbp, rbx
=== 9503
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 88
add rsp, 88
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbx
mov r15, rbp
=== 9504
mov rbp, r15
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r14
mov cl, byte ptr [r12]
mov r8, 0xff
shl r8, 8
not r8
and rbp, r8
movzx r8, cl
shl r8, 8
or rbp, r8
=== 9505
mov r12, rbp
push r12
mov rsi, rsp
mov r13, rbp
=== 9506
mov r13, rsi
mov r15, r13
push r13
push 0x36a97b18
push 0x39345a6c
push 0x4b791654
=== 9507
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov r12, r15
movzx r15, r15b
=== 9508
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xe73ce47c
add rbx, 0x58cc7e44; add_carry
mov rbx, qword ptr [rbx + 0x458]
add rbx, r15
mov r13b, byte ptr [rbx]
movzx r13, r13b
shl r13, 0x18
add r12, r13
mov r13, r12
movabs r15, 0x130702f27
add r15, 0xf992b99; add
=== 9509
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1112
add rsp, 1112
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rax
mov r13, r13
=== 9510
mov r12, r13
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov dil, byte ptr [r9]
mov r13, 0xff
shl r13, 0x10
not r13
and r12, r13
movzx r13, dil
shl r13, 0x10
or r12, r13
=== 9511
mov rcx, r12
push rcx
mov rsi, rsp
mov r13, r12
=== 9512
mov r10, rsi
mov r13, r13
push r10
push 0x2bd1037e
push 0x45f82057
push 0x3033286d
=== 9513
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r11
mov r15, r13
movzx rbp, bpl
=== 9514
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x1220100d3
add rdx, 0x1e0861ed; add_carry
mov rdx, qword ptr [rdx + 0x4a8]
add rdx, rbp
mov dl, byte ptr [rdx]
movzx rdx, dl
shl rdx, 0x20
add r15, rdx
mov rbp, r15
movabs r15, 0xffc5ebb9
add r15, 0x40436f07; add
=== 9515
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1192
add rsp, 1192
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r15
mov r14, rbp
=== 9516
mov r12, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov r9b, byte ptr [rax]
mov r14, 0xff
shl r14, 0x18
not r14
and r12, r14
movzx r14, r9b
shl r14, 0x18
or r12, r14
=== 9517
mov rax, r12
push rax
mov r14, rsp
mov r13, r12
=== 9518
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov rdi, r13
movzx rbp, bpl
=== 9519
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x12c15409f
add r13, 0x13f42221; add_carry
mov r13, qword ptr [r13]
add r13, rbp
mov r10b, byte ptr [r13]
movzx r10, r10b
shl r10, 0x28
add rdi, r10
movabs r12, 0x13b130ffa
push r12
push 0x6b211760
push 0x1524250f
push 0x782872fa
add qword ptr [rsp + 0x18], 0x4f64ac6; add
mov r13, rdi
=== 9520
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r14
mov rbp, r13
=== 9521
mov r13, rbp
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rdi
mov bl, byte ptr [rdi]
mov r9, 0xff
shl r9, 0x20
not r9
and r13, r9
movzx r9, bl
shl r9, 0x20
or r13, r9
=== 9522
movabs r12, 0x1228c41ab
push r12
push 0x1e464852
push 0x6cba4b81
push 0x6e312bc5
push 0x73fc6e83
add qword ptr [rsp + 0x20], 0x1dfd773d; input
mov r13, r13
=== 9523
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov r15, r13
movzx rsi, sil
=== 9524
mov rax, rsi
mov r9, 0xffffffffbe17167e
add r9, 0x424a4dde
push r9
mov r13, r15
mul qword ptr [rsp]
mov r14, rax
=== 9525
mov r12, r13
xor r12, r14
=== 9526
mov r15, r12
push r15
mov r14, rsp
mov r12, r12
=== 9527
mov r9, r14
mov r13, r12
push r9
push 0x223525e4
push 0x26ee67a1
push 0x2cae3e47
=== 9528
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov rbp, r13
movzx r15, r15b
=== 9529
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x102f0538f
add r14, 0x3d190f31; add_carry
mov r14, qword ptr [r14 + 0x678]
add r14, r15
mov cl, byte ptr [r14]
movzx rcx, cl
shl rcx, 8
add rbp, rcx
movabs rbp, 0xc7bb3246
push rbp
push 0x47033676
push 0x2e027882
push 0x57601539
add qword ptr [rsp + 0x18], 0x784e287a; add
mov rbx, rbp
=== 9530
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1656
add rsp, 1656
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rsi
mov rbx, rbx
=== 9531
mov r14, rbx
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbp
mov al, byte ptr [rsi]
mov r14b, al
=== 9532
mov rcx, r14
push rcx
mov r13, rsp
mov r12, r14
=== 9533
mov rcx, r13
mov r15, r12
push rcx
push 0x70826a3
push 0x46545e1a
push 0x75cc02c3
=== 9534
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov r15, r15
movzx rbx, bl
=== 9535
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xd66f53db
add r15, 0x699a0ee5; add_carry
mov r15, qword ptr [r15 + 0xa0]
add r15, rbx
mov bpl, byte ptr [r15]
movzx rbp, bpl
shl rbp, 0x10
add r15, rbp
movabs r10, 0x13a3b5845
push r10
push 0x3fbe40c5
push 0x283a7722
push 0x102b729b
add qword ptr [rsp + 0x18], 0x5ce027b; add
mov r12, r15
=== 9536
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 160
add rsp, 160
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rax
mov rdi, r12
=== 9537
mov r14, rdi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r13
mov dil, byte ptr [r15]
mov r12, 0xff
shl r12, 8
not r12
and r14, r12
movzx r12, dil
shl r12, 8
or r14, r12
=== 9538
mov r10, r14
push r10
mov r12, rsp
mov r14, r14
=== 9539
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov r12, r14
movzx rbx, bl
=== 9540
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x118b45bb2
add r15, 0x2755070e; add_carry
mov r15, qword ptr [r15 + 0x640]
add r15, rbx
mov r11b, byte ptr [r15]
movzx r11, r11b
shl r11, 0x18
add r12, r11
mov rdi, r12
movabs rsi, 0xc727ec26
add rsi, 0x78e16e9a; add
=== 9541
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1600
add rsp, 1600
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r14
mov r15, rdi
=== 9542
mov rdi, r15
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rsi
mov r13b, byte ptr [r14]
mov r14, 0xff
shl r14, 0x10
not r14
and rdi, r14
movzx r14, r13b
shl r14, 0x10
or rdi, r14
=== 9543
mov r14, rdi
push r14
mov r15, rsp
mov rsi, rdi
=== 9544
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r8
mov rbp, rsi
movzx r14, r14b
=== 9545
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x127bc5d86
add r13, 0x184d053a; add_carry
mov r13, qword ptr [r13 + 0x4e8]
add r13, r14
mov dil, byte ptr [r13]
movzx rdi, dil
shl rdi, 0x20
add rbp, rdi
movabs rbp, 0xc769ecb1
push rbp
push 0xa2172a6
push 0x6b077aec
push 0x755e5ab5
add qword ptr [rsp + 0x18], 0x789f6e0f; add
mov r14, rbp
=== 9546
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1256
add rsp, 1256
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov r15, r14
=== 9547
mov rbx, r15
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r14
mov r15b, byte ptr [r11]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and rbx, rsi
movzx rsi, r15b
shl rsi, 0x18
or rbx, rsi
=== 9548
mov rax, rbx
push rax
mov r14, rsp
mov rbx, rbx
=== 9549
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r10
mov r14, rbx
movzx rsi, sil
=== 9550
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xd2842cf8
add rcx, 0x6d8535c8; add_carry
mov rcx, qword ptr [rcx]
add rcx, rsi
mov r14b, byte ptr [rcx]
movzx r14, r14b
shl r14, 0x28
add r14, r14
mov rbp, r14
movabs rdi, 0xfc603556
add rdi, 0x43a9256a; add
=== 9551
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdi
mov r12, rbp
=== 9552
mov r13, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r15
mov r15b, byte ptr [r11]
mov r12, 0xff
shl r12, 0x20
not r12
and r13, r12
movzx r12, r15b
shl r12, 0x20
or r13, r12
=== 9553
mov r8, r13
push r8
mov rbx, rsp
mov r12, r13
=== 9554
mov r14, rbx
mov r15, r12
push r14
push 0x67de36cd
push 0x3cf376d1
push 0x40dc4550
=== 9555
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbx
mov rbx, r15
movzx rdi, dil
=== 9556
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xe65360d7
add rdx, 0x59b611e9; sub_carry
mov rdx, qword ptr [rdx + 0x210]
add rdx, rdi
mov cl, byte ptr [rdx]
movzx rcx, cl
shl rcx, 8
sub rbx, rcx
mov r12, rbx
movabs r13, 0x13d9a67a3
add r13, 0x26f031d; sub
=== 9557
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 528
add rsp, 528
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbx
mov r14, r12
=== 9558
mov r12, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r15
mov r10b, byte ptr [rdi]
mov r12b, r10b
=== 9559
mov rsi, r12
push rsi
mov r14, rsp
mov r12, r12
=== 9560
mov r11, r14
mov r15, r12
push r11
push 0x46d5f0c
push 0x16391e7a
push 0x27a06ffc
push 0x4ae57dcf
=== 9561
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov rsi, r15
movzx r14, r14b
=== 9562
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x11692f775
add r8, 0x29767b4b; sub_carry
mov r8, qword ptr [r8 + 0xa8]
add r8, r14
mov r14b, byte ptr [r8]
movzx r14, r14b
shl r14, 0x10
sub rsi, r14
mov r12, rsi
movabs r15, 0xfae80a5b
add r15, 0x45216065; sub
=== 9563
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 168
add rsp, 168
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov r12, r12
=== 9564
mov rbx, r12
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbp
mov dil, byte ptr [rbp]
mov rcx, 0xff
shl rcx, 8
not rcx
and rbx, rcx
movzx rcx, dil
shl rcx, 8
or rbx, rcx
=== 9565
mov r12, rbx
push r12
mov r12, rsp
mov r13, rbx
=== 9566
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r10
mov r15, r13
movzx r14, r14b
=== 9567
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x12d581146
add rbx, 0x12b1617a; sub_carry
mov rbx, qword ptr [rbx + 0x400]
add rbx, r14
mov r8b, byte ptr [rbx]
movzx r8, r8b
shl r8, 0x18
sub r15, r8
mov r14, r15
movabs r15, 0xdb1a637d
add r15, 0x64ef0743; sub
=== 9568
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1024
add rsp, 1024
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rax
mov rdi, r14
=== 9569
mov rdi, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov bl, byte ptr [r8]
mov rdx, 0xff
shl rdx, 0x10
not rdx
and rdi, rdx
movzx rdx, bl
shl rdx, 0x10
or rdi, rdx
=== 9570
mov rsi, rdi
push rsi
mov r13, rsp
mov r14, rdi
=== 9571
mov r14, r13
mov r15, r14
push r14
push 0x69d446eb
push 0x596b7d69
push 0x2f5d1e0e
push 0x43f247ea
=== 9572
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov rdi, r15
movzx r12, r12b
=== 9573
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x12c332bfa
add rsi, 0x13d646c6; sub_carry
mov rsi, qword ptr [rsi + 0x3d8]
add rsi, r12
mov dil, byte ptr [rsi]
movzx rdi, dil
shl rdi, 0x20
sub rdi, rdi
movabs rdi, 0x130512d66
push rdi
push 0x4a3854cd
push 0x2d367067
push 0x610860a1
push 0x2fac77b9
add qword ptr [rsp + 0x20], 0xfb83d5a; sub
mov rbx, rdi
=== 9574
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 984
add rsp, 984
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r11
mov r12, rbx
=== 9575
mov r13, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov al, byte ptr [rdx]
mov rbx, 0xff
shl rbx, 0x18
not rbx
and r13, rbx
movzx rbx, al
shl rbx, 0x18
or r13, rbx
=== 9576
mov rsi, r13
push rsi
mov rbx, rsp
mov rbp, r13
=== 9577
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r13
mov r15, rbp
movzx r14, r14b
=== 9578
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xc4e744b7
add r11, 0x7b222e09; sub_carry
mov r11, qword ptr [r11 + 0x20]
add r11, r14
mov dil, byte ptr [r11]
movzx rdi, dil
shl rdi, 0x28
sub r15, rdi
movabs rax, 0xd8570b57
push rax
push 0x67ac2a87
push 0x3bb0153f
push 0x7a55604d
add qword ptr [rsp + 0x18], 0x67b25f69; sub
mov r12, r15
=== 9579
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 32
add rsp, 32
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r14
mov rdi, r12
=== 9580
mov rsi, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov r10b, byte ptr [r12]
mov r12, 0xff
shl r12, 0x20
not r12
and rsi, r12
movzx r12, r10b
shl r12, 0x20
or rsi, r12
=== 9581
mov r15, rsi
push r15
mov rsi, rsp
mov rbp, rsi
=== 9582
mov r14, rsi
mov r13, rbp
push r14
push 0x4da2d98
push 0x4e0a7996
push 0x35131227
push 0xb3b241b
=== 9583
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r8
mov r15, r13
movzx r12, r12b
=== 9584
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xde0630d9
push rbx
push 0x1baf3bab
push 0x450a4bdf
push 0x68950d04
add qword ptr [rsp + 0x18], 0x620339e7; sub
mov r14, r15
=== 9585
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbx
mov rdi, r14
=== 9586
mov r15, rdi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbx
mov bl, byte ptr [rbx]
mov rax, 0xff
shl rax, 0x38
not rax
and r15, rax
movzx rax, bl
shl rax, 0x38
or r15, rax
=== 9587
mov r11, r15
push r11
mov r14, rsp
mov rsi, r15
=== 9588
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov r13, rsi
movzx rbp, bpl
=== 9589
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r13
movabs rsi, 0xf2492f58
add rsi, 0x4dc02368; or
=== 9590
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r15
mov r12, r12
=== 9591
mov rbp, r12
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r13
mov r9b, byte ptr [rax]
mov bpl, r9b
=== 9592
mov rcx, rbp
push rcx
mov rbx, rsp
mov r13, rbp
=== 9593
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov r14, r13
movzx rsi, sil
=== 9594
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r14
movabs rdi, 0x10ccbf8c0
add rdi, 0x333d5a00; or
=== 9595
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rcx
mov r13, rbx
=== 9596
mov r12, r13
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbx
mov r11b, byte ptr [r14]
mov r10, 0xff
shl r10, 8
not r10
and r12, r10
movzx r10, r11b
shl r10, 8
or r12, r10
=== 9597
mov r12, r12
push r12
mov r14, rsp
mov r13, r12
=== 9598
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r11
mov rsi, r13
movzx rbx, bl
=== 9599
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rsi
movabs r12, 0x1168af284
add r12, 0x297e603c; or
=== 9600
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r8
mov r13, r14
=== 9601
mov r12, r13
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rdi
mov r13b, byte ptr [r14]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and r12, rdi
movzx rdi, r13b
shl rdi, 0x18
or r12, rdi
=== 9602
mov r10, r12
push r10
mov rsi, rsp
mov rbp, r12
=== 9603
mov r13, rsi
mov r12, rbp
push r13
push 0x5d47601b
push 0x69744e9f
push 0x2beb100c
=== 9604
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r15
mov rdi, r12
movzx rbp, bpl
=== 9605
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x12742d766
push r13
push 0x366c3ab9
push 0x18626e1c
push 0x428f707e
push 0x2907276d
add qword ptr [rsp + 0x20], 0x18c67b5a; or
mov rbp, rdi
=== 9606
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r10
mov r15, rbp
=== 9607
mov r13, r15
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rsi
mov r12b, byte ptr [r14]
mov rcx, 0xff
shl rcx, 0x20
not rcx
and r13, rcx
movzx rcx, r12b
shl rcx, 0x20
or r13, rcx
=== 9608
mov r11, r13
push r11
mov r12, rsp
mov rbx, r13
=== 9609
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r8
mov rdi, rbx
movzx rbx, bl
=== 9610
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rdi
movabs rbp, 0x11381e21e
add rbp, 0x2c8770a2; or
=== 9611
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r15
mov rsi, rbx
=== 9612
mov rbp, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r15
mov dl, byte ptr [r9]
mov r13, 0xff
shl r13, 0x38
not r13
and rbp, r13
movzx r13, dl
shl r13, 0x38
or rbp, r13
=== 9613
mov rbp, rbp
movabs r14, 0x107e00867
add r14, 0x38200989
test rbp, rbp
lea rsi, [rip - 0x44bfe7]
cmovne rsi, r14
jmp rsi
=== 9614
movabs rdx, 0x113093a7b
push rdx
push 0x33ed48ec
push 0x3971558d
push 0x24b4216c
add qword ptr [rsp + 0x18], 0x2d807e6d; input
=== 9615
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 27
add rsp, 27
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
movzx rbx, bl
=== 9616
mov rax, rbx
mov rsi, 0xffffffffe91e00de
add rsi, 0x1754390b
push rsi
mul qword ptr [rsp]
mov rbp, rax
=== 9617
mov r13, rbp
push r13
mov rdi, rsp
mov r15, rbp
=== 9618
mov rdx, rdi
mov rdi, r15
push rdx
push 0x7f9c0777
push 0x1fdf2462
push 0x1a737baa
=== 9619
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov rsi, rdi
movzx r13, r13b
=== 9620
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x106d62a1e
add rdx, 0x393348a2; sub_carry
mov rdx, qword ptr [rdx + 0x6d0]
add rdx, r13
mov sil, byte ptr [rdx]
movzx rsi, sil
shl rsi, 8
sub rsi, rsi
mov rdi, rsi
movabs r14, 0x13a411093
add r14, 0x5c85a2d; sub
=== 9621
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1744
add rsp, 1744
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov rdi, rdi
=== 9622
mov r13, rdi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r14
mov dl, byte ptr [r11]
mov r13b, dl
=== 9623
mov r15, r13
push r15
mov r13, rsp
mov r15, r13
=== 9624
mov rcx, r13
mov rbx, r15
push rcx
push 0xbb42efd
push 0x53ce6e6e
push 0x3ee5272
push 0x670c7e70
=== 9625
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r10
mov r15, rbx
movzx rbp, bpl
=== 9626
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xc74427ef
add r13, 0x78c54ad1; sub_carry
mov r13, qword ptr [r13 + 0x2d0]
add r13, rbp
mov al, byte ptr [r13]
movzx rax, al
shl rax, 0x10
sub r15, rax
movabs r12, 0xd5eb0fae
push r12
push 0x179a392d
push 0xa518f6
push 0x279c0142
push 0x35801524
add qword ptr [rsp + 0x20], 0x6a1e5b12; sub
mov r14, r15
=== 9627
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 720
add rsp, 720
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r8
mov r14, r14
=== 9628
mov rdi, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov r14b, byte ptr [r10]
mov rcx, 0xff
shl rcx, 8
not rcx
and rdi, rcx
movzx rcx, r14b
shl rcx, 8
or rdi, rcx
=== 9629
mov r8, rdi
push r8
mov r13, rsp
mov rbp, rdi
=== 9630
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov rdi, rbp
movzx r14, r14b
=== 9631
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x11c43115c
add r14, 0x23c66164; sub_carry
mov r14, qword ptr [r14 + 0x70]
add r14, r14
mov cl, byte ptr [r14]
movzx rcx, cl
shl rcx, 0x18
sub rdi, rcx
mov r15, rdi
movabs r14, 0xc853ffe9
add r14, 0x77b56ad7; sub
=== 9632
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_SMALL 112
add rsp, 112
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbp
mov r15, r15
=== 9633
mov rdi, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov r13b, byte ptr [r9]
mov r10, 0xff
shl r10, 0x10
not r10
and rdi, r10
movzx r10, r13b
shl r10, 0x10
or rdi, r10
=== 9634
mov r10, rdi
push r10
mov r14, rsp
mov rsi, rdi
=== 9635
mov r12, r14
mov rsi, rsi
push r12
push 0x47bb670f
push 0x22dc7b22
push 0x62c45f4f
push 0x188f63fe
=== 9636
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rsi, rsi
movzx r13, r13b
=== 9637
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xf8683f52
add r13, 0x47a1336e; sub_carry
mov r13, qword ptr [r13 + 0x3b0]
add r13, r13
mov al, byte ptr [r13]
movzx rax, al
shl rax, 0x20
sub rsi, rax
mov rdi, rsi
movabs r14, 0xee38fb63
add r14, 0x51d06f5d; sub
=== 9638
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 944
add rsp, 944
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov r14, rdi
=== 9639
mov rsi, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov r8b, byte ptr [r13]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and rsi, rdx
movzx rdx, r8b
shl rdx, 0x18
or rsi, rdx
=== 9640
mov rsi, rsi
push rsi
mov r15, rsp
mov rdi, rsi
=== 9641
mov r9, r15
mov r13, rdi
push r9
push 0x1ce919d6
push 0x3e724adb
push 0x53d54297
=== 9642
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r15
mov rsi, r13
movzx r15, r15b
=== 9643
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x12530052c
add rcx, 0x1ad96d94; sub_carry
mov rcx, qword ptr [rcx]
add rcx, r15
mov r8b, byte ptr [rcx]
movzx r8, r8b
shl r8, 0x28
sub rsi, r8
movabs r10, 0xf23b4b88
push r10
push 0x82443e
push 0x184e3a69
push 0x722c14c2
add qword ptr [rsp + 0x18], 0x4dce1f38; sub
mov r12, rsi
=== 9644
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbx
mov r14, r12
=== 9645
mov r15, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r13
mov r12b, byte ptr [r11]
mov r10, 0xff
shl r10, 0x20
not r10
and r15, r10
movzx r10, r12b
shl r10, 0x20
or r15, r10
=== 9646
mov r14, r15
push r14
mov rdi, rsp
mov rsi, r15
=== 9647
mov r14, rdi
mov r13, rsi
push r14
push 0x25282c1a
push 0x47a67332
push 0x21661005
=== 9648
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov rbx, r13
movzx rdi, dil
=== 9649
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xf4336997
add rdi, 0x4bd60929; sub_carry
mov rdi, qword ptr [rdi]
add rdi, rdi
mov r14b, byte ptr [rdi]
movzx r14, r14b
shl r14, 0x38
sub rbx, r14
movabs r8, 0x11bb31a6c
push r8
push 0x4a5e418e
push 0xac549f6
push 0x5215207e
push 0x31a016b
add qword ptr [rsp + 0x20], 0x24565054; sub
mov rdi, rbx
=== 9650
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov rbp, rdi
=== 9651
mov r15, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbx
mov r9b, byte ptr [r12]
mov rcx, 0xff
shl rcx, 0x30
not rcx
and r15, rcx
movzx rcx, r9b
shl rcx, 0x30
or r15, rcx
=== 9652
mov rbx, r15
movabs r14, 0x11f1d6107
add r14, 0x216c57e1; input
=== 9653
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r9
mov r13, rbx
movzx r14, r14b
=== 9654
mov rax, r14
mov rdx, 0xffffffffac016e99
add rdx, 0x54f05538
push rdx
mov r13, r13
mul qword ptr [rsp]
mov r12, rax
=== 9655
mov r13, r13
sub r13, r12
=== 9656
mov r15, r13
push r15
mov rbx, rsp
mov r12, r13
=== 9657
mov rbx, rbx
mov r12, r12
push rbx
push 0x4a706089
push 0x10a74fb5
push 0x7a0f4e82
push 0x756b58ba
=== 9658
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov r12, r12
movzx rbx, bl
=== 9659
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xed91422b
add r13, 0x52783095; sub_carry
mov r13, qword ptr [r13 + 0x340]
add r13, rbx
mov sil, byte ptr [r13]
movzx rsi, sil
shl rsi, 8
sub r12, rsi
mov r15, r12
movabs r14, 0xd6eefd63
add r14, 0x691a6d5d; sub
=== 9660
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 832
add rsp, 832
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov rbp, r15
=== 9661
mov r12, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov bpl, byte ptr [r9]
mov r12b, bpl
=== 9662
mov r14, r12
push r14
mov rbp, rsp
mov rsi, r12
=== 9663
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r8
mov r13, rsi
movzx rbx, bl
=== 9664
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xc56c5102
add r11, 0x7a9d21be; sub_carry
mov r11, qword ptr [r11 + 0x500]
add r11, rbx
mov r12b, byte ptr [r11]
movzx r12, r12b
shl r12, 0x10
sub r13, r12
movabs r14, 0x129cd4ace
push r14
push 0x7b1a8e
push 0x29c63cbd
push 0x11bf7968
add qword ptr [rsp + 0x18], 0x163c1ff2; sub
mov r15, r13
=== 9665
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1280
add rsp, 1280
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r9
mov r14, r15
=== 9666
mov r13, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r13
mov r15b, byte ptr [rax]
mov r14, 0xff
shl r14, 8
not r14
and r13, r14
movzx r14, r15b
shl r14, 8
or r13, r14
=== 9667
mov r14, r13
push r14
mov rsi, rsp
mov rbp, r13
=== 9668
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov rbp, rbp
movzx rsi, sil
=== 9669
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x1128424ab
add rbp, 0x2d854e15; sub_carry
mov rbp, qword ptr [rbp + 0x140]
add rbp, rsi
mov sil, byte ptr [rbp]
movzx rsi, sil
shl rsi, 0x18
sub rbp, rsi
mov r14, rbp
movabs r12, 0x136fafb34
add r12, 0x90e6f8c; sub
=== 9670
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 320
add rsp, 320
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rax
mov r12, r14
=== 9671
mov r13, r12
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov cl, byte ptr [r9]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and r13, rbx
movzx rbx, cl
shl rbx, 0x10
or r13, rbx
=== 9672
mov r13, r13
push r13
mov r13, rsp
mov rdi, r13
=== 9673
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov r13, rdi
movzx rbp, bpl
=== 9674
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x125622f6a
add r12, 0x1aa74356; sub_carry
mov r12, qword ptr [r12 + 0x778]
add r12, rbp
mov sil, byte ptr [r12]
movzx rsi, sil
shl rsi, 0x20
sub r13, rsi
mov r12, r13
movabs r15, 0xdb9962a2
add r15, 0x6470081e; sub
=== 9675
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1912
add rsp, 1912
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbx
mov r15, r12
=== 9676
mov rbx, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov sil, byte ptr [r9]
mov r10, 0xff
shl r10, 0x18
not r10
and rbx, r10
movzx r10, sil
shl r10, 0x18
or rbx, r10
=== 9677
mov r11, rbx
push r11
mov rsi, rsp
mov rbp, rbx
=== 9678
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov r14, rbp
movzx rsi, sil
=== 9679
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x1254d6a91
add r8, 0x1abc082f; sub_carry
mov r8, qword ptr [r8]
add r8, rsi
mov r11b, byte ptr [r8]
movzx r11, r11b
shl r11, 0x28
sub r14, r11
movabs rcx, 0x1039d2872
push rcx
push 0x5d963de
push 0x66ee09e7
push 0x2b695eb8
push 0x163454ed
add qword ptr [rsp + 0x20], 0x3c6c424e; sub
mov rsi, r14
=== 9680
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov r13, rsi
=== 9681
mov rdi, r13
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rdi
mov r13b, byte ptr [rdx]
mov r12, 0xff
shl r12, 0x20
not r12
and rdi, r12
movzx r12, r13b
shl r12, 0x20
or rdi, r12
=== 9682
mov rbx, rdi
push rbx
mov rbx, rsp
mov r15, rdi
=== 9683
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbp
mov rbp, r15
movzx r13, r13b
=== 9684
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x1106f01fd
add rcx, 0x2f9a70c3; sub_carry
mov rcx, qword ptr [rcx]
add rcx, r13
mov r12b, byte ptr [rcx]
movzx r12, r12b
shl r12, 0x30
sub rbp, r12
mov r12, rbp
movabs r14, 0xfb62edd3
add r14, 0x44a67ced; sub
=== 9685
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r15
mov r13, r12
=== 9686
mov rsi, r13
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov r12b, byte ptr [r12]
mov rdi, 0xff
shl rdi, 0x28
not rdi
and rsi, rdi
movzx rdi, r12b
shl rdi, 0x28
or rsi, rdi
=== 9687
movabs r15, 0x13eb3ad61
push r15
push 0xcfe68f0
push 0x14262e73
push 0x53c96c0c
push 0x35e9044f
add qword ptr [rsp + 0x20], 0x1d60b87; input
mov rbx, rsi
=== 9688
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 11
add rsp, 11
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
mov rdi, rbx
movzx r15, r15b
=== 9689
mov rax, r15
mov r9, 0xffffffffd223f48a
add r9, 0x2df71edd
push r9
mov rbx, rdi
mul qword ptr [rsp]
mov r14, rax
=== 9690
mov rsi, rbx
xor rsi, r14
=== 9691
mov rbx, rsi
push rbx
mov rbp, rsp
mov r12, rsi
=== 9692
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov rbx, r12
movzx rdi, dil
=== 9693
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x12046ea0c
push rdi
push 0x49936c7c
push 0x3fb105ad
push 0x1d1b4d5d
push 0x1516d62
add qword ptr [rsp + 0x20], 0x1fc260b4; xor
mov rbx, rbx
=== 9694
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 720
add rsp, 720
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r15
mov rdi, rbx
=== 9695
mov r14, rdi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov bl, byte ptr [r15]
mov r14b, bl
=== 9696
mov rdx, r14
push rdx
mov r13, rsp
mov r12, r14
=== 9697
mov rdi, r13
mov rsi, r12
push rdi
push 0x4cf62c5f
push 0x313152ca
push 0x565d1245
=== 9698
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov rbx, rsi
movzx rdi, dil
=== 9699
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x12e7d451c
push r8
push 0x5ed96d0a
push 0x387636c3
push 0x32ac22bf
push 0x3b23267b
add qword ptr [rsp + 0x20], 0x118c05a4; xor
mov rbx, rbx
=== 9700
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 104
add rsp, 104
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rcx
mov r13, rbx
=== 9701
mov r14, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov r12b, byte ptr [rax]
mov r15, 0xff
shl r15, 8
not r15
and r14, r15
movzx r15, r12b
shl r15, 8
or r14, r15
=== 9702
mov rcx, r14
push rcx
mov r12, rsp
mov rbx, r14
=== 9703
mov r12, r12
mov r14, rbx
push r12
push 0x65b5366c
push 0x2e6d5c7d
push 0x6caa093a
push 0x561a5369
=== 9704
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rcx
mov r14, r14
movzx r13, r13b
=== 9705
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r14
movabs r13, 0xeef430ce
add r13, 0x511519f2; xor
=== 9706
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1792
add rsp, 1792
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r14
mov rdi, r15
=== 9707
mov rdi, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbp
mov r11b, byte ptr [rcx]
mov r14, 0xff
shl r14, 0x10
not r14
and rdi, r14
movzx r14, r11b
shl r14, 0x10
or rdi, r14
=== 9708
mov rbp, rdi
push rbp
mov rbp, rsp
mov rbx, rdi
=== 9709
mov r15, rbp
mov r13, rbx
push r15
push 0x46632062
push 0x5ad877a0
push 0x76a26a55
=== 9710
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
mov r14, r13
movzx rsi, sil
=== 9711
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x11cfb32e2
push r13
push 0x3bc13784
push 0x46157f19
push 0x4bba7a86
add qword ptr [rsp + 0x18], 0x230e17de; xor
mov rdi, r14
=== 9712
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 392
add rsp, 392
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r15
mov rdi, rdi
=== 9713
mov r14, rdi
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r12
mov al, byte ptr [rdi]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and r14, rdi
movzx rdi, al
shl rdi, 0x18
or r14, rdi
=== 9714
mov r14, r14
push r14
mov r12, rsp
mov rbx, r14
=== 9715
mov rdi, r12
mov r15, rbx
push rdi
push 0x13e059e0
push 0x6cf86ee5
push 0x78e406c9
=== 9716
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r8
mov r13, r15
movzx rbp, bpl
=== 9717
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x11efe2a55
push r8
push 0x67069d3
push 0x10f506ec
push 0x14066511
push 0x45be258b
add qword ptr [rsp + 0x20], 0x210b206b; xor
mov r13, r13
=== 9718
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov r14, r13
=== 9719
mov rsi, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov dil, byte ptr [r15]
mov r10, 0xff
shl r10, 0x20
not r10
and rsi, r10
movzx r10, dil
shl r10, 0x20
or rsi, r10
=== 9720
mov r11, rsi
push r11
mov rbx, rsp
mov r13, rsi
=== 9721
mov r15, rbx
mov r14, r13
push r15
push 0x59645d0c
push 0x7a861a6f
push 0xdd8604a
=== 9722
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov rbp, r14
movzx r12, r12b
=== 9723
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xd8ad11f8
push r14
push 0x44845c39
push 0x6df41cf0
push 0x32b40182
add qword ptr [rsp + 0x18], 0x675c38c8; xor
mov rbp, rbp
=== 9724
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rsi
mov r13, rbp
=== 9725
mov rsi, r13
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rsi
mov bl, byte ptr [rdx]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and rsi, rdx
movzx rdx, bl
shl rdx, 0x28
or rsi, rdx
=== 9726
mov r10, rsi
push r10
mov rbp, rsp
mov r12, rsi
=== 9727
mov r15, rbp
mov rbx, r12
push r15
push 0x1c103e2d
push 0x35c5531d
push 0x294e4892
push 0x67f20962
=== 9728
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov rbp, rbx
movzx r13, r13b
=== 9729
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x107400b66
push rdx
push 0x66271eb8
push 0x6be8144f
push 0x6af5309d
add qword ptr [rsp + 0x18], 0x38c93f5a; xor
mov r13, rbp
=== 9730
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r11
mov rbx, r13
=== 9731
mov r14, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbp
mov r11b, byte ptr [r8]
mov rax, 0xff
shl rax, 0x30
not rax
and r14, rax
movzx rax, r11b
shl rax, 0x30
or r14, rax
=== 9732
mov rsi, r14
push rsi
mov rbx, rsp
mov r13, r14
=== 9733
mov rax, rbx
mov rbp, r13
push rax
push 0x38bd7e0a
push 0x1d6a4e6f
push 0x4aec1bf0
=== 9734
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov rdi, rbp
movzx r12, r12b
=== 9735
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x133574857
push r12
push 0x7886098e
push 0x161710e7
push 0x608e60ff
add qword ptr [rsp + 0x18], 0xcb20269; xor
mov rbx, rdi
=== 9736
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r10
mov rdi, rbx
=== 9737
mov r15, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov al, byte ptr [rdx]
mov rdi, 0xff
shl rdi, 0x38
not rdi
and r15, rdi
movzx rdi, al
shl rdi, 0x38
or r15, rdi
=== 9738
mov r14, r15
movabs r13, 0x120d55650
add r13, 0x1fb46298; input
=== 9739
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 19
add rsp, 19
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbx
mov rbp, r14
movzx rbx, bl
=== 9740
mov rax, rbx
mov rdi, 0xffffffffaf9af29f
add rdi, 0x50e54614
push rdi
mov rbx, rbp
mul qword ptr [rsp]
mov r13, rax
=== 9741
mov r12, rbx
xor r12, r13
=== 9742
mov rbp, r12
push rbp
mov rbx, rsp
mov rsi, r12
=== 9743
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov rdi, rsi
movzx r14, r14b
=== 9744
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xd75e5e3d
add rbp, 0x68ab0483; add_carry
mov rbp, qword ptr [rbp + 0x238]
add rbp, r14
mov r10b, byte ptr [rbp]
movzx r10, r10b
shl r10, 8
add rdi, r10
mov r12, rdi
movabs r15, 0x125d229af
add r15, 0x1a373111; add
=== 9745
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 568
add rsp, 568
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov rdi, r12
=== 9746
mov rsi, rdi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rsi
mov r12b, byte ptr [rbx]
mov sil, r12b
=== 9747
mov rbx, rsi
push rbx
mov rbx, rsp
mov rbp, rsi
=== 9748
mov r9, rbx
mov r14, rbp
push r9
push 0x45ff30b2
push 0x68491496
push 0x5ce42dfe
=== 9749
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov rbx, r14
movzx r14, r14b
=== 9750
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xe5a63073
add rcx, 0x5a63324d; add_carry
mov rcx, qword ptr [rcx + 0x1a0]
add rcx, r14
mov dl, byte ptr [rcx]
movzx rdx, dl
shl rdx, 0x10
add rbx, rdx
movabs rsi, 0x10978021e
push rsi
push 0x135062ba
push 0x39520d8c
push 0x67976b42
push 0x5bb95040
add qword ptr [rsp + 0x20], 0x369158a2; add
mov rbp, rbx
=== 9751
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 416
add rsp, 416
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov r13, rbp
=== 9752
mov rdi, r13
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbx
mov cl, byte ptr [r14]
mov r11, 0xff
shl r11, 8
not r11
and rdi, r11
movzx r11, cl
shl r11, 8
or rdi, r11
=== 9753
mov rdx, rdi
push rdx
mov rdi, rsp
mov rbp, rdi
=== 9754
mov rcx, rdi
mov r15, rbp
push rcx
push 0x371592
push 0x7bc70361
push 0x37176b55
push 0x29813a75
=== 9755
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov rbp, r15
movzx r12, r12b
=== 9756
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x105aa3599
add r14, 0x3a5f2d27; add_carry
mov r14, qword ptr [r14 + 0xb0]
add r14, r12
mov r10b, byte ptr [r14]
movzx r10, r10b
shl r10, 0x18
add rbp, r10
mov rdi, rbp
movabs r12, 0x12cdc24fc
add r12, 0x132d35c4; add
=== 9757
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 176
add rsp, 176
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov rbp, rdi
=== 9758
mov rbx, rbp
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov sil, byte ptr [r11]
mov rdx, 0xff
shl rdx, 0x10
not rdx
and rbx, rdx
movzx rdx, sil
shl rdx, 0x10
or rbx, rdx
=== 9759
mov r8, rbx
push r8
mov rsi, rsp
mov rbx, rbx
=== 9760
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r12
mov r15, rbx
movzx rbx, bl
=== 9761
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x12f9b04b9
add r14, 0x106e5e07; add_carry
mov r14, qword ptr [r14 + 0x5a8]
add r14, rbx
mov r11b, byte ptr [r14]
movzx r11, r11b
shl r11, 0x20
add r15, r11
movabs rdi, 0xde5eef49
push rdi
push 0x1cae0457
push 0x78aa6203
push 0x6ccb0bb4
add qword ptr [rsp + 0x18], 0x61aa6b77; add
mov rdi, r15
=== 9762
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1448
add rsp, 1448
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r10
mov rbp, rdi
=== 9763
mov r13, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbx
mov r15b, byte ptr [r12]
mov rax, 0xff
shl rax, 0x18
not rax
and r13, rax
movzx rax, r15b
shl rax, 0x18
or r13, rax
=== 9764
mov rdx, r13
push rdx
mov rdi, rsp
mov r12, r13
=== 9765
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
mov r12, r12
movzx rbx, bl
=== 9766
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x1148d52d4
push rdx
push 0x21f442b7
push 0x47e35561
push 0x7b370971
push 0x73b33f0a
add qword ptr [rsp + 0x20], 0x2b7c07ec; add
mov r14, r12
=== 9767
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov r15, r14
=== 9768
mov r15, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov al, byte ptr [rax]
mov rsi, 0xff
shl rsi, 0x38
not rsi
and r15, rsi
movzx rsi, al
shl rsi, 0x38
or r15, rsi
=== 9769
movabs r12, 0x13aaa4f48
push r12
push 0x7f9f3cea
push 0x71d21e73
push 0x64687a13
push 0x20eb4569
add qword ptr [rsp + 0x20], 0x5df69a0; input
mov r12, r15
=== 9770
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 31
add rsp, 31
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r15
mov r14, r12
movzx rsi, sil
=== 9771
mov rax, rsi
mov r9, 0xffffffffc1b2d190
add r9, 0x3eb32939
push r9
mov rbp, r14
mul qword ptr [rsp]
mov r13, rax
=== 9772
mov rbp, rbp
add rbp, r13
=== 9773
mov r14, rbp
push r14
mov r14, rsp
mov r12, rbp
=== 9774
mov rbp, r14
mov r13, r12
push rbp
push 0x76cf48e8
push 0x556f6d66
push 0x273613d9
=== 9775
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov r14, r13
movzx r13, r13b
=== 9776
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xd41c03cf
add r8, 0x6bed5ef1; add_carry
mov r8, qword ptr [r8 + 0x4d0]
add r8, r13
mov dl, byte ptr [r8]
movzx rdx, dl
shl rdx, 8
add r14, rdx
movabs rcx, 0x101eb17fa
push rcx
push 0x3bb0092c
push 0x5879484b
push 0x5df75ea3
push 0x9533bc
add qword ptr [rsp + 0x20], 0x3e1e42c6; add
mov r14, r14
=== 9777
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1232
add rsp, 1232
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbx
mov r15, r14
=== 9778
mov rbx, r15
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rsi
mov dil, byte ptr [r15]
mov bl, dil
=== 9779
mov r10, rbx
push r10
mov r12, rsp
mov rbx, rbx
=== 9780
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov r14, rbx
movzx rsi, sil
=== 9781
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xeb36ebc6
add r14, 0x54d276fa; add_carry
mov r14, qword ptr [r14 + 0x440]
add r14, rsi
mov r10b, byte ptr [r14]
movzx r10, r10b
shl r10, 0x10
add r14, r10
mov rbp, r14
movabs r12, 0xc9cf4ffb
add r12, 0x763a0ac5; add
=== 9782
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1088
add rsp, 1088
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rsi
mov r12, rbp
=== 9783
mov r12, r12
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov al, byte ptr [rax]
mov rsi, 0xff
shl rsi, 8
not rsi
and r12, rsi
movzx rsi, al
shl rsi, 8
or r12, rsi
=== 9784
mov r10, r12
push r10
mov r15, rsp
mov r13, r12
=== 9785
mov r8, r15
mov rbp, r13
push r8
push 0x15785605
push 0x6889762f
push 0x32863ef1
push 0x46580a94
=== 9786
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov rsi, rbp
movzx r13, r13b
=== 9787
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xcb29fbb0
add r11, 0x74df6710; add_carry
mov r11, qword ptr [r11 + 0x250]
add r11, r13
mov cl, byte ptr [r11]
movzx rcx, cl
shl rcx, 0x18
add rsi, rcx
mov r13, rsi
movabs rdi, 0xe20646aa
add rdi, 0x5e031416; add
=== 9788
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 592
add rsp, 592
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r14
mov rbp, r13
=== 9789
mov r15, rbp
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rdi
mov r11b, byte ptr [rbp]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and r15, rsi
movzx rsi, r11b
shl rsi, 0x10
or r15, rsi
=== 9790
mov r15, r15
push r15
mov r15, rsp
mov r12, r15
=== 9791
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rsi
mov rbp, r12
movzx r12, r12b
=== 9792
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x130d41a57
add r8, 0xf354869; add_carry
mov r8, qword ptr [r8 + 0x700]
add r8, r12
mov dil, byte ptr [r8]
movzx rdi, dil
shl rdi, 0x20
add rbp, rdi
movabs rdi, 0xcbd13768
push rdi
push 0x2085249e
push 0x20e162f6
push 0x5b7d2058
push 0x602759e9
add qword ptr [rsp + 0x20], 0x74382358; add
mov r14, rbp
=== 9793
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1792
add rsp, 1792
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov rbx, r14
=== 9794
mov rbx, rbx
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rsi
mov r9b, byte ptr [r14]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and rbx, rbp
movzx rbp, r9b
shl rbp, 0x18
or rbx, rbp
=== 9795
mov rcx, rbx
push rcx
mov rdi, rsp
mov rbx, rbx
=== 9796
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov r13, rbx
movzx r14, r14b
=== 9797
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xdd083a94
add rdx, 0x6301282c; add_carry
mov rdx, qword ptr [rdx]
add rdx, r14
mov al, byte ptr [rdx]
movzx rax, al
shl rax, 0x28
add r13, rax
movabs r12, 0xfe6231d2
push r12
push 0xb484a5d
push 0x7f027c53
push 0x72d161f4
push 0x4d957a01
add qword ptr [rsp + 0x20], 0x41a728ee; add
mov rsi, r13
=== 9798
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r10
mov rsi, rsi
=== 9799
mov r12, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov bpl, byte ptr [r9]
mov r15, 0xff
shl r15, 0x20
not r15
and r12, r15
movzx r15, bpl
shl r15, 0x20
or r12, r15
=== 9800
mov rbp, r12
push rbp
mov rdi, rsp
mov rbp, r12
=== 9801
mov r12, rdi
mov r14, rbp
push r12
push 0x6d477dda
push 0x3bb1751e
push 0x310b6c60
=== 9802
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov rbp, r14
movzx r15, r15b
=== 9803
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x10f875d7a
add rax, 0x30820546; add_carry
mov rax, qword ptr [rax]
add rax, r15
mov bpl, byte ptr [rax]
movzx rbp, bpl
shl rbp, 0x38
add rbp, rbp
mov r14, rbp
movabs rbx, 0xd0e222cc
add rbx, 0x6f2737f4; add
=== 9804
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbx
mov rdi, r14
=== 9805
mov rdi, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbx
mov al, byte ptr [rdx]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and rdi, rsi
movzx rsi, al
shl rsi, 0x30
or rdi, rsi
=== 9806
mov r15, rdi
movabs r14, 0x13f6292c0
add r14, 0x1272628; input
=== 9807
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 23
add rsp, 23
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r10
mov rbx, r15
movzx rsi, sil
=== 9808
mov rax, rsi
mov r10, 0xffffffffeb0923cb
add r10, 0x15cf21ff
push r10
mov rbx, rbx
mul qword ptr [rsp]
mov rdi, rax
=== 9809
mov rbp, rbx
sub rbp, rdi
=== 9810
mov r12, rbp
push r12
mov r14, rsp
mov rbp, rbp
=== 9811
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r15
mov r15, rbp
movzx r12, r12b
=== 9812
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xc5974b9d
add rdx, 0x7a722723; sub_carry
mov rdx, qword ptr [rdx + 0x2c0]
add rdx, r12
mov al, byte ptr [rdx]
movzx rax, al
shl rax, 8
sub r15, rax
mov rbx, r15
movabs r14, 0x118513399
add r14, 0x27b83727; sub
=== 9813
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 704
add rsp, 704
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r10
mov rbx, rbx
=== 9814
mov rbx, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov dil, byte ptr [rcx]
mov bl, dil
=== 9815
mov rax, rbx
push rax
mov rbx, rsp
mov rdi, rbx
=== 9816
mov rax, rbx
mov rbx, rdi
push rax
push 0x622c1e9d
push 0x4f2c391a
push 0x1ef87d53
=== 9817
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov rbx, rbx
movzx r14, r14b
=== 9818
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xec4a6441
add r15, 0x53bf0e7f; sub_carry
mov r15, qword ptr [r15 + 0xe0]
add r15, r14
mov r10b, byte ptr [r15]
movzx r10, r10b
shl r10, 0x10
sub rbx, r10
mov rdi, rbx
movabs rbx, 0x13de9f350
add rbx, 0x21f7770; sub
=== 9819
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 224
add rsp, 224
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r14
mov rdi, rdi
=== 9820
mov r13, rdi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r12
mov r10b, byte ptr [rsi]
mov r12, 0xff
shl r12, 8
not r12
and r13, r12
movzx r12, r10b
shl r12, 8
or r13, r12
=== 9821
mov r14, r13
push r14
mov r15, rsp
mov rsi, r13
=== 9822
mov r10, r15
mov rbp, rsi
push r10
push 0x2740eb6
push 0x42887b24
push 0x51251071
=== 9823
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov r15, rbp
movzx rdi, dil
=== 9824
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x13f990c59
add rdi, 0x706667; sub_carry
mov rdi, qword ptr [rdi + 0x3e8]
add rdi, rdi
mov r14b, byte ptr [rdi]
movzx r14, r14b
shl r14, 0x18
sub r15, r14
mov rbp, r15
movabs r14, 0xf5e569dc
add r14, 0x4a2400e4; sub
=== 9825
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1000
add rsp, 1000
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdx
mov r12, rbp
=== 9826
mov rbx, r12
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov dl, byte ptr [rbp]
mov r10, 0xff
shl r10, 0x10
not r10
and rbx, r10
movzx r10, dl
shl r10, 0x10
or rbx, r10
=== 9827
mov rdx, rbx
push rdx
mov rbp, rsp
mov r13, rbx
=== 9828
mov r12, rbp
mov rbx, r13
push r12
push 0x5dc03589
push 0x284577b2
push 0x85838c3
push 0x16c86e1f
=== 9829
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rsi
mov rbp, rbx
movzx r15, r15b
=== 9830
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x12eb93640
add rdx, 0x11503c80; sub_carry
mov rdx, qword ptr [rdx + 0x558]
add rdx, r15
mov r12b, byte ptr [rdx]
movzx r12, r12b
shl r12, 0x20
sub rbp, r12
movabs rbp, 0x123290cdb
push rbp
push 0x671a6c0d
push 0x609d5565
push 0x59e31f5a
add qword ptr [rsp + 0x18], 0x1ce05de5; sub
mov rdi, rbp
=== 9831
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1368
add rsp, 1368
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdx
mov rbx, rdi
=== 9832
mov r15, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r12
mov r11b, byte ptr [rbp]
mov r12, 0xff
shl r12, 0x18
not r12
and r15, r12
movzx r12, r11b
shl r12, 0x18
or r15, r12
=== 9833
mov rdi, r15
push rdi
mov r13, rsp
mov r15, r15
=== 9834
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov r15, r15
movzx r14, r14b
=== 9835
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x119444ccb
add rax, 0x26c525f5; sub_carry
mov rax, qword ptr [rax]
add rax, r14
mov r13b, byte ptr [rax]
movzx r13, r13b
shl r13, 0x28
sub r15, r13
mov rbx, r15
movabs r13, 0xcc06452e
add r13, 0x74032592; sub
=== 9836
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rcx
mov r14, rbx
=== 9837
mov rbp, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov r12b, byte ptr [r9]
mov r15, 0xff
shl r15, 0x20
not r15
and rbp, r15
movzx r15, r12b
shl r15, 0x20
or rbp, r15
=== 9838
mov r8, rbp
push r8
mov r12, rsp
mov r15, rbp
=== 9839
mov rbx, r12
mov r12, r15
push rbx
push 0x1162a1a
push 0xe07b7d
push 0x76ab7adc
push 0x60801475
=== 9840
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov r14, r12
movzx r15, r15b
=== 9841
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xf6bb61e6
add r11, 0x494e10da; sub_carry
mov r11, qword ptr [r11]
add r11, r15
mov r15b, byte ptr [r11]
movzx r15, r15b
shl r15, 0x30
sub r14, r15
movabs rbx, 0xf2e320e5
push rbx
push 0x6a341700
push 0x173f1a84
push 0x233015bb
push 0x7f2c6012
add qword ptr [rsp + 0x20], 0x4d2649db; sub
mov r15, r14
=== 9842
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov rdi, r15
=== 9843
mov r12, rdi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rsi
mov dl, byte ptr [r15]
mov rcx, 0xff
shl rcx, 0x28
not rcx
and r12, rcx
movzx rcx, dl
shl rcx, 0x28
or r12, rcx
=== 9844
mov r12, r12
push r12
mov r15, rsp
mov r13, r12
=== 9845
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov rdi, r13
movzx rbx, bl
=== 9846
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x13409f7fc
push rax
push 0xc4f2a29
push 0x1b6b015b
push 0x2a443e92
add qword ptr [rsp + 0x18], 0xbff72c4; sub
mov rdi, rdi
=== 9847
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov r12, rdi
=== 9848
mov r12, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r14
mov r13b, byte ptr [r15]
mov r15, 0xff
shl r15, 0x38
not r15
and r12, r15
movzx r15, r13b
shl r15, 0x38
or r12, r15
=== 9849
mov rbx, r12
movabs r13, 0x13640781c
add r13, 0xa4940cc; input
=== 9850
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 15
add rsp, 15
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r12
mov r14, rbx
movzx r13, r13b
=== 9851
mov rax, r13
mov r13, 0xffffffffca699e56
add r13, 0x36491d66
push r13
mov r14, r14
mul qword ptr [rsp]
mov rdi, rax
=== 9852
mov r15, r14
add r15, rdi
=== 9853
mov r8, r15
push r8
mov rsi, rsp
mov rdi, r15
=== 9854
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r11
mov r13, rdi
movzx rbp, bpl
=== 9855
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r13
movabs rsi, 0xe8fcd795
add rsi, 0x570c732b; xor
=== 9856
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1168
add rsp, 1168
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rcx
mov r15, r15
=== 9857
mov r13, r15
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rdi
mov r9b, byte ptr [rbx]
mov r13b, r9b
=== 9858
mov r11, r13
push r11
mov rdi, rsp
mov r14, r13
=== 9859
mov r11, rdi
mov r12, r14
push r11
push 0x23a10cea
push 0x516f6992
push 0x206f24f8
=== 9860
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov rdi, r12
movzx r14, r14b
=== 9861
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rdi
movabs rbx, 0x133eae09b
add rbx, 0xc1e6a25; xor
=== 9862
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 984
add rsp, 984
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rsi
mov rdi, r12
=== 9863
mov r12, rdi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbp
mov al, byte ptr [r15]
mov r15, 0xff
shl r15, 8
not r15
and r12, r15
movzx r15, al
shl r15, 8
or r12, r15
=== 9864
mov r10, r12
push r10
mov rbp, rsp
mov rdi, r12
=== 9865
mov rsi, rbp
mov r14, rdi
push rsi
push 0x73ea2609
push 0xdbd5f8d
push 0x19d61d13
push 0x2a6d1282
=== 9866
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r13
mov r13, r14
movzx r14, r14b
=== 9867
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xe84808c7
push rax
push 0x5af65ebf
push 0x7aac342b
push 0x49f93dbe
add qword ptr [rsp + 0x18], 0x57c141f9; xor
mov rbp, r13
=== 9868
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 8
add rsp, 8
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov rdi, rbp
=== 9869
mov rsi, rdi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r15
mov dil, byte ptr [r10]
mov rcx, 0xff
shl rcx, 0x10
not rcx
and rsi, rcx
movzx rcx, dil
shl rcx, 0x10
or rsi, rcx
=== 9870
mov r10, rsi
push r10
mov r14, rsp
mov rbp, rsi
=== 9871
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r15
mov r12, rbp
movzx rsi, sil
=== 9872
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r12
movabs rdi, 0x123223c38
add rdi, 0x1ce70e88; xor
=== 9873
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 464
add rsp, 464
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdi
mov r12, r15
=== 9874
mov r15, r12
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov r8b, byte ptr [r14]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and r15, rdi
movzx rdi, r8b
shl rdi, 0x18
or r15, rdi
=== 9875
mov rdi, r15
movabs rbx, 0x13f6d6ed9
add rbx, 0x11c4a0f; input
=== 9876
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r15
mov rsi, rdi
movzx rdi, dil
=== 9877
mov rax, rdi
mov r12, 0xffffffffcf1d8a65
add r12, 0x31163e58
push r12
mov rsi, rsi
mul qword ptr [rsp]
mov r12, rax
=== 9878
mov r13, rsi
xor r13, r12
=== 9879
mov rbx, r13
push rbx
mov rbx, rsp
mov rdi, r13
=== 9880
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov rbp, rdi
movzx r15, r15b
=== 9881
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x1135bebfe
add r11, 0x2cad76c2; add_carry
mov r11, qword ptr [r11 + 0x718]
add r11, r15
mov bl, byte ptr [r11]
movzx rbx, bl
shl rbx, 8
add rbp, rbx
mov rsi, rbp
movabs r15, 0xec31581d
add r15, 0x53d802a3; add
=== 9882
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1816
add rsp, 1816
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov rbx, rsi
=== 9883
mov rbp, rbx
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r15
mov r11b, byte ptr [r13]
mov bpl, r11b
=== 9884
mov r11, rbp
push r11
mov r14, rsp
mov rbx, rbp
=== 9885
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov rbx, rbx
movzx r13, r13b
=== 9886
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x114e1fc69
add rsi, 0x2b276657; add_carry
mov rsi, qword ptr [rsi + 0x3b0]
add rsi, r13
mov r13b, byte ptr [rsi]
movzx r13, r13b
shl r13, 0x10
add rbx, r13
movabs rbx, 0x11fd6fafa
push rbx
push 0x1e902480
push 0x5c095466
push 0x2f8f4a1e
push 0x70b7c03
add qword ptr [rsp + 0x20], 0x20325fc6; add
mov r15, rbx
=== 9887
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 944
add rsp, 944
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rsi
mov r15, r15
=== 9888
mov rsi, r15
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov r11b, byte ptr [r12]
mov r12, 0xff
shl r12, 8
not r12
and rsi, r12
movzx r12, r11b
shl r12, 8
or rsi, r12
=== 9889
mov rsi, rsi
push rsi
mov r14, rsp
mov rdi, rsi
=== 9890
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov r13, rdi
movzx rbx, bl
=== 9891
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xe2082a4d
add r13, 0x5e013873; add_carry
mov r13, qword ptr [r13 + 0x18]
add r13, rbx
mov r11b, byte ptr [r13]
movzx r11, r11b
shl r11, 0x18
add r13, r11
movabs rdi, 0x131c0513c
push rdi
push 0xc146d48
push 0x5e183148
push 0x71d25ed3
add qword ptr [rsp + 0x18], 0xe490984; add
mov r12, r13
=== 9892
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 24
add rsp, 24
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r11
mov r13, r12
=== 9893
mov rsi, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov r13b, byte ptr [r15]
mov r9, 0xff
shl r9, 0x10
not r9
and rsi, r9
movzx r9, r13b
shl r9, 0x10
or rsi, r9
=== 9894
mov rax, rsi
push rax
mov r13, rsp
mov rsi, rsi
=== 9895
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbx
mov rsi, rsi
movzx rbx, bl
=== 9896
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x11490edaa
add rbp, 0x2b787516; add_carry
mov rbp, qword ptr [rbp + 0x2a0]
add rbp, rbx
mov r13b, byte ptr [rbp]
movzx r13, r13b
shl r13, 0x20
add rsi, r13
mov r12, rsi
movabs rbx, 0xe4e6e6a0
add rbx, 0x5b227420; add
=== 9897
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 672
add rsp, 672
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rsi
mov rdi, r12
=== 9898
mov r15, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r14
mov bl, byte ptr [r12]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and r15, rdi
movzx rdi, bl
shl rdi, 0x18
or r15, rdi
=== 9899
mov rdi, r15
push rdi
mov r12, rsp
mov rbp, r15
=== 9900
mov r10, r12
mov rbx, rbp
push r10
push 0x54b4190c
push 0x2baa045f
push 0x5a4c3858
push 0x4c93167a
=== 9901
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov rsi, rbx
movzx rdi, dil
=== 9902
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xe1f44411
add r12, 0x5e151eaf; add_carry
mov r12, qword ptr [r12]
add r12, rdi
mov r13b, byte ptr [r12]
movzx r13, r13b
shl r13, 0x30
add rsi, r13
movabs rbp, 0xdaae4d62
push rbp
push 0x4f33234c
push 0x3f1233fc
push 0x65a758b0
add qword ptr [rsp + 0x18], 0x655b0d5e; add
mov r14, rsi
=== 9903
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r11
mov rbx, r14
=== 9904
mov rbx, rbx
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rsi
mov al, byte ptr [rdx]
mov r10, 0xff
shl r10, 0x28
not r10
and rbx, r10
movzx r10, al
shl r10, 0x28
or rbx, r10
=== 9905
mov r11, rbx
push r11
mov r14, rsp
mov r13, rbx
=== 9906
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov rbx, r13
movzx r15, r15b
=== 9907
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xc764e8b8
push rdx
push 0x4cd27499
push 0x260a2d90
push 0x700527ac
push 0xe824334
add qword ptr [rsp + 0x20], 0x78a47208; add
mov r15, rbx
=== 9908
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov rbp, r15
=== 9909
mov rdi, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov r12b, byte ptr [r12]
mov rbp, 0xff
shl rbp, 0x38
not rbp
and rdi, rbp
movzx rbp, r12b
shl rbp, 0x38
or rdi, rbp
=== 9910
mov r15, rdi
push r15
mov rbx, rsp
mov r15, rdi
=== 9911
mov rsi, rbx
mov r12, r15
push rsi
push 0x519d34e8
push 0x3cc54d7f
push 0x3ab77b60
=== 9912
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov r13, r12
movzx r15, r15b
=== 9913
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x10d0f21dd
add rdx, 0x32fa50e3; sub_carry
mov rdx, qword ptr [rdx + 0x498]
add rdx, r15
mov dil, byte ptr [rdx]
movzx rdi, dil
shl rdi, 8
sub r13, rdi
mov r13, r13
movabs rdi, 0xc7c921e5
add rdi, 0x784048db; sub
=== 9914
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1176
add rsp, 1176
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdi
mov rsi, r13
=== 9915
mov rbx, rsi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbp
mov r10b, byte ptr [r15]
mov bl, r10b
=== 9916
mov r11, rbx
push r11
mov r14, rsp
mov rbp, rbx
=== 9917
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r13
mov r12, rbp
movzx r14, r14b
=== 9918
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x12c962f6a
add rcx, 0x13734356; sub_carry
mov rcx, qword ptr [rcx + 0x60]
add rcx, r14
mov dil, byte ptr [rcx]
movzx rdi, dil
shl rdi, 0x10
sub r12, rdi
mov r14, r12
movabs rsi, 0xeb6b0a31
add rsi, 0x549e608f; sub
=== 9919
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 96
add rsp, 96
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov r15, r14
=== 9920
mov r12, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov r13b, byte ptr [r9]
mov rsi, 0xff
shl rsi, 8
not rsi
and r12, rsi
movzx rsi, r13b
shl rsi, 8
or r12, rsi
=== 9921
mov r8, r12
push r8
mov rdi, rsp
mov r14, r12
=== 9922
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r15
mov rbx, r14
movzx rbp, bpl
=== 9923
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xe00cf84b
add r13, 0x5ffc7a75; sub_carry
mov r13, qword ptr [r13 + 0x740]
add r13, rbp
mov al, byte ptr [r13]
movzx rax, al
shl rax, 0x18
sub rbx, rax
movabs rbp, 0x10a194041
push rbp
push 0x4ec204df
push 0x78e86db8
push 0x63b4454c
add qword ptr [rsp + 0x18], 0x35f02a7f; sub
mov r13, rbx
=== 9924
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1856
add rsp, 1856
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rsi
mov r13, r13
=== 9925
mov rbx, r13
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r12
mov r10b, byte ptr [rdi]
mov rax, 0xff
shl rax, 0x10
not rax
and rbx, rax
movzx rax, r10b
shl rax, 0x10
or rbx, rax
=== 9926
mov r15, rbx
push r15
mov r14, rsp
mov r12, rbx
=== 9927
mov rcx, r14
mov r12, r12
push rcx
push 0x385642b4
push 0x66ce1d0b
push 0x380907d3
push 0x65870ef0
=== 9928
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r8
mov r14, r12
movzx rbp, bpl
=== 9929
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x10f36f309
add r10, 0x30d27fb7; sub_carry
mov r10, qword ptr [r10 + 0x580]
add r10, rbp
mov sil, byte ptr [r10]
movzx rsi, sil
shl rsi, 0x20
sub r14, rsi
mov rbp, r14
movabs rdi, 0xd8660e04
add rdi, 0x67a35cbc; sub
=== 9930
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1408
add rsp, 1408
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov r14, rbp
=== 9931
mov rbp, r14
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov dl, byte ptr [rdx]
mov r12, 0xff
shl r12, 0x18
not r12
and rbp, r12
movzx r12, dl
shl r12, 0x18
or rbp, r12
=== 9932
mov rdx, rbp
push rdx
mov rsi, rsp
mov r14, rbp
=== 9933
mov rsi, rsi
mov r14, r14
push rsi
push 0x549668fe
push 0x24b163e2
push 0x5c7d275e
=== 9934
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov r14, r14
movzx rdi, dil
=== 9935
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x11b9f14b9
add r8, 0x246a5e07; sub_carry
mov r8, qword ptr [r8 + 0x7f8]
add r8, rdi
mov r15b, byte ptr [r8]
movzx r15, r15b
shl r15, 0x28
sub r14, r15
mov rdi, r14
movabs r15, 0x11c8e4bde
add r15, 0x237b1ee2; sub
=== 9936
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rcx
mov r14, rdi
=== 9937
mov r14, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov sil, byte ptr [r10]
mov rax, 0xff
shl rax, 0x20
not rax
and r14, rax
movzx rax, sil
shl rax, 0x20
or r14, rax
=== 9938
mov rsi, r14
push rsi
mov r12, rsp
mov r13, r14
=== 9939
mov r15, r12
mov r12, r13
push r15
push 0x47c64fe3
push 0x61506b5c
push 0x4a3b1600
=== 9940
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rax
mov r13, r12
movzx rbx, bl
=== 9941
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xdf6167c3
add rax, 0x60a80afd; sub_carry
mov rax, qword ptr [rax + 0x7f8]
add rax, rbx
mov dil, byte ptr [rax]
movzx rdi, dil
shl rdi, 0x30
sub r13, rdi
mov rdi, r13
movabs r13, 0xe55529ca
add r13, 0x5ab440f6; sub
=== 9942
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov rsi, rdi
=== 9943
mov rsi, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov r15b, byte ptr [r9]
mov r10, 0xff
shl r10, 0x28
not r10
and rsi, r10
movzx r10, r15b
shl r10, 0x28
or rsi, r10
=== 9944
mov rax, rsi
push rax
mov r12, rsp
mov rsi, rsi
=== 9945
mov r13, r12
mov r12, rsi
push r13
push 0x3d7f177b
push 0x6c291cdf
push 0x199b50fd
push 0x40167454
=== 9946
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov r14, r12
movzx r15, r15b
=== 9947
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x116253bd5
add r13, 0x29e436eb; sub_carry
mov r13, qword ptr [r13 + 0x7f8]
add r13, r15
mov r13b, byte ptr [r13]
movzx r13, r13b
shl r13, 0x38
sub r14, r13
movabs r10, 0x1131c3760
push r10
push 0x1a391237
push 0x18f7117f
push 0x798c2925
add qword ptr [rsp + 0x18], 0x2ced3360; sub
mov r13, r14
=== 9948
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r15
mov rsi, r13
=== 9949
mov r14, rsi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r15
mov cl, byte ptr [r12]
mov r10, 0xff
shl r10, 0x30
not r10
and r14, r10
movzx r10, cl
shl r10, 0x30
or r14, r10
=== 9950
mov rdx, r14
push rdx
mov r13, rsp
mov rbp, r14
=== 9951
mov r12, r13
mov r13, rbp
push r12
push 0x7b5b4009
push 0x3c2b6ef5
push 0x7433526c
push 0x3d3a377f
=== 9952
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rcx
mov r15, r13
movzx rdi, dil
=== 9953
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, r15
movabs rbp, 0x10d032978
add rbp, 0x33064148; sub
=== 9954
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbp
mov rdi, rdi
=== 9955
mov rsi, rdi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbx
mov bpl, byte ptr [rbx]
mov rcx, 0xff
shl rcx, 0x38
not rcx
and rsi, rcx
movzx rcx, bpl
shl rcx, 0x38
or rsi, rcx
=== 9956
mov r15, rsi
push r15
mov rbp, rsp
mov rdi, rsi
=== 9957
mov r10, rbp
mov r13, rdi
push r10
push 0xf537e70
push 0x63202c68
push 0x79715d81
=== 9958
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbp
mov r15, r13
movzx r12, r12b
=== 9959
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r15
movabs r15, 0xc6bc1fb6
add r15, 0x794d230a
=== 9960
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r9
mov rdi, rbp
=== 9961
mov r13, rdi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov r14b, byte ptr [r10]
mov rax, 0xff
shl rax, 8
not rax
and r13, rax
movzx rax, r14b
shl rax, 8
or r13, rax
=== 9962
mov r12, r13
push r12
mov rdi, rsp
mov rsi, r13
=== 9963
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r12
mov r12, rsi
movzx rbx, bl
=== 9964
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x1351f2bca
push r12
push 0x4e5607b4
push 0x6fb22e9d
push 0x4d5f4b66
push 0x92c03f0
add qword ptr [rsp + 0x20], 0xaea16f6
mov r12, r12
=== 9965
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbp
mov rdi, r12
=== 9966
mov r14, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r13
mov r9b, byte ptr [rax]
mov rsi, 0xff
shl rsi, 0x28
not rsi
and r14, rsi
movzx rsi, r9b
shl rsi, 0x28
or r14, rsi
=== 9967
mov rbp, r14
movabs r12, 0x10a75062d
add r12, 0x358b0bc3
test rbp, rbp
lea rbp, [rip - 0x459c95]
cmovne rbp, r12
jmp rbp
=== 9968
movabs rbx, 0x123064c4e
push rbx
push 0xcb84f2b
push 0xc3b3d76
push 0x104f655e
push 0x2c6021c1
add qword ptr [rsp + 0x20], 0x1d836c9a; input
=== 9969
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r10
movzx r14, r14b
=== 9970
mov rax, r14
mov r15, 0xffffffffeb833568
add r15, 0x14d06f78
push r15
mul qword ptr [rsp]
mov rdi, rax
=== 9971
mov rax, rdi
push rax
mov r12, rsp
mov r15, rdi
=== 9972
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r13
mov r12, r15
movzx rbx, bl
=== 9973
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xea4e257a
add r14, 0x55bb4d46; sub_carry
mov r14, qword ptr [r14 + 0x1f0]
add r14, rbx
mov r8b, byte ptr [r14]
movzx r8, r8b
shl r8, 8
sub r12, r8
movabs rbp, 0x1115bfc71
push rbp
push 0x6ab96172
push 0x16c3328e
push 0x4ff242fd
add qword ptr [rsp + 0x18], 0x2ead6e4f; sub
mov rsi, r12
=== 9974
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 496
add rsp, 496
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r15
mov rbx, rsi
=== 9975
mov r13, rbx
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov r15b, byte ptr [rdx]
mov r13b, r15b
=== 9976
mov rdi, r13
push rdi
mov r13, rsp
mov rdi, r13
=== 9977
mov r11, r13
mov r12, rdi
push r11
push 0x1cc61b8e
push 0x604e2d04
push 0x28be7b55
push 0x566e1f2a
=== 9978
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r13
mov rbx, r12
movzx r14, r14b
=== 9979
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xfa952153
add rbp, 0x4574516d; sub_carry
mov rbp, qword ptr [rbp + 0x400]
add rbp, r14
mov r13b, byte ptr [rbp]
movzx r13, r13b
shl r13, 0x10
sub rbx, r13
mov r12, rbx
movabs rbx, 0xcc104695
add rbx, 0x73f9242b; sub
=== 9980
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1024
add rsp, 1024
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r10
mov rsi, r12
=== 9981
mov r13, rsi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rdi
mov bl, byte ptr [rbp]
mov rbp, 0xff
shl rbp, 8
not rbp
and r13, rbp
movzx rbp, bl
shl rbp, 8
or r13, rbp
=== 9982
mov r15, r13
push r15
mov rbx, rsp
mov r13, r13
=== 9983
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rsi
mov rbx, r13
movzx r12, r12b
=== 9984
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x129866e4b
add r8, 0x16830475; sub_carry
mov r8, qword ptr [r8 + 0x308]
add r8, r12
mov r15b, byte ptr [r8]
movzx r15, r15b
shl r15, 0x18
sub rbx, r15
mov rsi, rbx
movabs rbp, 0xf3c21396
add rbp, 0x4c47572a; sub
=== 9985
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 776
add rsp, 776
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rcx
mov r15, rsi
=== 9986
mov r12, r15
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rdi
mov r13b, byte ptr [rdi]
mov r11, 0xff
shl r11, 0x10
not r11
and r12, r11
movzx r11, r13b
shl r11, 0x10
or r12, r11
=== 9987
mov rax, r12
push rax
mov rbp, rsp
mov rbx, r12
=== 9988
mov r10, rbp
mov r15, rbx
push r10
push 0x33d66591
push 0x55fc759c
push 0x20420172
=== 9989
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r11
mov r14, r15
movzx r12, r12b
=== 9990
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x13ed209b3
add r15, 0x137690d; sub_carry
mov r15, qword ptr [r15 + 0x300]
add r15, r12
mov al, byte ptr [r15]
movzx rax, al
shl rax, 0x20
sub r14, rax
movabs r12, 0x11b3f3ce5
push r12
push 0x13665147
push 0x247f43f4
push 0x7f5b676f
add qword ptr [rsp + 0x18], 0x24ca2ddb; sub
mov rbp, r14
=== 9991
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 768
add rsp, 768
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov rdi, rbp
=== 9992
mov r13, rdi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rsi
mov bpl, byte ptr [r14]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and r13, rcx
movzx rcx, bpl
shl rcx, 0x18
or r13, rcx
=== 9993
mov rbx, r13
push rbx
mov rbx, rsp
mov rdi, r13
=== 9994
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov r12, rdi
movzx r13, r13b
=== 9995
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xe7b748bf
add r12, 0x58522a01; sub_carry
mov r12, qword ptr [r12]
add r12, r13
mov al, byte ptr [r12]
movzx rax, al
shl rax, 0x28
sub r12, rax
mov rsi, r12
movabs rdi, 0xe7090f8c
add rdi, 0x59005b34; sub
=== 9996
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov rbp, rsi
=== 9997
mov r15, rbp
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r14
mov dil, byte ptr [r11]
mov r8, 0xff
shl r8, 0x20
not r8
and r15, r8
movzx r8, dil
shl r8, 0x20
or r15, r8
=== 9998
mov r11, r15
push r11
mov r13, rsp
mov rdi, r15
=== 9999
mov r10, r13
mov rbp, rdi
push r10
push 0x5f314f6b
push 0x5eba3c21
push 0x200b7021
=== 10000
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdi
mov r13, rbp
movzx rbp, bpl
=== 10001
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x126ac608c
add rbx, 0x195d1234; sub_carry
mov rbx, qword ptr [rbx]
add rbx, rbp
mov dl, byte ptr [rbx]
movzx rdx, dl
shl rdx, 0x38
sub r13, rdx
mov r14, r13
movabs r15, 0x13879155f
add r15, 0x7905561; sub
=== 10002
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov rbp, r14
=== 10003
mov rbx, rbp
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov r15b, byte ptr [rcx]
mov rdx, 0xff
shl rdx, 0x30
not rdx
and rbx, rdx
movzx rdx, r15b
shl rdx, 0x30
or rbx, rdx
=== 10004
mov rbx, rbx
movabs rbp, 0x1181d7454
add rbp, 0x286c4494; input
=== 10005
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 16
add rsp, 16
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov rbp, rbx
movzx r15, r15b
=== 10006
mov rax, r15
mov rbx, 0xffffffffff5656a3
add rbx, 0x1456937
push rbx
mov r12, rbp
mul qword ptr [rsp]
mov rbp, rax
=== 10007
mov r15, r12
sub r15, rbp
=== 10008
mov rbx, r15
push rbx
mov r12, rsp
mov rbp, r15
=== 10009
mov rax, r12
mov rbx, rbp
push rax
push 0x634133c8
push 0x20ae17f5
push 0x5fff0174
=== 10010
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r10
mov r15, rbx
movzx r14, r14b
=== 10011
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x1119d2fc8
add r15, 0x2e6c32f8; add_carry
mov r15, qword ptr [r15 + 0x788]
add r15, r14
mov r12b, byte ptr [r15]
movzx r12, r12b
shl r12, 8
add r15, r12
mov r13, r15
movabs rdi, 0x11d510907
add rdi, 0x22b851b9; add
=== 10012
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1928
add rsp, 1928
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r15
mov r13, r13
=== 10013
mov r13, r13
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbp
mov bl, byte ptr [rsi]
mov r13b, bl
=== 10014
mov r15, r13
push r15
mov r15, rsp
mov r12, r13
=== 10015
mov r10, r15
mov r13, r12
push r10
push 0x38fd3d4d
push 0x5a5d0204
push 0x68613ff8
push 0x4b2151b1
=== 10016
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov rdi, r13
movzx rbp, bpl
=== 10017
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xd3cbe57f
add r8, 0x6c3d7d41; add_carry
mov r8, qword ptr [r8 + 0x418]
add r8, rbp
mov r8b, byte ptr [r8]
movzx r8, r8b
shl r8, 0x10
add rdi, r8
movabs rcx, 0x1158ee70f
push rcx
push 0x519160b0
push 0x28021ad5
push 0xe354f7d
add qword ptr [rsp + 0x18], 0x2a7a73b1; add
mov rbx, rdi
=== 10018
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1048
add rsp, 1048
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbp
mov rbp, rbx
=== 10019
mov r15, rbp
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r13
mov r9b, byte ptr [r14]
mov rsi, 0xff
shl rsi, 8
not rsi
and r15, rsi
movzx rsi, r9b
shl rsi, 8
or r15, rsi
=== 10020
mov r11, r15
push r11
mov r15, rsp
mov rsi, r15
=== 10021
mov r12, r15
mov r13, rsi
push r12
push 0x36467019
push 0x76502071
push 0x65b51840
=== 10022
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdi
mov r14, r13
movzx rdi, dil
=== 10023
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xd1672de7
add rbx, 0x6ea234d9; add_carry
mov rbx, qword ptr [rbx + 0x598]
add rbx, rdi
mov bpl, byte ptr [rbx]
movzx rbp, bpl
shl rbp, 0x18
add r14, rbp
movabs r8, 0xeedff071
push r8
push 0x62e66a6b
push 0x3e1b63a0
push 0x17620720
add qword ptr [rsp + 0x18], 0x51296a4f; add
mov rsi, r14
=== 10024
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1432
add rsp, 1432
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r8
mov rdi, rsi
=== 10025
mov r12, rdi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r13
mov r15b, byte ptr [rsi]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and r12, rbp
movzx rbp, r15b
shl rbp, 0x10
or r12, rbp
=== 10026
mov rsi, r12
push rsi
mov r15, rsp
mov rsi, r12
=== 10027
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdi
mov rsi, rsi
movzx r14, r14b
=== 10028
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x1351726a9
add r8, 0xaf23c17; add_carry
mov r8, qword ptr [r8 + 0x348]
add r8, r14
mov r8b, byte ptr [r8]
movzx r8, r8b
shl r8, 0x20
add rsi, r8
movabs r11, 0x10016fcb8
push r11
push 0x4bd16903
push 0x592b6a16
push 0x5687146f
add qword ptr [rsp + 0x18], 0x3ff25e08; add
mov r13, rsi
=== 10029
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 840
add rsp, 840
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov r15, r13
=== 10030
mov r14, r15
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r14
mov r11b, byte ptr [r12]
mov r13, 0xff
shl r13, 0x18
not r13
and r14, r13
movzx r13, r11b
shl r13, 0x18
or r14, r13
=== 10031
movabs r10, 0xd6986166
push r10
push 0x69b40980
push 0x6ca80222
push 0x1b6d34d9
push 0x10b110b9
add qword ptr [rsp + 0x20], 0x69f15782; input
mov rbx, r14
=== 10032
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 24
add rsp, 24
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rsi
mov rbp, rbx
movzx r15, r15b
=== 10033
mov rax, r15
mov rsi, 0xffffffffd8b8d4bf
add rsi, 0x27b263eb
push rsi
mov rsi, rbp
mul qword ptr [rsp]
mov r12, rax
=== 10034
mov rbp, rsi
sub rbp, r12
=== 10035
mov rcx, rbp
push rcx
mov rdi, rsp
mov r14, rbp
=== 10036
mov rdx, rdi
mov rbx, r14
push rdx
push 0x21681041
push 0x7f917670
push 0x1a3b2671
push 0x7f7f1baa
=== 10037
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov r13, rbx
movzx rsi, sil
=== 10038
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xfe0a1714
add r14, 0x41ff5bac; sub_carry
mov r14, qword ptr [r14 + 0x500]
add r14, rsi
mov bl, byte ptr [r14]
movzx rbx, bl
shl rbx, 8
sub r13, rbx
movabs r12, 0xdcf4502a
push r12
push 0x27815c32
push 0x398e5653
push 0x6d01af9
push 0x21de61b2
add qword ptr [rsp + 0x20], 0x63151a96; sub
mov rsi, r13
=== 10039
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1280
add rsp, 1280
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov rbx, rsi
=== 10040
mov r13, rbx
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r14
mov dl, byte ptr [r12]
mov r13b, dl
=== 10041
mov r8, r13
push r8
mov r12, rsp
mov rdi, r13
=== 10042
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov r13, rdi
movzx rsi, sil
=== 10043
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xdd753bb6
add rcx, 0x6294370a; sub_carry
mov rcx, qword ptr [rcx + 0xb8]
add rcx, rsi
mov sil, byte ptr [rcx]
movzx rsi, sil
shl rsi, 0x10
sub r13, rsi
mov r14, r13
movabs r12, 0xe4ce4a8b
add r12, 0x5b3b2035; sub
=== 10044
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 184
add rsp, 184
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdi
mov rdi, r14
=== 10045
mov r15, rdi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r15
mov al, byte ptr [rbp]
mov r9, 0xff
shl r9, 8
not r9
and r15, r9
movzx r9, al
shl r9, 8
or r15, r9
=== 10046
mov rax, r15
push rax
mov r13, rsp
mov rbx, r15
=== 10047
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov rbx, rbx
movzx rsi, sil
=== 10048
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x1023f6976
add r15, 0x3dca094a; sub_carry
mov r15, qword ptr [r15 + 0x98]
add r15, rsi
mov dil, byte ptr [r15]
movzx rdi, dil
shl rdi, 0x18
sub rbx, rdi
movabs r11, 0xfaef2beb
push r11
push 0x175e0b33
push 0x5d05be9
push 0x2c44970
add qword ptr [rsp + 0x18], 0x451a3ed5; sub
mov r12, rbx
=== 10049
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 152
add rsp, 152
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rbx
mov rbx, r12
=== 10050
mov r12, rbx
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rsi
mov sil, byte ptr [r15]
mov r15, 0xff
shl r15, 0x10
not r15
and r12, r15
movzx r15, sil
shl r15, 0x10
or r12, r15
=== 10051
mov rdx, r12
push rdx
mov rsi, rsp
mov r14, r12
=== 10052
mov r10, rsi
mov rsi, r14
push r10
push 0x2a573c94
push 0x19e27e66
push 0x5a1c7167
push 0x780b4fca
=== 10053
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov r13, rsi
movzx rbp, bpl
=== 10054
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xde882af1
add r12, 0x618147cf; sub_carry
mov r12, qword ptr [r12 + 0x4b8]
add r12, rbp
mov bpl, byte ptr [r12]
movzx rbp, bpl
shl rbp, 0x20
sub r13, rbp
mov rbx, r13
movabs r14, 0xed0f1f30
add r14, 0x52fa4b90; sub
=== 10055
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1208
add rsp, 1208
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov r13, rbx
=== 10056
mov rsi, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov dil, byte ptr [rax]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and rsi, rcx
movzx rcx, dil
shl rcx, 0x18
or rsi, rcx
=== 10057
mov r15, rsi
push r15
mov r13, rsp
mov rbp, rsi
=== 10058
mov rdi, r13
mov rbx, rbp
push rdi
push 0x34d52947
push 0x18636736
push 0x6e8d15a0
push 0x369443a
=== 10059
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov r14, rbx
movzx r15, r15b
=== 10060
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xc3c40d1c
add rbx, 0x7c4565a4; sub_carry
mov rbx, qword ptr [rbx]
add rbx, r15
mov sil, byte ptr [rbx]
movzx rsi, sil
shl rsi, 0x28
sub r14, rsi
mov rbp, r14
movabs r13, 0xf4696124
add r13, 0x4ba0099c; sub
=== 10061
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r12
mov r12, rbp
=== 10062
mov r14, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov bpl, byte ptr [rdx]
mov rdx, 0xff
shl rdx, 0x20
not rdx
and r14, rdx
movzx rdx, bpl
shl rdx, 0x20
or r14, rdx
=== 10063
mov rcx, r14
push rcx
mov r15, rsp
mov r13, r14
=== 10064
mov rdx, r15
mov r12, r13
push rdx
push 0x1abe6361
push 0x37c77578
push 0x518a3a8f
push 0x7341bc8
=== 10065
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov rdi, r12
movzx r15, r15b
=== 10066
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xfb5e0190
add rbp, 0x44ab7130; sub_carry
mov rbp, qword ptr [rbp]
add rbp, r15
mov r12b, byte ptr [rbp]
movzx r12, r12b
shl r12, 0x30
sub rdi, r12
mov r15, rdi
movabs rbx, 0xd6615c0f
add rbx, 0x69a80eb1; sub
=== 10067
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov r14, r15
=== 10068
mov rdi, r14
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rsi
mov dl, byte ptr [rdx]
mov r14, 0xff
shl r14, 0x28
not r14
and rdi, r14
movzx r14, dl
shl r14, 0x28
or rdi, r14
=== 10069
mov r14, rdi
push r14
mov rdi, rsp
mov r13, rdi
=== 10070
mov r12, rdi
mov r14, r13
push r12
push 0x280149ac
push 0x4b695184
push 0x35ce6e9c
=== 10071
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbx
mov r15, r14
movzx rbp, bpl
=== 10072
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, r15
movabs rsi, 0x107af30bf
add rsi, 0x385a3a01; sub
=== 10073
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rax
mov r13, rdi
=== 10074
mov r14, r13
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r15
mov al, byte ptr [r11]
mov r11, 0xff
shl r11, 0x38
not r11
and r14, r11
movzx r11, al
shl r11, 0x38
or r14, r11
=== 10075
mov rsi, r14
movabs r15, 0xcca442ba
add r15, 0x73e5762e; input
=== 10076
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 20
add rsp, 20
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r14
mov r14, rsi
movzx r15, r15b
=== 10077
mov rax, r15
mov r11, 0xffffffffa85e1681
add r11, 0x57ff0fee
push r11
mov r12, r14
mul qword ptr [rsp]
mov rbx, rax
=== 10078
mov r15, r12
add r15, rbx
=== 10079
mov rbx, r15
push rbx
mov rbx, rsp
mov r15, r15
=== 10080
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r13
mov r14, r15
movzx r13, r13b
=== 10081
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x139f15269
add rbx, 0x6181057; add_carry
mov rbx, qword ptr [rbx + 0x300]
add rbx, r13
mov r15b, byte ptr [rbx]
movzx r15, r15b
shl r15, 8
add r14, r15
mov r14, r14
movabs rsi, 0x12874ddba
add rsi, 0x17947d06; add
=== 10082
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 768
add rsp, 768
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov r14, r14
=== 10083
mov r15, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov dl, byte ptr [r11]
mov r15b, dl
=== 10084
mov r15, r15
push r15
mov r13, rsp
mov rsi, r15
=== 10085
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov rsi, rsi
movzx r15, r15b
=== 10086
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xf4084740
add rsi, 0x4c011b80; add_carry
mov rsi, qword ptr [rsi + 0x70]
add rsi, r15
mov bl, byte ptr [rsi]
movzx rbx, bl
shl rbx, 0x10
add rsi, rbx
movabs rsi, 0xe7aafb03
push rsi
push 0x43bc4d4d
push 0x71744ba7
push 0x1c1209d3
add qword ptr [rsp + 0x18], 0x585e5fbd; add
mov r13, rsi
=== 10087
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 112
add rsp, 112
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r12
mov r13, r13
=== 10088
mov rbp, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbp
mov r11b, byte ptr [r15]
mov rcx, 0xff
shl rcx, 8
not rcx
and rbp, rcx
movzx rcx, r11b
shl rcx, 8
or rbp, rcx
=== 10089
mov r10, rbp
push r10
mov rsi, rsp
mov rbx, rbp
=== 10090
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov rbx, rbx
movzx r15, r15b
=== 10091
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xfd180ec3
add r10, 0x42f153fd; add_carry
mov r10, qword ptr [r10 + 0x258]
add r10, r15
mov r13b, byte ptr [r10]
movzx r13, r13b
shl r13, 0x18
add rbx, r13
movabs r10, 0xed9b24f0
push r10
push 0x7b465dd6
push 0x795579aa
push 0x50754cfe
push 0x56962846
add qword ptr [rsp + 0x20], 0x526e35d0; add
mov r14, rbx
=== 10092
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 600
add rsp, 600
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov r15, r14
=== 10093
mov r15, r15
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r13
mov r12b, byte ptr [rbx]
mov r8, 0xff
shl r8, 0x10
not r8
and r15, r8
movzx r8, r12b
shl r8, 0x10
or r15, r8
=== 10094
mov r15, r15
push r15
mov r14, rsp
mov r13, r15
=== 10095
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r14
mov rdi, r13
movzx rbp, bpl
=== 10096
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xd0f506af
add r13, 0x6f145c11; add_carry
mov r13, qword ptr [r13 + 0x2d0]
add r13, rbp
mov r14b, byte ptr [r13]
movzx r14, r14b
shl r14, 0x20
add rdi, r14
movabs r12, 0xdb9fe7f2
push r12
push 0x6e1d4ed1
push 0x181f601e
push 0x42ef0cfe
push 0x1fb0755
add qword ptr [rsp + 0x20], 0x646972ce; add
mov r12, rdi
=== 10097
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 720
add rsp, 720
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r14
mov rbx, r12
=== 10098
mov rbp, rbx
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rsi
mov sil, byte ptr [rdx]
mov r15, 0xff
shl r15, 0x18
not r15
and rbp, r15
movzx r15, sil
shl r15, 0x18
or rbp, r15
=== 10099
mov rbp, rbp
push rbp
mov r14, rsp
mov rbx, rbp
=== 10100
mov r8, r14
mov r12, rbx
push r8
push 0x1fdc0cb2
push 0x7143791f
push 0x61750881
=== 10101
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdi
mov r15, r12
movzx rdi, dil
=== 10102
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xed9c0517
add rdi, 0x526d5da9; add_carry
mov rdi, qword ptr [rdi]
add rdi, rdi
mov dl, byte ptr [rdi]
movzx rdx, dl
shl rdx, 0x38
add r15, rdx
movabs rax, 0x110b92fae
push rax
push 0x31145336
push 0x633687b
push 0x19e47c74
add qword ptr [rsp + 0x18], 0x2f502b12; add
mov rbx, r15
=== 10103
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov rsi, rbx
=== 10104
mov rdi, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov r9b, byte ptr [r9]
mov r12, 0xff
shl r12, 0x30
not r12
and rdi, r12
movzx r12, r9b
shl r12, 0x30
or rdi, r12
=== 10105
mov rdi, rdi
push rdi
mov rbp, rsp
mov r14, rdi
=== 10106
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r10
mov r13, r14
movzx r15, r15b
=== 10107
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r13
movabs rbp, 0xfdbc52ec
add rbp, 0x424d07d4; add
=== 10108
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov r12, r12
=== 10109
mov rdi, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r15
mov r10b, byte ptr [r10]
mov rdx, 0xff
shl rdx, 0x38
not rdx
and rdi, rdx
movzx rdx, r10b
shl rdx, 0x38
or rdi, rdx
=== 10110
mov rsi, rdi
movabs r14, 0x11d0a5890
add r14, 0x237f6058; input
=== 10111
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 8
add rsp, 8
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r13
mov r15, rsi
movzx rbx, bl
=== 10112
mov rax, rbx
mov rbx, 0xffffffffc589597d
add rbx, 0x3b646a56
push rbx
mov rsi, r15
mul qword ptr [rsp]
mov rbp, rax
=== 10113
mov r13, rsi
sub r13, rbp
=== 10114
mov r15, r13
push r15
mov rbx, rsp
mov r14, r13
=== 10115
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov rbx, r14
movzx rbp, bpl
=== 10116
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x1118144f5
push rbp
push 0x6bfc2266
push 0x5d71159
push 0x6c1979ca
add qword ptr [rsp + 0x18], 0x2e8805cb; xor
mov r15, rbx
=== 10117
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1968
add rsp, 1968
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdi
mov r14, r15
=== 10118
mov r14, r14
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rdi
mov r10b, byte ptr [rbx]
mov r14b, r10b
=== 10119
mov r8, r14
push r8
mov r14, rsp
mov rdi, r14
=== 10120
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov rbx, rdi
movzx rdi, dil
=== 10121
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x11305f20d
push r12
push 0x17d91406
push 0x343073bb
push 0x58ec17f5
push 0x6d950f5a
add qword ptr [rsp + 0x20], 0x2d0358b3; xor
mov r13, rbx
=== 10122
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1232
add rsp, 1232
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rax
mov rdi, r13
=== 10123
mov r14, rdi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r12
mov r11b, byte ptr [r15]
mov r12, 0xff
shl r12, 8
not r12
and r14, r12
movzx r12, r11b
shl r12, 8
or r14, r12
=== 10124
mov rax, r14
push rax
mov rdi, rsp
mov r13, r14
=== 10125
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
mov rbx, r13
movzx r12, r12b
=== 10126
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rbx
movabs rdi, 0xdcc8fde3
add rdi, 0x63404cdd; xor
=== 10127
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1832
add rsp, 1832
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rsi
mov rbp, r15
=== 10128
mov r13, rbp
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov cl, byte ptr [r11]
mov r15, 0xff
shl r15, 0x10
not r15
and r13, r15
movzx r15, cl
shl r15, 0x10
or r13, r15
=== 10129
mov rsi, r13
push rsi
mov r14, rsp
mov r15, r13
=== 10130
mov rsi, r14
mov r14, r15
push rsi
push 0x1274772f
push 0x685c3113
push 0x7db91bc3
=== 10131
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov r13, r14
movzx r12, r12b
=== 10132
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x11d122efa
push r10
push 0x608f2f17
push 0x57a559c9
push 0x74692a22
add qword ptr [rsp + 0x18], 0x22f71bc6; xor
mov r15, r13
=== 10133
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1176
add rsp, 1176
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r12
mov r14, r15
=== 10134
mov r15, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rsi
mov r8b, byte ptr [r10]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and r15, rcx
movzx rcx, r8b
shl rcx, 0x18
or r15, rcx
=== 10135
mov r8, r15
push r8
mov rsi, rsp
mov rbp, r15
=== 10136
mov rcx, rsi
mov rbp, rbp
push rcx
push 0x1dd34db7
push 0x5b963777
push 0x7a7a2f46
push 0x79803621
=== 10137
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r10
mov rdi, rbp
movzx r13, r13b
=== 10138
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x10f86f4d2
push rdi
push 0x124e043e
push 0xa317141
push 0x230f6a78
push 0x4e1a7466
add qword ptr [rsp + 0x20], 0x308255ee; xor
mov r13, rdi
=== 10139
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov r12, r13
=== 10140
mov rdi, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r15
mov bpl, byte ptr [r10]
mov r9, 0xff
shl r9, 0x20
not r9
and rdi, r9
movzx r9, bpl
shl r9, 0x20
or rdi, r9
=== 10141
mov rdi, rdi
push rdi
mov r14, rsp
mov rbx, rdi
=== 10142
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r13
mov rsi, rbx
movzx rbp, bpl
=== 10143
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xe3fc1770
push rsi
push 0x3ec794a
push 0x176b02eb
push 0x2d531ae1
add qword ptr [rsp + 0x18], 0x5c0d3350; xor
mov r15, rsi
=== 10144
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdx
mov r12, r15
=== 10145
mov r12, r12
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r14
mov dl, byte ptr [rbx]
mov r11, 0xff
shl r11, 0x28
not r11
and r12, r11
movzx r11, dl
shl r11, 0x28
or r12, r11
=== 10146
mov rcx, r12
push rcx
mov r14, rsp
mov r13, r12
=== 10147
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov rbp, r13
movzx r14, r14b
=== 10148
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rbp
movabs r12, 0xdb4933f1
add r12, 0x64c016cf; xor
=== 10149
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rcx
mov rdi, r14
=== 10150
mov rdi, rdi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r15
mov r10b, byte ptr [r8]
mov rax, 0xff
shl rax, 0x30
not rax
and rdi, rax
movzx rax, r10b
shl rax, 0x30
or rdi, rax
=== 10151
mov r12, rdi
movabs rsi, 0x10de38bc7
add rsi, 0x32a62d21; input
=== 10152
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov rdi, r12
movzx rsi, sil
=== 10153
mov rax, rsi
mov r15, 0xffffffffe6f79523
add r15, 0x19ba5c49
push r15
mov r13, rdi
mul qword ptr [rsp]
mov rdi, rax
=== 10154
mov rbx, r13
sub rbx, rdi
=== 10155
mov rbp, rbx
push rbp
mov r13, rsp
mov rbp, rbx
=== 10156
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r12
mov r15, rbp
movzx rbx, bl
=== 10157
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r15
movabs rdi, 0x110c34a81
add rdi, 0x2f46003f; xor
=== 10158
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1352
add rsp, 1352
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rax
mov rdi, rbp
=== 10159
mov r14, rdi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r12
mov r8b, byte ptr [rbx]
mov r14b, r8b
=== 10160
mov r12, r14
push r12
mov r12, rsp
mov rbx, r14
=== 10161
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov r15, rbx
movzx r13, r13b
=== 10162
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x115b927cf
push r11
push 0x7e6e158f
push 0x134e77ed
push 0x521d7cff
add qword ptr [rsp + 0x18], 0x2a5022f1; xor
mov r14, r15
=== 10163
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1480
add rsp, 1480
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rsi
mov r13, r14
=== 10164
mov rsi, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov r8b, byte ptr [rax]
mov rbx, 0xff
shl rbx, 8
not rbx
and rsi, rbx
movzx rbx, r8b
shl rbx, 8
or rsi, rbx
=== 10165
mov rcx, rsi
push rcx
mov r12, rsp
mov rsi, rsi
=== 10166
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov r14, rsi
movzx rbx, bl
=== 10167
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x11f5aea4d
push rcx
push 0x7172260c
push 0x1ae033af
push 0x32b4a02
push 0x7af12d07
add qword ptr [rsp + 0x20], 0x20ae6073; xor
mov rbp, r14
=== 10168
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1680
add rsp, 1680
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rsi
mov r12, rbp
=== 10169
mov rdi, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rdi
mov bl, byte ptr [r13]
mov r9, 0xff
shl r9, 0x10
not r9
and rdi, r9
movzx r9, bl
shl r9, 0x10
or rdi, r9
=== 10170
mov rcx, rdi
push rcx
mov r13, rsp
mov rsi, rdi
=== 10171
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov rbp, rsi
movzx r14, r14b
=== 10172
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, rbp
movabs rbx, 0xdd2c0d68
add rbx, 0x62dd3d58; xor
=== 10173
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1856
add rsp, 1856
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rsi
mov rdi, r15
=== 10174
mov rsi, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r14
mov al, byte ptr [rdx]
mov r8, 0xff
shl r8, 0x18
not r8
and rsi, r8
movzx r8, al
shl r8, 0x18
or rsi, r8
=== 10175
mov r10, rsi
push r10
mov r12, rsp
mov rbx, rsi
=== 10176
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r11
mov r15, rbx
movzx r13, r13b
=== 10177
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r15
movabs rbp, 0x116840c28
add rbp, 0x29853e98; xor
=== 10178
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov rbp, rbx
=== 10179
mov r13, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r14
mov r9b, byte ptr [rdx]
mov r15, 0xff
shl r15, 0x20
not r15
and r13, r15
movzx r15, r9b
shl r15, 0x20
or r13, r15
=== 10180
mov r10, r13
push r10
mov rdi, rsp
mov rsi, r13
=== 10181
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbx
mov rbp, rsi
movzx rbx, bl
=== 10182
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x104be2757
push rsi
push 0x485b2e54
push 0x300f774e
push 0x91a3eee
push 0x26233056
add qword ptr [rsp + 0x20], 0x3b4b2369; xor
mov rbp, rbp
=== 10183
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rax
mov r15, rbp
=== 10184
mov rbx, r15
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov bpl, byte ptr [r12]
mov rcx, 0xff
shl rcx, 0x28
not rcx
and rbx, rcx
movzx rcx, bpl
shl rcx, 0x28
or rbx, rcx
=== 10185
mov rax, rbx
push rax
mov r14, rsp
mov rdi, rbx
=== 10186
mov rbp, r14
mov r15, rdi
push rbp
push 0x2d61219f
push 0x73d95fb6
push 0x521c723d
push 0x11663988
=== 10187
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
mov r13, r15
movzx rbx, bl
=== 10188
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xfa8c4198
push r8
push 0x29749cf
push 0x55e971f5
push 0x48ef5654
push 0x347d52fc
add qword ptr [rsp + 0x20], 0x457d0928; xor
mov rsi, r13
=== 10189
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdi
mov rsi, rsi
=== 10190
mov r14, rsi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r15
mov r15b, byte ptr [rsi]
mov r8, 0xff
shl r8, 0x30
not r8
and r14, r8
movzx r8, r15b
shl r8, 0x30
or r14, r8
=== 10191
movabs r14, 0x10c6f6992
push r14
push 0x307642c9
push 0x14f36830
push 0x61225047
push 0x5f392948
add qword ptr [rsp + 0x20], 0x341a4f56; input
mov rbp, r14
=== 10192
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 12
add rsp, 12
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r12
mov rdi, rbp
movzx r13, r13b
=== 10193
mov rax, r13
mov r11, 0xffffffffc3af8d0f
add r11, 0x3c6d014c
push r11
mov rsi, rdi
mul qword ptr [rsp]
mov r14, rax
=== 10194
mov rdi, rsi
add rdi, r14
=== 10195
mov rcx, rdi
push rcx
mov r13, rsp
mov rbp, rdi
=== 10196
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov rdi, rbp
movzx r13, r13b
=== 10197
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x12de44601
add r8, 0x12252cbf; sub_carry
mov r8, qword ptr [r8 + 0x418]
add r8, r13
mov r13b, byte ptr [r8]
movzx r13, r13b
shl r13, 8
sub rdi, r13
movabs r11, 0xe5de080f
push r11
push 0x7db3550b
push 0x69564053
push 0x5d256798
add qword ptr [rsp + 0x18], 0x5a2b62b1; sub
mov rbx, rdi
=== 10198
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1048
add rsp, 1048
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rax
mov rbp, rbx
=== 10199
mov rbx, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r15
mov r12b, byte ptr [r12]
mov bl, r12b
=== 10200
mov r13, rbx
push r13
mov rbp, rsp
mov r13, rbx
=== 10201
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r10
mov rdi, r13
movzx rbp, bpl
=== 10202
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xd0a70154
add rax, 0x6f62716c; sub_carry
mov rax, qword ptr [rax + 0x490]
add rax, rbp
mov al, byte ptr [rax]
movzx rax, al
shl rax, 0x10
sub rdi, rax
movabs r10, 0x11d64f1c1
push r10
push 0x4ac14c98
push 0x545f4a2e
push 0x651679d2
add qword ptr [rsp + 0x18], 0x22a478ff; sub
mov rdi, rdi
=== 10203
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1168
add rsp, 1168
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov r12, rdi
=== 10204
mov r15, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r15
mov r11b, byte ptr [r10]
mov r9, 0xff
shl r9, 8
not r9
and r15, r9
movzx r9, r11b
shl r9, 8
or r15, r9
=== 10205
mov r11, r15
push r11
mov r15, rsp
mov r14, r15
=== 10206
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov rbx, r14
movzx rbp, bpl
=== 10207
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xc2ba05c9
add r13, 0x7d4f6cf7; sub_carry
mov r13, qword ptr [r13 + 0x418]
add r13, rbp
mov r13b, byte ptr [r13]
movzx r13, r13b
shl r13, 0x18
sub rbx, r13
movabs rbx, 0x10d34477f
push rbx
push 0x2b82540
push 0x4ec74399
push 0x498776be
add qword ptr [rsp + 0x18], 0x32d52341; sub
mov rbx, rbx
=== 10208
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1048
add rsp, 1048
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbp
mov r14, rbx
=== 10209
mov rsi, r14
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r12
mov cl, byte ptr [rbp]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and rsi, rbx
movzx rbx, cl
shl rbx, 0x10
or rsi, rbx
=== 10210
mov r15, rsi
push r15
mov r12, rsp
mov r13, rsi
=== 10211
mov rsi, r12
mov r15, r13
push rsi
push 0x13d71a6b
push 0x69dc0a29
push 0x4a6c037a
push 0x3aae2b87
=== 10212
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
mov r13, r15
movzx rsi, sil
=== 10213
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xc3aa3c6d
add r14, 0x7c5f3653; sub_carry
mov r14, qword ptr [r14 + 0x340]
add r14, rsi
mov al, byte ptr [r14]
movzx rax, al
shl rax, 0x20
sub r13, rax
mov rsi, r13
movabs r12, 0x12b9e4c24
add r12, 0x146b1e9c; sub
=== 10214
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 832
add rsp, 832
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r12
mov r13, rsi
=== 10215
mov r12, r13
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov r9b, byte ptr [rdx]
mov r14, 0xff
shl r14, 0x18
not r14
and r12, r14
movzx r14, r9b
shl r14, 0x18
or r12, r14
=== 10216
mov r12, r12
push r12
mov rbp, rsp
mov rdi, r12
=== 10217
mov rdx, rbp
mov r13, rdi
push rdx
push 0x500237e4
push 0x167462f3
push 0x38d47c68
=== 10218
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r13, r13
movzx rbx, bl
=== 10219
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xe8962e18
add rdx, 0x577344a8; sub_carry
mov rdx, qword ptr [rdx]
add rdx, rbx
mov r13b, byte ptr [rdx]
movzx r13, r13b
shl r13, 0x30
sub r13, r13
movabs r14, 0xcf6961e1
push r14
push 0x3f585ef6
push 0x71030775
push 0x4f443599
add qword ptr [rsp + 0x18], 0x70a008df; sub
mov r15, r13
=== 10220
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rax
mov rsi, r15
=== 10221
mov rbp, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbp
mov dl, byte ptr [r8]
mov r12, 0xff
shl r12, 0x28
not r12
and rbp, r12
movzx r12, dl
shl r12, 0x28
or rbp, r12
=== 10222
movabs r13, 0xf7244179
push r13
push 0x1d41692f
push 0x23c80969
push 0x4f301052
push 0x5cff7e12
add qword ptr [rsp + 0x20], 0x4965776f; input
mov r12, rbp
=== 10223
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 28
add rsp, 28
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbx
mov r13, r12
movzx rbx, bl
=== 10224
mov rax, rbx
mov r10, 0xffffffffe8a1e41c
add r10, 0x17d7125f
push r10
mov r13, r13
mul qword ptr [rsp]
mov r14, rax
=== 10225
mov r12, r13
add r12, r14
=== 10226
mov rax, r12
push rax
mov rsi, rsp
mov r12, r12
=== 10227
mov rcx, rsi
mov rdi, r12
push rcx
push 0x3fb916da
push 0x19953692
push 0x7b690616
push 0x65a2007d
=== 10228
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
mov r14, rdi
movzx r12, r12b
=== 10229
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xf449f9bf
add rsi, 0x4bbf7901; sub_carry
mov rsi, qword ptr [rsi + 0x448]
add rsi, r12
mov bpl, byte ptr [rsi]
movzx rbp, bpl
shl rbp, 8
sub r14, rbp
mov r15, r14
movabs r12, 0x106225a90
add r12, 0x39e71030; sub
=== 10230
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1096
add rsp, 1096
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rcx
mov r13, r15
=== 10231
mov rsi, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbp
mov r10b, byte ptr [rax]
mov sil, r10b
=== 10232
mov rcx, rsi
push rcx
mov r12, rsp
mov rdi, rsi
=== 10233
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r9
mov rsi, rdi
movzx r13, r13b
=== 10234
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xd00a4de3
add r15, 0x6fff24dd; sub_carry
mov r15, qword ptr [r15 + 0x6c0]
add r15, r13
mov bl, byte ptr [r15]
movzx rbx, bl
shl rbx, 0x10
sub rsi, rbx
movabs rdx, 0xfb144d20
push rdx
push 0x4be00cf8
push 0x73f91782
push 0x5fc0572c
push 0x6c94625d
add qword ptr [rsp + 0x20], 0x44f51da0; sub
mov rbx, rsi
=== 10235
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1728
add rsp, 1728
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov r12, rbx
=== 10236
mov rsi, r12
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r14
mov cl, byte ptr [r12]
mov r10, 0xff
shl r10, 8
not r10
and rsi, r10
movzx r10, cl
shl r10, 8
or rsi, r10
=== 10237
mov r15, rsi
push r15
mov rbx, rsp
mov r14, rsi
=== 10238
mov r14, rbx
mov rbp, r14
push r14
push 0x25670f38
push 0x76116061
push 0x47f16398
push 0x28b55468
=== 10239
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov r14, rbp
movzx rbx, bl
=== 10240
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xedc1f498
add r11, 0x52477e28; sub_carry
mov r11, qword ptr [r11 + 0x1e8]
add r11, rbx
mov r10b, byte ptr [r11]
movzx r10, r10b
shl r10, 0x18
sub r14, r10
mov r14, r14
movabs rsi, 0xeff1364d
add rsi, 0x50183473; sub
=== 10241
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 488
add rsp, 488
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov rdi, r14
=== 10242
mov r13, rdi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r15
mov al, byte ptr [r10]
mov r12, 0xff
shl r12, 0x10
not r12
and r13, r12
movzx r12, al
shl r12, 0x10
or r13, r12
=== 10243
mov r10, r13
push r10
mov rbx, rsp
mov r15, r13
=== 10244
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov r14, r15
movzx r12, r12b
=== 10245
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xf176f3f8
add r8, 0x4e927ec8; sub_carry
mov r8, qword ptr [r8 + 0x7a8]
add r8, r12
mov r13b, byte ptr [r8]
movzx r13, r13b
shl r13, 0x20
sub r14, r13
mov rsi, r14
movabs rdi, 0x12e0f0c49
add rdi, 0x11fa5e77; sub
=== 10246
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1960
add rsp, 1960
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rax
mov r13, rsi
=== 10247
mov rbp, r13
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov dil, byte ptr [r14]
mov r14, 0xff
shl r14, 0x18
not r14
and rbp, r14
movzx r14, dil
shl r14, 0x18
or rbp, r14
=== 10248
mov rdx, rbp
push rdx
mov rsi, rsp
mov r13, rbp
=== 10249
mov rbp, rsi
mov rdi, r13
push rbp
push 0x34e445f
push 0x398b589d
push 0x187e6e9f
push 0x11612ccd
=== 10250
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r10
mov r12, rdi
movzx rbp, bpl
=== 10251
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x11602136a
add r10, 0x2a075f56; sub_carry
mov r10, qword ptr [r10]
add r10, rbp
mov dl, byte ptr [r10]
movzx rdx, dl
shl rdx, 0x30
sub r12, rdx
mov r15, r12
movabs rdi, 0x13d8a1bbf
add rdi, 0x27f4f01; sub
=== 10252
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rsi
mov rbp, r15
=== 10253
mov r13, rbp
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rdi
mov r8b, byte ptr [rsi]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and r13, rdx
movzx rdx, r8b
shl rdx, 0x28
or r13, rdx
=== 10254
mov rcx, r13
push rcx
mov r15, rsp
mov rsi, r13
=== 10255
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov r13, rsi
movzx rbx, bl
=== 10256
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x1335656a8
add r15, 0xcb31c18; sub_carry
mov r15, qword ptr [r15]
add r15, rbx
mov dl, byte ptr [r15]
movzx rdx, dl
shl rdx, 0x38
sub r13, rdx
mov rdi, r13
movabs r14, 0xf27139c8
add r14, 0x4d9830f8; sub
=== 10257
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov r12, rdi
=== 10258
mov r14, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov r12b, byte ptr [rcx]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and r14, rsi
movzx rsi, r12b
shl rsi, 0x30
or r14, rsi
=== 10259
mov rcx, r14
push rcx
mov rsi, rsp
mov rbp, r14
=== 10260
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov r14, rbp
movzx rbx, bl
=== 10261
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x13eb14fee
push r11
push 0x6fba06e9
push 0x39c619ef
push 0x2c44598d
add qword ptr [rsp + 0x18], 0x1581ad2; sub
mov r15, r14
=== 10262
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov r14, r15
=== 10263
mov rsi, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rdi
mov r13b, byte ptr [r13]
mov rax, 0xff
shl rax, 0x38
not rax
and rsi, rax
movzx rax, r13b
shl rax, 0x38
or rsi, rax
=== 10264
mov r10, rsi
push r10
mov r14, rsp
mov rbx, rsi
=== 10265
mov r11, r14
mov rbx, rbx
push r11
push 0x6f6d3a44
push 0xc982957
push 0x5b941847
=== 10266
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdi
mov r15, rbx
movzx r12, r12b
=== 10267
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xf0900e34
add rsi, 0x4f79648c; sub_carry
mov rsi, qword ptr [rsi + 0x2e8]
add rsi, r12
mov r15b, byte ptr [rsi]
movzx r15, r15b
shl r15, 8
sub r15, r15
movabs rsi, 0xdc6f62b5
push rsi
push 0x3c380ff6
push 0x44491820
push 0x79e91a5d
add qword ptr [rsp + 0x18], 0x639a080b; sub
mov rsi, r15
=== 10268
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 744
add rsp, 744
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov r12, rsi
=== 10269
mov r15, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov sil, byte ptr [rdx]
mov r15b, sil
=== 10270
mov rbx, r15
push rbx
mov r14, rsp
mov rbp, r15
=== 10271
mov r8, r14
mov r14, rbp
push r8
push 0x4b2e2d7c
push 0x61354f76
push 0x76fa6c26
push 0x40542b4f
=== 10272
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
mov rsi, r14
movzx r12, r12b
=== 10273
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x1051cfa15
add rbp, 0x3aec78ab; sub_carry
mov rbp, qword ptr [rbp + 0x110]
add rbp, r12
mov r8b, byte ptr [rbp]
movzx r8, r8b
shl r8, 0x10
sub rsi, r8
movabs rdx, 0xe9f753c2
push rdx
push 0x23c41588
push 0x76e40b28
push 0x7e56056b
push 0x11231fdc
add qword ptr [rsp + 0x20], 0x561216fe; sub
mov rsi, rsi
=== 10274
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 272
add rsp, 272
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov r14, rsi
=== 10275
mov r13, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov r10b, byte ptr [r9]
mov rax, 0xff
shl rax, 8
not rax
and r13, rax
movzx rax, r10b
shl rax, 8
or r13, rax
=== 10276
mov r11, r13
push r11
mov r13, rsp
mov r14, r13
=== 10277
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbp
mov r14, r14
movzx rdi, dil
=== 10278
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x13eba36c7
add rdi, 0x14f3bf9; sub_carry
mov rdi, qword ptr [rdi + 0x558]
add rdi, rdi
mov r12b, byte ptr [rdi]
movzx r12, r12b
shl r12, 0x18
sub r14, r12
mov r14, r14
movabs rbp, 0xf2ba62dc
add rbp, 0x4d4f07e4; sub
=== 10279
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1368
add rsp, 1368
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdi
mov r14, r14
=== 10280
mov rbp, r14
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov r8b, byte ptr [rcx]
mov r10, 0xff
shl r10, 0x10
not r10
and rbp, r10
movzx r10, r8b
shl r10, 0x10
or rbp, r10
=== 10281
mov rdx, rbp
push rdx
mov rsi, rsp
mov r14, rbp
=== 10282
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov rbx, r14
movzx rbp, bpl
=== 10283
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x113b92d61
add rdx, 0x2c50455f; sub_carry
mov rdx, qword ptr [rdx + 0x270]
add rdx, rbp
mov r15b, byte ptr [rdx]
movzx r15, r15b
shl r15, 0x20
sub rbx, r15
mov r12, rbx
movabs rsi, 0xf32aef0e
add rsi, 0x4cde7bb2; sub
=== 10284
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 624
add rsp, 624
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r10
mov r12, r12
=== 10285
mov r12, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov r15b, byte ptr [r10]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r12, rsi
movzx rsi, r15b
shl rsi, 0x18
or r12, rsi
=== 10286
mov rbx, r12
push rbx
mov rbp, rsp
mov r13, r12
=== 10287
mov rsi, rbp
mov r13, r13
push rsi
push 0x77e368d7
push 0x6de76a5
push 0x6808402b
push 0x410a284c
=== 10288
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov r14, r13
movzx r15, r15b
=== 10289
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xeb5b6f73
add rax, 0x54ae034d; sub_carry
mov rax, qword ptr [rax + 0x7f0]
add rax, r15
mov bpl, byte ptr [rax]
movzx rbp, bpl
shl rbp, 0x28
sub r14, rbp
mov r13, r14
movabs r15, 0x12b6deca0
add r15, 0x149b7e20; sub
=== 10290
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2032
add rsp, 2032
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov r12, r13
=== 10291
mov r14, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov r11b, byte ptr [r10]
mov r9, 0xff
shl r9, 0x20
not r9
and r14, r9
movzx r9, r11b
shl r9, 0x20
or r14, r9
=== 10292
mov rdx, r14
push rdx
mov r15, rsp
mov rsi, r14
=== 10293
mov rbx, r15
mov r14, rsi
push rbx
push 0x28d16dab
push 0x37cb337e
push 0x31173d6
=== 10294
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov r15, r14
movzx rdi, dil
=== 10295
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xd0df024c
add r12, 0x6f2a7074; sub_carry
mov r12, qword ptr [r12 + 0x7f8]
add r12, rdi
mov r11b, byte ptr [r12]
movzx r11, r11b
shl r11, 0x30
sub r15, r11
mov r15, r15
movabs rbp, 0x12e1769ed
add rbp, 0x11f200d3; sub
=== 10296
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov r12, r15
=== 10297
mov rbp, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov al, byte ptr [rcx]
mov r8, 0xff
shl r8, 0x28
not r8
and rbp, r8
movzx r8, al
shl r8, 0x28
or rbp, r8
=== 10298
mov rax, rbp
push rax
mov r15, rsp
mov r12, rbp
=== 10299
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rsi
mov r15, r12
movzx rbp, bpl
=== 10300
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xf6716fdf
add rcx, 0x499802e1; sub_carry
mov rcx, qword ptr [rcx + 0x7f8]
add rcx, rbp
mov r8b, byte ptr [rcx]
movzx r8, r8b
shl r8, 0x38
sub r15, r8
movabs r10, 0x12a3929b3
push r10
push 0x1b956e61
push 0x34dd7cf3
push 0x4f26743f
push 0x5c5f02d9
add qword ptr [rsp + 0x20], 0x15d0410d; sub
mov rsi, r15
=== 10301
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbp
mov rbp, rsi
=== 10302
mov r14, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbx
mov r11b, byte ptr [r10]
mov rdx, 0xff
shl rdx, 0x30
not rdx
and r14, rdx
movzx rdx, r11b
shl rdx, 0x30
or r14, rdx
=== 10303
mov r11, r14
push r11
mov rdi, rsp
mov r15, r14
=== 10304
mov rbx, rdi
mov r14, r15
push rbx
push 0x47b577a6
push 0x13c2123a
push 0x29e27850
=== 10305
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov r14, r14
movzx r13, r13b
=== 10306
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xec203a62
push r13
push 0x4a6e3d5e
push 0x2ecb35e3
push 0x9e078af
add qword ptr [rsp + 0x18], 0x53e9305e; sub
mov rsi, r14
=== 10307
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbx
mov r12, rsi
=== 10308
mov rbp, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r14
mov r11b, byte ptr [r11]
mov rdi, 0xff
shl rdi, 0x38
not rdi
and rbp, rdi
movzx rdi, r11b
shl rdi, 0x38
or rbp, rdi
=== 10309
mov rax, rbp
push rax
mov rdi, rsp
mov rbx, rbp
=== 10310
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov r15, rbx
movzx r14, r14b
=== 10311
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x12c085030
push r8
push 0xb4f3831
push 0x55bc3759
push 0x12251afe
push 0x1968095a
add qword ptr [rsp + 0x20], 0x14010290; or
mov rbx, r15
=== 10312
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov rdi, rbx
=== 10313
mov rdi, rdi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rsi
mov r12b, byte ptr [rsi]
mov dil, r12b
=== 10314
mov rdi, rdi
push rdi
mov r15, rsp
mov rbp, rdi
=== 10315
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov rsi, rbp
movzx rdi, dil
=== 10316
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xc52a3cfb
push rsi
push 0x7d387d4f
push 0x539e527e
push 0x27100d97
add qword ptr [rsp + 0x18], 0x7adf15c5; or
mov r14, rsi
=== 10317
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov r15, r14
=== 10318
mov rdi, r15
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov dl, byte ptr [rdx]
mov rsi, 0xff
shl rsi, 8
not rsi
and rdi, rsi
movzx rsi, dl
shl rsi, 8
or rdi, rsi
=== 10319
mov r15, rdi
push r15
mov r14, rsp
mov rsi, rdi
=== 10320
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov rbp, rsi
movzx rdi, dil
=== 10321
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xda33ea20
push r11
push 0x2a8e0d0c
push 0x33680983
push 0x50b959df
push 0x31e433fc
add qword ptr [rsp + 0x20], 0x65d568a0; or
mov rbx, rbp
=== 10322
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r15
mov r14, rbx
=== 10323
mov rdi, r14
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r12
mov r11b, byte ptr [rsi]
mov r15, 0xff
shl r15, 0x10
not r15
and rdi, r15
movzx r15, r11b
shl r15, 0x10
or rdi, r15
=== 10324
mov r8, rdi
push r8
mov rsi, rsp
mov r13, rdi
=== 10325
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbx
mov r14, r13
movzx r15, r15b
=== 10326
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r14
movabs rbp, 0xc411f184
add rbp, 0x7bf7613c; or
=== 10327
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdx
mov r15, r12
=== 10328
mov r15, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov sil, byte ptr [r9]
mov r14, 0xff
shl r14, 0x18
not r14
and r15, r14
movzx r14, sil
shl r14, 0x18
or r15, r14
=== 10329
mov r14, r15
push r14
mov rsi, rsp
mov rbx, r15
=== 10330
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rax
mov rbp, rbx
movzx rsi, sil
=== 10331
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xca1c14c2
push r13
push 0x9ba03df
push 0x4ec13645
push 0x2fec61a3
add qword ptr [rsp + 0x18], 0x75ed3dfe; or
mov r14, rbp
=== 10332
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r10
mov rbx, r14
=== 10333
mov rdi, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r15
mov r10b, byte ptr [r9]
mov r11, 0xff
shl r11, 0x20
not r11
and rdi, r11
movzx r11, r10b
shl r11, 0x20
or rdi, r11
=== 10334
mov r14, rdi
push r14
mov rbx, rsp
mov r14, rdi
=== 10335
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rax
mov rsi, r14
movzx r15, r15b
=== 10336
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rsi
movabs rbx, 0xcaafd870
add rbx, 0x75597a50; or
=== 10337
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbp
mov rbx, rdi
=== 10338
mov rdi, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbp
mov dl, byte ptr [r8]
mov rbp, 0xff
shl rbp, 0x30
not rbp
and rdi, rbp
movzx rbp, dl
shl rbp, 0x30
or rdi, rbp
=== 10339
mov r8, rdi
push r8
mov rbp, rsp
mov r14, rdi
=== 10340
mov r9, rbp
mov rbx, r14
push r9
push 0x198b78c5
push 0x2f7a0f27
push 0x193d703a
=== 10341
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov rbp, rbx
movzx rsi, sil
=== 10342
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rbp
movabs rsi, 0x116e91da6
add rsi, 0x2920351a; or
=== 10343
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov r13, rdi
=== 10344
mov r15, r13
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbp
mov bpl, byte ptr [rbx]
mov rdx, 0xff
shl rdx, 0x38
not rdx
and r15, rdx
movzx rdx, bpl
shl rdx, 0x38
or r15, rdx
=== 10345
mov r12, r15
movabs rbx, 0x10223d372
add rbx, 0x3ddc3e7e
test r12, r12
lea r13, [rip - 0x4682e8]
cmovne r13, rbx
jmp r13
=== 10346
movabs r13, 0x13aab6002
push r13
push 0x4fcf10df
push 0x312b7216
push 0x70ea789c
add qword ptr [rsp + 0x18], 0x5de58e6; input
=== 10347
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 17
add rsp, 17
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbx
movzx r12, r12b
=== 10348
mov rax, r12
mov rsi, 0xffffffffc918fd47
add rsi, 0x376e1b05
push rsi
mul qword ptr [rsp]
mov r13, rax
=== 10349
mov r12, r13
push r12
mov r14, rsp
mov rbp, r13
=== 10350
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rax
mov r15, rbp
movzx rbx, bl
=== 10351
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xf68d274d
add r13, 0x497c4b73; sub_carry
mov r13, qword ptr [r13 + 0x6c0]
add r13, rbx
mov r14b, byte ptr [r13]
movzx r14, r14b
shl r14, 8
sub r15, r14
mov rbp, r15
movabs rsi, 0x104853bc0
add rsi, 0x3b842f00; sub
=== 10352
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1728
add rsp, 1728
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rax
mov rbx, rbp
=== 10353
mov r15, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbp
mov r14b, byte ptr [rax]
mov r15b, r14b
=== 10354
mov rdx, r15
push rdx
mov r13, rsp
mov r15, r15
=== 10355
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r8
mov rsi, r15
movzx r12, r12b
=== 10356
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xd425fe1f
add rsi, 0x6be374a1; sub_carry
mov rsi, qword ptr [rsi + 0x2d0]
add rsi, r12
mov bpl, byte ptr [rsi]
movzx rbp, bpl
shl rbp, 0x10
sub rsi, rbp
mov r15, rsi
movabs rbp, 0xcf130085
add rbp, 0x70f66a3b; sub
=== 10357
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 720
add rsp, 720
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov r13, r15
=== 10358
mov rbp, r13
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r14
mov r13b, byte ptr [r13]
mov rsi, 0xff
shl rsi, 8
not rsi
and rbp, rsi
movzx rsi, r13b
shl rsi, 8
or rbp, rsi
=== 10359
mov rax, rbp
push rax
mov r14, rsp
mov rbp, rbp
=== 10360
mov rdx, r14
mov r14, rbp
push rdx
push 0x2753be5
push 0x3a648cb
push 0x133a55af
=== 10361
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbx
mov rbp, r14
movzx rbx, bl
=== 10362
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x11a103b58
add rsi, 0x25f93768; sub_carry
mov rsi, qword ptr [rsi + 0x508]
add rsi, rbx
mov r10b, byte ptr [rsi]
movzx r10, r10b
shl r10, 0x18
sub rbp, r10
mov rsi, rbp
movabs rbx, 0xc10135d6
add rbx, 0x7f0834ea; sub
=== 10363
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1288
add rsp, 1288
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov rbp, rsi
=== 10364
mov rbx, rbp
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rdi
mov dil, byte ptr [rbp]
mov rcx, 0xff
shl rcx, 0x10
not rcx
and rbx, rcx
movzx rcx, dil
shl rcx, 0x10
or rbx, rcx
=== 10365
mov rcx, rbx
push rcx
mov rbx, rsp
mov r14, rbx
=== 10366
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rbp
mov rbp, r14
movzx r12, r12b
=== 10367
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x113d557f3
add r10, 0x2c341acd; sub_carry
mov r10, qword ptr [r10 + 0x390]
add r10, r12
mov sil, byte ptr [r10]
movzx rsi, sil
shl rsi, 0x20
sub rbp, rsi
mov rdi, rbp
movabs rbp, 0x12e915b9d
add rbp, 0x11780f23; sub
=== 10368
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 912
add rsp, 912
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r11
mov rbx, rdi
=== 10369
mov rbx, rbx
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r15
mov dl, byte ptr [r11]
mov r9, 0xff
shl r9, 0x18
not r9
and rbx, r9
movzx r9, dl
shl r9, 0x18
or rbx, r9
=== 10370
mov r13, rbx
push r13
mov r13, rsp
mov r14, rbx
=== 10371
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov r13, r14
movzx r12, r12b
=== 10372
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xeda21f5a
add rax, 0x52675366; sub_carry
mov rax, qword ptr [rax]
add rax, r12
mov r8b, byte ptr [rax]
movzx r8, r8b
shl r8, 0x28
sub r13, r8
mov r12, r13
movabs rbx, 0xfe7037f8
add rbx, 0x419932c8; sub
=== 10373
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov r12, r12
=== 10374
mov r15, r12
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov r9b, byte ptr [r14]
mov rsi, 0xff
shl rsi, 0x20
not rsi
and r15, rsi
movzx rsi, r9b
shl rsi, 0x20
or r15, rsi
=== 10375
mov r13, r15
push r13
mov r13, rsp
mov r15, r15
=== 10376
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov rdi, r15
movzx rsi, sil
=== 10377
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x103d76b9e
add r8, 0x3c320722; sub_carry
mov r8, qword ptr [r8]
add r8, rsi
mov r14b, byte ptr [r8]
movzx r14, r14b
shl r14, 0x38
sub rdi, r14
mov rbx, rdi
movabs rsi, 0x1178046b3
add rsi, 0x2889240d; sub
=== 10378
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov r15, rbx
=== 10379
mov rsi, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov cl, byte ptr [r9]
mov r14, 0xff
shl r14, 0x30
not r14
and rsi, r14
movzx r14, cl
shl r14, 0x30
or rsi, r14
=== 10380
movabs rcx, 0x13cea4d3d
push rcx
push 0x6ede54be
push 0x607a2eb6
push 0xd186376
push 0x4d535048
add qword ptr [rsp + 0x20], 0x39f6bab; input
mov rsi, rsi
=== 10381
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 25
add rsp, 25
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov rdi, rsi
movzx rbx, bl
=== 10382
mov rax, rbx
mov rcx, 0xffffffffbde42545
add rcx, 0x431211e9
push rcx
mov rbx, rdi
mul qword ptr [rsp]
mov r14, rax
=== 10383
mov r14, rbx
xor r14, r14
=== 10384
mov rsi, r14
push rsi
mov r14, rsp
mov rsi, r14
=== 10385
mov r14, r14
mov r13, rsi
push r14
push 0x6e3d7d1d
push 0x61d753c7
push 0x4e07f4e
=== 10386
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov r15, r13
movzx r14, r14b
=== 10387
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x115914475
add r8, 0x2a781e4b; add_carry
mov r8, qword ptr [r8 + 0x448]
add r8, r14
mov bl, byte ptr [r8]
movzx rbx, bl
shl rbx, 8
add r15, rbx
movabs rcx, 0x10d153e98
push rcx
push 0x152a29e9
push 0x3f091c79
push 0x763832d2
add qword ptr [rsp + 0x18], 0x32f41c28; add
mov rbx, r15
=== 10388
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1096
add rsp, 1096
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov r14, rbx
=== 10389
mov rsi, r14
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rbx
mov bl, byte ptr [r14]
mov sil, bl
=== 10390
mov r15, rsi
push r15
mov r15, rsp
mov r12, rsi
=== 10391
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov r14, r12
movzx r12, r12b
=== 10392
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xebfe2a19
add rbp, 0x540b38a7; add_carry
mov rbp, qword ptr [rbp + 0x278]
add rbp, r12
mov al, byte ptr [rbp]
movzx rax, al
shl rax, 0x10
add r14, rax
movabs r8, 0xe7def668
push r8
push 0x1eda4430
push 0x486f1314
push 0x37875638
push 0x5a5143d8
add qword ptr [rsp + 0x20], 0x582a6458; add
mov rbx, r14
=== 10393
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 632
add rsp, 632
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov r15, rbx
=== 10394
mov r13, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov bl, byte ptr [r9]
mov r11, 0xff
shl r11, 8
not r11
and r13, r11
movzx r11, bl
shl r11, 8
or r13, r11
=== 10395
mov r11, r13
push r11
mov rbp, rsp
mov r13, r13
=== 10396
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov rbx, r13
movzx r12, r12b
=== 10397
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xd0c2faca
add rsi, 0x6f4667f6; add_carry
mov rsi, qword ptr [rsi + 0x568]
add rsi, r12
mov al, byte ptr [rsi]
movzx rax, al
shl rax, 0x18
add rbx, rax
mov rbx, rbx
movabs r14, 0x13d164bbb
add r14, 0x2f30f05; add
=== 10398
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1384
add rsp, 1384
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov rsi, rbx
=== 10399
mov rbx, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov r10b, byte ptr [r14]
mov r15, 0xff
shl r15, 0x10
not r15
and rbx, r15
movzx r15, r10b
shl r15, 0x10
or rbx, r15
=== 10400
mov rbx, rbx
push rbx
mov rsi, rsp
mov r12, rbx
=== 10401
mov r13, rsi
mov r15, r12
push r13
push 0x183238b
push 0x36de2455
push 0x37953ab4
push 0x6ca0632f
=== 10402
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
mov rbp, r15
movzx r15, r15b
=== 10403
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x13834eb65
add r14, 0x7d4775b; add_carry
mov r14, qword ptr [r14 + 0xb0]
add r14, r15
mov r13b, byte ptr [r14]
movzx r13, r13b
shl r13, 0x20
add rbp, r13
movabs rdx, 0xc63d0df4
push rdx
push 0x7d4977e3
push 0x3f340146
push 0x619c546f
add qword ptr [rsp + 0x18], 0x79cc4ccc; add
mov r14, rbp
=== 10404
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 176
add rsp, 176
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rcx
mov r12, r14
=== 10405
mov rbx, r12
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbx
mov bpl, byte ptr [r12]
mov r11, 0xff
shl r11, 0x18
not r11
and rbx, r11
movzx r11, bpl
shl r11, 0x18
or rbx, r11
=== 10406
mov r15, rbx
push r15
mov r14, rsp
mov rdi, rbx
=== 10407
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov rbx, rdi
movzx rdi, dil
=== 10408
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x10475311c
add rbx, 0x3b9431a4; add_carry
mov rbx, qword ptr [rbx]
add rbx, rdi
mov bl, byte ptr [rbx]
movzx rbx, bl
shl rbx, 0x30
add rbx, rbx
mov r12, rbx
movabs rsi, 0xd858463a
add rsi, 0x67b11486; add
=== 10409
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov r14, r12
=== 10410
mov r14, r14
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rsi
mov cl, byte ptr [rdi]
mov rbx, 0xff
shl rbx, 0x28
not rbx
and r14, rbx
movzx rbx, cl
shl rbx, 0x28
or r14, rbx
=== 10411
mov r11, r14
push r11
mov rbp, rsp
mov r14, r14
=== 10412
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov r15, r14
movzx r13, r13b
=== 10413
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xe3f13344
add r14, 0x5c182f7c; add_carry
mov r14, qword ptr [r14]
add r14, r13
mov r15b, byte ptr [r14]
movzx r15, r15b
shl r15, 0x38
add r15, r15
movabs rdx, 0xe5a4f937
push rdx
push 0x3c1791
push 0x49b75f53
push 0x41653ac4
add qword ptr [rsp + 0x18], 0x5a646189; add
mov rdi, r15
=== 10414
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdx
mov rdi, rdi
=== 10415
mov r14, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r12
mov r11b, byte ptr [rdx]
mov rdx, 0xff
shl rdx, 0x30
not rdx
and r14, rdx
movzx rdx, r11b
shl rdx, 0x30
or r14, rdx
=== 10416
movabs r10, 0xdb4ab80b
push r10
push 0x3bfe7d0b
push 0x512f2c95
push 0x3cf2442f
add qword ptr [rsp + 0x18], 0x653f00dd; input
mov r15, r14
=== 10417
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 21
add rsp, 21
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov r14, r15
movzx r15, r15b
=== 10418
mov rax, r15
mov rbx, 0xfffffffffc421758
add rbx, 0x4951e04
push rbx
mov r12, r14
mul qword ptr [rsp]
mov r14, rax
=== 10419
mov rbx, r12
sub rbx, r14
=== 10420
mov rdi, rbx
push rdi
mov r15, rsp
mov rbp, rbx
=== 10421
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r11
mov rdi, rbp
movzx rbp, bpl
=== 10422
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x1027b237e
add rsi, 0x3d8e4f42; sub_carry
mov rsi, qword ptr [rsi + 0x1a8]
add rsi, rbp
mov r14b, byte ptr [rsi]
movzx r14, r14b
shl r14, 8
sub rdi, r14
mov r15, rdi
movabs r12, 0xff13ef31
add r12, 0x40f57b8f; sub
=== 10423
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 424
add rsp, 424
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov rdi, r15
=== 10424
mov rsi, rdi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov cl, byte ptr [r13]
mov sil, cl
=== 10425
mov rdx, rsi
push rdx
mov r14, rsp
mov r12, rsi
=== 10426
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov rbp, r12
movzx r14, r14b
=== 10427
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xd1da597a
add r11, 0x6e2f1946; sub_carry
mov r11, qword ptr [r11 + 0x7f0]
add r11, r14
mov r8b, byte ptr [r11]
movzx r8, r8b
shl r8, 0x10
sub rbp, r8
movabs r11, 0xedc40533
push r11
push 0x2b087b90
push 0x7a816d88
push 0x27dc409e
add qword ptr [rsp + 0x18], 0x5245658d; sub
mov r14, rbp
=== 10428
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2032
add rsp, 2032
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov r15, r14
=== 10429
mov rbx, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov dil, byte ptr [r9]
mov r10, 0xff
shl r10, 8
not r10
and rbx, r10
movzx r10, dil
shl r10, 8
or rbx, r10
=== 10430
mov r15, rbx
push r15
mov r12, rsp
mov r13, rbx
=== 10431
mov rdx, r12
mov rbp, r13
push rdx
push 0x43303940
push 0x312f097d
push 0x34d6157c
=== 10432
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov r14, rbp
movzx r15, r15b
=== 10433
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x10d731115
add rdx, 0x329661ab; sub_carry
mov rdx, qword ptr [rdx + 0x100]
add rdx, r15
mov dil, byte ptr [rdx]
movzx rdi, dil
shl rdi, 0x18
sub r14, rdi
mov r13, r14
movabs rbx, 0x125fc38d6
add rbx, 0x1a0d31ea; sub
=== 10434
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 256
add rsp, 256
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rax
mov rbp, r13
=== 10435
mov rdi, rbp
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov r14b, byte ptr [rbp]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and rdi, rsi
movzx rsi, r14b
shl rsi, 0x10
or rdi, rsi
=== 10436
mov rdi, rdi
push rdi
mov rdi, rsp
mov r14, rdi
=== 10437
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r8
mov r12, r14
movzx r13, r13b
=== 10438
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xc7ca1921
add r13, 0x783f599f; sub_carry
mov r13, qword ptr [r13 + 0x5d8]
add r13, r13
mov bl, byte ptr [r13]
movzx rbx, bl
shl rbx, 0x20
sub r12, rbx
movabs rax, 0xecf032da
push rax
push 0x5d4a4ab0
push 0x1ff17a90
push 0x40b302e5
push 0x3f8a7600
add qword ptr [rsp + 0x20], 0x531937e6; sub
mov r15, r12
=== 10439
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1496
add rsp, 1496
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r12
mov rbp, r15
=== 10440
mov rdi, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov r15b, byte ptr [r10]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and rdi, rcx
movzx rcx, r15b
shl rcx, 0x18
or rdi, rcx
=== 10441
mov r13, rdi
push r13
mov rbx, rsp
mov rsi, rdi
=== 10442
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov rbx, rsi
movzx rsi, sil
=== 10443
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x1087957ff
add rdi, 0x37901ac1; sub_carry
mov rdi, qword ptr [rdi]
add rdi, rsi
mov dil, byte ptr [rdi]
movzx rdi, dil
shl rdi, 0x28
sub rbx, rdi
mov r14, rbx
movabs rbp, 0x12462308f
add rbp, 0x1ba73a31; sub
=== 10444
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rbp
mov rsi, r14
=== 10445
mov rdi, rsi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov cl, byte ptr [r12]
mov rsi, 0xff
shl rsi, 0x20
not rsi
and rdi, rsi
movzx rsi, cl
shl rsi, 0x20
or rdi, rsi
=== 10446
movabs rcx, 0xf4f76cfb
push rcx
push 0x43fc59c4
push 0x5dc5525e
push 0x5cf47ed9
add qword ptr [rsp + 0x18], 0x4b924bed; input
mov rbx, rdi
=== 10447
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
mov r13, rbx
movzx rsi, sil
=== 10448
mov rax, rsi
mov rcx, 0xffffffffc5680be7
add rcx, 0x3adf11da
push rcx
mov rsi, r13
mul qword ptr [rsp]
mov rbx, rax
=== 10449
mov r14, rsi
xor r14, rbx
=== 10450
mov r12, r14
push r12
mov r14, rsp
mov r15, r14
=== 10451
mov r13, r14
mov r14, r15
push r13
push 0x7aed6ce1
push 0x57fb269f
push 0x614d44c2
push 0x1db71a32
=== 10452
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rsi
mov r12, r14
movzx rbp, bpl
=== 10453
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xf0391320
push r10
push 0x38405979
push 0x2bcb1155
push 0x4eb21979
add qword ptr [rsp + 0x18], 0x4fd037a0; xor
mov rdi, r12
=== 10454
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1952
add rsp, 1952
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rsi
mov rbp, rdi
=== 10455
mov rdi, rbp
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r15
mov r9b, byte ptr [rsi]
mov dil, r9b
=== 10456
mov rbp, rdi
push rbp
mov rsi, rsp
mov r14, rdi
=== 10457
mov rbp, rsi
mov r13, r14
push rbp
push 0x7b3e251f
push 0x2393748c
push 0x604c5bde
push 0x76c124f3
=== 10458
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov r12, r13
movzx r15, r15b
=== 10459
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x1277ce473
push rax
push 0x78151def
push 0x702b2ea3
push 0xbca1f6d
push 0x3a3a0688
add qword ptr [rsp + 0x20], 0x188c664d; xor
mov r13, r12
=== 10460
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1192
add rsp, 1192
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov rdi, r13
=== 10461
mov r15, rdi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov r14b, byte ptr [r14]
mov rbx, 0xff
shl rbx, 8
not rbx
and r15, rbx
movzx rbx, r14b
shl rbx, 8
or r15, rbx
=== 10462
mov r11, r15
push r11
mov r15, rsp
mov r12, r15
=== 10463
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r10
mov r12, r12
movzx rdi, dil
=== 10464
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xf07dce0b
push rdi
push 0x15115d2b
push 0x1c99317c
push 0x554a3417
push 0x13f2240d
add qword ptr [rsp + 0x20], 0x4f8b7cb5; xor
mov rdi, r12
=== 10465
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 352
add rsp, 352
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov r13, rdi
=== 10466
mov r12, r13
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r12
mov r15b, byte ptr [r10]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and r12, rsi
movzx rsi, r15b
shl rsi, 0x10
or r12, rsi
=== 10467
mov r13, r12
push r13
mov r15, rsp
mov r12, r12
=== 10468
mov rdi, r15
mov r15, r12
push rdi
push 0x634a0ced
push 0x29c83613
push 0x3d820167
push 0x23445f39
=== 10469
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r11
mov r12, r15
movzx rsi, sil
=== 10470
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x109531cb8
push rsi
push 0x29d5587f
push 0x7abd1330
push 0x56d86629
add qword ptr [rsp + 0x18], 0x36b62e08; xor
mov r15, r12
=== 10471
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 696
add rsp, 696
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov rbx, r15
=== 10472
mov r12, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbp
mov r8b, byte ptr [rbp]
mov rax, 0xff
shl rax, 0x18
not rax
and r12, rax
movzx rax, r8b
shl rax, 0x18
or r12, rax
=== 10473
mov rax, r12
push rax
mov rdi, rsp
mov rbx, r12
=== 10474
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r11
mov r14, rbx
movzx rbx, bl
=== 10475
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r14
movabs rbx, 0xca51fa16
add rbx, 0x75b750aa; xor
=== 10476
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r10
mov r14, rbp
=== 10477
mov r14, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov r13b, byte ptr [r9]
mov rdi, 0xff
shl rdi, 0x28
not rdi
and r14, rdi
movzx rdi, r13b
shl rdi, 0x28
or r14, rdi
=== 10478
mov rsi, r14
push rsi
mov rsi, rsp
mov r13, r14
=== 10479
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rsi
mov rdi, r13
movzx r12, r12b
=== 10480
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rdi
movabs r14, 0x1320a41c4
add r14, 0xdff08fc; xor
=== 10481
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdi
mov r14, r12
=== 10482
mov r14, r14
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov r8b, byte ptr [r10]
mov rax, 0xff
shl rax, 0x38
not rax
and r14, rax
movzx rax, r8b
shl rax, 0x38
or r14, rax
=== 10483
movabs rsi, 0xd02d5789
push rsi
push 0x43f4394c
push 0x626b5e04
push 0x242b1b61
push 0x3463480
add qword ptr [rsp + 0x20], 0x705c615f; input
mov r14, r14
=== 10484
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r13
mov rbp, r14
movzx r14, r14b
=== 10485
mov rax, r14
mov r9, 0xffffffffb387df8c
add r9, 0x4d046e0c
push r9
mov r14, rbp
mul qword ptr [rsp]
mov rsi, rax
=== 10486
mov r13, r14
sub r13, rsi
=== 10487
mov rsi, r13
push rsi
mov rbx, rsp
mov rbp, r13
=== 10488
mov rsi, rbx
mov rbx, rbp
push rsi
push 0x513f6032
push 0x5f4308e4
push 0x45814b2f
push 0x7379132a
=== 10489
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov rsi, rbx
movzx rbp, bpl
=== 10490
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x101836eda
add r15, 0x3e8603e6; sub_carry
mov r15, qword ptr [r15 + 0x3a0]
add r15, rbp
mov r12b, byte ptr [r15]
movzx r12, r12b
shl r12, 8
sub rsi, r12
movabs rsi, 0xfb2a39c8
push rsi
push 0x42203eef
push 0x7a796c5a
push 0x139e7129
add qword ptr [rsp + 0x18], 0x44df30f8; sub
mov rsi, rsi
=== 10491
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 928
add rsp, 928
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rax
mov rdi, rsi
=== 10492
mov r13, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r13
mov r14b, byte ptr [rax]
mov r13b, r14b
=== 10493
mov rbx, r13
push rbx
mov rdi, rsp
mov r14, r13
=== 10494
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r12
mov rdi, r14
movzx r13, r13b
=== 10495
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x1384a24ef
add rbp, 0x7bf4dd1; sub_carry
mov rbp, qword ptr [rbp + 0x60]
add rbp, r13
mov dil, byte ptr [rbp]
movzx rdi, dil
shl rdi, 0x10
sub rdi, rdi
movabs rbp, 0xe97d31eb
push rbp
push 0x20876ef3
push 0x2e416d21
push 0x43765546
add qword ptr [rsp + 0x18], 0x568c38d5; sub
mov rdi, rdi
=== 10496
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 96
add rsp, 96
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rsi
mov rsi, rdi
=== 10497
mov rbx, rsi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r12
mov r13b, byte ptr [r11]
mov r12, 0xff
shl r12, 8
not r12
and rbx, r12
movzx r12, r13b
shl r12, 8
or rbx, r12
=== 10498
mov rax, rbx
push rax
mov r15, rsp
mov r14, rbx
=== 10499
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov rdi, r14
movzx r12, r12b
=== 10500
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xdcf4091c
add r11, 0x631569a4; sub_carry
mov r11, qword ptr [r11 + 0x328]
add r11, r12
mov bl, byte ptr [r11]
movzx rbx, bl
shl rbx, 0x18
sub rdi, rbx
movabs rcx, 0x13446438c
push rcx
push 0x532b45aa
push 0xac5633b
push 0x7e7748a6
add qword ptr [rsp + 0x18], 0xbc32734; sub
mov rbp, rdi
=== 10501
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 808
add rsp, 808
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rsi
mov r14, rbp
=== 10502
mov rbp, r14
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r13
mov r9b, byte ptr [r14]
mov rbx, 0xff
shl rbx, 0x10
not rbx
and rbp, rbx
movzx rbx, r9b
shl rbx, 0x10
or rbp, rbx
=== 10503
mov r10, rbp
push r10
mov rbp, rsp
mov rdi, rbp
=== 10504
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r14
mov rbx, rdi
movzx rdi, dil
=== 10505
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xf5f12a31
add rcx, 0x4a18488f; sub_carry
mov rcx, qword ptr [rcx + 0x4a0]
add rcx, rdi
mov sil, byte ptr [rcx]
movzx rsi, sil
shl rsi, 0x20
sub rbx, rsi
movabs rdi, 0x11f312703
push rdi
push 0x32715f20
push 0x215f212d
push 0x76e0684e
push 0x2b0e4f5c
add qword ptr [rsp + 0x20], 0x20d843bd; sub
mov rsi, rbx
=== 10506
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1184
add rsp, 1184
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdx
mov rbp, rsi
=== 10507
mov rsi, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov al, byte ptr [r9]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and rsi, rcx
movzx rcx, al
shl rcx, 0x18
or rsi, rcx
=== 10508
mov r8, rsi
push r8
mov r14, rsp
mov r13, rsi
=== 10509
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov r13, r13
movzx rsi, sil
=== 10510
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x10b1114ad
add rsi, 0x34f85e13; sub_carry
mov rsi, qword ptr [rsi]
add rsi, rsi
mov r8b, byte ptr [rsi]
movzx r8, r8b
shl r8, 0x28
sub r13, r8
mov rdi, r13
movabs rbx, 0x13a122ab4
add rbx, 0x5f7400c; sub
=== 10511
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov rbp, rdi
=== 10512
mov rbp, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov r9b, byte ptr [r9]
mov rbx, 0xff
shl rbx, 0x20
not rbx
and rbp, rbx
movzx rbx, r9b
shl rbx, 0x20
or rbp, rbx
=== 10513
mov rbx, rbp
push rbx
mov r13, rsp
mov rdi, rbp
=== 10514
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r12
mov rbx, rdi
movzx r12, r12b
=== 10515
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x137c0218d
add rbp, 0x8495133; sub_carry
mov rbp, qword ptr [rbp]
add rbp, r12
mov dil, byte ptr [rbp]
movzx rdi, dil
shl rdi, 0x30
sub rbx, rdi
mov r13, rbx
movabs rbx, 0xfee30fd7
add rbx, 0x41265ae9; sub
=== 10516
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rsi
mov r12, r13
=== 10517
mov rsi, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r14
mov cl, byte ptr [rdx]
mov r10, 0xff
shl r10, 0x28
not r10
and rsi, r10
movzx r10, cl
shl r10, 0x28
or rsi, r10
=== 10518
mov r13, rsi
movabs r14, 0x132af80ed
add r14, 0xdda37fb; input
=== 10519
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 13
add rsp, 13
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov rbp, r13
movzx r12, r12b
=== 10520
mov rax, r12
mov rbx, 0xffffffffeab0dc40
add rbx, 0x15ac1261
push rbx
mov rbx, rbp
mul qword ptr [rsp]
mov r13, rax
=== 10521
mov rbp, rbx
sub rbp, r13
=== 10522
mov r11, rbp
push r11
mov rbp, rsp
mov rdi, rbp
=== 10523
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov rsi, rdi
movzx r13, r13b
=== 10524
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xe99b229e
push rbx
push 0x7a1f3afe
push 0x21a304b9
push 0xe6316ae
push 0x3ba827a0
add qword ptr [rsp + 0x20], 0x566e2822; xor
mov r13, rsi
=== 10525
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1544
add rsp, 1544
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov rsi, r13
=== 10526
mov r14, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov r12b, byte ptr [r9]
mov r14b, r12b
=== 10527
mov rax, r14
push rax
mov r15, rsp
mov rbp, r14
=== 10528
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rcx
mov rsi, rbp
movzx rbp, bpl
=== 10529
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xdb301844
push rcx
push 0x5af757b6
push 0x78aa109a
push 0x5c0d1003
add qword ptr [rsp + 0x18], 0x64d9327c; xor
mov rbp, rsi
=== 10530
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1760
add rsp, 1760
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rax
mov r15, rbp
=== 10531
mov r14, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rsi
mov bpl, byte ptr [r9]
mov rdx, 0xff
shl rdx, 8
not rdx
and r14, rdx
movzx rdx, bpl
shl rdx, 8
or r14, rdx
=== 10532
mov r8, r14
push r8
mov r12, rsp
mov rsi, r14
=== 10533
mov rcx, r12
mov rbx, rsi
push rcx
push 0x4e1e5dc9
push 0x64c22721
push 0x78fd3dd2
push 0x48d35fe6
=== 10534
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov rbp, rbx
movzx r13, r13b
=== 10535
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rbp
movabs r13, 0x12d3af30b
add r13, 0x12ce57b5; xor
=== 10536
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 24
add rsp, 24
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r14
mov rbp, rbx
=== 10537
mov rdi, rbp
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbx
mov bl, byte ptr [r13]
mov rcx, 0xff
shl rcx, 0x10
not rcx
and rdi, rcx
movzx rcx, bl
shl rcx, 0x10
or rdi, rcx
=== 10538
mov r15, rdi
push r15
mov r15, rsp
mov rbp, rdi
=== 10539
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r15
mov r15, rbp
movzx rdi, dil
=== 10540
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x1138e3e06
push rbx
push 0x2f8136e8
push 0x1fa33f4a
push 0x37b61a2f
add qword ptr [rsp + 0x18], 0x2c7b0cba; xor
mov r13, r15
=== 10541
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1976
add rsp, 1976
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbx
mov r14, r13
=== 10542
mov rdi, r14
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r15
mov sil, byte ptr [rsi]
mov r13, 0xff
shl r13, 0x18
not r13
and rdi, r13
movzx r13, sil
shl r13, 0x18
or rdi, r13
=== 10543
mov r14, rdi
push r14
mov rdi, rsp
mov r13, rdi
=== 10544
mov r15, rdi
mov r12, r13
push r15
push 0x14c63ea9
push 0xe675694
push 0x5c5a522b
=== 10545
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
mov rbx, r12
movzx r15, r15b
=== 10546
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x10a73e696
push rbp
push 0x4a3a75e2
push 0x98b34a2
push 0x6f672f1f
add qword ptr [rsp + 0x18], 0x3595642a; xor
mov r14, rbx
=== 10547
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r9
mov rbx, r14
=== 10548
mov r13, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r13
mov r9b, byte ptr [r9]
mov r10, 0xff
shl r10, 0x20
not r10
and r13, r10
movzx r10, r9b
shl r10, 0x20
or r13, r10
=== 10549
mov r11, r13
push r11
mov r15, rsp
mov rbp, r13
=== 10550
mov r9, r15
mov rdi, rbp
push r9
push 0x6bdc7e17
push 0x3e956a1e
push 0x2c7f21a7
=== 10551
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rsi
mov r12, rdi
movzx rsi, sil
=== 10552
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x135364383
push rdx
push 0x5efa51ba
push 0x52564c8b
push 0x28f26a2d
add qword ptr [rsp + 0x18], 0xad3073d; xor
mov r15, r12
=== 10553
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov r14, r15
=== 10554
mov rdi, r14
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r12
mov r9b, byte ptr [rbx]
mov r8, 0xff
shl r8, 0x28
not r8
and rdi, r8
movzx r8, r9b
shl r8, 0x28
or rdi, r8
=== 10555
mov rdx, rdi
push rdx
mov r15, rsp
mov rdi, rdi
=== 10556
mov r14, r15
mov rbp, rdi
push r14
push 0x71521904
push 0x2d050aeb
push 0x53b036b1
=== 10557
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdx
mov r14, rbp
movzx r13, r13b
=== 10558
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r14
movabs r14, 0xdde3207e
add r14, 0x62262a42; xor
=== 10559
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r12
mov r14, r13
=== 10560
mov r14, r14
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov bl, byte ptr [rcx]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and r14, rsi
movzx rsi, bl
shl rsi, 0x30
or r14, rsi
=== 10561
mov rdi, r14
movabs r12, 0x13d014857
add r12, 0x3887091; input
=== 10562
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 29
add rsp, 29
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
mov rbp, rdi
movzx rsi, sil
=== 10563
mov rax, rsi
mov r11, 0xffffffff843906a8
add r11, 0x7cb201bb
push r11
mov r15, rbp
mul qword ptr [rsp]
mov rsi, rax
=== 10564
mov r13, r15
sub r13, rsi
=== 10565
mov rax, r13
push rax
mov r14, rsp
mov rbx, r13
=== 10566
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov r15, rbx
movzx rdi, dil
=== 10567
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x11b2cea2d
add rcx, 0x24dc7893; add_carry
mov rcx, qword ptr [rcx + 0x4e8]
add rcx, rdi
mov bpl, byte ptr [rcx]
movzx rbp, bpl
shl rbp, 8
add r15, rbp
mov r15, r15
movabs rbx, 0xe83be517
add rbx, 0x57cd75a9; add
=== 10568
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1256
add rsp, 1256
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdi
mov r15, r15
=== 10569
mov r12, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbp
mov r11b, byte ptr [rcx]
mov r12b, r11b
=== 10570
mov rbx, r12
push rbx
mov rbp, rsp
mov rbx, r12
=== 10571
mov r15, rbp
mov rbx, rbx
push r15
push 0x45d352a2
push 0x1a3369bf
push 0x14b1361f
push 0x3acd739e
=== 10572
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r11
mov rbp, rbx
movzx rdi, dil
=== 10573
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xec584267
add rsi, 0x53b12059; add_carry
mov rsi, qword ptr [rsi + 0x600]
add rsi, rdi
mov r12b, byte ptr [rsi]
movzx r12, r12b
shl r12, 0x10
add rbp, r12
movabs r12, 0xcbceef0e
push r12
push 0x698851a6
push 0x78611e1
push 0x66385e77
add qword ptr [rsp + 0x18], 0x743a6bb2; add
mov rbp, rbp
=== 10574
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1536
add rsp, 1536
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r11
mov r13, rbp
=== 10575
mov r13, r13
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rsi
mov r14b, byte ptr [rsi]
mov r11, 0xff
shl r11, 8
not r11
and r13, r11
movzx r11, r14b
shl r11, 8
or r13, r11
=== 10576
mov r11, r13
push r11
mov r13, rsp
mov rsi, r13
=== 10577
mov rdx, r13
mov r12, rsi
push rdx
push 0x702f1701
push 0x63b55c7f
push 0x1d9e0e95
push 0x54953f33
=== 10578
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbx
mov r14, r12
movzx rsi, sil
=== 10579
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x13e93ecce
add r13, 0x17575f2; add_carry
mov r13, qword ptr [r13 + 0x1d8]
add r13, rsi
mov bpl, byte ptr [r13]
movzx rbp, bpl
shl rbp, 0x18
add r14, rbp
movabs r13, 0x13e42055e
push r13
push 0x4e877d28
push 0x67d40056
push 0x471f2e86
add qword ptr [rsp + 0x18], 0x1c75562; add
mov rbp, r14
=== 10580
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 472
add rsp, 472
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov r14, rbp
=== 10581
mov r12, r14
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov r15b, byte ptr [r15]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and r12, rbp
movzx rbp, r15b
shl rbp, 0x10
or r12, rbp
=== 10582
mov r13, r12
push r13
mov r12, rsp
mov rdi, r12
=== 10583
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov rbp, rdi
movzx r12, r12b
=== 10584
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x105370378
add rax, 0x3ad25f48; add_carry
mov rax, qword ptr [rax + 0x568]
add rax, r12
mov dl, byte ptr [rax]
movzx rdx, dl
shl rdx, 0x20
add rbp, rdx
mov rbx, rbp
movabs r14, 0x114f130cb
add r14, 0x2b1829f5; add
=== 10585
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1384
add rsp, 1384
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r10
mov r13, rbx
=== 10586
mov rbx, r13
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov r8b, byte ptr [r10]
mov r12, 0xff
shl r12, 0x18
not r12
and rbx, r12
movzx r12, r8b
shl r12, 0x18
or rbx, r12
=== 10587
mov rdx, rbx
push rdx
mov rbp, rsp
mov r15, rbx
=== 10588
mov rbp, rbp
mov rbx, r15
push rbp
push 0x3c2e3678
push 0x294fd8
push 0x14416036
push 0x3b1d27d2
=== 10589
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov rsi, rbx
movzx rbx, bl
=== 10590
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x11496f01b
add rsi, 0x2b7272a5; add_carry
mov rsi, qword ptr [rsi]
add rsi, rbx
mov r10b, byte ptr [rsi]
movzx r10, r10b
shl r10, 0x30
add rsi, r10
movabs r12, 0x12932f08c
push r12
push 0x3452026f
push 0x5259250f
push 0x5b2753e8
add qword ptr [rsp + 0x18], 0x16d66a34; add
mov r13, rsi
=== 10591
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbx
mov rsi, r13
=== 10592
mov r12, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov dil, byte ptr [r14]
mov r10, 0xff
shl r10, 0x28
not r10
and r12, r10
movzx r10, dil
shl r10, 0x28
or r12, r10
=== 10593
mov rax, r12
push rax
mov r12, rsp
mov r13, r12
=== 10594
mov r11, r12
mov r13, r13
push r11
push 0x3bd55308
push 0x4620336c
push 0x6ec3349
push 0x77b59fd
=== 10595
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbp
mov r14, r13
movzx rdi, dil
=== 10596
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r14
movabs rbp, 0xe21f1f7d
add rbp, 0x5dea3b43; add
=== 10597
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r15
mov r12, rbx
=== 10598
mov rsi, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rdi
mov r10b, byte ptr [r15]
mov r15, 0xff
shl r15, 0x38
not r15
and rsi, r15
movzx r15, r10b
shl r15, 0x38
or rsi, r15
=== 10599
mov r13, rsi
movabs rsi, 0xd1539d13
add rsi, 0x6f361bd5; input
=== 10600
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 9
add rsp, 9
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r14
mov r15, r13
movzx rbp, bpl
=== 10601
mov rax, rbp
mov r13, 0xffffffffc60ee9be
add r13, 0x3aa738c1
push r13
mov r14, r15
mul qword ptr [rsp]
mov rdi, rax
=== 10602
mov rbx, r14
xor rbx, rdi
=== 10603
mov rbp, rbx
push rbp
mov r15, rsp
mov rdi, rbx
=== 10604
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov r14, rdi
movzx rbx, bl
=== 10605
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x10db01a57
add rbp, 0x32595869; sub_carry
mov rbp, qword ptr [rbp + 0xb8]
add rbp, rbx
mov r8b, byte ptr [rbp]
movzx r8, r8b
shl r8, 8
sub r14, r8
mov r14, r14
movabs r13, 0x12ae54337
add r13, 0x15242789; sub
=== 10606
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 184
add rsp, 184
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rax
mov r12, r14
=== 10607
mov r12, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rdi
mov bpl, byte ptr [r15]
mov r12b, bpl
=== 10608
mov rsi, r12
push rsi
mov r14, rsp
mov r12, r12
=== 10609
mov r10, r14
mov r12, r12
push r10
push 0x744c38f3
push 0x7bf50413
push 0x7e9189d
=== 10610
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov r12, r12
movzx rbx, bl
=== 10611
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x12a0e6f0a
add r8, 0x15fb03b6; sub_carry
mov r8, qword ptr [r8 + 0x350]
add r8, rbx
mov bpl, byte ptr [r8]
movzx rbp, bpl
shl rbp, 0x10
sub r12, rbp
movabs rbp, 0xf6cf53a6
push rbp
push 0x5b473caf
push 0x3d71148
push 0x164550a4
push 0xf486f18
add qword ptr [rsp + 0x20], 0x493a171a; sub
mov r15, r12
=== 10612
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 848
add rsp, 848
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rax
mov rsi, r15
=== 10613
mov rsi, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov dil, byte ptr [r8]
mov r8, 0xff
shl r8, 8
not r8
and rsi, r8
movzx r8, dil
shl r8, 8
or rsi, r8
=== 10614
mov r8, rsi
push r8
mov r12, rsp
mov rsi, rsi
=== 10615
mov r8, r12
mov rdi, rsi
push r8
push 0x5d4b7983
push 0x14505a05
push 0x59a519f5
=== 10616
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
mov r14, rdi
movzx rsi, sil
=== 10617
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xd6712b29
add rbx, 0x69984797; sub_carry
mov rbx, qword ptr [rbx + 0x570]
add rbx, rsi
mov r12b, byte ptr [rbx]
movzx r12, r12b
shl r12, 0x18
sub r14, r12
movabs r8, 0xf2c22011
push r8
push 0x2482de6
push 0x1ce2540f
push 0x3c8e4727
add qword ptr [rsp + 0x18], 0x4d474aaf; sub
mov r12, r14
=== 10618
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1392
add rsp, 1392
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdx
mov rsi, r12
=== 10619
mov r12, rsi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov r13b, byte ptr [rax]
mov r8, 0xff
shl r8, 0x10
not r8
and r12, r8
movzx r8, r13b
shl r8, 0x10
or r12, r8
=== 10620
mov rdx, r12
push rdx
mov rbx, rsp
mov r13, r12
=== 10621
mov rcx, rbx
mov r13, r13
push rcx
push 0x16286dd3
push 0x79120e6b
push 0x4908093d
push 0x3a362ce7
=== 10622
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbp
mov rsi, r13
movzx r15, r15b
=== 10623
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xcec2702d
add r15, 0x71470293; sub_carry
mov r15, qword ptr [r15 + 0x230]
add r15, r15
mov bpl, byte ptr [r15]
movzx rbp, bpl
shl rbp, 0x20
sub rsi, rbp
movabs r13, 0xf70a2165
push r13
push 0x36506ab8
push 0x57b24934
push 0x5eb01e26
add qword ptr [rsp + 0x18], 0x48ff495b; sub
mov r14, rsi
=== 10624
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 560
add rsp, 560
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov rsi, r14
=== 10625
mov r12, rsi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov r9b, byte ptr [rax]
mov r8, 0xff
shl r8, 0x18
not r8
and r12, r8
movzx r8, r9b
shl r8, 0x18
or r12, r8
=== 10626
mov r10, r12
push r10
mov r14, rsp
mov r13, r12
=== 10627
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov r15, r13
movzx rsi, sil
=== 10628
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x13daa0c11
add rdx, 0x25f66af; sub_carry
mov rdx, qword ptr [rdx]
add rdx, rsi
mov r12b, byte ptr [rdx]
movzx r12, r12b
shl r12, 0x30
sub r15, r12
movabs r11, 0xff73ee9a
push r11
push 0x65383bb5
push 0x16097b79
push 0x75c82d4f
push 0x5cb10b80
add qword ptr [rsp + 0x20], 0x40957c26; sub
mov r12, r15
=== 10629
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov r12, r12
=== 10630
mov rbp, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov cl, byte ptr [rdx]
mov rdx, 0xff
shl rdx, 0x28
not rdx
and rbp, rdx
movzx rdx, cl
shl rdx, 0x28
or rbp, rdx
=== 10631
mov rcx, rbp
push rcx
mov rbp, rsp
mov r14, rbp
=== 10632
mov r10, rbp
mov r15, r14
push r10
push 0x55e42e74
push 0x2b3215fb
push 0x3d484108
push 0x59ed59b4
=== 10633
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov r15, r15
movzx r12, r12b
=== 10634
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xe42f3988
add r10, 0x5bda3938; sub_carry
mov r10, qword ptr [r10]
add r10, r12
mov dil, byte ptr [r10]
movzx rdi, dil
shl rdi, 0x38
sub r15, rdi
movabs r14, 0x11506f12f
push r14
push 0x51b33103
push 0x76c0127d
push 0x40516881
add qword ptr [rsp + 0x18], 0x2b027991; sub
mov r14, r15
=== 10635
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov r13, r14
=== 10636
mov rbx, r13
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov dil, byte ptr [rcx]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and rbx, rsi
movzx rsi, dil
shl rsi, 0x30
or rbx, rsi
=== 10637
mov r13, rbx
push r13
mov r13, rsp
mov r14, rbx
=== 10638
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r15
mov r15, r14
movzx r12, r12b
=== 10639
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xdcd02027
push r8
push 0x33550a6a
push 0x5ab5480c
push 0x333f72bf
push 0x617b47ec
add qword ptr [rsp + 0x20], 0x63394a99; sub
mov r15, r15
=== 10640
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r9
mov rsi, r15
=== 10641
mov rbp, rsi
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov r12b, byte ptr [r9]
mov r9, 0xff
shl r9, 0x38
not r9
and rbp, r9
movzx r9, r12b
shl r9, 0x38
or rbp, r9
=== 10642
mov rax, rbp
push rax
mov rbp, rsp
mov r14, rbp
=== 10643
mov r13, rbp
mov r15, r14
push r13
push 0x619b5759
push 0x33680c92
push 0x26dd78e5
push 0x14930dab
=== 10644
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdi
mov r15, r15
movzx rbx, bl
=== 10645
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x12d02f34e
add r15, 0x13067f72; sub_carry
mov r15, qword ptr [r15 + 0xc0]
add r15, rbx
mov r8b, byte ptr [r15]
movzx r8, r8b
shl r8, 8
sub r15, r8
mov rbx, r15
movabs r15, 0xdeddfb57
add r15, 0x612b6f69; sub
=== 10646
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 192
add rsp, 192
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov r12, rbx
=== 10647
mov rbp, r12
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov sil, byte ptr [r8]
mov bpl, sil
=== 10648
mov rdi, rbp
push rdi
mov r12, rsp
mov r14, rbp
=== 10649
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rbx
mov rsi, r14
movzx r15, r15b
=== 10650
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xea7df459
add r15, 0x558b7e67; sub_carry
mov r15, qword ptr [r15 + 0x408]
add r15, r15
mov r8b, byte ptr [r15]
movzx r8, r8b
shl r8, 0x10
sub rsi, r8
mov r13, rsi
movabs rbx, 0x12d604e22
add rbx, 0x12a91c9e; sub
=== 10651
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1032
add rsp, 1032
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r11
mov rsi, r13
=== 10652
mov rbp, rsi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r13
mov r14b, byte ptr [rbx]
mov rsi, 0xff
shl rsi, 8
not rsi
and rbp, rsi
movzx rsi, r14b
shl rsi, 8
or rbp, rsi
=== 10653
mov rax, rbp
push rax
mov r13, rsp
mov r14, rbp
=== 10654
mov r13, r13
mov rbx, r14
push r13
push 0xa8d3f10
push 0x66c72a38
push 0x5e1e3897
=== 10655
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r13
mov r13, rbx
movzx r15, r15b
=== 10656
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x10d0a0b14
add rax, 0x32ff67ac; sub_carry
mov rax, qword ptr [rax + 0x2f0]
add rax, r15
mov r13b, byte ptr [rax]
movzx r13, r13b
shl r13, 0x18
sub r13, r13
movabs r13, 0xd3272eab
push r13
push 0x5ba77f2d
push 0xb5e47d6
push 0x103f41ba
add qword ptr [rsp + 0x18], 0x6ce23c15; sub
mov rbp, r13
=== 10657
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 752
add rsp, 752
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r15
mov r12, rbp
=== 10658
mov rsi, r12
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rdi
mov r13b, byte ptr [r13]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and rsi, rbp
movzx rbp, r13b
shl rbp, 0x10
or rsi, rbp
=== 10659
mov r11, rsi
push r11
mov r15, rsp
mov rbp, rsi
=== 10660
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov r15, rbp
movzx r14, r14b
=== 10661
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xf1d95a9b
add rdi, 0x4e301825; sub_carry
mov rdi, qword ptr [rdi + 0x188]
add rdi, r14
mov bl, byte ptr [rdi]
movzx rbx, bl
shl rbx, 0x20
sub r15, rbx
mov r12, r15
movabs r13, 0x11f0ef6e6
add r13, 0x20fa73da; sub
=== 10662
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 392
add rsp, 392
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov rdi, r12
=== 10663
mov rdi, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r12
mov r9b, byte ptr [rax]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and rdi, rbp
movzx rbp, r9b
shl rbp, 0x18
or rdi, rbp
=== 10664
mov r13, rdi
push r13
mov r14, rsp
mov r15, rdi
=== 10665
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbx
mov r12, r15
movzx rbx, bl
=== 10666
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x11b275cd4
add r15, 0x24e215ec; sub_carry
mov r15, qword ptr [r15 + 0x7f8]
add r15, rbx
mov r14b, byte ptr [r15]
movzx r14, r14b
shl r14, 0x28
sub r12, r14
mov rbx, r12
movabs rdi, 0x113742c7d
add rdi, 0x2c953e43; sub
=== 10667
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov rbp, rbx
=== 10668
mov r12, rbp
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rbx
mov r10b, byte ptr [r15]
mov rbp, 0xff
shl rbp, 0x20
not rbp
and r12, rbp
movzx rbp, r10b
shl rbp, 0x20
or r12, rbp
=== 10669
mov r10, r12
push r10
mov r14, rsp
mov rbx, r12
=== 10670
mov r9, r14
mov r12, rbx
push r9
push 0x61053852
push 0x6a9501bc
push 0x17273cbb
push 0x75e95924
=== 10671
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov rdi, r12
movzx r12, r12b
=== 10672
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xefb818f8
add rbp, 0x505159c8; sub_carry
mov rbp, qword ptr [rbp + 0x7f8]
add rbp, r12
mov r12b, byte ptr [rbp]
movzx r12, r12b
shl r12, 0x30
sub rdi, r12
mov r15, rdi
movabs r12, 0x13bc8f453
add r12, 0x440766d; sub
=== 10673
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r14
mov rdi, r15
=== 10674
mov r15, rdi
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rsi
mov bl, byte ptr [r10]
mov r14, 0xff
shl r14, 0x28
not r14
and r15, r14
movzx r14, bl
shl r14, 0x28
or r15, r14
=== 10675
mov r8, r15
push r8
mov r15, rsp
mov r13, r15
=== 10676
mov r15, r15
mov r13, r13
push r15
push 0x6777b03
push 0x274e661f
push 0x250e50c2
=== 10677
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdi
mov r13, r13
movzx r14, r14b
=== 10678
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xce736239
add r10, 0x71961087; sub_carry
mov r10, qword ptr [r10 + 0x7f8]
add r10, r14
mov sil, byte ptr [r10]
movzx rsi, sil
shl rsi, 0x38
sub r13, rsi
movabs r14, 0xd76f230a
push r14
push 0x754d49d9
push 0x6477748a
push 0x6b0c3477
push 0xad143d3
add qword ptr [rsp + 0x20], 0x689a47b6; sub
mov rbp, r13
=== 10679
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdi
mov rbp, rbp
=== 10680
mov r13, rbp
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rdi
mov r11b, byte ptr [rdx]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and r13, rsi
movzx rsi, r11b
shl rsi, 0x30
or r13, rsi
=== 10681
mov r11, r13
push r11
mov rsi, rsp
mov r12, r13
=== 10682
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov rbp, r12
movzx rdi, dil
=== 10683
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rbp
movabs r15, 0x135bb4f1d
add r15, 0xa4e1ba3; sub
=== 10684
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r12
mov rbx, r13
=== 10685
mov rbx, rbx
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rdi
mov r9b, byte ptr [r11]
mov r8, 0xff
shl r8, 0x38
not r8
and rbx, r8
movzx r8, r9b
shl r8, 0x38
or rbx, r8
=== 10686
mov r14, rbx
push r14
mov rbx, rsp
mov r13, rbx
=== 10687
mov r9, rbx
mov rbx, r13
push r9
push 0x7a7e12e4
push 0x44491ba3
push 0xbce2a4d
=== 10688
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
mov r13, rbx
movzx rbp, bpl
=== 10689
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r13
movabs rbp, 0x136e42dc5
add rbp, 0x92514fb
=== 10690
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r15
mov r15, rbx
=== 10691
mov rbp, r15
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rdi
mov r8b, byte ptr [rax]
mov bpl, r8b
=== 10692
mov rbp, rbp
push rbp
mov r15, rsp
mov rbx, rbp
=== 10693
mov r10, r15
mov r14, rbx
push r10
push 0x67966d7a
push 0x7e6e0c5b
push 0x79017a04
push 0x5aed09ac
=== 10694
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov rdi, r14
movzx r12, r12b
=== 10695
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xe5ff1dfc
push r8
push 0x7f6e245b
push 0x12b716d4
push 0x37c964fd
push 0x678a4b6a
add qword ptr [rsp + 0x20], 0x5a0a24c4
mov r14, rdi
=== 10696
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov r12, r14
=== 10697
mov r14, r12
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rsi
mov dl, byte ptr [rdi]
mov rdi, 0xff
shl rdi, 0x28
not rdi
and r14, rdi
movzx rdi, dl
shl rdi, 0x28
or r14, rdi
=== 10698
mov rbp, r14
push rbp
mov rdi, rsp
mov r15, r14
=== 10699
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov rbp, r15
movzx rbx, bl
=== 10700
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rbp
movabs r15, 0xc28e1a05
add r15, 0x7d7b28bb
=== 10701
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rsi
mov r12, rbp
=== 10702
mov r13, r12
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbx
mov sil, byte ptr [rax]
mov r14, 0xff
shl r14, 0x30
not r14
and r13, r14
movzx r14, sil
shl r14, 0x30
or r13, r14
=== 10703
mov r10, r13
push r10
mov r13, rsp
mov rbx, r13
=== 10704
mov r13, r13
mov r12, rbx
push r13
push 0x53bb2dea
push 0x462f7069
push 0x2e8e7edb
push 0x3f3b06e0
=== 10705
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov rbp, r12
movzx r14, r14b
=== 10706
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rbp
movabs rbx, 0x11d691d04
add rbx, 0x22a025bc
=== 10707
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov r12, r14
=== 10708
mov rbx, r12
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r15
mov dl, byte ptr [rsi]
mov r8, 0xff
shl r8, 0x38
not r8
and rbx, r8
movzx r8, dl
shl r8, 0x38
or rbx, r8
=== 10709
mov rsi, rbx
movabs r14, 0xd45bceee
add r14, 0x6ba44302
test rsi, rsi
lea rdi, [rip - 0x4765c7]
cmovne rdi, r14
jmp rdi
=== 10710
movabs rbp, 0x1213b509b
push rbp
push 0x38380ac0
push 0x32823cdb
push 0x6a5006cf
add qword ptr [rsp + 0x18], 0x1f4e684d; input
=== 10711
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 30
add rsp, 30
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdi
movzx rsi, sil
=== 10712
mov rax, rsi
mov r10, 0xffffffffc8f9e764
add r10, 0x37927cae
push r10
mul qword ptr [rsp]
mov r15, rax
=== 10713
mov r13, r15
push r13
mov rsi, rsp
mov r14, r15
=== 10714
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov r15, r14
movzx rbp, bpl
=== 10715
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x11af33d47
push r12
push 0x6c2f75e6
push 0xd26001d
push 0x1c404400
push 0x36f15e57
add qword ptr [rsp + 0x20], 0x25160d79; xor
mov r13, r15
=== 10716
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 224
add rsp, 224
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov r13, r13
=== 10717
mov r15, r13
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r15
mov al, byte ptr [r8]
mov r15b, al
=== 10718
mov r10, r15
push r10
mov r12, rsp
mov r15, r15
=== 10719
mov r13, r12
mov r14, r15
push r13
push 0x372d27b8
push 0x15121703
push 0x498b299c
=== 10720
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rdx
mov rbx, r14
movzx r12, r12b
=== 10721
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rbx
movabs rsi, 0xc88cf0eb
add rsi, 0x777c59d5; xor
=== 10722
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 432
add rsp, 432
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r13
mov rdi, rdi
=== 10723
mov rsi, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r14
mov cl, byte ptr [rcx]
mov r12, 0xff
shl r12, 8
not r12
and rsi, r12
movzx r12, cl
shl r12, 8
or rsi, r12
=== 10724
mov r10, rsi
push r10
mov r15, rsp
mov r14, rsi
=== 10725
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov r15, r14
movzx rbx, bl
=== 10726
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r15
movabs rsi, 0x10097ed7d
add rsi, 0x3f715d43; xor
=== 10727
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1120
add rsp, 1120
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r12
mov rbp, r15
=== 10728
mov rbx, rbp
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov r11b, byte ptr [r14]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and rbx, rbp
movzx rbp, r11b
shl rbp, 0x10
or rbx, rbp
=== 10729
mov rsi, rbx
push rsi
mov r14, rsp
mov rsi, rbx
=== 10730
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov r15, rsi
movzx rbx, bl
=== 10731
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, r15
movabs rdi, 0x1326d088f
add rdi, 0xd9c4231; xor
=== 10732
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1536
add rsp, 1536
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r9
mov r14, r13
=== 10733
mov r12, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbp
mov r8b, byte ptr [r9]
mov rsi, 0xff
shl rsi, 0x18
not rsi
and r12, rsi
movzx rsi, r8b
shl rsi, 0x18
or r12, rsi
=== 10734
mov r8, r12
push r8
mov r14, rsp
mov rsi, r12
=== 10735
mov rbp, r14
mov r14, rsi
push rbp
push 0x1aaa37d7
push 0x1e2456d
push 0x565832f5
push 0x7fe60c3f
=== 10736
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r9
mov r12, r14
movzx rbp, bpl
=== 10737
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xd5dfd6b4
push r10
push 0x40ac1b57
push 0x82a0bc3
push 0x161e0d22
push 0x78770cd7
add qword ptr [rsp + 0x20], 0x6a29740c; xor
mov rsi, r12
=== 10738
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov r13, rsi
=== 10739
mov r12, r13
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r14
mov bpl, byte ptr [rdi]
mov r9, 0xff
shl r9, 0x28
not r9
and r12, r9
movzx r9, bpl
shl r9, 0x28
or r12, r9
=== 10740
mov rax, r12
push rax
mov rdi, rsp
mov r14, r12
=== 10741
mov rax, rdi
mov rdi, r14
push rax
push 0x7b1d1778
push 0x492d27ee
push 0xaa52187
push 0x3a00c63
=== 10742
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov r14, rdi
movzx rbx, bl
=== 10743
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, r14
movabs rbx, 0xdb09f0c4
add rbx, 0x64ff59fc; xor
=== 10744
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdx
mov rbx, r12
=== 10745
mov rbp, rbx
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov cl, byte ptr [r12]
mov rdx, 0xff
shl rdx, 0x38
not rdx
and rbp, rdx
movzx rdx, cl
shl rdx, 0x38
or rbp, rdx
=== 10746
movabs r15, 0x10caeb852
push r15
push 0x47444293
push 0x7a9c6756
push 0x40fc2c89
add qword ptr [rsp + 0x18], 0x33db0096; input
mov r14, rbp
=== 10747
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 14
add rsp, 14
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rsi
mov r14, r14
movzx rbp, bpl
=== 10748
mov rax, rbp
mov r12, 0xffffffff9ca20819
add r12, 0x64104bab
push r12
mov r12, r14
mul qword ptr [rsp]
mov rsi, rax
=== 10749
mov r12, r12
xor r12, rsi
=== 10750
mov rcx, r12
push rcx
mov rdi, rsp
mov rbp, r12
=== 10751
mov r12, rdi
mov rdi, rbp
push r12
push 0x2dfd1917
push 0x663f0736
push 0x5b6c31bb
=== 10752
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbp
mov rbp, rdi
movzx rdi, dil
=== 10753
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xd7aa2bfd
add r8, 0x685f36c3; add_carry
mov r8, qword ptr [r8 + 0x238]
add r8, rdi
mov r15b, byte ptr [r8]
movzx r15, r15b
shl r15, 8
add rbp, r15
mov r15, rbp
movabs r13, 0xc8db34ee
add r13, 0x772e25d2; add
=== 10754
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 568
add rsp, 568
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdi
mov rbx, r15
=== 10755
mov rbx, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov r15b, byte ptr [rcx]
mov bl, r15b
=== 10756
mov r14, rbx
push r14
mov rbx, rsp
mov rsi, rbx
=== 10757
mov r11, rbx
mov r15, rsi
push r11
push 0x765e2a3e
push 0x533ed6
push 0x7f1546e1
=== 10758
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov r13, r15
movzx r12, r12b
=== 10759
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xd8c653e8
add rbp, 0x67430ed8; add_carry
mov rbp, qword ptr [rbp + 0x88]
add rbp, r12
mov r11b, byte ptr [rbp]
movzx r11, r11b
shl r11, 0x10
add r13, r11
movabs rbp, 0xd6032aa4
push rbp
push 0x46ad0356
push 0x6a406189
push 0x58826c66
push 0x2f070a09
add qword ptr [rsp + 0x20], 0x6a06301c; add
mov r14, r13
=== 10760
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 136
add rsp, 136
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r11
mov rbx, r14
=== 10761
mov rbp, rbx
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r14
mov dil, byte ptr [r15]
mov rdx, 0xff
shl rdx, 8
not rdx
and rbp, rdx
movzx rdx, dil
shl rdx, 8
or rbp, rdx
=== 10762
mov rdx, rbp
push rdx
mov r15, rsp
mov rdi, rbp
=== 10763
mov rsi, r15
mov rbx, rdi
push rsi
push 0x29b82f5f
push 0x256f1862
push 0x1feb5c96
push 0x5953702d
=== 10764
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov r12, rbx
movzx r15, r15b
=== 10765
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x13d262b51
add r15, 0x2e3376f; add_carry
mov r15, qword ptr [r15 + 0x5d8]
add r15, r15
mov cl, byte ptr [r15]
movzx rcx, cl
shl rcx, 0x18
add r12, rcx
movabs rdi, 0xfe7f3b89
push rdi
push 0x2685569a
push 0x751a3fe3
push 0x38ad3b70
push 0x54755050
add qword ptr [rsp + 0x20], 0x418a1f37; add
mov r15, r12
=== 10766
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1496
add rsp, 1496
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r14
mov rbp, r15
=== 10767
mov rbx, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbx
mov dil, byte ptr [r12]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and rbx, rsi
movzx rsi, dil
shl rsi, 0x10
or rbx, rsi
=== 10768
mov rsi, rbx
push rsi
mov r13, rsp
mov rbp, rbx
=== 10769
mov rbp, r13
mov r12, rbp
push rbp
push 0x64c62d5d
push 0x70912c03
push 0x16766c06
push 0x241249b3
=== 10770
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rsi
mov rbp, r12
movzx r14, r14b
=== 10771
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xdc0a08d9
add rdi, 0x63ff59e7; add_carry
mov rdi, qword ptr [rdi + 0x108]
add rdi, r14
mov r11b, byte ptr [rdi]
movzx r11, r11b
shl r11, 0x20
add rbp, r11
mov r14, rbp
movabs rbx, 0x10f304b28
add rbx, 0x30d90f98; add
=== 10772
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 264
add rsp, 264
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r9
mov rbx, r14
=== 10773
mov rbp, rbx
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rsi
mov dil, byte ptr [r11]
mov r8, 0xff
shl r8, 0x18
not r8
and rbp, r8
movzx r8, dil
shl r8, 0x18
or rbp, r8
=== 10774
mov rbp, rbp
push rbp
mov rsi, rsp
mov r15, rbp
=== 10775
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r8
mov r15, r15
movzx rbp, bpl
=== 10776
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x110ce61c7
add r12, 0x2f3b00f9; add_carry
mov r12, qword ptr [r12]
add r12, rbp
mov cl, byte ptr [r12]
movzx rcx, cl
shl rcx, 0x28
add r15, rcx
mov r12, r15
movabs r15, 0x125f14c80
add r15, 0x1a180e40; add
=== 10777
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdx
mov r14, r12
=== 10778
mov rdi, r14
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbx
mov cl, byte ptr [r12]
mov rsi, 0xff
shl rsi, 0x20
not rsi
and rdi, rsi
movzx rsi, cl
shl rsi, 0x20
or rdi, rsi
=== 10779
mov r8, rdi
push r8
mov r15, rsp
mov r13, rdi
=== 10780
mov rbp, r15
mov rdi, r13
push rbp
push 0xc7e4ca9
push 0x307f652f
push 0x3b23496
=== 10781
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r15
mov r12, rdi
movzx r13, r13b
=== 10782
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x1264d066a
add rbx, 0x19bc5c56; add_carry
mov rbx, qword ptr [rbx]
add rbx, r13
mov cl, byte ptr [rbx]
movzx rcx, cl
shl rcx, 0x30
add r12, rcx
mov r12, r12
movabs r14, 0x11f362e2e
add r14, 0x20d32c92; add
=== 10783
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r11
mov rbp, r12
=== 10784
mov rbp, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov bl, byte ptr [r9]
mov r13, 0xff
shl r13, 0x28
not r13
and rbp, r13
movzx r13, bl
shl r13, 0x28
or rbp, r13
=== 10785
mov rbp, rbp
push rbp
mov rsi, rsp
mov rbp, rbp
=== 10786
mov r14, rsi
mov r12, rbp
push r14
push 0x3ef04cf
push 0x7ccc6345
push 0x5f7e608c
=== 10787
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rcx
mov r14, r12
movzx rbx, bl
=== 10788
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x12152505c
add rdx, 0x1eb71264; add_carry
mov rdx, qword ptr [rdx]
add rdx, rbx
mov cl, byte ptr [rdx]
movzx rcx, cl
shl rcx, 0x38
add r14, rcx
movabs r13, 0xf89a42f2
push r13
push 0x40db2d8e
push 0x7a3807e2
push 0xbf32e67
add qword ptr [rsp + 0x18], 0x476f17ce; add
mov r15, r14
=== 10789
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov r13, r15
=== 10790
mov r14, r13
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r14
mov dl, byte ptr [r12]
mov r15, 0xff
shl r15, 0x30
not r15
and r14, r15
movzx r15, dl
shl r15, 0x30
or r14, r15
=== 10791
movabs r14, 0x1001663df
push r14
push 0x52a5173
push 0xab5548f
push 0xf380f6d
add qword ptr [rsp + 0x18], 0x40735509; input
mov r13, r14
=== 10792
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rsi
mov r14, r13
movzx rbp, bpl
=== 10793
mov rax, rbp
mov r9, 0xffffffffa4b497a2
add r9, 0x5bda6dd7
push r9
mov r13, r14
mul qword ptr [rsp]
mov rbx, rax
=== 10794
mov rbp, r13
add rbp, rbx
=== 10795
mov r10, rbp
push r10
mov rbx, rsp
mov r13, rbp
=== 10796
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov r14, r13
movzx r12, r12b
=== 10797
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0xdb701451
add r8, 0x64995e6f; sub_carry
mov r8, qword ptr [r8 + 0x430]
add r8, r12
mov sil, byte ptr [r8]
movzx rsi, sil
shl rsi, 8
sub r14, rsi
movabs rbx, 0xcf2a5ce6
push rbx
push 0x1cdd7dc6
push 0x66ed7721
push 0x2d2c6c2f
push 0x5afc0f17
add qword ptr [rsp + 0x20], 0x70df0dda; sub
mov r14, r14
=== 10798
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1072
add rsp, 1072
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov rsi, r14
=== 10799
mov r13, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbp
mov sil, byte ptr [r8]
mov r13b, sil
=== 10800
mov rdx, r13
push rdx
mov rsi, rsp
mov rdi, r13
=== 10801
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov r15, rdi
movzx rbp, bpl
=== 10802
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x1163e0204
add r15, 0x29cb70bc; sub_carry
mov r15, qword ptr [r15 + 0x88]
add r15, rbp
mov sil, byte ptr [r15]
movzx rsi, sil
shl rsi, 0x10
sub r15, rsi
movabs rdx, 0xfe4f1923
push rdx
push 0x42e13494
push 0x6a121217
push 0x2c92357d
add qword ptr [rsp + 0x18], 0x41ba519d; sub
mov rsi, r15
=== 10803
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 136
add rsp, 136
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov rbp, rsi
=== 10804
mov rsi, rbp
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rsi
mov r11b, byte ptr [rbp]
mov r8, 0xff
shl r8, 8
not r8
and rsi, r8
movzx r8, r11b
shl r8, 8
or rsi, r8
=== 10805
mov rbx, rsi
push rbx
mov rsi, rsp
mov rbp, rsi
=== 10806
mov rsi, rsi
mov r12, rbp
push rsi
push 0x4141c7a
push 0x61cc5ed6
push 0x12970766
push 0x6d7f0c2d
=== 10807
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov r13, r12
movzx r14, r14b
=== 10808
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0xcf2c3961
add r10, 0x70dd395f; sub_carry
mov r10, qword ptr [r10 + 0x348]
add r10, r14
mov r11b, byte ptr [r10]
movzx r11, r11b
shl r11, 0x18
sub r13, r11
mov r12, r13
movabs r13, 0xe0475b10
add r13, 0x5fc20fb0; sub
=== 10809
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 840
add rsp, 840
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r8
mov rsi, r12
=== 10810
mov rdi, rsi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r13
mov r11b, byte ptr [rax]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and rdi, rsi
movzx rsi, r11b
shl rsi, 0x10
or rdi, rsi
=== 10811
mov rdx, rdi
push rdx
mov r15, rsp
mov rbx, rdi
=== 10812
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r15
mov r14, rbx
movzx r15, r15b
=== 10813
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xd6ae0338
add rdi, 0x695b6f88; sub_carry
mov rdi, qword ptr [rdi + 0x7d0]
add rdi, r15
mov r10b, byte ptr [rdi]
movzx r10, r10b
shl r10, 0x20
sub r14, r10
movabs rcx, 0xf9932d99
push rcx
push 0x21f035a6
push 0x5be25df6
push 0x6de56e10
add qword ptr [rsp + 0x18], 0x46763d27; sub
mov rbx, r14
=== 10814
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2000
add rsp, 2000
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r11
mov rsi, rbx
=== 10815
mov r13, rsi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r13
mov r9b, byte ptr [rsi]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and r13, rcx
movzx rcx, r9b
shl rcx, 0x18
or r13, rcx
=== 10816
mov r14, r13
push r14
mov rdi, rsp
mov r13, r13
=== 10817
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov rbp, r13
movzx rbx, bl
=== 10818
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x117820f79
add rbp, 0x28876347; sub_carry
mov rbp, qword ptr [rbp]
add rbp, rbx
mov sil, byte ptr [rbp]
movzx rsi, sil
shl rsi, 0x38
sub rbp, rsi
movabs rsi, 0xca4e269c
push rsi
push 0x16c2bd2
push 0x13884fb4
push 0x452a2833
add qword ptr [rsp + 0x18], 0x75bb4424; sub
mov r12, rbp
=== 10819
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r8
mov r15, r12
=== 10820
mov rbx, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov r10b, byte ptr [r9]
mov rax, 0xff
shl rax, 0x30
not rax
and rbx, rax
movzx rax, r10b
shl rax, 0x30
or rbx, rax
=== 10821
mov rsi, rbx
movabs r15, 0x1333f7aa7
add r15, 0xd4a3e41; input
=== 10822
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 22
add rsp, 22
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdx
mov rdi, rsi
movzx rsi, sil
=== 10823
mov rax, rsi
mov r11, 0xffffffff88a6a874
add r11, 0x77d41c16
push r11
mov r12, rdi
mul qword ptr [rsp]
mov r13, rax
=== 10824
mov rdi, r12
sub rdi, r13
=== 10825
mov r8, rdi
push r8
mov rdi, rsp
mov r13, rdi
=== 10826
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdi
mov rdi, r13
movzx rsi, sil
=== 10827
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x1301d09d6
add rdi, 0xfec58ea; add_carry
mov rdi, qword ptr [rdi + 0x6a8]
add rdi, rsi
mov dl, byte ptr [rdi]
movzx rdx, dl
shl rdx, 8
add rdi, rdx
mov rbp, rdi
movabs rdi, 0xd52658ff
add rdi, 0x6ae301c1; add
=== 10828
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1704
add rsp, 1704
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov rdi, rbp
=== 10829
mov rbx, rdi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov al, byte ptr [r14]
mov bl, al
=== 10830
mov rax, rbx
push rax
mov rdi, rsp
mov r13, rbx
=== 10831
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov r14, r13
movzx rbx, bl
=== 10832
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x13d58fbfa
add r13, 0x2b066c6; add_carry
mov r13, qword ptr [r13 + 0x3e8]
add r13, rbx
mov r10b, byte ptr [r13]
movzx r10, r10b
shl r10, 0x10
add r14, r10
movabs r11, 0xfab93911
push r11
push 0x6d661872
push 0xce12a2d
push 0x332275da
push 0x48a0059
add qword ptr [rsp + 0x20], 0x455021af; add
mov rbx, r14
=== 10833
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1000
add rsp, 1000
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov rbp, rbx
=== 10834
mov r15, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r15
mov dil, byte ptr [r8]
mov rbp, 0xff
shl rbp, 8
not rbp
and r15, rbp
movzx rbp, dil
shl rbp, 8
or r15, rbp
=== 10835
mov rax, r15
push rax
mov rbx, rsp
mov r14, r15
=== 10836
mov r12, rbx
mov rsi, r14
push r12
push 0x417d2adf
push 0xd617696
push 0x17ec03ed
=== 10837
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov rbp, rsi
movzx rsi, sil
=== 10838
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xe9b7e512
add r13, 0x56517dae; add_carry
mov r13, qword ptr [r13 + 0x3c0]
add r13, rsi
mov r14b, byte ptr [r13]
movzx r14, r14b
shl r14, 0x18
add rbp, r14
movabs rsi, 0x1104e468d
push rsi
push 0x66634988
push 0x7fd302bf
push 0x5055154
add qword ptr [rsp + 0x18], 0x2fbb1433; add
mov r13, rbp
=== 10839
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 960
add rsp, 960
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov rdi, r13
=== 10840
mov r13, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r14
mov r12b, byte ptr [r12]
mov rdi, 0xff
shl rdi, 0x10
not rdi
and r13, rdi
movzx rdi, r12b
shl rdi, 0x10
or r13, rdi
=== 10841
mov r8, r13
push r8
mov rbp, rsp
mov r15, r13
=== 10842
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov rsi, r15
movzx rdi, dil
=== 10843
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x12d7060ab
add rdi, 0x12990215; add_carry
mov rdi, qword ptr [rdi + 0x5d8]
add rdi, rdi
mov r14b, byte ptr [rdi]
movzx r14, r14b
shl r14, 0x20
add rsi, r14
mov rsi, rsi
movabs r13, 0xcfed49b3
add r13, 0x701c110d; add
=== 10844
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1496
add rsp, 1496
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rcx
mov r13, rsi
=== 10845
mov rdi, r13
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r14
mov bl, byte ptr [r11]
mov r15, 0xff
shl r15, 0x18
not r15
and rdi, r15
movzx r15, bl
shl r15, 0x18
or rdi, r15
=== 10846
mov r14, rdi
push r14
mov rdi, rsp
mov rsi, rdi
=== 10847
mov rdi, rdi
mov rbp, rsi
push rdi
push 0xbf665a0
push 0x56605090
push 0x19e91acb
push 0x38571cbd
=== 10848
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdi
mov rbp, rbp
movzx r14, r14b
=== 10849
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x10b995c73
add rdx, 0x3470064d; add_carry
mov rdx, qword ptr [rdx]
add rdx, r14
mov r10b, byte ptr [rdx]
movzx r10, r10b
shl r10, 0x30
add rbp, r10
movabs r15, 0x1047925f3
push r15
push 0x98923e3
push 0x615e7f63
push 0x20bc0905
add qword ptr [rsp + 0x18], 0x3b9034cd; add
mov rsi, rbp
=== 10850
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rax
mov rbp, rsi
=== 10851
mov rbx, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r15
mov dl, byte ptr [r9]
mov r8, 0xff
shl r8, 0x28
not r8
and rbx, r8
movzx r8, dl
shl r8, 0x28
or rbx, r8
=== 10852
mov r8, rbx
push r8
mov rbp, rsp
mov r15, rbx
=== 10853
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov rbp, r15
movzx rsi, sil
=== 10854
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rbp
movabs r13, 0xd80f553d
add r13, 0x67fa0583; add
=== 10855
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov rbx, rdi
=== 10856
mov r12, rbx
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbp
mov al, byte ptr [rdi]
mov rdi, 0xff
shl rdi, 0x38
not rdi
and r12, rdi
movzx rdi, al
shl rdi, 0x38
or r12, rdi
=== 10857
mov r13, r12
movabs rsi, 0xffbd5190
add rsi, 0x40cc6758; input
=== 10858
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 10
add rsp, 10
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r15
mov rbx, r13
movzx rsi, sil
=== 10859
mov rax, rsi
mov rsi, 0xffffffffc0d1bee6
add rsi, 0x3f557900
push rsi
mov r14, rbx
mul qword ptr [rsp]
mov rdi, rax
=== 10860
mov r12, r14
add r12, rdi
=== 10861
mov r12, r12
push r12
mov rbp, rsp
mov r14, r12
=== 10862
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov r13, r14
movzx r12, r12b
=== 10863
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r13
movabs r15, 0xe69e24aa
add r15, 0x596b2616; xor
=== 10864
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1048
add rsp, 1048
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbp
mov r15, r14
=== 10865
mov r13, r15
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r14
mov bl, byte ptr [r9]
mov r13b, bl
=== 10866
mov rdi, r13
push rdi
mov r13, rsp
mov r14, r13
=== 10867
mov rsi, r13
mov r12, r14
push rsi
push 0x7df46007
push 0x72f80f53
push 0x49bc3530
push 0x23aa1da2
=== 10868
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r15
mov r14, r12
movzx r13, r13b
=== 10869
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r14
movabs r15, 0x114abee82
add r15, 0x2b5d5c3e; xor
=== 10870
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 944
add rsp, 944
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r11
mov rsi, rbp
=== 10871
mov rdi, rsi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r12
mov dl, byte ptr [r12]
mov r13, 0xff
shl r13, 8
not r13
and rdi, r13
movzx r13, dl
shl r13, 8
or rdi, r13
=== 10872
mov rbx, rdi
push rbx
mov rsi, rsp
mov r13, rdi
=== 10873
mov r15, rsi
mov rsi, r13
push r15
push 0x4b343f30
push 0x2484f80
push 0x7e9840d9
push 0x587d234b
=== 10874
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov r12, rsi
movzx r15, r15b
=== 10875
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, r12
movabs rbp, 0x100a4e932
add rbp, 0x3f64618e; xor
=== 10876
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1496
add rsp, 1496
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r12
mov rbx, rsi
=== 10877
mov rbp, rbx
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rsi
mov bl, byte ptr [rdi]
mov r9, 0xff
shl r9, 0x10
not r9
and rbp, r9
movzx r9, bl
shl r9, 0x10
or rbp, r9
=== 10878
mov rbx, rbp
push rbx
mov r14, rsp
mov rdi, rbp
=== 10879
mov rbx, r14
mov r13, rdi
push rbx
push 0x6f0b1e21
push 0x50531aee
push 0x1f0f0627
push 0x321f0acd
=== 10880
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r14
mov r15, r13
movzx rsi, sil
=== 10881
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r15
movabs r13, 0x11ec0d06e
add r13, 0x21487a52; xor
=== 10882
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1296
add rsp, 1296
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov rsi, rbp
=== 10883
mov rsi, rsi
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rdi
mov cl, byte ptr [rbp]
mov r10, 0xff
shl r10, 0x18
not r10
and rsi, r10
movzx r10, cl
shl r10, 0x18
or rsi, r10
=== 10884
mov rbx, rsi
push rbx
mov rsi, rsp
mov rdi, rsi
=== 10885
mov rbx, rsi
mov rdi, rdi
push rbx
push 0x279465dd
push 0x1bc86e2f
push 0x732f60aa
=== 10886
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r10
mov r12, rdi
movzx r14, r14b
=== 10887
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r12
movabs r14, 0xc4e9cd03
add r14, 0x7b1f7dbd; xor
=== 10888
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rdi
mov r15, rbp
=== 10889
mov rbx, r15
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rsi
mov r15b, byte ptr [rcx]
mov r8, 0xff
shl r8, 0x30
not r8
and rbx, r8
movzx r8, r15b
shl r8, 0x30
or rbx, r8
=== 10890
movabs r14, 0x10cc371db
push r14
push 0x65994f99
push 0x4a2d78de
push 0x1f465418
add qword ptr [rsp + 0x18], 0x33c6470d; input
mov r12, rbx
=== 10891
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 18
add rsp, 18
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r15
mov r13, r12
movzx rbx, bl
=== 10892
mov rax, rbx
mov r13, 0xfffffffff38e12e3
add r13, 0xcb550d6
push r13
mov r12, r13
mul qword ptr [rsp]
mov r13, rax
=== 10893
mov rsi, r12
sub rsi, r13
=== 10894
mov r14, rsi
push r14
mov rbp, rsp
mov r13, rsi
=== 10895
mov rbx, rbp
mov r14, r13
push rbx
push 0x4cd4002e
push 0xaca06b5
push 0x699875d1
=== 10896
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov r13, r14
movzx rsi, sil
=== 10897
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r13
movabs r13, 0xec43f642
add r13, 0x53c5547e; xor
=== 10898
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 960
add rsp, 960
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r10
mov rbx, r15
=== 10899
mov rbx, rbx
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbp
mov r13b, byte ptr [rax]
mov bl, r13b
=== 10900
mov r15, rbx
push r15
mov rbp, rsp
mov r14, rbx
=== 10901
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rsi
mov r12, r14
movzx rbx, bl
=== 10902
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x1180536cd
push r11
push 0x4e293974
push 0x2d5f2c
push 0x155c1cb8
add qword ptr [rsp + 0x18], 0x280413f3; xor
mov rsi, r12
=== 10903
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 664
add rsp, 664
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r9
mov r12, rsi
=== 10904
mov rbx, r12
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov dl, byte ptr [r8]
mov rax, 0xff
shl rax, 8
not rax
and rbx, rax
movzx rax, dl
shl rax, 8
or rbx, rax
=== 10905
mov r14, rbx
push r14
mov rdi, rsp
mov rsi, rbx
=== 10906
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rcx
mov rbp, rsi
movzx rdi, dil
=== 10907
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x108052ced
push r11
push 0x6d3f6144
push 0x55862490
push 0x236f43d9
add qword ptr [rsp + 0x18], 0x38041dd3; xor
mov r12, rbp
=== 10908
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1568
add rsp, 1568
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rax
mov r14, r12
=== 10909
mov rbx, r14
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r15
mov cl, byte ptr [r11]
mov r14, 0xff
shl r14, 0x10
not r14
and rbx, r14
movzx r14, cl
shl r14, 0x10
or rbx, r14
=== 10910
mov rsi, rbx
push rsi
mov r12, rsp
mov rbp, rbx
=== 10911
mov rbx, r12
mov r14, rbp
push rbx
push 0x44955615
push 0x5650471f
push 0x5e042183
=== 10912
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r15
mov r14, r14
movzx rdi, dil
=== 10913
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, r14
movabs rbx, 0x10333f90e
add rbx, 0x3cd551b2; xor
=== 10914
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1088
add rsp, 1088
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r13
mov rsi, r14
=== 10915
mov r13, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov sil, byte ptr [r8]
mov r9, 0xff
shl r9, 0x18
not r9
and r13, r9
movzx r9, sil
shl r9, 0x18
or r13, r9
=== 10916
mov r11, r13
push r11
mov r13, rsp
mov r12, r13
=== 10917
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r8
mov r12, r12
movzx rdi, dil
=== 10918
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xf16123e4
push rcx
push 0x68c002be
push 0x1f4461de
push 0x277e2e3e
add qword ptr [rsp + 0x18], 0x4ea826dc; xor
mov rbx, r12
=== 10919
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r15
mov rbx, rbx
=== 10920
mov r12, rbx
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r14
mov r9b, byte ptr [r8]
mov r10, 0xff
shl r10, 0x28
not r10
and r12, r10
movzx r10, r9b
shl r10, 0x28
or r12, r10
=== 10921
mov r13, r12
push r13
mov r13, rsp
mov rsi, r12
=== 10922
mov rdi, r13
mov rbx, rsi
push rdi
push 0x10f0136b
push 0x538b7178
push 0x7d833580
=== 10923
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov rdi, rbx
movzx rsi, sil
=== 10924
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xe20f06f3
push r11
push 0xd6c4f35
push 0x6bd1697f
push 0xc61512b
add qword ptr [rsp + 0x18], 0x5dfa43cd; xor
mov r15, rdi
=== 10925
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r12
mov r15, r15
=== 10926
mov rbx, r15
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rdi
mov r9b, byte ptr [rsi]
mov r14, 0xff
shl r14, 0x30
not r14
and rbx, r14
movzx r14, r9b
shl r14, 0x30
or rbx, r14
=== 10927
mov r12, rbx
push r12
mov r13, rsp
mov rdi, rbx
=== 10928
mov r12, r13
mov r15, rdi
push r12
push 0x40ce1d81
push 0x10044b1b
push 0x51291489
push 0x5884342b
=== 10929
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r13
mov rbx, r15
movzx rbp, bpl
=== 10930
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xc31f0b95
push r12
push 0x486b47f5
push 0x1d6c16fa
push 0x62844de4
add qword ptr [rsp + 0x18], 0x7cea3f2b; xor
mov r12, rbx
=== 10931
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r11
mov rbp, r12
=== 10932
mov r14, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rbx
mov sil, byte ptr [r12]
mov r8, 0xff
shl r8, 0x38
not r8
and r14, r8
movzx r8, sil
shl r8, 0x38
or r14, r8
=== 10933
movabs rax, 0x1132f6ed6
push rax
push 0x2c50f74
push 0x397263a7
push 0x614013f1
add qword ptr [rsp + 0x18], 0x2d5a4a12; input
mov r14, r14
=== 10934
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbp
mov rbx, r14
movzx rsi, sil
=== 10935
mov rax, rsi
mov r12, 0xffffffff88a60dc9
add r12, 0x780d7680
push r12
mov rbx, rbx
mul qword ptr [rsp]
mov r12, rax
=== 10936
mov r13, rbx
xor r13, r12
=== 10937
mov r12, r13
push r12
mov rsi, rsp
mov r13, r13
=== 10938
mov rsi, rsi
mov r15, r13
push rsi
push 0x7a3c036f
push 0x26530e1d
push 0x11d76c14
push 0x1b01625c
=== 10939
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r14
mov rbp, r15
movzx r15, r15b
=== 10940
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xc535226b
add r12, 0x7ad45055; sub_carry
mov r12, qword ptr [r12 + 0x3c0]
add r12, r15
mov r11b, byte ptr [r12]
movzx r11, r11b
shl r11, 8
sub rbp, r11
mov rbx, rbp
movabs r13, 0xee430c78
add r13, 0x51c65e48; sub
=== 10941
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 960
add rsp, 960
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdx
mov rsi, rbx
=== 10942
mov rbp, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov r11b, byte ptr [r14]
mov bpl, r11b
=== 10943
mov rbx, rbp
push rbx
mov r15, rsp
mov rdi, rbp
=== 10944
mov rdi, r15
mov r15, rdi
push rdi
push 0x38c21294
push 0x59371855
push 0x470535f4
push 0x11a03d27
=== 10945
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rdx
mov r13, r15
movzx rbx, bl
=== 10946
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xeccf4db2
add r12, 0x533a250e; sub_carry
mov r12, qword ptr [r12 + 0x600]
add r12, rbx
mov r10b, byte ptr [r12]
movzx r10, r10b
shl r10, 0x10
sub r13, r10
mov r12, r13
movabs r13, 0xe009fa88
add r13, 0x5fff7038; sub
=== 10947
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1536
add rsp, 1536
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdx
mov r12, r12
=== 10948
mov rdi, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r13
mov r14b, byte ptr [rdx]
mov r8, 0xff
shl r8, 8
not r8
and rdi, r8
movzx r8, r14b
shl r8, 8
or rdi, r8
=== 10949
mov rbp, rdi
push rbp
mov r12, rsp
mov r13, rdi
=== 10950
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov r13, r13
movzx r12, r12b
=== 10951
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x13b0b4038
add rsi, 0x4fe3288; sub_carry
mov rsi, qword ptr [rsi + 0x4e8]
add rsi, r12
mov r15b, byte ptr [rsi]
movzx r15, r15b
shl r15, 0x18
sub r13, r15
mov r12, r13
movabs r13, 0x13f3cf45e
add r13, 0xcc7662; sub
=== 10952
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1256
add rsp, 1256
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r11
mov r14, r12
=== 10953
mov r13, r14
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rdi
mov bpl, byte ptr [r14]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and r13, rsi
movzx rsi, bpl
shl rsi, 0x10
or r13, rsi
=== 10954
mov r12, r13
push r12
mov rbp, rsp
mov r13, r13
=== 10955
mov rbx, rbp
mov r13, r13
push rbx
push 0x608834ee
push 0x6c8a227c
push 0x2c190411
push 0x29715022
=== 10956
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov r13, r13
movzx r15, r15b
=== 10957
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x103ef64c6
add r15, 0x3c1a0dfa; sub_carry
mov r15, qword ptr [r15 + 0x100]
add r15, r15
mov r14b, byte ptr [r15]
movzx r14, r14b
shl r14, 0x20
sub r13, r14
mov r14, r13
movabs r13, 0xd7ba4ba1
add r13, 0x684f1f1f; sub
=== 10958
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 256
add rsp, 256
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rbx
mov r12, r14
=== 10959
mov rsi, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rbp
mov r11b, byte ptr [r10]
mov r15, 0xff
shl r15, 0x18
not r15
and rsi, r15
movzx r15, r11b
shl r15, 0x18
or rsi, r15
=== 10960
mov rcx, rsi
push rcx
mov r14, rsp
mov rdi, rsi
=== 10961
mov rax, r14
mov rbp, rdi
push rax
push 0x43182d57
push 0x6cba351a
push 0x79c26694
=== 10962
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r12
mov rdi, rbp
movzx rbp, bpl
=== 10963
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x105f4f763
add r10, 0x3a147b5d; sub_carry
mov r10, qword ptr [r10]
add r10, rbp
mov r13b, byte ptr [r10]
movzx r13, r13b
shl r13, 0x30
sub rdi, r13
mov rdi, rdi
movabs r15, 0xf60e0592
add r15, 0x49fb652e; sub
=== 10964
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r13
mov rdi, rdi
=== 10965
mov rdi, rdi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rsi
mov r14b, byte ptr [r14]
mov r10, 0xff
shl r10, 0x28
not r10
and rdi, r10
movzx r10, r14b
shl r10, 0x28
or rdi, r10
=== 10966
mov r14, rdi
movabs rbx, 0x123fdb316
add rbx, 0x1c8c05d2; input
=== 10967
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 26
add rsp, 26
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbx
mov r13, r14
movzx r14, r14b
=== 10968
mov rax, r14
mov r10, 0xffffffffe89998b9
add r10, 0x17d47a5d
push r10
mov rdi, r13
mul qword ptr [rsp]
mov rsi, rax
=== 10969
mov r15, rdi
add r15, rsi
=== 10970
mov rbp, r15
push rbp
mov r13, rsp
mov rbx, r15
=== 10971
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r9
mov r15, rbx
movzx rdi, dil
=== 10972
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x11ec82069
add r11, 0x21414257; add_carry
mov r11, qword ptr [r11 + 0x748]
add r11, rdi
mov bpl, byte ptr [r11]
movzx rbp, bpl
shl rbp, 8
add r15, rbp
mov r14, r15
movabs rbp, 0xd4e9df42
add rbp, 0x6b1f7b7e; add
=== 10973
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1864
add rsp, 1864
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r8
mov r13, r14
=== 10974
mov rbp, r13
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rdi
mov r15b, byte ptr [rdi]
mov bpl, r15b
=== 10975
mov r10, rbp
push r10
mov rsi, rsp
mov r13, rbp
=== 10976
mov r11, rsi
mov rbx, r13
push r11
push 0x498e2662
push 0x76653c9e
push 0x7e235616
push 0x39532dba
=== 10977
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov rsi, rbx
movzx r13, r13b
=== 10978
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x127152e75
add rbx, 0x18f4344b; add_carry
mov rbx, qword ptr [rbx + 0x6f0]
add rbx, r13
mov r11b, byte ptr [rbx]
movzx r11, r11b
shl r11, 0x10
add rsi, r11
mov r14, rsi
movabs r13, 0x118454c1b
add r13, 0x27c40ea5; add
=== 10979
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1776
add rsp, 1776
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r12
mov rbx, r14
=== 10980
mov r14, rbx
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r13
mov r11b, byte ptr [r15]
mov r13, 0xff
shl r13, 8
not r13
and r14, r13
movzx r13, r11b
shl r13, 8
or r14, r13
=== 10981
mov rbx, r14
push rbx
mov rdi, rsp
mov r14, r14
=== 10982
mov r12, rdi
mov r13, r14
push r12
push 0x63503732
push 0x7f91e83
push 0x3f302d56
=== 10983
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov rsi, r13
movzx rdi, dil
=== 10984
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x10a875dce
add rbx, 0x358204f2; add_carry
mov rbx, qword ptr [rbx + 0x218]
add rbx, rdi
mov dil, byte ptr [rbx]
movzx rdi, dil
shl rdi, 0x18
add rsi, rdi
movabs rbp, 0x113004ac3
push rbp
push 0x7bae0da9
push 0x6aa71c63
push 0x66895ca3
push 0x6af1141e
add qword ptr [rsp + 0x20], 0x2d090ffd; add
mov r15, rsi
=== 10985
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 536
add rsp, 536
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rsi
mov rsi, r15
=== 10986
mov r12, rsi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, rbx
mov r13b, byte ptr [rsi]
mov r14, 0xff
shl r14, 0x10
not r14
and r12, r14
movzx r14, r13b
shl r14, 0x10
or r12, r14
=== 10987
mov r10, r12
push r10
mov r14, rsp
mov rbp, r12
=== 10988
mov r12, r14
mov rbx, rbp
push r12
push 0x49c43ade
push 0x58bb08f1
push 0x55be0e99
push 0x124d2e42
=== 10989
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r9
mov r13, rbx
movzx r15, r15b
=== 10990
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x1222c5212
add r11, 0x1ddd10ae; add_carry
mov r11, qword ptr [r11 + 0x98]
add r11, r15
mov r15b, byte ptr [r11]
movzx r15, r15b
shl r15, 0x20
add r13, r15
movabs r11, 0xcc32fb2b
push r11
push 0x586b4e66
push 0x4e8d0e31
push 0x67a10dc
push 0x6a0234c7
add qword ptr [rsp + 0x20], 0x73d65f95; add
mov r12, r13
=== 10991
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 152
add rsp, 152
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r10
mov r12, r12
=== 10992
mov rbp, r12
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov r8b, byte ptr [r11]
mov rdi, 0xff
shl rdi, 0x18
not rdi
and rbp, rdi
movzx rdi, r8b
shl rdi, 0x18
or rbp, rdi
=== 10993
mov rsi, rbp
push rsi
mov r14, rsp
mov rsi, rbp
=== 10994
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov r12, rsi
movzx rdi, dil
=== 10995
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x11817299e
add rdi, 0x27f23922; add_carry
mov rdi, qword ptr [rdi]
add rdi, rdi
mov bl, byte ptr [rdi]
movzx rbx, bl
shl rbx, 0x28
add r12, rbx
movabs rbx, 0x128805a2d
push rbx
push 0x42f3b77
push 0x72ae7fae
push 0x716a75eb
add qword ptr [rsp + 0x18], 0x17890093; add
mov r15, r12
=== 10996
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r10
mov rdi, r15
=== 10997
mov r13, rdi
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r14
mov r10b, byte ptr [r12]
mov r8, 0xff
shl r8, 0x20
not r8
and r13, r8
movzx r8, r10b
shl r8, 0x20
or r13, r8
=== 10998
mov rax, r13
push rax
mov r12, rsp
mov r14, r13
=== 10999
mov r10, r12
mov r12, r14
push r10
push 0x76452107
push 0x233e7354
push 0xf8905ed
push 0x671e4886
=== 11000
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rax
mov rbx, r12
movzx rdi, dil
=== 11001
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xf8e5e85f
add rax, 0x47237a61; add_carry
mov rax, qword ptr [rax]
add rax, rdi
mov r14b, byte ptr [rax]
movzx r14, r14b
shl r14, 0x30
add rbx, r14
movabs r13, 0x12ace2ce6
push r13
push 0x70ee3cb2
push 0x3c534a03
push 0x6c130fe7
push 0x1c700729
add qword ptr [rsp + 0x20], 0x153b2dda; add
mov rsi, rbx
=== 11002
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r14
mov rsi, rsi
=== 11003
mov r14, rsi
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r13
mov bl, byte ptr [r15]
mov rcx, 0xff
shl rcx, 0x28
not rcx
and r14, rcx
movzx rcx, bl
shl rcx, 0x28
or r14, rcx
=== 11004
mov r11, r14
push r11
mov rsi, rsp
mov r12, r14
=== 11005
mov r12, rsi
mov rdi, r12
push r12
push 0x24fe6138
push 0x62056dd5
push 0x43c37c8
push 0x2d660d77
=== 11006
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov r13, rdi
movzx r15, r15b
=== 11007
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xd54315fc
add rdi, 0x6ac64cc4; add_carry
mov rdi, qword ptr [rdi]
add rdi, r15
mov cl, byte ptr [rdi]
movzx rcx, cl
shl rcx, 0x38
add r13, rcx
mov rdi, r13
movabs r15, 0x1386c174c
add r15, 0x79d4374; add
=== 11008
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov rsi, rdi
=== 11009
mov r14, rsi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov bl, byte ptr [rax]
mov r8, 0xff
shl r8, 0x30
not r8
and r14, r8
movzx r8, bl
shl r8, 0x30
or r14, r8
=== 11010
mov r12, r14
push r12
mov r15, rsp
mov rsi, r14
=== 11011
mov r13, r15
mov r12, rsi
push r13
push 0x18496d2d
push 0x2a9e7642
push 0x5f801e22
=== 11012
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov r12, r12
movzx rbx, bl
=== 11013
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x1177c6cf5
add r15, 0x288d05cb; sub_carry
mov r15, qword ptr [r15 + 0x138]
add r15, rbx
mov sil, byte ptr [r15]
movzx rsi, sil
shl rsi, 8
sub r12, rsi
mov r14, r12
movabs rbx, 0xe5fd174e
add rbx, 0x5a0c5372; sub
=== 11014
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 312
add rsp, 312
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdx
mov r12, r14
=== 11015
mov r15, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov r9b, byte ptr [rcx]
mov r15b, r9b
=== 11016
mov rax, r15
push rax
mov rdi, rsp
mov r12, r15
=== 11017
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov r15, r12
movzx r13, r13b
=== 11018
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x13a0b4e8b
add rdx, 0x5fe2435; sub_carry
mov rdx, qword ptr [rdx + 0x4a8]
add rdx, r13
mov r14b, byte ptr [rdx]
movzx r14, r14b
shl r14, 0x10
sub r15, r14
mov rdi, r15
movabs r13, 0x13526ef1f
add r13, 0xae27ba1; sub
=== 11019
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1192
add rsp, 1192
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r11
mov r13, rdi
=== 11020
mov rdi, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, rbp
mov r12b, byte ptr [rax]
mov r13, 0xff
shl r13, 8
not r13
and rdi, r13
movzx r13, r12b
shl r13, 8
or rdi, r13
=== 11021
mov rdx, rdi
push rdx
mov rbx, rsp
mov r13, rdi
=== 11022
mov r8, rbx
mov rbx, r13
push r8
push 0x6297651c
push 0x2c3a44b0
push 0x6b8533c9
=== 11023
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r12
mov r14, rbx
movzx rbx, bl
=== 11024
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x11a4c6c3b
add r10, 0x25bd0685; sub_carry
mov r10, qword ptr [r10 + 0x348]
add r10, rbx
mov dil, byte ptr [r10]
movzx rdi, dil
shl rdi, 0x18
sub r14, rdi
movabs r15, 0xddb30834
push r15
push 0xa796639
push 0x5b1420f0
push 0x7f615e81
push 0xe1b1c69
add qword ptr [rsp + 0x20], 0x6256628c; sub
mov rbp, r14
=== 11025
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 840
add rsp, 840
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rax
mov r15, rbp
=== 11026
mov rbx, r15
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rdi
mov r10b, byte ptr [r14]
mov rcx, 0xff
shl rcx, 0x10
not rcx
and rbx, rcx
movzx rcx, r10b
shl rcx, 0x10
or rbx, rcx
=== 11027
mov rdi, rbx
push rdi
mov r15, rsp
mov rbp, rbx
=== 11028
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rcx
mov rdi, rbp
movzx r13, r13b
=== 11029
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x127e0186b
add r15, 0x18295a55; sub_carry
mov r15, qword ptr [r15 + 0x718]
add r15, r13
mov dil, byte ptr [r15]
movzx rdi, dil
shl rdi, 0x20
sub rdi, rdi
mov r12, rdi
movabs rsi, 0xcd686961
add rsi, 0x72a1015f; sub
=== 11030
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1816
add rsp, 1816
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdi
mov r14, r12
=== 11031
mov rbp, r14
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov r9b, byte ptr [r8]
mov r11, 0xff
shl r11, 0x18
not r11
and rbp, r11
movzx r11, r9b
shl r11, 0x18
or rbp, r11
=== 11032
mov rdx, rbp
push rdx
mov r15, rsp
mov r13, rbp
=== 11033
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rax
mov r13, r13
movzx r15, r15b
=== 11034
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0xdc941653
add rbx, 0x63755c6d; sub_carry
mov rbx, qword ptr [rbx]
add rbx, r15
mov al, byte ptr [rbx]
movzx rax, al
shl rax, 0x38
sub r13, rax
movabs r15, 0x117e1014e
push r15
push 0x207e2f66
push 0x3db05ef
push 0x3782360e
push 0x16350780
add qword ptr [rsp + 0x20], 0x28286972; sub
mov r14, r13
=== 11035
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r9
mov r12, r14
=== 11036
mov rbx, r12
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r14
mov r14b, byte ptr [rdx]
mov rdx, 0xff
shl rdx, 0x30
not rdx
and rbx, rdx
movzx rdx, r14b
shl rdx, 0x30
or rbx, rdx
=== 11037
mov r12, rbx
push r12
mov r13, rsp
mov r14, rbx
=== 11038
mov r9, r13
mov rbp, r14
push r9
push 0x45782711
push 0x4d397d2e
push 0x67b127be
push 0x573d426a
=== 11039
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rcx
mov r12, rbp
movzx r14, r14b
=== 11040
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x12f3b46d7
push rdx
push 0xeae5d5c
push 0x5fc903b8
push 0x548a5774
push 0x5f5e18cc
add qword ptr [rsp + 0x20], 0x10ce23e9; sub
mov r15, r12
=== 11041
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov r12, r15
=== 11042
mov r12, r12
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r13
mov bpl, byte ptr [r15]
mov rdx, 0xff
shl rdx, 0x38
not rdx
and r12, rdx
movzx rdx, bpl
shl rdx, 0x38
or r12, rdx
=== 11043
mov rbx, r12
push rbx
mov r12, rsp
mov r15, r12
=== 11044
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rdx
mov r13, r15
movzx r14, r14b
=== 11045
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0x12a28298f
push rbp
push 0x5a7727a9
push 0x5e1b7a87
push 0x28816086
push 0x58075d86
add qword ptr [rsp + 0x20], 0x15e12931; or
mov rbp, r13
=== 11046
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov rdi, rbp
=== 11047
mov r15, rdi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov r14b, byte ptr [r14]
mov rbp, 0xff
shl rbp, 8
not rbp
and r15, rbp
movzx rbp, r14b
shl rbp, 8
or r15, rbp
=== 11048
mov rdx, r15
push rdx
mov rbp, rsp
mov rsi, r15
=== 11049
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbp
mov rbp, rsi
movzx r14, r14b
=== 11050
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rdi, rbp
movabs r15, 0x1395832e3
add r15, 0x6b11fdd; or
=== 11051
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r10
mov rsi, rdi
=== 11052
mov rbp, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov r8b, byte ptr [r14]
mov rsi, 0xff
shl rsi, 0x10
not rsi
and rbp, rsi
movzx rsi, r8b
shl rsi, 0x10
or rbp, rsi
=== 11053
mov r15, rbp
push r15
mov r13, rsp
mov r15, rbp
=== 11054
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov rbx, r15
movzx r13, r13b
=== 11055
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r13, rbx
movabs r15, 0xedb8272b
add r15, 0x52512b95; or
=== 11056
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov r12, r13
=== 11057
mov rbx, r12
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, rdi
mov r8b, byte ptr [r10]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and rbx, rdx
movzx rdx, r8b
shl rdx, 0x18
or rbx, rdx
=== 11058
mov r11, rbx
push r11
mov r15, rsp
mov rbp, rbx
=== 11059
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r10
mov rdi, rbp
movzx r12, r12b
=== 11060
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, rdi
movabs rdi, 0x12798041a
add rdi, 0x18714ea6; or
=== 11061
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov rbx, rbp
=== 11062
mov r14, rbx
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r14
mov r10b, byte ptr [rsi]
mov rbx, 0xff
shl rbx, 0x28
not rbx
and r14, rbx
movzx rbx, r10b
shl rbx, 0x28
or r14, rbx
=== 11063
mov r11, r14
push r11
mov rdi, rsp
mov r15, r14
=== 11064
mov rbx, rdi
mov rsi, r15
push rbx
push 0x364958e0
push 0x5e2468c2
push 0x54ed50c8
=== 11065
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rcx
mov r14, rsi
movzx rdi, dil
=== 11066
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x109d9f0ef
push rdi
push 0x57ac3283
push 0x19354677
push 0xafa55cd
push 0x44b130e7
add qword ptr [rsp + 0x20], 0x362f61d1; or
mov rsi, r14
=== 11067
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov r13, rsi
=== 11068
mov r14, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, rdi
mov dil, byte ptr [r15]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and r14, rsi
movzx rsi, dil
shl rsi, 0x30
or r14, rsi
=== 11069
mov rbx, r14
movabs r13, 0x11ad7dae0
add r13, 0x25283710
test rbx, rbx
lea rbx, [rip - 0x4839c3]
cmovne rbx, r13
jmp rbx
=== 11070
movabs r11, 0xd13954f2
push r11
push 0x45c91805
push 0x33306c44
push 0x709e1247
add qword ptr [rsp + 0x18], 0x6f5063f6; input
=== 11071
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 19
add rsp, 19
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rax
movzx rbp, bpl
=== 11072
mov rax, rbp
mov r8, 0xffffffffd2b9ce53
add r8, 0x2d7f3d25
push r8
mul qword ptr [rsp]
mov r15, rax
=== 11073
mov r13, r15
push r13
mov rbp, rsp
mov rsi, r15
=== 11074
mov rbx, rbp
mov rdi, rsi
push rbx
push 0x380514
push 0x566f2ac3
push 0x128513f2
=== 11075
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r8
mov rdi, rdi
movzx rsi, sil
=== 11076
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xc847fa14
add r12, 0x77c168ac; add_carry
mov r12, qword ptr [r12 + 0x520]
add r12, rsi
mov r10b, byte ptr [r12]
movzx r10, r10b
shl r10, 8
add rdi, r10
movabs r10, 0x1144c4fa6
push r10
push 0xb1e259b
push 0x254e6df2
push 0x3d8c51e5
push 0x144c0b5e
add qword ptr [rsp + 0x20], 0x2bbd0b1a; add
mov r12, rdi
=== 11077
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1312
add rsp, 1312
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov r13, r12
=== 11078
mov r14, r13
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rbp
mov r8b, byte ptr [r13]
mov r14b, r8b
=== 11079
mov r10, r14
push r10
mov rbp, rsp
mov rsi, r14
=== 11080
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rdx
mov r15, rsi
movzx rdi, dil
=== 11081
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x1320be3fb
add rdi, 0xdfd7ec5; add_carry
mov rdi, qword ptr [rdi + 0x770]
add rdi, rdi
mov r8b, byte ptr [rdi]
movzx r8, r8b
shl r8, 0x10
add r15, r8
mov r14, r15
movabs rbp, 0xf241335e
add rbp, 0x4dc82762; add
=== 11082
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1904
add rsp, 1904
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r12
mov rsi, r14
=== 11083
mov rsi, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rdi
mov r15b, byte ptr [r13]
mov r9, 0xff
shl r9, 8
not r9
and rsi, r9
movzx r9, r15b
shl r9, 8
or rsi, r9
=== 11084
mov r10, rsi
push r10
mov r13, rsp
mov r12, rsi
=== 11085
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r13
mov rsi, r12
movzx rdi, dil
=== 11086
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xc6e3edac
add r11, 0x79257514; add_carry
mov r11, qword ptr [r11 + 0x2e8]
add r11, rdi
mov r10b, byte ptr [r11]
movzx r10, r10b
shl r10, 0x18
add rsi, r10
mov rbp, rsi
movabs r15, 0x12c562807
add r15, 0x13b332b9; add
=== 11087
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 744
add rsp, 744
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov r12, rbp
=== 11088
mov rbp, r12
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbx
mov r14b, byte ptr [rbx]
mov r15, 0xff
shl r15, 0x10
not r15
and rbp, r15
movzx r15, r14b
shl r15, 0x10
or rbp, r15
=== 11089
mov r15, rbp
push r15
mov r15, rsp
mov r13, rbp
=== 11090
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov r12, r13
movzx rdi, dil
=== 11091
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xd9e7307b
add rsi, 0x66223245; add_carry
mov rsi, qword ptr [rsi + 0x3e8]
add rsi, rdi
mov r10b, byte ptr [rsi]
movzx r10, r10b
shl r10, 0x20
add r12, r10
mov r12, r12
movabs rbp, 0x10677dede
add rbp, 0x39917be2; add
=== 11092
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 1000
add rsp, 1000
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbp
mov r13, r12
=== 11093
mov r13, r13
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rdi
mov al, byte ptr [r9]
mov rdx, 0xff
shl rdx, 0x18
not rdx
and r13, rdx
movzx rdx, al
shl rdx, 0x18
or r13, rdx
=== 11094
mov r10, r13
push r10
mov rbx, rsp
mov r15, r13
=== 11095
mov rcx, rbx
mov rbp, r15
push rcx
push 0x51285af4
push 0x2f7b5e36
push 0x18113c11
push 0x4225610e
=== 11096
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
mov rdi, rbp
movzx rsi, sil
=== 11097
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xf4762f7e
add r12, 0x4b933342; add_carry
mov r12, qword ptr [r12]
add r12, rsi
mov bl, byte ptr [r12]
movzx rbx, bl
shl rbx, 0x28
add rdi, rbx
movabs r14, 0x11e9600bc
push r14
push 0x4d69505d
push 0x70fc2c99
push 0x7f040f2c
push 0x2f67649a
add qword ptr [rsp + 0x20], 0x21735a04; add
mov r15, rdi
=== 11098
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r14
mov rsi, r15
=== 11099
mov rdi, rsi
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, r12
mov sil, byte ptr [r8]
mov r9, 0xff
shl r9, 0x20
not r9
and rdi, r9
movzx r9, sil
shl r9, 0x20
or rdi, r9
=== 11100
mov r13, rdi
push r13
mov rbx, rsp
mov rsi, rdi
=== 11101
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rcx
mov r12, rsi
movzx rsi, sil
=== 11102
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x112a31ac0
add rdx, 0x2d664800; add_carry
mov rdx, qword ptr [rdx]
add rdx, rsi
mov dil, byte ptr [rdx]
movzx rdi, dil
shl rdi, 0x38
add r12, rdi
movabs rbp, 0xe276013c
push rbp
push 0x23441b11
push 0x271a2f94
push 0x6b990998
add qword ptr [rsp + 0x18], 0x5d935984; add
mov rdi, r12
=== 11103
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r13
mov rdi, rdi
=== 11104
mov rbx, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r13
mov r11b, byte ptr [rcx]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and rbx, rsi
movzx rsi, r11b
shl rsi, 0x30
or rbx, rsi
=== 11105
mov rcx, rbx
push rcx
mov rbp, rsp
mov r15, rbx
=== 11106
mov r11, rbp
mov r15, r15
push r11
push 0x37593fd5
push 0x32355208
push 0x653e252c
push 0x7a0c6e90
=== 11107
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rdi
mov rdi, r15
movzx rsi, sil
=== 11108
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x10217115b
push rbx
push 0x7e0d191f
push 0x23054912
push 0x3e512ad7
add qword ptr [rsp + 0x18], 0x3df24965; add
mov rsi, rdi
=== 11109
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbx
mov rdi, rsi
=== 11110
mov r14, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r14
mov r11b, byte ptr [rax]
mov rdi, 0xff
shl rdi, 0x38
not rdi
and r14, rdi
movzx rdi, r11b
shl rdi, 0x38
or r14, rdi
=== 11111
mov r14, r14
movabs r15, 0x1297f8e8d
add r15, 0x170a2a5b; input
=== 11112
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 15
add rsp, 15
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov rdi, r14
movzx r15, r15b
=== 11113
mov rax, r15
mov r13, 0xfffffffffbd6d247
add r13, 0x49a1481
push r13
mov r15, rdi
mul qword ptr [rsp]
mov rdi, rax
=== 11114
mov rsi, r15
sub rsi, rdi
=== 11115
mov r14, rsi
push r14
mov rbp, rsp
mov rsi, rsi
=== 11116
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r12
mov r14, rsi
movzx r15, r15b
=== 11117
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x1308c3288
add r10, 0xf7d4038; sub_carry
mov r10, qword ptr [r10 + 0x710]
add r10, r15
mov r12b, byte ptr [r10]
movzx r12, r12b
shl r12, 8
sub r14, r12
mov r13, r14
movabs rsi, 0x12a8444ae
add rsi, 0x15852612; sub
=== 11118
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1808
add rsp, 1808
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rax
mov rbx, r13
=== 11119
mov rbx, rbx
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r14
mov bpl, byte ptr [r15]
mov bl, bpl
=== 11120
mov rdi, rbx
push rdi
mov rsi, rsp
mov r15, rbx
=== 11121
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rsi
mov r14, r15
movzx rdi, dil
=== 11122
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xe28514bc
add rcx, 0x5d845e04; sub_carry
mov rcx, qword ptr [rcx + 0x1c8]
add rcx, rdi
mov al, byte ptr [rcx]
movzx rax, al
shl rax, 0x10
sub r14, rax
movabs rax, 0x1199f2db3
push rax
push 0x69810708
push 0x33cc65c8
push 0x10e3767
push 0x11863064
add qword ptr [rsp + 0x20], 0x266a3d0d; sub
mov rdi, r14
=== 11123
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 456
add rsp, 456
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r15
mov r12, rdi
=== 11124
mov rdi, r12
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, r14
mov r9b, byte ptr [r12]
mov rsi, 0xff
shl rsi, 8
not rsi
and rdi, rsi
movzx rsi, r9b
shl rsi, 8
or rdi, rsi
=== 11125
mov rbp, rdi
push rbp
mov rdi, rsp
mov rsi, rdi
=== 11126
mov rax, rdi
mov rdi, rsi
push rax
push 0x4c2148fc
push 0x36ad3ed9
push 0x5ffa51e9
=== 11127
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r13
mov rbp, rdi
movzx rbx, bl
=== 11128
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0xe9765dfd
add r12, 0x569314c3; sub_carry
mov r12, qword ptr [r12 + 0x518]
add r12, rbx
mov sil, byte ptr [r12]
movzx rsi, sil
shl rsi, 0x18
sub rbp, rsi
movabs rsi, 0xfa18f6d0
push rsi
push 0x6b777c78
push 0x20ca5e25
push 0x69733bbd
push 0x288e52a5
add qword ptr [rsp + 0x20], 0x45f073f0; sub
mov rsi, rbp
=== 11129
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1304
add rsp, 1304
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov rbp, rsi
=== 11130
mov rsi, rbp
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbx
mov r10b, byte ptr [rbx]
mov r12, 0xff
shl r12, 0x10
not r12
and rsi, r12
movzx r12, r10b
shl r12, 0x10
or rsi, r12
=== 11131
mov r12, rsi
push r12
mov rbp, rsp
mov rbx, rsi
=== 11132
mov rax, rbp
mov r13, rbx
push rax
push 0x2f68790d
push 0x31151ac5
push 0x7d9119dd
push 0x6cb67305
=== 11133
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov rsi, r13
movzx r14, r14b
=== 11134
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x115672614
add rdi, 0x2aa24cac; sub_carry
mov rdi, qword ptr [rdi + 0x370]
add rdi, r14
mov bpl, byte ptr [rdi]
movzx rbp, bpl
shl rbp, 0x20
sub rsi, rbp
mov rbp, rsi
movabs r13, 0xd638fbb2
add r13, 0x69d06f0e; sub
=== 11135
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 880
add rsp, 880
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rdi
mov r13, rbp
=== 11136
mov r15, r13
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rdi
mov r10b, byte ptr [rbp]
mov r8, 0xff
shl r8, 0x18
not r8
and r15, r8
movzx r8, r10b
shl r8, 0x18
or r15, r8
=== 11137
mov rsi, r15
push rsi
mov rsi, rsp
mov r12, r15
=== 11138
mov rsi, rsi
mov rbp, r12
push rsi
push 0xc397cf9
push 0x2702f84
push 0x428f0371
push 0x364a4fae
=== 11139
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rcx
mov rbx, rbp
movzx rdi, dil
=== 11140
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x130402249
add rdx, 0xfc95077; sub_carry
mov rdx, qword ptr [rdx]
add rdx, rdi
mov dl, byte ptr [rdx]
movzx rdx, dl
shl rdx, 0x30
sub rbx, rdx
movabs rcx, 0x137d62f4f
push rcx
push 0x47480ddc
push 0x10545140
push 0x360b7d14
push 0x1ae7c90
add qword ptr [rsp + 0x20], 0x8333b71; sub
mov r13, rbx
=== 11141
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rbp
mov rbx, r13
=== 11142
mov r12, rbx
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r15
mov dil, byte ptr [r9]
mov r11, 0xff
shl r11, 0x28
not r11
and r12, r11
movzx r11, dil
shl r11, 0x28
or r12, r11
=== 11143
movabs rdi, 0xfb428328
push rdi
push 0x128874aa
push 0x288f230e
push 0x46415280
push 0x7d797b0c
add qword ptr [rsp + 0x20], 0x454735c0; input
mov rdi, r12
=== 11144
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 27
add rsp, 27
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov r15, rdi
movzx r12, r12b
=== 11145
mov rax, r12
mov rdx, 0xffffffffba893e03
add rdx, 0x464f648f
push rdx
mov r15, r15
mul qword ptr [rsp]
mov r14, rax
=== 11146
mov rdi, r15
xor rdi, r14
=== 11147
mov rcx, rdi
push rcx
mov r15, rsp
mov r13, rdi
=== 11148
mov rsi, r15
mov r13, r13
push rsi
push 0x43625540
push 0x2e1251b1
push 0x287d0eb1
push 0x4fed38a5
=== 11149
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r14
mov rbx, r13
movzx r14, r14b
=== 11150
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0x1068c5f43
add rcx, 0x397d137d; sub_carry
mov rcx, qword ptr [rcx + 0x628]
add rcx, r14
mov r15b, byte ptr [rcx]
movzx r15, r15b
shl r15, 8
sub rbx, r15
movabs rax, 0x1309a51fd
push rax
push 0xc9e74ed
push 0x5d43ef8
push 0x642d78f3
add qword ptr [rsp + 0x18], 0xf6f18c3; sub
mov rbp, rbx
=== 11151
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1576
add rsp, 1576
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r13
mov rbp, rbp
=== 11152
mov r13, rbp
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r15
mov r10b, byte ptr [r14]
mov r13b, r10b
=== 11153
mov rbx, r13
push rbx
mov rbx, rsp
mov rsi, r13
=== 11154
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov rbp, rsi
movzx rsi, sil
=== 11155
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x119a459a2
add rdi, 0x2665191e; sub_carry
mov rdi, qword ptr [rdi + 0x370]
add rdi, rsi
mov dl, byte ptr [rdi]
movzx rdx, dl
shl rdx, 0x10
sub rbp, rdx
mov rbp, rbp
movabs rdi, 0xe00af0ae
add rdi, 0x5ffe7a12; sub
=== 11156
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 880
add rsp, 880
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r8
mov rsi, rbp
=== 11157
mov r13, rsi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov r15b, byte ptr [rax]
mov rdx, 0xff
shl rdx, 8
not rdx
and r13, rdx
movzx rdx, r15b
shl rdx, 8
or r13, rdx
=== 11158
mov r11, r13
push r11
mov r13, rsp
mov rsi, r13
=== 11159
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, r12
mov rsi, rsi
movzx rdi, dil
=== 11160
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xc3e4f70b
add rax, 0x7c247bb5; sub_carry
mov rax, qword ptr [rax + 0x468]
add rax, rdi
mov al, byte ptr [rax]
movzx rax, al
shl rax, 0x18
sub rsi, rax
movabs r10, 0x1194b0bb5
push r10
push 0x68326e6e
push 0x7ba840de
push 0x44fa78cf
push 0x443e68e2
add qword ptr [rsp + 0x20], 0x26be5f0b; sub
mov r12, rsi
=== 11161
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1128
add rsp, 1128
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov r15, r12
=== 11162
mov r12, r15
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r14
mov al, byte ptr [r13]
mov r8, 0xff
shl r8, 0x10
not r8
and r12, r8
movzx r8, al
shl r8, 0x10
or r12, r8
=== 11163
mov rax, r12
push rax
mov r14, rsp
mov r13, r12
=== 11164
mov rbp, r14
mov rbx, r13
push rbp
push 0x3eac3791
push 0x283e3267
push 0xf424f11
=== 11165
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r10
mov r12, rbx
movzx r14, r14b
=== 11166
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x1201a70d4
add rax, 0x1fef01ec; sub_carry
mov rax, qword ptr [rax + 0x140]
add rax, r14
mov dl, byte ptr [rax]
movzx rdx, dl
shl rdx, 0x20
sub r12, rdx
mov r13, r12
movabs rbp, 0x12c455f5e
add rbp, 0x13c40b62; sub
=== 11167
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 320
add rsp, 320
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rax
mov rbp, r13
=== 11168
mov rbp, rbp
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rdi
mov r13b, byte ptr [r8]
mov rcx, 0xff
shl rcx, 0x18
not rcx
and rbp, rcx
movzx rcx, r13b
shl rcx, 0x18
or rbp, rcx
=== 11169
mov rdi, rbp
push rdi
mov rbp, rsp
mov rbx, rbp
=== 11170
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r13
mov r14, rbx
movzx rbx, bl
=== 11171
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x13e652196
add r13, 0x1a4512a; sub_carry
mov r13, qword ptr [r13]
add r13, rbx
mov sil, byte ptr [r13]
movzx rsi, sil
shl rsi, 0x28
sub r14, rsi
movabs r11, 0x10a48291f
push r11
push 0x34791846
push 0x206b534f
push 0x7de97069
add qword ptr [rsp + 0x18], 0x35c141a1; sub
mov rbp, r14
=== 11172
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rdx
mov r12, rbp
=== 11173
mov rdi, r12
mov r8, 0x1408a0034
stmxcsr dword ptr [r8]
push rax
mov eax, dword ptr [0x1408a0034]
mov r8d, eax
pop rax
add r8, rbx
mov r15b, byte ptr [r8]
mov rsi, 0xff
shl rsi, 0x20
not rsi
and rdi, rsi
movzx rsi, r15b
shl rsi, 0x20
or rdi, rsi
=== 11174
mov r8, rdi
push r8
mov r14, rsp
mov r12, rdi
=== 11175
mov rsi, r14
mov r14, r12
push rsi
push 0x54ef3da8
push 0x5e12848
push 0x66853c9c
push 0x5ce465fe
=== 11176
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rax
mov rdi, r14
movzx r14, r14b
=== 11177
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0xe1961da7
add r15, 0x5e735519; sub_carry
mov r15, qword ptr [r15]
add r15, r14
mov r8b, byte ptr [r15]
movzx r8, r8b
shl r8, 0x30
sub rdi, r8
movabs r14, 0xe0074d41
push r14
push 0x34b87ec8
push 0x46b14c92
push 0x1d04073f
push 0x787639b
add qword ptr [rsp + 0x20], 0x60021d7f; sub
mov rsi, rdi
=== 11178
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rdi
mov rdi, rsi
=== 11179
mov r15, rdi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r13
mov r14b, byte ptr [rax]
mov rcx, 0xff
shl rcx, 0x28
not rcx
and r15, rcx
movzx rcx, r14b
shl rcx, 0x28
or r15, rcx
=== 11180
movabs rax, 0x13cdd64d3
push rax
push 0x63c01c95
push 0x31d67db7
push 0x534b5e1e
add qword ptr [rsp + 0x18], 0x3ac5415; input
mov rbp, r15
=== 11181
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 23
add rsp, 23
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r14
mov rbp, rbp
movzx r12, r12b
=== 11182
mov rax, r12
mov r13, 0xffffffffa8e420b1
add r13, 0x57b36bc0
push r13
mov r12, rbp
mul qword ptr [rsp]
mov rbx, rax
=== 11183
mov r12, r12
sub r12, rbx
=== 11184
mov rbx, r12
push rbx
mov r12, rsp
mov rdi, r12
=== 11185
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rbp
mov rbx, rdi
movzx rbp, bpl
=== 11186
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x122943da9
add rdi, 0x1d753517; sub_carry
mov rdi, qword ptr [rdi + 0x6c0]
add rdi, rbp
mov r14b, byte ptr [rdi]
movzx r14, r14b
shl r14, 8
sub rbx, r14
movabs r15, 0x13e481fcd
push r15
push 0x4c06bd8
push 0x36576c70
push 0x4b84d2e
push 0x616d3f62
add qword ptr [rsp + 0x20], 0x1c14af3; sub
mov r12, rbx
=== 11187
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1728
add rsp, 1728
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r8
mov r15, r12
=== 11188
mov rbx, r15
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r12
mov al, byte ptr [r14]
mov bl, al
=== 11189
mov r13, rbx
push r13
mov r15, rsp
mov rdi, rbx
=== 11190
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rsi
mov rdi, rdi
movzx rbp, bpl
=== 11191
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x10a4b336c
add rax, 0x35be3f54; sub_carry
mov rax, qword ptr [rax + 0x2f0]
add rax, rbp
mov r13b, byte ptr [rax]
movzx r13, r13b
shl r13, 0x10
sub rdi, r13
movabs rax, 0x135ba0921
push rax
push 0x42c3002a
push 0xf5f72a8
push 0x682339b7
push 0x54444ee7
add qword ptr [rsp + 0x20], 0xa4f619f; sub
mov r12, rdi
=== 11192
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 752
add rsp, 752
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbp
mov r14, r12
=== 11193
mov r14, r14
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r13
mov dil, byte ptr [rbp]
mov rsi, 0xff
shl rsi, 8
not rsi
and r14, rsi
movzx rsi, dil
shl rsi, 8
or r14, rsi
=== 11194
mov rbp, r14
push rbp
mov rbx, rsp
mov rdi, r14
=== 11195
mov r8, rbx
mov r15, rdi
push r8
push 0x5c911214
push 0x47dc6938
push 0x5b1a0358
=== 11196
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r9
mov rdi, r15
movzx rsi, sil
=== 11197
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0xe8242bb7
add rsi, 0x57e54709; sub_carry
mov rsi, qword ptr [rsi + 0x6c0]
add rsi, rsi
mov dil, byte ptr [rsi]
movzx rdi, dil
shl rdi, 0x18
sub rdi, rdi
mov r14, rdi
movabs rsi, 0x121812a0e
add rsi, 0x1e8840b2; sub
=== 11198
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 1728
add rsp, 1728
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, rbx
mov rbp, r14
=== 11199
mov r12, rbp
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r13
mov cl, byte ptr [r13]
mov r14, 0xff
shl r14, 0x10
not r14
and r12, r14
movzx r14, cl
shl r14, 0x10
or r12, r14
=== 11200
mov r8, r12
push r8
mov r13, rsp
mov r15, r12
=== 11201
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
mov rsi, r15
movzx rbx, bl
=== 11202
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x138365a27
add r8, 0x7d31899; sub_carry
mov r8, qword ptr [r8 + 0x728]
add r8, rbx
mov r11b, byte ptr [r8]
movzx r11, r11b
shl r11, 0x20
sub rsi, r11
movabs r15, 0xf63c4a2d
push r15
push 0x7be5375d
push 0x73d46bd7
push 0x13b06310
add qword ptr [rsp + 0x18], 0x49cd2093; sub
mov r14, rsi
=== 11203
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1832
add rsp, 1832
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdi
mov rsi, r14
=== 11204
mov r12, rsi
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, r14
mov dl, byte ptr [r14]
mov r9, 0xff
shl r9, 0x18
not r9
and r12, r9
movzx r9, dl
shl r9, 0x18
or r12, r9
=== 11205
mov r11, r12
push r11
mov r14, rsp
mov rdi, r12
=== 11206
mov r11, r14
mov r12, rdi
push r11
push 0x5b4f17ff
push 0x3fab389c
push 0x6b0b4f86
=== 11207
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r9
mov r15, r12
movzx r13, r13b
=== 11208
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, r15
movabs r15, 0x112a81985
add r15, 0x2d61513b; sub
=== 11209
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rax
mov rbp, rbx
=== 11210
mov rbx, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r15
mov r9b, byte ptr [r10]
mov rcx, 0xff
shl rcx, 0x38
not rcx
and rbx, rcx
movzx rcx, r9b
shl rcx, 0x38
or rbx, rcx
=== 11211
mov r13, rbx
movabs r12, 0x10ec87a58
add r12, 0x31c13e90; input
=== 11212
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 31
add rsp, 31
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rdi
mov rdi, r13
movzx r13, r13b
=== 11213
mov rax, r13
mov r10, 0xffffffffa987086a
add r10, 0x57130c6a
push r10
mov rsi, rdi
mul qword ptr [rsp]
mov r14, rax
=== 11214
mov rbp, rsi
add rbp, r14
=== 11215
mov r14, rbp
push r14
mov r15, rsp
mov rbx, rbp
=== 11216
mov rbp, r15
mov r12, rbx
push rbp
push 0x659d53d7
push 0x390a7c39
push 0x5a16135a
=== 11217
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov rdi, r12
movzx rbx, bl
=== 11218
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xd5cc7254
add rdi, 0x6a3d006c; sub_carry
mov rdi, qword ptr [rdi + 0x660]
add rdi, rbx
mov dl, byte ptr [rdi]
movzx rdx, dl
shl rdx, 8
sub rdi, rdx
mov r13, rdi
movabs r12, 0xc3791209
add r12, 0x7c9058b7; sub
=== 11219
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1632
add rsp, 1632
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r11
mov r14, r13
=== 11220
mov r14, r14
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r15
mov r15b, byte ptr [rax]
mov r14b, r15b
=== 11221
mov r8, r14
push r8
mov rsi, rsp
mov rbp, r14
=== 11222
mov rcx, rsi
mov rbx, rbp
push rcx
push 0x71762599
push 0x24e86cc2
push 0x4ce46a48
push 0x6fb17a14
=== 11223
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov r14, rbx
movzx r13, r13b
=== 11224
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xf3aa5c66
add r13, 0x4c5f165a; sub_carry
mov r13, qword ptr [r13 + 0x380]
add r13, r13
mov dil, byte ptr [r13]
movzx rdi, dil
shl rdi, 0x10
sub r14, rdi
movabs rcx, 0xdac003b5
push rcx
push 0x28f4300e
push 0x60e97594
push 0x137005be
add qword ptr [rsp + 0x18], 0x6549670b; sub
mov rsi, r14
=== 11225
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 896
add rsp, 896
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov r13, rsi
=== 11226
mov r15, r13
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r14
mov cl, byte ptr [rdx]
mov r13, 0xff
shl r13, 8
not r13
and r15, r13
movzx r13, cl
shl r13, 8
or r15, r13
=== 11227
mov r12, r15
push r12
mov rsi, rsp
mov rbx, r15
=== 11228
mov r14, rsi
mov r15, rbx
push r14
push 0x28117e0d
push 0x1ccc007b
push 0x109c1c5a
push 0xa055079
=== 11229
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbx
mov rbp, r15
movzx rsi, sil
=== 11230
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x10dec37df
add r14, 0x321d3ae1; sub_carry
mov r14, qword ptr [r14 + 0x4b0]
add r14, rsi
mov r13b, byte ptr [r14]
movzx r13, r13b
shl r13, 0x18
sub rbp, r13
movabs rcx, 0x127ca51de
push rcx
push 0x5cd52daa
push 0x2d9d4342
push 0xab06959
add qword ptr [rsp + 0x18], 0x183f18e2; sub
mov rbp, rbp
=== 11231
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1200
add rsp, 1200
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r8
mov rbp, rbp
=== 11232
mov rbx, rbp
mov r12, 0x1408a0034
stmxcsr dword ptr [r12]
push rax
mov eax, dword ptr [0x1408a0034]
mov r12d, eax
pop rax
add r12, rsi
mov dil, byte ptr [r12]
mov r11, 0xff
shl r11, 0x10
not r11
and rbx, r11
movzx r11, dil
shl r11, 0x10
or rbx, r11
=== 11233
mov rax, rbx
push rax
mov rdi, rsp
mov rbx, rbx
=== 11234
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbp
mov r12, rbx
movzx rsi, sil
=== 11235
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x1369d65fc
add r14, 0x96c0cc4; sub_carry
mov r14, qword ptr [r14 + 0x5b0]
add r14, rsi
mov r14b, byte ptr [r14]
movzx r14, r14b
shl r14, 0x20
sub r12, r14
movabs r13, 0x1301f113f
push r13
push 0x5e9612d4
push 0x7f3568fc
push 0x403660fe
add qword ptr [rsp + 0x18], 0xfea5981; sub
mov r13, r12
=== 11236
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1456
add rsp, 1456
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r12
mov r13, r13
=== 11237
mov r14, r13
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r14
mov cl, byte ptr [r15]
mov r11, 0xff
shl r11, 0x18
not r11
and r14, r11
movzx r11, cl
shl r11, 0x18
or r14, r11
=== 11238
mov r13, r14
push r13
mov r13, rsp
mov rdi, r14
=== 11239
mov rax, r13
mov r14, rdi
push rax
push 0x4e2b6310
push 0x2aaf2bd1
push 0x39904895
push 0x5658741e
=== 11240
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r10
mov r14, r14
movzx rbx, bl
=== 11241
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0xe85d69d5
add r14, 0x57ac08eb; sub_carry
mov r14, qword ptr [r14]
add r14, rbx
mov r10b, byte ptr [r14]
movzx r10, r10b
shl r10, 0x28
sub r14, r10
movabs rcx, 0xc930f832
push rcx
push 0x22d275f7
push 0x3da7730d
push 0x2f322ce6
add qword ptr [rsp + 0x18], 0x76d8728e; sub
mov r12, r14
=== 11242
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r8
mov r15, r12
=== 11243
mov r13, r15
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, r14
mov r11b, byte ptr [rbp]
mov r15, 0xff
shl r15, 0x20
not r15
and r13, r15
movzx r15, r11b
shl r15, 0x20
or r13, r15
=== 11244
mov rbp, r13
push rbp
mov rbp, rsp
mov r15, r13
=== 11245
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov r12, r15
movzx r13, r13b
=== 11246
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0x11a1d1924
add r13, 0x25ec599c; sub_carry
mov r13, qword ptr [r13]
add r13, r13
mov r10b, byte ptr [r13]
movzx r10, r10b
shl r10, 0x30
sub r12, r10
mov rsi, r12
movabs r12, 0xf0e6ee54
add r12, 0x4f227c6c; sub
=== 11247
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov r12, rsi
=== 11248
mov rbx, r12
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov al, byte ptr [rcx]
mov r10, 0xff
shl r10, 0x28
not r10
and rbx, r10
movzx r10, al
shl r10, 0x28
or rbx, r10
=== 11249
mov r8, rbx
push r8
mov r15, rsp
mov r14, rbx
=== 11250
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, rbp
mov rdi, r14
movzx rbx, bl
=== 11251
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xdc6a585a
add rdx, 0x639f1a66; sub_carry
mov rdx, qword ptr [rdx]
add rdx, rbx
mov sil, byte ptr [rdx]
movzx rsi, sil
shl rsi, 0x38
sub rdi, rsi
mov rsi, rdi
movabs rbx, 0x116ae0ae4
add rbx, 0x295b5fdc; sub
=== 11252
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r11
mov r15, rsi
=== 11253
mov rbp, r15
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, rbp
mov r9b, byte ptr [rdx]
mov r10, 0xff
shl r10, 0x30
not r10
and rbp, r10
movzx r10, r9b
shl r10, 0x30
or rbp, r10
=== 11254
mov r13, rbp
movabs rdi, 0xed0eb7a1
add rdi, 0x537b0147; input
=== 11255
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbx
mov r12, r13
movzx r14, r14b
=== 11256
mov rax, r14
mov rbx, 0xfffffffff89a0c8f
add rbx, 0x7ff44b5
push rbx
mov r13, r12
mul qword ptr [rsp]
mov r12, rax
=== 11257
mov rbp, r13
xor rbp, r12
=== 11258
mov r14, rbp
push r14
mov r13, rsp
mov rdi, rbp
=== 11259
mov rbp, r13
mov rdi, rdi
push rbp
push 0x2ac87de7
push 0x39ff1918
push 0x118373b5
=== 11260
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov r15, rdi
movzx r14, r14b
=== 11261
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x1091b665e
add rdi, 0x36ee0c62; sub_carry
mov rdi, qword ptr [rdi + 0x210]
add rdi, r14
mov r14b, byte ptr [rdi]
movzx r14, r14b
shl r14, 8
sub r15, r14
mov r13, r15
movabs r12, 0xe840096c
add r12, 0x57c96154; sub
=== 11262
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 528
add rsp, 528
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r14
mov rdi, r13
=== 11263
mov rbp, rdi
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov dl, byte ptr [rdx]
mov bpl, dl
=== 11264
mov r8, rbp
push r8
mov r12, rsp
mov rbp, rbp
=== 11265
mov r13, r12
mov r15, rbp
push r13
push 0x6d4c61da
push 0x369e5ef7
push 0x72ec2f9f
=== 11266
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r8
mov rdi, r15
movzx r13, r13b
=== 11267
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0xca492915
add rdi, 0x75c049ab; sub_carry
mov rdi, qword ptr [rdi + 0x398]
add rdi, r13
mov r13b, byte ptr [rdi]
movzx r13, r13b
shl r13, 0x10
sub rdi, r13
mov rbp, rdi
movabs r13, 0x13363173e
add r13, 0xca65382; sub
=== 11268
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 920
add rsp, 920
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov rdi, rbp
=== 11269
mov r15, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, r12
mov r10b, byte ptr [rcx]
mov r8, 0xff
shl r8, 8
not r8
and r15, r8
movzx r8, r10b
shl r8, 8
or r15, r8
=== 11270
mov r15, r15
push r15
mov r14, rsp
mov r15, r15
=== 11271
mov r12, r14
mov r13, r15
push r12
push 0x353646d8
push 0x25ef768b
push 0x15ab3386
=== 11272
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r11
mov rbx, r13
movzx r14, r14b
=== 11273
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xd85d4891
add r11, 0x67ac2a2f; sub_carry
mov r11, qword ptr [r11 + 0x738]
add r11, r14
mov sil, byte ptr [r11]
movzx rsi, sil
shl rsi, 0x18
sub rbx, rsi
mov rdi, rbx
movabs r12, 0x12f58154e
add r12, 0x10b15572; sub
=== 11274
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 1848
add rsp, 1848
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rsi
mov rbx, rdi
=== 11275
mov r13, rbx
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rdi
mov r9b, byte ptr [rbp]
mov rcx, 0xff
shl rcx, 0x10
not rcx
and r13, rcx
movzx rcx, r9b
shl rcx, 0x10
or r13, rcx
=== 11276
mov rbx, r13
push rbx
mov r12, rsp
mov r14, r13
=== 11277
mov rax, r12
mov r14, r14
push rax
push 0x36604f26
push 0x118a0712
push 0x55420d64
=== 11278
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, r9
mov rbx, r14
movzx r12, r12b
=== 11279
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x1002b0b34
add rsi, 0x3fde678c; sub_carry
mov rsi, qword ptr [rsi + 0x690]
add rsi, r12
mov r11b, byte ptr [rsi]
movzx r11, r11b
shl r11, 0x20
sub rbx, r11
movabs r12, 0x11586439f
push r12
push 0x58be61ea
push 0x3dcb3815
push 0x247433eb
add qword ptr [rsp + 0x18], 0x2a832721; sub
mov r15, rbx
=== 11280
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1680
add rsp, 1680
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r10
mov r14, r15
=== 11281
mov r15, r14
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rbx
mov dl, byte ptr [rbp]
mov rbp, 0xff
shl rbp, 0x18
not rbp
and r15, rbp
movzx rbp, dl
shl rbp, 0x18
or r15, rbp
=== 11282
mov rax, r15
push rax
mov r13, rsp
mov r14, r15
=== 11283
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r13
mov rbx, r14
movzx rbp, bpl
=== 11284
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r8, 0x10c07515e
add r8, 0x34022162; sub_carry
mov r8, qword ptr [r8]
add r8, rbp
mov r13b, byte ptr [r8]
movzx r13, r13b
shl r13, 0x28
sub rbx, r13
movabs rdx, 0xed7e1ffc
push rdx
push 0x54063f70
push 0x270f0ca5
push 0x382a54af
push 0x9fd6cef
add qword ptr [rsp + 0x20], 0x528b4ac4; sub
mov r12, rbx
=== 11285
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, r13
mov r14, r12
=== 11286
mov rdi, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r12
mov r11b, byte ptr [r13]
mov rbp, 0xff
shl rbp, 0x20
not rbp
and rdi, rbp
movzx rbp, r11b
shl rbp, 0x20
or rdi, rbp
=== 11287
mov rbx, rdi
push rbx
mov r13, rsp
mov rdi, rdi
=== 11288
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, r15
mov rbx, rdi
movzx rbp, bpl
=== 11289
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r15, 0x1000255ab
add r15, 0x40071d15; sub_carry
mov r15, qword ptr [r15]
add r15, rbp
mov r8b, byte ptr [r15]
movzx r8, r8b
shl r8, 0x38
sub rbx, r8
movabs rcx, 0x10502283f
push rcx
push 0x7cfd44e3
push 0x114f03d4
push 0x12b9348c
push 0x6a6044c0
add qword ptr [rsp + 0x20], 0x3b074281; sub
mov r14, rbx
=== 11290
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r8
mov rbx, r14
=== 11291
mov rbp, rbx
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, rbp
mov r8b, byte ptr [rbx]
mov rsi, 0xff
shl rsi, 0x30
not rsi
and rbp, rsi
movzx rsi, r8b
shl rsi, 0x30
or rbp, rsi
=== 11292
mov r12, rbp
push r12
mov rdi, rsp
mov r14, rbp
=== 11293
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbp, rdx
mov rbx, r14
movzx rbp, bpl
=== 11294
push rax
mov rax, rbp
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r14, rbx
movabs rdi, 0xfb3aee3e
add rdi, 0x44ce7c82; sub
=== 11295
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbp
mov r15, r14
=== 11296
mov r13, r15
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, rbx
mov r12b, byte ptr [rdi]
mov rsi, 0xff
shl rsi, 0x38
not rsi
and r13, rsi
movzx rsi, r12b
shl rsi, 0x38
or r13, rsi
=== 11297
movabs rdx, 0xf55bb307
push rdx
push 0x33980b57
push 0x5e9875d4
push 0x65bb3493
push 0x120f2989
add qword ptr [rsp + 0x20], 0x4b2e05e1; input
mov rbx, r13
=== 11298
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 11
add rsp, 11
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r12
mov r15, rbx
movzx rsi, sil
=== 11299
mov rax, rsi
mov r8, 0xffffffffafb4cc43
add r8, 0x50cc4ff6
push r8
mov r15, r15
mul qword ptr [rsp]
mov r12, rax
=== 11300
mov rdi, r15
xor rdi, r12
=== 11301
mov r15, rdi
push r15
mov rdi, rsp
mov rsi, rdi
=== 11302
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov rbx, rsi
movzx r14, r14b
=== 11303
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbp, 0xce8841af
add rbp, 0x71813111; sub_carry
mov rbp, qword ptr [rbp + 0x328]
add rbp, r14
mov bl, byte ptr [rbp]
movzx rbx, bl
shl rbx, 8
sub rbx, rbx
mov r15, rbx
movabs r12, 0x118ae0652
a
d
d
 
r
1
2
,
 
0
x
2
7
5
b
6
4
6
e
=== 11304
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 808
add rsp, 808
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, r14
mov rdi, r15
=== 11305
mov rsi, rdi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rsi
mov r13b, byte ptr [r13]
mov sil, r13b
=== 11306
mov rbx, rsi
push rbx
mov rdi, rsp
mov r12, rsi
=== 11307
mov rbp, rdi
mov rdi, r12
push rbp
push 0x6afd45aa
push 0x30b35073
push 0x422c6b3e
push 0x3ab3892
=== 11308
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r15
mov rdi, rdi
movzx rsi, sil
=== 11309
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r14, 0x13ff40d65
add r14, 0x15655b; sub_carry
mov r14, qword ptr [r14 + 0x1a8]
add r14, rsi
mov sil, byte ptr [r14]
movzx rsi, sil
shl rsi, 0x10
sub rdi, rsi
mov rsi, rdi
movabs r15, 0x104083b1a
add r15, 0x3c012fa6; sub
=== 11310
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 424
add rsp, 424
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r8
mov r14, rsi
=== 11311
mov rbx, r14
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, rbx
mov r13b, byte ptr [r9]
mov r11, 0xff
shl r11, 8
not r11
and rbx, r11
movzx r11, r13b
shl r11, 8
or rbx, r11
=== 11312
mov r13, rbx
push r13
mov r13, rsp
mov r14, rbx
=== 11313
mov rbx, r13
mov rsi, r14
push rbx
push 0x5cd82eb4
push 0x23980853
push 0x374a7a5c
=== 11314
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, rbp
mov rbx, rsi
movzx r14, r14b
=== 11315
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rcx, 0xd7013c8f
add rcx, 0x69083631; sub_carry
mov rcx, qword ptr [rcx + 0x680]
add rcx, r14
mov bl, byte ptr [rcx]
movzx rbx, bl
shl rbx, 0x18
sub rbx, rbx
mov r12, rbx
movabs rbx, 0x116453e19
add rbx, 0x29c42ca7; sub
=== 11316
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 1664
add rsp, 1664
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rsi
mov rsi, r12
=== 11317
mov rbx, rsi
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rdi
mov r8b, byte ptr [r13]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and rbx, rbp
movzx rbp, r8b
shl rbp, 0x10
or rbx, rbp
=== 11318
mov r14, rbx
push r14
mov rdi, rsp
mov r13, rbx
=== 11319
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rdi, rbp
mov rsi, r13
movzx rdi, dil
=== 11320
push rax
mov rax, rdi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0xc3def63f
add rax, 0x7c2a7c81; sub_carry
mov rax, qword ptr [rax + 0x168]
add rax, rdi
mov sil, byte ptr [rax]
movzx rsi, sil
shl rsi, 0x20
sub rsi, rsi
movabs r8, 0x1270716ae
push r8
push 0x2334791e
push 0x688b001e
push 0x1f193fb4
add qword ptr [rsp + 0x18], 0x19025412; sub
mov r13, rsi
=== 11321
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 360
add rsp, 360
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rbx
mov r15, r13
=== 11322
mov rbx, r15
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, r14
mov r15b, byte ptr [r13]
mov r8, 0xff
shl r8, 0x18
not r8
and rbx, r8
movzx r8, r15b
shl r8, 0x18
or rbx, r8
=== 11323
mov r12, rbx
push r12
mov rsi, rsp
mov r14, rbx
=== 11324
mov r12, rsi
mov rbx, r14
push r12
push 0x50c6011c
push 0x450b78b7
push 0x23d938c6
push 0x216b0ec5
=== 11325
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r13
mov rbx, rbx
movzx rsi, sil
=== 11326
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rsi, rbx
movabs r12, 0xc88e5602
add r12, 0x777b14be; sub
=== 11327
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rax
mov rbp, rsi
=== 11328
mov r13, rbp
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, r12
mov r11b, byte ptr [r11]
mov r15, 0xff
shl r15, 0x38
not r15
and r13, r15
movzx r15, r11b
shl r15, 0x38
or r13, r15
=== 11329
movabs r15, 0x107e259ee
push r15
push 0x6ed029f1
push 0x17985aed
push 0x6f250b04
add qword ptr [rsp + 0x18], 0x38a75efa; input
mov rsi, r13
=== 11330
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbp
mov r15, rsi
movzx rsi, sil
=== 11331
mov rax, rsi
mov r12, 0xffffffffef03133b
add r12, 0x1196409c
push r12
mov rdi, r15
mul qword ptr [rsp]
mov r14, rax
=== 11332
mov rsi, rdi
xor rsi, r14
=== 11333
mov r11, rsi
push r11
mov r12, rsp
mov rbx, rsi
=== 11334
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rdx
mov rdi, rbx
movzx r15, r15b
=== 11335
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r12, rdi
movabs r15, 0x110301237
add r15, 0x2fd93889; xor
=== 11336
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 840
add rsp, 840
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, r13
mov rdi, r12
=== 11337
mov r14, rdi
mov r11, 0x1408a0034
stmxcsr dword ptr [r11]
push rax
mov eax, dword ptr [0x1408a0034]
mov r11d, eax
pop rax
add r11, rbx
mov r8b, byte ptr [r11]
mov r14b, r8b
=== 11338
mov rbp, r14
push rbp
mov r15, rsp
mov rdi, r14
=== 11339
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r15
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r14, r15
mov r13, rdi
movzx r14, r14b
=== 11340
push rax
mov rax, r14
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x13492f954
push rbx
push 0x358967aa
push 0x3078602b
push 0x3bda6824
push 0x35de0d74
add qword ptr [rsp + 0x20], 0xb76516c; xor
mov rbx, r13
=== 11341
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 944
add rsp, 944
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r10
mov rbx, rbx
=== 11342
mov r15, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rdi
mov cl, byte ptr [rcx]
mov rsi, 0xff
shl rsi, 8
not rsi
and r15, rsi
movzx rsi, cl
shl rsi, 8
or r15, rsi
=== 11343
mov r8, r15
push r8
mov rsi, rsp
mov rdi, r15
=== 11344
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rsi
mov rsp, rsi
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, rcx
mov rdi, rdi
movzx r15, r15b
=== 11345
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbx, rdi
movabs r13, 0x1324524b0
add r13, 0xdc42610; xor
=== 11346
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 1080
add rsp, 1080
pop rcx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rsi, rcx
mov r12, rbx
=== 11347
mov r13, r12
mov rbp, 0x1408a0034
stmxcsr dword ptr [rbp]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebp, eax
pop rax
add rbp, rsi
mov r11b, byte ptr [rbp]
mov r9, 0xff
shl r9, 0x10
not r9
and r13, r9
movzx r9, r11b
shl r9, 0x10
or r13, r9
=== 11348
mov r12, r13
push r12
mov r14, rsp
mov rsi, r13
=== 11349
mov r14, r14
mov r12, rsi
push r14
push 0x47cf444d
push 0x63dd2a2b
push 0x5c2c5e24
push 0x5f6137c3
=== 11350
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov rbp, r12
movzx r13, r13b
=== 11351
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r10, 0x103c13f58
push r10
push 0x2f472f0c
push 0x712a2aed
push 0x4d32857
add qword ptr [rsp + 0x18], 0x3c480b68; xor
mov rdi, rbp
=== 11352
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1024
add rsp, 1024
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, rdx
mov r13, rdi
=== 11353
mov r15, r13
mov rdx, 0x1408a0034
stmxcsr dword ptr [rdx]
push rax
mov eax, dword ptr [0x1408a0034]
mov edx, eax
pop rax
add rdx, r15
mov r12b, byte ptr [rdx]
mov rax, 0xff
shl rax, 0x18
not rax
and r15, rax
movzx rax, r12b
shl rax, 0x18
or r15, rax
=== 11354
mov r11, r15
push r11
mov rsi, rsp
mov rbx, r15
=== 11355
mov r15, rsi
mov rbx, rbx
push r15
push 0x5e6a78e1
push 0x15f75861
push 0x604c192f
push 0x719176f3
=== 11356
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, r14
mov r13, rbx
movzx rsi, sil
=== 11357
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov rbp, r13
movabs r14, 0xfd874959
add r14, 0x42820167; xor
=== 11358
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbx, rbx
mov rdi, rbp
=== 11359
mov rsi, rdi
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbx
mov r15b, byte ptr [rcx]
mov rax, 0xff
shl rax, 0x28
not rax
and rsi, rax
movzx rax, r15b
shl rax, 0x28
or rsi, rax
=== 11360
mov rdx, rsi
push rdx
mov r15, rsp
mov rbx, rsi
=== 11361
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r15
mov rsp, r15
add rsp, 0
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r8
mov r14, rbx
movzx r13, r13b
=== 11362
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rax, 0x116d60f81
add rax, 0x2933633f; sub_carry
mov rax, qword ptr [rax + 0x3c0]
add rax, r13
mov sil, byte ptr [rax]
movzx rsi, sil
shl rsi, 8
sub r14, rsi
mov rbp, r14
movabs r12, 0x1342e3c3c
add r12, 0xbdb2e84; sub
=== 11363
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 960
add rsp, 960
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, r12
mov rbx, rbp
=== 11364
mov rsi, rbx
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbp
mov r11b, byte ptr [rcx]
mov sil, r11b
=== 11365
mov rdi, rsi
push rdi
mov r14, rsp
mov rsi, rsi
=== 11366
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r14
mov rbp, rsi
movzx r13, r13b
=== 11367
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x114f76ce8
add rsi, 0x2b1205d8; sub_carry
mov rsi, qword ptr [rsi + 0x120]
add rsi, r13
mov r15b, byte ptr [rsi]
movzx r15, r15b
shl r15, 0x10
sub rbp, r15
movabs rbx, 0xf5ed58ea
push rbx
push 0x3fc83eac
push 0x3af43b3d
push 0x2ff5a3e
push 0x6a5d496f
add qword ptr [rsp + 0x20], 0x4a1c11d6; sub
mov rdi, rbp
=== 11368
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 288
add rsp, 288
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rsi
mov rbp, rdi
=== 11369
mov rbp, rbp
mov r9, 0x1408a0034
stmxcsr dword ptr [r9]
push rax
mov eax, dword ptr [0x1408a0034]
mov r9d, eax
pop rax
add r9, r12
mov r13b, byte ptr [r9]
mov rdi, 0xff
shl rdi, 8
not rdi
and rbp, rdi
movzx rdi, r13b
shl rdi, 8
or rbp, rdi
=== 11370
mov rdx, rbp
push rdx
mov r14, rsp
mov rdi, rbp
=== 11371
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r14
mov rsp, r14
add rsp, 0
; UWOP_ALLOC_LARGE 2
add rsp, 2
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, r13
mov r15, rdi
movzx r13, r13b
=== 11372
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0xeb7f26dc
add rdx, 0x548a4be4; sub_carry
mov rdx, qword ptr [rdx + 0x210]
add rdx, r13
mov dl, byte ptr [rdx]
movzx rdx, dl
shl rdx, 0x18
sub r15, rdx
mov r12, r15
movabs rbx, 0xfd99126e
add rbx, 0x42705852; sub
=== 11373
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 528
add rsp, 528
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r12, rdi
mov r13, r12
=== 11374
mov r14, r13
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r12
mov al, byte ptr [rax]
mov rbp, 0xff
shl rbp, 0x10
not rbp
and r14, rbp
movzx rbp, al
shl rbp, 0x10
or r14, rbp
=== 11375
mov rdi, r14
push rdi
mov rbx, rsp
mov rbp, r14
=== 11376
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 3
add rsp, 3
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r13
mov rdi, rbp
movzx r15, r15b
=== 11377
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x135eef4ea
add rbx, 0xa1a7dd6; sub_carry
mov rbx, qword ptr [rbx + 0x7c8]
add rbx, r15
mov r12b, byte ptr [rbx]
movzx r12, r12b
shl r12, 0x20
sub rdi, r12
movabs rax, 0x12c34f304
push rax
push 0x61c19ca
push 0x6b9f5fb7
push 0x5062606d
add qword ptr [rsp + 0x18], 0x13d477bc; sub
mov rsi, rdi
=== 11378
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 1992
add rsp, 1992
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r10
mov rsi, rsi
=== 11379
mov r13, rsi
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r13
mov dl, byte ptr [rax]
mov r10, 0xff
shl r10, 0x18
not r10
and r13, r10
movzx r10, dl
shl r10, 0x18
or r13, r10
=== 11380
mov rsi, r13
push rsi
mov r13, rsp
mov rdi, r13
=== 11381
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r13
mov rsp, r13
add rsp, 0
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r9
mov rsi, rdi
movzx rbx, bl
=== 11382
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdx, 0x13af1212f
add rdx, 0x5185191; sub_carry
mov rdx, qword ptr [rdx + 0x7e8]
add rdx, rbx
mov r13b, byte ptr [rdx]
movzx r13, r13b
shl r13, 0x28
sub rsi, r13
mov r12, rsi
movabs rbx, 0x1117135eb
add rbx, 0x2e9834d5; sub
=== 11383
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 2024
add rsp, 2024
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, r14
mov r12, r12
=== 11384
mov r15, r12
mov rdi, 0x1408a0034
stmxcsr dword ptr [rdi]
push rax
mov eax, dword ptr [0x1408a0034]
mov edi, eax
pop rax
add rdi, r14
mov r11b, byte ptr [rdi]
mov r9, 0xff
shl r9, 0x20
not r9
and r15, r9
movzx r9, r11b
shl r9, 0x20
or r15, r9
=== 11385
mov r13, r15
push r13
mov rsi, rsp
mov r12, r15
=== 11386
mov rax, rsi
mov r12, r12
push rax
push 0x277a725f
push 0x41e052f2
push 0x67fd6c04
push 0x1e6d284b
=== 11387
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r8
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r8
mov rsi, r12
movzx r15, r15b
=== 11388
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r12, 0x13533fcc5
add r12, 0xad575fb; sub_carry
mov r12, qword ptr [r12 + 0x7f8]
add r12, r15
mov al, byte ptr [r12]
movzx rax, al
shl rax, 0x30
sub rsi, rax
mov r14, rsi
movabs r12, 0x12dbe376e
add r12, 0x124b3352; sub
=== 11389
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop r10
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r10
mov rsi, r14
=== 11390
mov r12, rsi
mov rbx, 0x1408a0034
stmxcsr dword ptr [rbx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ebx, eax
pop rax
add rbx, r15
mov r11b, byte ptr [rbx]
mov rbp, 0xff
shl rbp, 0x28
not rbp
and r12, rbp
movzx rbp, r11b
shl rbp, 0x28
or r12, rbp
=== 11391
mov rax, r12
push rax
mov r13, rsp
mov rsi, r12
=== 11392
mov rbx, r13
mov rdi, rsi
push rbx
push 0x742a037b
push 0x3c737a2a
push 0x25092369
push 0x3dfb1ee8
=== 11393
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 6
add rsp, 6
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rbx
mov r14, rdi
movzx r13, r13b
=== 11394
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0xd6190d9d
add r11, 0x69f06523; sub_carry
mov r11, qword ptr [r11 + 0x7f8]
add r11, r13
mov r8b, byte ptr [r11]
movzx r8, r8b
shl r8, 0x38
sub r14, r8
mov r12, r14
movabs rbp, 0x11873461a
add rbp, 0x279624a6; sub
=== 11395
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbp
mov rsp, rbp
add rsp, 0
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rdx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rbp, rdx
mov r13, r12
=== 11396
mov rdi, r13
mov rcx, 0x1408a0034
stmxcsr dword ptr [rcx]
push rax
mov eax, dword ptr [0x1408a0034]
mov ecx, eax
pop rax
add rcx, rbp
mov r10b, byte ptr [rcx]
mov rbx, 0xff
shl rbx, 0x30
not rbx
and rdi, rbx
movzx rbx, r10b
shl rbx, 0x30
or rdi, rbx
=== 11397
mov rdx, rdi
push rdx
mov rdi, rsp
mov r15, rdi
=== 11398
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop r11
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r15, r11
mov rbp, r15
movzx r15, r15b
=== 11399
push rax
mov rax, r15
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r11, 0x10d240755
push r11
push 0x504554da
push 0x62a442d4
push 0x70626aeb
add qword ptr [rsp + 0x18], 0x32e5636b; sub
mov r12, rbp
=== 11400
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 2040
add rsp, 2040
pop rbx
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, rbx
mov r15, r12
=== 11401
mov rbp, r15
mov r14, 0x1408a0034
stmxcsr dword ptr [r14]
push rax
mov eax, dword ptr [0x1408a0034]
mov r14d, eax
pop rax
add r14, rdi
mov r14b, byte ptr [r14]
mov rbx, 0xff
shl rbx, 0x38
not rbx
and rbp, rbx
movzx rbx, r14b
shl rbx, 0x38
or rbp, rbx
=== 11402
mov r10, rbp
push r10
mov r12, rsp
mov r13, rbp
=== 11403
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, r12
mov rsp, r12
add rsp, 0
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r12, rax
mov rbx, r13
movzx r12, r12b
=== 11404
push rax
mov rax, r12
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs r13, 0xd7442e7b
push r13
push 0x8646a6f
push 0x12ea545a
push 0x2d897411
add qword ptr [rsp + 0x18], 0x68c52445; or
mov r14, rbx
=== 11405
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r13
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov rdi, r13
mov r14, r14
=== 11406
mov r12, r14
mov r13, 0x1408a0034
stmxcsr dword ptr [r13]
push rax
mov eax, dword ptr [0x1408a0034]
mov r13d, eax
pop rax
add r13, rdi
mov cl, byte ptr [r13]
mov r12b, cl
=== 11407
mov r8, r12
push r8
mov rsi, rsp
mov r15, r12
=== 11408
mov rdx, rsi
mov rsi, r15
push rdx
push 0x1cf535a4
push 0x12d91898
push 0x444016cc
push 0x1cf9131a
=== 11409
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
; UWOP_ALLOC_LARGE 1
add rsp, 1
pop rbp
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rsi, rbp
mov r14, rsi
movzx rsi, sil
=== 11410
push rax
mov rax, rsi
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
mov r15, r14
movabs rdi, 0xdc484eb0
add rdi, 0x63c10410; or
=== 11411
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rdi
mov rsp, rdi
add rsp, 0
pop r9
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r15, r9
mov rbp, r15
=== 11412
mov r12, rbp
mov r15, 0x1408a0034
stmxcsr dword ptr [r15]
push rax
mov eax, dword ptr [0x1408a0034]
mov r15d, eax
pop rax
add r15, r15
mov r10b, byte ptr [r15]
mov r11, 0xff
shl r11, 8
not r11
and r12, r11
movzx r11, r10b
shl r11, 8
or r12, r11
=== 11413
mov rdi, r12
push rdi
mov rsi, rsp
mov rdi, r12
=== 11414
mov r11, rsi
mov r12, rdi
push r11
push 0x63501d9e
push 0x6da07549
push 0x680d3385
=== 11415
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 4
add rsp, 4
pop rsi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rsi
mov rbx, r12
movzx r13, r13b
=== 11416
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rbx, 0x126a9226e
push rbx
push 0x6f197745
push 0x352a7d08
push 0x37826065
push 0x50850eac
add qword ptr [rsp + 0x20], 0x19603052; or
mov r14, rbx
=== 11417
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r12
mov rbp, r14
=== 11418
mov r13, rbp
mov r10, 0x1408a0034
stmxcsr dword ptr [r10]
push rax
mov eax, dword ptr [0x1408a0034]
mov r10d, eax
pop rax
add r10, r13
mov dil, byte ptr [r10]
mov rbx, 0xff
shl rbx, 0x20
not rbx
and r13, rbx
movzx rbx, dil
shl rbx, 0x20
or r13, rbx
=== 11419
mov rdi, r13
push rdi
mov r15, rsp
mov r14, r13
=== 11420
mov r8, r15
mov rsi, r14
push r8
push 0x4d865a28
push 0xe357d6b
push 0x748f7f1a
=== 11421
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
; UWOP_ALLOC_LARGE 5
add rsp, 5
pop r14
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov rbx, r14
mov r13, rsi
movzx rbx, bl
=== 11422
push rax
mov rax, rbx
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rsi, 0x130534809
push rsi
push 0x6fdb5a53
push 0x46250895
push 0x44117b2f
push 0x35836de6
add qword ptr [rsp + 0x20], 0xfb60ab7; or
mov rbx, r13
=== 11423
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x20]
pop rdi
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r14, rdi
mov rdi, rbx
=== 11424
mov r13, rdi
mov rsi, 0x1408a0034
stmxcsr dword ptr [rsi]
push rax
mov eax, dword ptr [0x1408a0034]
mov esi, eax
pop rax
add rsi, r14
mov sil, byte ptr [rsi]
mov r8, 0xff
shl r8, 0x28
not r8
and r13, r8
movzx r8, sil
shl r8, 0x28
or r13, r8
=== 11425
mov r13, r13
push r13
mov rbx, rsp
mov r13, r13
=== 11426
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
; UWOP_SET_FPREG 0, rbx
mov rsp, rbx
add rsp, 0
; UWOP_ALLOC_LARGE 7
add rsp, 7
pop rax
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
mov r13, rax
mov r12, r13
movzx r13, r13b
=== 11427
push rax
mov rax, r13
mov dword ptr [0x1408a0034], eax
mov rax, 0x1408a0034
ldmxcsr dword ptr [rax]
pop rax
movabs rdi, 0x10355057d
push rdi
push 0x5e094694
push 0xf847f5b
push 0xaaa4122
add qword ptr [rsp + 0x18], 0x3cb44d43; or
mov rdi, r12
=== 11428
push rax
mov rax, rsp
mov qword ptr [0x1408a2000], rax
pop rax
mov rsp, qword ptr [rsp + 0x18]
pop r12
push rax
mov rax, qword ptr [0x1408a2000]
xchg qword ptr [rsp], rax
pop rsp
nop
mov r13, r12
mov rbp, rdi
=== 11429
mov r12, rbp
mov rax, 0x1408a0034
stmxcsr dword ptr [rax]
push rax
mov eax, dword ptr [0x1408a0034]
mov eax, eax
pop rax
add rax, r13
mov r15b, byte ptr [rax]
mov r10, 0xff
shl r10, 0x38
not r10
and r12, r10
movzx r10, r15b
shl r10, 0x38
or r12, r10
=== 11430
mov rbx, r12
movabs rbp, 0x10b42cb03
add rbp, 0x34bd46ed
test rbx, rbx
lea r13, [rip - 0x4924c5]
cmovne r13, rbp
jmp r13