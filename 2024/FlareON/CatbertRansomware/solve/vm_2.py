# Initial Memory Setup (0x0000 - 0x006f)
# Setting up initial memory values:
mem = {
    0x0000: 0xbbaa,
    0x0001: 0xddcc,
    0x0002: 0xffee,
    0x0003: 0xdead,
    0x0004: 0xbeef,
    0x0005: 0xcafe,
    0x0006: 0xbabe,
    0x0007: 0xabcd,
    0x000a: 0x59a0,
    0x000b: 0x4d6a,
    0x000c: 0x23de,
    0x000d: 0xc024,
    0x000e: 0xe264,
    0x000f: 0xb159,
    0x0010: 0x0772,
    0x0011: 0x5c7f
}

# Memory Packing Operations (0x0070 - 0x00fb)
# Combines 16-bit values into 64-bit blocks
mem[0x08] = (mem[0x03] << 0x30 | mem[0x02] << 0x20 | 
             mem[0x01] << 0x10 | mem[0x00])
mem[0x09] = (mem[0x07] << 0x30 | mem[0x06] << 0x20 | 
             mem[0x05] << 0x10 | mem[0x04])
mem[0x12] = (mem[0x0d] << 0x30 | mem[0x0c] << 0x20 | 
             mem[0x0b] << 0x10 | mem[0x0a])
mem[0x13] = (mem[0x11] << 0x30 | mem[0x10] << 0x20 | 
             mem[0x0f] << 0x10 | mem[0x0e])

# Initialize control variables (0x00fc - 0x0117)
i = 0x0000  # counter
BRK = 0x0001  # flag1
c = 0x0000  # counter2
out = 0x0000  # output flag

# Setup constants (0x0118 - 0x0140)
# A = 0x0003 << 16 | 0x43fd
A = 0x343fd
# B = 0x0026 << 16 | 0x9ec3
B = 0x269ec3
mod = 0x0001 << 0x1f
state = 0x1337

out = None

# Main processing loop (0x0148 - 0x028f)
while True:
    if BRK == 1:  # Check flag1
        if i < 8:  # First block processing
            mem[0x18] = (mem[0x08] >> (8 * i)) & 0xff
            mem[0x19] = (mem[0x12] >> (8 * i)) & 0xff
        
        if i > 7:  # Second block processing
            mem[0x18] = (mem[0x09] >> (8 * i)) & 0xff
            mem[0x19] = (mem[0x13] >> (8 * i)) & 0xff
        
        # Mask operations
        mem[0x18] &= 0xff
        mem[0x19] &= 0xff
        
        # Complex calculation
        state = (A * state + B) % mod
        mem[0x1a] = state
        mem[0x1a] = (state >> (8 * (i % 4)))
        mem[0x1f] = mem[0x1a] & 0xff
        mem[0x20] = mem[0x18] ^ mem[0x1f]
        
        # Check results
        if mem[0x20] != mem[0x19]:
            BRK = 0x0000
        if mem[0x20] == mem[0x19]:
            c += 1
        
        # Counter management
        i += 1
        if i > 0xf:
            BRK = 0x0000
            
    else:  # flag1 == 0
        if c == 0x10:
            out = 0x0001
        else:
            out = 0x0000
            
        out = out  # Final output

# Main execution ends with setout and ret0 instructions
print(out)