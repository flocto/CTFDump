0000: 01 00 00 push 0x0000
0003: 01 bb aa push 0xbbaa
0006: 06       stores
0007: 01 00 01 push 0x0001
000a: 01 dd cc push 0xddcc
000d: 06       stores
000e: 01 00 02 push 0x0002
0011: 01 ff ee push 0xffee
0014: 06       stores
0015: 01 00 03 push 0x0003
0018: 01 ad de push 0xadde
001b: 06       stores
001c: 01 00 04 push 0x0004
001f: 01 ef be push 0xefbe
0022: 06       stores
0023: 01 00 05 push 0x0005
0026: 01 fe ca push 0xfeca
0029: 06       stores
002a: 01 00 06 push 0x0006
002d: 01 be ba push 0xbeba
0030: 06       stores
0031: 01 00 07 push 0x0007
0034: 01 cd ab push 0xcdab
0037: 06       stores
0038: 01 00 0a push 0x000a
003b: 01 61 44 push 0x6144
003e: 06       stores
003f: 01 00 0b push 0x000b
0042: 01 75 34 push 0x7534
0045: 06       stores
0046: 01 00 0c push 0x000c
0049: 01 69 62 push 0x6962
004c: 06       stores
004d: 01 00 0d push 0x000d
0050: 01 6c 63 push 0x6c63
0053: 06       stores
0054: 01 00 0e push 0x000e
0057: 01 31 65 push 0x3165
005a: 06       stores
005b: 01 00 0f push 0x000f
005e: 01 66 69 push 0x6669
0061: 06       stores
0062: 01 00 10 push 0x0010
0065: 01 62 65 push 0x6265
0068: 06       stores
0069: 01 00 11 push 0x0011
006c: 01 62 30 push 0x6230
006f: 06       stores
0070: 01 00 08 push 0x0008
    0073: 01 00 03 push 0x0003
    0076: 05       loads
    0077: 01 00 30 push 0x0030
    007a: 1e       shl
    007b: 01 00 02 push 0x0002
    007e: 05       loads
    007f: 01 00 20 push 0x0020
    0082: 1e       shl
    0083: 1b       or
    0084: 01 00 01 push 0x0001
    0087: 05       loads
    0088: 01 00 10 push 0x0010
    008b: 1e       shl
    008c: 1b       or
    008d: 01 00 00 push 0x0000
    0090: 05       loads
    0091: 1b       or
    0092: 06       stores // mem[0x08] = (mem[0x03] << 0x30) | (mem[0x02] << 0x20) | (mem[0x01] << 0x10) | mem[0x00]
0093: 01 00 09 push 0x0009
    0096: 01 00 07 push 0x0007
    0099: 05       loads
    009a: 01 00 30 push 0x0030
    009d: 1e       shl
    009e: 01 00 06 push 0x0006
    00a1: 05       loads
    00a2: 01 00 20 push 0x0020
    00a5: 1e       shl
    00a6: 1b       or
    00a7: 01 00 05 push 0x0005
    00aa: 05       loads
    00ab: 01 00 10 push 0x0010
    00ae: 1e       shl
    00af: 1b       or
    00b0: 01 00 04 push 0x0004
    00b3: 05       loads
    00b4: 1b       or
    00b5: 06       stores // mem[0x09] = (mem[0x07] << 0x30) | (mem[0x06] << 0x20) | (mem[0x05] << 0x10) | mem[0x04]
00b6: 01 00 12 push 0x0012
    00b9: 01 00 0d push 0x000d
    00bc: 05       loads
    00bd: 01 00 30 push 0x0030
    00c0: 1e       shl
    00c1: 01 00 0c push 0x000c
    00c4: 05       loads
    00c5: 01 00 20 push 0x0020
    00c8: 1e       shl
    00c9: 1b       or
    00ca: 01 00 0b push 0x000b
    00cd: 05       loads
    00ce: 01 00 10 push 0x0010
    00d1: 1e       shl
    00d2: 1b       or
    00d3: 01 00 0a push 0x000a
    00d6: 05       loads
    00d7: 1b       or
    00d8: 06       stores // mem[0x12] = (mem[0x0d] << 0x30) | (mem[0x0c] << 0x20) | (mem[0x0b] << 0x10) | mem[0x0a]
00d9: 01 00 13 push 0x0013
    00dc: 01 00 11 push 0x0011
    00df: 05       loads
    00e0: 01 00 30 push 0x0030
    00e3: 1e       shl
    00e4: 01 00 10 push 0x0010
    00e7: 05       loads
    00e8: 01 00 20 push 0x0020
    00eb: 1e       shl
    00ec: 1b       or
    00ed: 01 00 0f push 0x000f
    00f0: 05       loads
    00f1: 01 00 10 push 0x0010
    00f4: 1e       shl
    00f5: 1b       or
    00f6: 01 00 0e push 0x000e
    00f9: 05       loads
    00fa: 1b       or
    00fb: 06       stores // mem[0x13] = (mem[0x11] << 0x30) | (mem[0x10] << 0x20) | (mem[0x0f] << 0x10) | mem[0x0e]
00fc: 01 00 14 push &itr
    00ff: 01 00 00 push 0x0000
    0102: 06       stores
0103: 01 00 18 push &brk
    0106: 01 00 01 push 0x0001
    0109: 06       stores
010a: 01 00 17 push 0x0017
    010d: 01 00 00 push 0x0000
    0110: 06       stores
0111: 01 00 19 push &out
0114: 01 00 00 push 0x0000
0117: 06       stores
LOOP: 
    0118: 01 00 18 push &brk
    011b: 05       loads
    011c: 01 00 01 push 0x0001
    011f: 11       lt
    0120: 10 02 41 jnz 0x0241 // if brk < 1 goto 0x0241

    0123: 01 00 14 push &itr
    0126: 05       loads
    0127: 01 00 08 push 0x0008
    012a: 12       eq
    012b: 10 01 50 jnz 0x0150 // if (itr == 0x08) goto 0x0150

    012e: 01 00 15 push 0x0015
        0131: 01 00 08 push 0x0008
            0134: 05       loads
            0135: 01 00 08 push 0x0008
                0138: 01 00 14 push &itr
                013b: 05       loads
            013c: 0d       mul 
        013d: 1f       shr
    013e: 06       stores // mem[0x15] = (mem[0x08] >> (itr * 8))

    013f: 01 00 16 push 0x0016
        0142: 01 00 12 push 0x0012
            0145: 05       loads
            0146: 01 00 08 push 0x0008
                0149: 01 00 14 push &itr
                014c: 05       loads
            014d: 0d       mul
        014e: 1f       shr
    014f: 06       stores // mem[0x16] = (mem[0x12] >> (itr * 8))

    0150: 01 00 14 push &itr
    0153: 05       loads
    0154: 01 00 07 push 0x0007
    0157: 14       gt
    0158: 10 01 7d jnz 0x017d // if (itr > 0x07) goto 0x017d

    015b: 01 00 15 push 0x0015
        015e: 01 00 09 push 0x0009
            0161: 05       loads
            0162: 01 00 08 push 0x0008
                0165: 01 00 14 push &itr
                0168: 05       loads
            0169: 0d       mul
        016a: 1f       shr
    016b: 06       stores // mem[0x15] = (mem[0x09] >> (itr * 8))

    016c: 01 00 16 push 0x0016
        016f: 01 00 13 push 0x0013
            0172: 05       loads
            0173: 01 00 08 push 0x0008
                0176: 01 00 14 push &itr
                0179: 05       loads
            017a: 0d       mul
        017b: 1f       shr
    017c: 06       stores // mem[0x16] = (mem[0x13] >> (itr * 8))
    
    017d: 01 00 15 push 0x0015
        0180: 01 00 15 push 0x0015
            0183: 05       loads
            0184: 01 00 ff push 0x00ff
        0187: 1c       and
    0188: 06       stores // mem[0x15] &= 0xff

    0189: 01 00 16 push 0x0016
        018c: 01 00 16 push 0x0016
            018f: 05       loads
            0190: 01 00 ff push 0x00ff
        0193: 1c       and
    0194: 06       stores // mem[0x16] &= 0xff

    0195: 01 00 14 push &itr
    0198: 05       loads
    0199: 01 00 02 push 0x0002
    019c: 11       lt
    019d: 10 01 ac jnz 0x01ac // if (itr < 0x02) goto 0x01ac

    01a0: 01 00 16 push 0x0016
        01a3: 01 00 16 push 0x0016
        01a6: 05       loads
        01a7: 01 00 04 push 0x0004
        01aa: 24       rol8
    01ab: 06       stores // mem[0x16] = rol8(mem[0x16], 4)

    01ac: 01 00 14 push &itr
        01af: 05       loads
        01b0: 01 00 09 push 0x0009
        01b3: 11       lt
    01b4: 10 01 c3 jnz 0x01c3 // if (itr < 0x09) goto 0x01c3

    01b7: 01 00 16 push 0x0016
        01ba: 01 00 16 push 0x0016
            01bd: 05       loads
            01be: 01 00 02 push 0x0002
        01c1: 25       ror8
    01c2: 06       stores // mem[0x16] = ror8(mem[0x16], 2)

    01c3: 01 00 14 push &itr
        01c6: 05       loads
            01c7: 01 00 0d push 0x000d
        01ca: 11       lt
    01cb: 10 01 da jnz 0x01da // if (itr < 0x0d) goto 0x01da

    01ce: 01 00 16 push 0x0016
    01d1: 01 00 16 push 0x0016
    01d4: 05       loads
    01d5: 01 00 07 push 0x0007
    01d8: 24       rol8
    01d9: 06       stores // mem[0x16] = rol8(mem[0x16], 7)

    01da: 01 00 14 push &itr
    01dd: 05       loads
    01de: 01 00 0f push 0x000f
    01e1: 11       lt
    01e2: 10 01 f1 jnz 0x01f1 // if (itr < 0x0f) goto 0x01f1

    01e5: 01 00 16 push 0x0016
    01e8: 01 00 16 push 0x0016
    01eb: 05       loads
    01ec: 01 00 07 push 0x0007
    01ef: 24       rol8
    01f0: 06       stores // mem[0x16] = rol8(mem[0x16], 7)

    01f1: 01 00 15 push 0x0015
    01f4: 05       loads
    01f5: 01 00 16 push 0x0016
    01f8: 05       loads
    01f9: 11       lt
    01fa: 01 00 00 push 0x0000
    01fd: 11       lt
    01fe: 10 02 08 jnz 0x0208 // if (mem[0x15] < mem[0x16]) < 0 goto 0x0208 ???

    0201: 01 00 18 push &brk
    0204: 01 00 00 push 0x0000
    0207: 06       stores // brk = 0

    0208: 01 00 15 push 0x0015
    020b: 05       loads
    020c: 01 00 16 push 0x0016
    020f: 05       loads
    0210: 11       lt
    0211: 10 02 20 jnz 0x0220 // if (mem[0x15] < mem[0x16]) goto 0x0220

    0214: 01 00 17 push 0x0017
    0217: 01 00 17 push 0x0017
    021a: 05       loads
    021b: 01 00 01 push 0x0001
    021e: 09       add
    021f: 06       stores // mem[0x17] += 1

    0220: 01 00 14 push &itr
        0223: 01 00 14 push &itr
            0226: 05       loads
            0227: 01 00 01 push 0x0001
        022a: 09       add
    022b: 06       stores // itr += 1

    022c: 01 00 14 push &itr
    022f: 05       loads
    0230: 01 00 0f push 0x000f
    0233: 14       gt
    0234: 10 02 3e jnz 0x023e // if (itr > 0x0f) goto 0x023e

    0237: 01 00 18 push &brk
    023a: 01 00 00 push 0x0000
    023d: 06       stores // brk = 0
    023e: 0e 01 18 jmp [0x0118] // goto 0x0118

0241: 01 00 17 push 0x0017
0244: 05       loads
0245: 01 00 10 push 0x0010
0248: 11       lt
0249: 10 02 53 jnz 0x0253 // if (mem[0x17] < 0x10) goto 0x0253

024c: 01 00 19 push &out
024f: 01 00 01 push 0x0001
0252: 06       stores // out = 1

0253: 01 00 19 push &out
0256: 05       loads
0257: 19       setout // output(out)
0258: 18       ret0 